                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module nrf24l01
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _spiSend
                                     12 	.globl _spiConfigure
                                     13 	.globl _spiSelectSpeed
                                     14 	.globl _gpioWrite
                                     15 	.globl _gpioConfigure
                                     16 	.globl _delay1ms
                                     17 	.globl _printf
                                     18 	.globl _S1SM0_FE
                                     19 	.globl _T1IE
                                     20 	.globl _T0IE
                                     21 	.globl _T1RUN
                                     22 	.globl _T0RUN
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _F1
                                     30 	.globl _P
                                     31 	.globl _EA
                                     32 	.globl _INT1IE
                                     33 	.globl _INT0IE
                                     34 	.globl _INT1TR
                                     35 	.globl _INT0TR
                                     36 	.globl _P5_5
                                     37 	.globl _P5_4
                                     38 	.globl _P5_3
                                     39 	.globl _P5_2
                                     40 	.globl _P5_1
                                     41 	.globl _P5_0
                                     42 	.globl _P3_7
                                     43 	.globl _P3_6
                                     44 	.globl _P3_5
                                     45 	.globl _P3_4
                                     46 	.globl _P3_3
                                     47 	.globl _P3_2
                                     48 	.globl _P3_1
                                     49 	.globl _P3_0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _P1_7
                                     59 	.globl _P1_6
                                     60 	.globl _P1_5
                                     61 	.globl _P1_4
                                     62 	.globl _P1_3
                                     63 	.globl _P1_2
                                     64 	.globl _P1_1
                                     65 	.globl _P1_0
                                     66 	.globl _USBADR
                                     67 	.globl _USBCON
                                     68 	.globl _USBDAT
                                     69 	.globl _USBCLK
                                     70 	.globl _S4BUF
                                     71 	.globl _S4CON
                                     72 	.globl _S3BUF
                                     73 	.globl _S3CON
                                     74 	.globl _S2BUF
                                     75 	.globl _S2CON
                                     76 	.globl _S1BUF
                                     77 	.globl _S1CON
                                     78 	.globl _SADEN
                                     79 	.globl _SADDR
                                     80 	.globl _AUXINTIF
                                     81 	.globl _T3
                                     82 	.globl _T3L
                                     83 	.globl _T3H
                                     84 	.globl _T4
                                     85 	.globl _T4L
                                     86 	.globl _T4H
                                     87 	.globl _T4T3M
                                     88 	.globl _WDT_CONTR
                                     89 	.globl _AUXR
                                     90 	.globl _T2
                                     91 	.globl _T2H
                                     92 	.globl _T2L
                                     93 	.globl _T1
                                     94 	.globl _T1H
                                     95 	.globl _T1L
                                     96 	.globl _T0
                                     97 	.globl _T0H
                                     98 	.globl _T0L
                                     99 	.globl _TMOD
                                    100 	.globl _TCON
                                    101 	.globl _IRTRIM
                                    102 	.globl _LIRTRIM
                                    103 	.globl _IRCBAND
                                    104 	.globl _SPDAT
                                    105 	.globl _SPCTL
                                    106 	.globl _SPSTAT
                                    107 	.globl _WKTC
                                    108 	.globl _WKTCH
                                    109 	.globl _WKTCL
                                    110 	.globl _BUS_SPEED
                                    111 	.globl _P_SW2
                                    112 	.globl _P_SW1
                                    113 	.globl _RSTCFG
                                    114 	.globl _PCON
                                    115 	.globl _B
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _SP
                                    119 	.globl _IP3H
                                    120 	.globl _IP3L
                                    121 	.globl _IP2H
                                    122 	.globl _IP2L
                                    123 	.globl _IE2
                                    124 	.globl _IP1H
                                    125 	.globl _IP1L
                                    126 	.globl _IE1
                                    127 	.globl _INT_CLKO
                                    128 	.globl _IAP_TPS
                                    129 	.globl _IAP_CONTR
                                    130 	.globl _IAP_TRIG
                                    131 	.globl _IAP_CMD
                                    132 	.globl _IAP_ADDR
                                    133 	.globl _IAP_ADDRL
                                    134 	.globl _IAP_ADDRH
                                    135 	.globl _IAP_DATA
                                    136 	.globl _P5M0
                                    137 	.globl _P5M1
                                    138 	.globl _P5
                                    139 	.globl _P3M0
                                    140 	.globl _P3M1
                                    141 	.globl _P3
                                    142 	.globl _P2M0
                                    143 	.globl _P2M1
                                    144 	.globl _P2
                                    145 	.globl _P1M0
                                    146 	.globl _P1M1
                                    147 	.globl _P1
                                    148 	.globl _TA
                                    149 	.globl _DPH1
                                    150 	.globl _DPL1
                                    151 	.globl _DPS
                                    152 	.globl _DP
                                    153 	.globl _DPH
                                    154 	.globl _DPL
                                    155 	.globl _CMPCR2
                                    156 	.globl _CMPCR1
                                    157 	.globl _DMA_ADC_AMT
                                    158 	.globl _ADCCFG
                                    159 	.globl _ADC_RES
                                    160 	.globl _ADC_RESL
                                    161 	.globl _ADC_RESH
                                    162 	.globl _ADC_CONTR
                                    163 	.globl _datapipe_address
                                    164 	.globl _dataReady
                                    165 	.globl _nrf24_write_PARM_4
                                    166 	.globl _nrf24_write_PARM_3
                                    167 	.globl _nrf24_write_PARM_2
                                    168 	.globl _nrf24_read_PARM_4
                                    169 	.globl _nrf24_read_PARM_3
                                    170 	.globl _nrf24_read_PARM_2
                                    171 	.globl _nrf24_crc_configuration_PARM_2
                                    172 	.globl _nrf24_interrupt_mask_PARM_3
                                    173 	.globl _nrf24_interrupt_mask_PARM_2
                                    174 	.globl _nrf24_prx_static_payload_width_PARM_2
                                    175 	.globl _nrf24_dynamic_payload_PARM_2
                                    176 	.globl _nrf24_automatic_retransmit_setup_PARM_2
                                    177 	.globl _nrf24_device_PARM_2
                                    178 	.globl _nrf24_send_payload_PARM_2
                                    179 	.globl _nrf24_transmit_PARM_3
                                    180 	.globl _nrf24_transmit_PARM_2
                                    181 	.globl _DMA_UR4R_TXAL
                                    182 	.globl _DMA_UR4R_TXAH
                                    183 	.globl _DMA_UR4R_DONE
                                    184 	.globl _DMA_UR4R_AMT
                                    185 	.globl _DMA_UR4R_STA
                                    186 	.globl _DMA_UR4R_CR
                                    187 	.globl _DMA_UR4R_CFG
                                    188 	.globl _DMA_UR4T_TXAL
                                    189 	.globl _DMA_UR4T_TXAH
                                    190 	.globl _DMA_UR4T_DONE
                                    191 	.globl _DMA_UR4T_AMT
                                    192 	.globl _DMA_UR4T_STA
                                    193 	.globl _DMA_UR4T_CR
                                    194 	.globl _DMA_UR4T_CFG
                                    195 	.globl _DMA_UR3R_TXAL
                                    196 	.globl _DMA_UR3R_TXAH
                                    197 	.globl _DMA_UR3R_DONE
                                    198 	.globl _DMA_UR3R_AMT
                                    199 	.globl _DMA_UR3R_STA
                                    200 	.globl _DMA_UR3R_CR
                                    201 	.globl _DMA_UR3R_CFG
                                    202 	.globl _DMA_UR3T_TXAL
                                    203 	.globl _DMA_UR3T_TXAH
                                    204 	.globl _DMA_UR3T_DONE
                                    205 	.globl _DMA_UR3T_AMT
                                    206 	.globl _DMA_UR3T_STA
                                    207 	.globl _DMA_UR3T_CR
                                    208 	.globl _DMA_UR3T_CFG
                                    209 	.globl _DMA_UR2R_TXAL
                                    210 	.globl _DMA_UR2R_TXAH
                                    211 	.globl _DMA_UR2R_DONE
                                    212 	.globl _DMA_UR2R_AMT
                                    213 	.globl _DMA_UR2R_STA
                                    214 	.globl _DMA_UR2R_CR
                                    215 	.globl _DMA_UR2R_CFG
                                    216 	.globl _DMA_UR2T_TXAL
                                    217 	.globl _DMA_UR2T_TXAH
                                    218 	.globl _DMA_UR2T_DONE
                                    219 	.globl _DMA_UR2T_AMT
                                    220 	.globl _DMA_UR2T_STA
                                    221 	.globl _DMA_UR2T_CR
                                    222 	.globl _DMA_UR2T_CFG
                                    223 	.globl _DMA_UR1R_TXAL
                                    224 	.globl _DMA_UR1R_TXAH
                                    225 	.globl _DMA_UR1R_DONE
                                    226 	.globl _DMA_UR1R_AMT
                                    227 	.globl _DMA_UR1R_STA
                                    228 	.globl _DMA_UR1R_CR
                                    229 	.globl _DMA_UR1R_CFG
                                    230 	.globl _DMA_UR1T_TXAL
                                    231 	.globl _DMA_UR1T_TXAH
                                    232 	.globl _DMA_UR1T_DONE
                                    233 	.globl _DMA_URTX_AMT
                                    234 	.globl _DMA_UR1T_STA
                                    235 	.globl _DMA_UR1T_CR
                                    236 	.globl _DMA_UR1T_CFG
                                    237 	.globl _TM4PS
                                    238 	.globl _TM3PS
                                    239 	.globl _TM2PS
                                    240 	.globl _IRC48MCR
                                    241 	.globl _IRCDB
                                    242 	.globl _MCLKOCR
                                    243 	.globl _CKSEL
                                    244 	.globl _IRC32KCR
                                    245 	.globl _X32KCR
                                    246 	.globl _XOSCCR
                                    247 	.globl _HIRCCR
                                    248 	.globl _CLKDIV
                                    249 	.globl _DMA_SPI_CFG2
                                    250 	.globl _DMA_SPI_RXAL
                                    251 	.globl _DMA_SPI_RXAH
                                    252 	.globl _DMA_SPI_TXAL
                                    253 	.globl _DMA_SPI_TXAH
                                    254 	.globl _DMA_SPI_DONE
                                    255 	.globl _DMA_SPI_AMT
                                    256 	.globl _DMA_SPI_STA
                                    257 	.globl _DMA_SPI_CR
                                    258 	.globl _DMA_SPI_CFG
                                    259 	.globl _SSEC
                                    260 	.globl _SEC
                                    261 	.globl _MIN
                                    262 	.globl _HOUR
                                    263 	.globl _DAY
                                    264 	.globl _MONTH
                                    265 	.globl _YEAR
                                    266 	.globl _INISSEC
                                    267 	.globl _INISEC
                                    268 	.globl _INIMIN
                                    269 	.globl _INIHOUR
                                    270 	.globl _INIDAY
                                    271 	.globl _INIMONTH
                                    272 	.globl _INIYEAR
                                    273 	.globl _ALASSEC
                                    274 	.globl _ALASEC
                                    275 	.globl _ALAMIN
                                    276 	.globl _ALAHOUR
                                    277 	.globl _RTCIF
                                    278 	.globl _RTCIEN
                                    279 	.globl _RTCCFG
                                    280 	.globl _RTCCR
                                    281 	.globl _PWMB_OISR
                                    282 	.globl _PWMB_DTR
                                    283 	.globl _PWMB_BKR
                                    284 	.globl _PWMB_CCR4L
                                    285 	.globl _PWMB_CCR4H
                                    286 	.globl _PWMB_CCR3L
                                    287 	.globl _PWMB_CCR3H
                                    288 	.globl _PWMB_CCR2L
                                    289 	.globl _PWMB_CCR2H
                                    290 	.globl _PWMB_CCR1L
                                    291 	.globl _PWMB_CCR1H
                                    292 	.globl _PWMB_RCR
                                    293 	.globl _PWMB_ARRL
                                    294 	.globl _PWMB_ARRH
                                    295 	.globl _PWMB_PSCRL
                                    296 	.globl _PWMB_PSCRH
                                    297 	.globl _PWMB_CNTRL
                                    298 	.globl _PWMB_CNTRH
                                    299 	.globl _PWMB_CCER2
                                    300 	.globl _PWMB_CCER1
                                    301 	.globl _PWMB_CCMR4
                                    302 	.globl _PWMB_CCMR3
                                    303 	.globl _PWMB_CCMR2
                                    304 	.globl _PWMB_CCMR1
                                    305 	.globl _PWMB_EGR
                                    306 	.globl _PWMB_SR2
                                    307 	.globl _PWMB_SR1
                                    308 	.globl _PWMB_IER
                                    309 	.globl _PWMB_ETR
                                    310 	.globl _PWMB_SMCR
                                    311 	.globl _PWMB_CR2
                                    312 	.globl _PWMB_CR1
                                    313 	.globl _PWMA_OISR
                                    314 	.globl _PWMA_DTR
                                    315 	.globl _PWMA_BKR
                                    316 	.globl _PWMA_CCR4L
                                    317 	.globl _PWMA_CCR4H
                                    318 	.globl _PWMA_CCR3L
                                    319 	.globl _PWMA_CCR3H
                                    320 	.globl _PWMA_CCR2L
                                    321 	.globl _PWMA_CCR2H
                                    322 	.globl _PWMA_CCR1L
                                    323 	.globl _PWMA_CCR1H
                                    324 	.globl _PWMA_RCR
                                    325 	.globl _PWMA_ARRL
                                    326 	.globl _PWMA_ARRH
                                    327 	.globl _PWMA_PSCRL
                                    328 	.globl _PWMA_PSCRH
                                    329 	.globl _PWMA_CNTRL
                                    330 	.globl _PWMA_CNTRH
                                    331 	.globl _PWMA_CCER2
                                    332 	.globl _PWMA_CCER1
                                    333 	.globl _PWMA_CCMR4
                                    334 	.globl _PWMA_CCMR3
                                    335 	.globl _PWMA_CCMR2
                                    336 	.globl _PWMA_CCMR1
                                    337 	.globl _PWMA_EGR
                                    338 	.globl _PWMA_SR2
                                    339 	.globl _PWMA_SR1
                                    340 	.globl _PWMA_IER
                                    341 	.globl _PWMA_ETR
                                    342 	.globl _PWMA_SMCR
                                    343 	.globl _PWMA_CR2
                                    344 	.globl _PWMA_CR1
                                    345 	.globl _PWMB_IOAUX
                                    346 	.globl _PWMB_PS
                                    347 	.globl _PWMB_ENO
                                    348 	.globl _PWMB_ETRPS
                                    349 	.globl _PWMA_IOAUX
                                    350 	.globl _PWMA_PS
                                    351 	.globl _PWMA_ENO
                                    352 	.globl _PWMA_ETRPS
                                    353 	.globl _RSTFLAG
                                    354 	.globl _SPFUNC
                                    355 	.globl _OPCON
                                    356 	.globl _ARCON
                                    357 	.globl _MD4
                                    358 	.globl _MD5
                                    359 	.globl _MD0
                                    360 	.globl _MD1
                                    361 	.globl _MD2
                                    362 	.globl _MD3
                                    363 	.globl _DMA_LCM_RXAL
                                    364 	.globl _DMA_LCM_RXAH
                                    365 	.globl _DMA_LCM_TXAL
                                    366 	.globl _DMA_LCM_TXAH
                                    367 	.globl _DMA_LCM_DONE
                                    368 	.globl _DMA_LCM_AMT
                                    369 	.globl _DMA_LCM_STA
                                    370 	.globl _DMA_LCM_CR
                                    371 	.globl _DMA_LCM_CFG
                                    372 	.globl _LCMIDDAT
                                    373 	.globl _LCMIDDATH
                                    374 	.globl _LCMIDDATL
                                    375 	.globl _LCMSTA
                                    376 	.globl _LCMCR
                                    377 	.globl _LCMCFG2
                                    378 	.globl _LCMCFG
                                    379 	.globl _I2CMSAUX
                                    380 	.globl _I2CRXD
                                    381 	.globl _I2CTXD
                                    382 	.globl _I2CSLADR
                                    383 	.globl _I2CSLST
                                    384 	.globl _I2CSLCR
                                    385 	.globl _I2CMSST
                                    386 	.globl _I2CMSCR
                                    387 	.globl _I2CCFG
                                    388 	.globl _PINIPH
                                    389 	.globl _PINIPL
                                    390 	.globl _P5IE
                                    391 	.globl _P5DR
                                    392 	.globl _P5SR
                                    393 	.globl _P5NCS
                                    394 	.globl _P5PU
                                    395 	.globl _P5WKUE
                                    396 	.globl _P5IM1
                                    397 	.globl _P5IM0
                                    398 	.globl _P5INTF
                                    399 	.globl _P5INTE
                                    400 	.globl _P3IE
                                    401 	.globl _P3DR
                                    402 	.globl _P3SR
                                    403 	.globl _P3NCS
                                    404 	.globl _P3PU
                                    405 	.globl _P3WKUE
                                    406 	.globl _P3IM1
                                    407 	.globl _P3IM0
                                    408 	.globl _P3INTF
                                    409 	.globl _P3INTE
                                    410 	.globl _P2IE
                                    411 	.globl _P2DR
                                    412 	.globl _P2SR
                                    413 	.globl _P2NCS
                                    414 	.globl _P2PU
                                    415 	.globl _P2WKUE
                                    416 	.globl _P2IM1
                                    417 	.globl _P2IM0
                                    418 	.globl _P2INTF
                                    419 	.globl _P2INTE
                                    420 	.globl _P1IE
                                    421 	.globl _P1DR
                                    422 	.globl _P1SR
                                    423 	.globl _P1NCS
                                    424 	.globl _P1PU
                                    425 	.globl _P1WKUE
                                    426 	.globl _P1IM1
                                    427 	.globl _P1IM0
                                    428 	.globl _P1INTF
                                    429 	.globl _P1INTE
                                    430 	.globl _DMA_M2M_RXAL
                                    431 	.globl _DMA_M2M_RXAH
                                    432 	.globl _DMA_M2M_TXAL
                                    433 	.globl _DMA_M2M_TXAH
                                    434 	.globl _DMA_M2M_DONE
                                    435 	.globl _DMA_M2M_AMT
                                    436 	.globl _DMA_M2M_STA
                                    437 	.globl _DMA_M2M_CR
                                    438 	.globl _DMA_M2M_CFG
                                    439 	.globl _CMPEXCFG
                                    440 	.globl _CHIP_PACKAGE_TYPE
                                    441 	.globl _CHIP_TEST_DAY_BCD
                                    442 	.globl _CHIP_TEST_MONTH_BCD
                                    443 	.globl _CHIP_TEST_YEAR_BCD
                                    444 	.globl _PROGRAM_AREA_SIZE
                                    445 	.globl _VRTRIM_44MHz
                                    446 	.globl _VRTRIM_27MHz
                                    447 	.globl _VRTRIM_10MHz
                                    448 	.globl _VRTRIM_6MHz
                                    449 	.globl _IRTRIM_48MHz
                                    450 	.globl _IRTRIM_44_2368MHz
                                    451 	.globl _IRTRIM_40MHz
                                    452 	.globl _IRTRIM_36_864MHz
                                    453 	.globl _IRTRIM_35MHz
                                    454 	.globl _IRTRIM_33_1776MHz
                                    455 	.globl _IRTRIM_30MHz
                                    456 	.globl _IRTRIM_27MHz
                                    457 	.globl _IRTRIM_24MHz
                                    458 	.globl _IRTRIM_22_1184MHz
                                    459 	.globl ___OTHER_INFO
                                    460 	.globl _CHIP_GUID
                                    461 	.globl _DMA_ADC_CHSW1
                                    462 	.globl _DMA_ADC_CHSW0
                                    463 	.globl _DMA_ADC_CFG2
                                    464 	.globl _DMA_ADC_RXAL
                                    465 	.globl _DMA_ADC_RXAH
                                    466 	.globl _DMA_ADC_STA
                                    467 	.globl _DMA_ADC_CR
                                    468 	.globl _DMA_ADC_CFG
                                    469 	.globl _ADCEXCFG
                                    470 	.globl _ADCTIM
                                    471 	.globl _delay_function
                                    472 	.globl _SPI_Initializer
                                    473 	.globl _pinout_Initializer
                                    474 	.globl _nrf24_SPI
                                    475 	.globl _SPI_send_command
                                    476 	.globl _nrf24_CE
                                    477 	.globl _nrf24_dynamic_ack
                                    478 	.globl _nrf24_transmit
                                    479 	.globl _nrf24_send_payload
                                    480 	.globl _nrf24_transmit_status
                                    481 	.globl _nrf24_receive
                                    482 	.globl _nrf24_flush
                                    483 	.globl _nrf24_reset
                                    484 	.globl _nrf24_device
                                    485 	.globl _nrf24_print_internal_register_values
                                    486 	.globl _nrf24_automatic_retransmit_setup
                                    487 	.globl _nrf24_auto_acknowledgment_setup
                                    488 	.globl _nrf24_dynamic_payload
                                    489 	.globl _nrf24_datapipe_ptx
                                    490 	.globl _nrf24_datapipe_address_configuration
                                    491 	.globl _nrf24_prx_static_payload_width
                                    492 	.globl _nrf24_datapipe_enable
                                    493 	.globl _nrf24_address_width
                                    494 	.globl _nrf24_rf_datarate
                                    495 	.globl _nrf24_rf_power
                                    496 	.globl _nrf24_rf_channel
                                    497 	.globl _nrf24_interrupt_mask
                                    498 	.globl _nrf24_crc_configuration
                                    499 	.globl _nrf24_mode
                                    500 	.globl _nrf24_read
                                    501 	.globl _nrf24_write
                                    502 ;--------------------------------------------------------
                                    503 ; special function registers
                                    504 ;--------------------------------------------------------
                                    505 	.area RSEG    (ABS,DATA)
      000000                        506 	.org 0x0000
                           0000BC   507 _ADC_CONTR	=	0x00bc
                           0000BD   508 _ADC_RESH	=	0x00bd
                           0000BE   509 _ADC_RESL	=	0x00be
                           00BDBE   510 _ADC_RES	=	0xbdbe
                           0000DE   511 _ADCCFG	=	0x00de
                           0000FA   512 _DMA_ADC_AMT	=	0x00fa
                           0000E6   513 _CMPCR1	=	0x00e6
                           0000E7   514 _CMPCR2	=	0x00e7
                           000082   515 _DPL	=	0x0082
                           000083   516 _DPH	=	0x0083
                           008382   517 _DP	=	0x8382
                           0000E3   518 _DPS	=	0x00e3
                           0000E4   519 _DPL1	=	0x00e4
                           0000E5   520 _DPH1	=	0x00e5
                           0000AE   521 _TA	=	0x00ae
                           000090   522 _P1	=	0x0090
                           000091   523 _P1M1	=	0x0091
                           000092   524 _P1M0	=	0x0092
                           0000A0   525 _P2	=	0x00a0
                           000095   526 _P2M1	=	0x0095
                           000096   527 _P2M0	=	0x0096
                           0000B0   528 _P3	=	0x00b0
                           0000B1   529 _P3M1	=	0x00b1
                           0000B2   530 _P3M0	=	0x00b2
                           0000C8   531 _P5	=	0x00c8
                           0000C9   532 _P5M1	=	0x00c9
                           0000CA   533 _P5M0	=	0x00ca
                           0000C2   534 _IAP_DATA	=	0x00c2
                           0000C3   535 _IAP_ADDRH	=	0x00c3
                           0000C4   536 _IAP_ADDRL	=	0x00c4
                           00C3C4   537 _IAP_ADDR	=	0xc3c4
                           0000C5   538 _IAP_CMD	=	0x00c5
                           0000C6   539 _IAP_TRIG	=	0x00c6
                           0000C7   540 _IAP_CONTR	=	0x00c7
                           0000F5   541 _IAP_TPS	=	0x00f5
                           00008F   542 _INT_CLKO	=	0x008f
                           0000A8   543 _IE1	=	0x00a8
                           0000B8   544 _IP1L	=	0x00b8
                           0000B7   545 _IP1H	=	0x00b7
                           0000AF   546 _IE2	=	0x00af
                           0000B5   547 _IP2L	=	0x00b5
                           0000B6   548 _IP2H	=	0x00b6
                           0000DF   549 _IP3L	=	0x00df
                           0000EE   550 _IP3H	=	0x00ee
                           000081   551 _SP	=	0x0081
                           0000D0   552 _PSW	=	0x00d0
                           0000E0   553 _ACC	=	0x00e0
                           0000F0   554 _B	=	0x00f0
                           000087   555 _PCON	=	0x0087
                           0000FF   556 _RSTCFG	=	0x00ff
                           0000A2   557 _P_SW1	=	0x00a2
                           0000BA   558 _P_SW2	=	0x00ba
                           0000A1   559 _BUS_SPEED	=	0x00a1
                           0000AA   560 _WKTCL	=	0x00aa
                           0000AB   561 _WKTCH	=	0x00ab
                           00ABAA   562 _WKTC	=	0xabaa
                           0000CD   563 _SPSTAT	=	0x00cd
                           0000CE   564 _SPCTL	=	0x00ce
                           0000CF   565 _SPDAT	=	0x00cf
                           00009D   566 _IRCBAND	=	0x009d
                           00009E   567 _LIRTRIM	=	0x009e
                           00009F   568 _IRTRIM	=	0x009f
                           000088   569 _TCON	=	0x0088
                           000089   570 _TMOD	=	0x0089
                           00008A   571 _T0L	=	0x008a
                           00008C   572 _T0H	=	0x008c
                           008C8A   573 _T0	=	0x8c8a
                           00008B   574 _T1L	=	0x008b
                           00008D   575 _T1H	=	0x008d
                           008D8B   576 _T1	=	0x8d8b
                           0000D7   577 _T2L	=	0x00d7
                           0000D6   578 _T2H	=	0x00d6
                           00D6D7   579 _T2	=	0xd6d7
                           00008E   580 _AUXR	=	0x008e
                           0000C1   581 _WDT_CONTR	=	0x00c1
                           0000D1   582 _T4T3M	=	0x00d1
                           0000D2   583 _T4H	=	0x00d2
                           0000D3   584 _T4L	=	0x00d3
                           00D2D3   585 _T4	=	0xd2d3
                           0000D4   586 _T3H	=	0x00d4
                           0000D5   587 _T3L	=	0x00d5
                           00D4D5   588 _T3	=	0xd4d5
                           0000EF   589 _AUXINTIF	=	0x00ef
                           0000A9   590 _SADDR	=	0x00a9
                           0000B9   591 _SADEN	=	0x00b9
                           000098   592 _S1CON	=	0x0098
                           000099   593 _S1BUF	=	0x0099
                           00009A   594 _S2CON	=	0x009a
                           00009B   595 _S2BUF	=	0x009b
                           0000AC   596 _S3CON	=	0x00ac
                           0000AD   597 _S3BUF	=	0x00ad
                           000084   598 _S4CON	=	0x0084
                           000085   599 _S4BUF	=	0x0085
                           0000DC   600 _USBCLK	=	0x00dc
                           0000EC   601 _USBDAT	=	0x00ec
                           0000F4   602 _USBCON	=	0x00f4
                           0000FC   603 _USBADR	=	0x00fc
                                    604 ;--------------------------------------------------------
                                    605 ; special function bits
                                    606 ;--------------------------------------------------------
                                    607 	.area RSEG    (ABS,DATA)
      000000                        608 	.org 0x0000
                           000090   609 _P1_0	=	0x0090
                           000091   610 _P1_1	=	0x0091
                           000092   611 _P1_2	=	0x0092
                           000093   612 _P1_3	=	0x0093
                           000094   613 _P1_4	=	0x0094
                           000095   614 _P1_5	=	0x0095
                           000096   615 _P1_6	=	0x0096
                           000097   616 _P1_7	=	0x0097
                           0000A0   617 _P2_0	=	0x00a0
                           0000A1   618 _P2_1	=	0x00a1
                           0000A2   619 _P2_2	=	0x00a2
                           0000A3   620 _P2_3	=	0x00a3
                           0000A4   621 _P2_4	=	0x00a4
                           0000A5   622 _P2_5	=	0x00a5
                           0000A6   623 _P2_6	=	0x00a6
                           0000A7   624 _P2_7	=	0x00a7
                           0000B0   625 _P3_0	=	0x00b0
                           0000B1   626 _P3_1	=	0x00b1
                           0000B2   627 _P3_2	=	0x00b2
                           0000B3   628 _P3_3	=	0x00b3
                           0000B4   629 _P3_4	=	0x00b4
                           0000B5   630 _P3_5	=	0x00b5
                           0000B6   631 _P3_6	=	0x00b6
                           0000B7   632 _P3_7	=	0x00b7
                           0000C8   633 _P5_0	=	0x00c8
                           0000C9   634 _P5_1	=	0x00c9
                           0000CA   635 _P5_2	=	0x00ca
                           0000CB   636 _P5_3	=	0x00cb
                           0000CC   637 _P5_4	=	0x00cc
                           0000CD   638 _P5_5	=	0x00cd
                           000088   639 _INT0TR	=	0x0088
                           00008A   640 _INT1TR	=	0x008a
                           0000A8   641 _INT0IE	=	0x00a8
                           0000AA   642 _INT1IE	=	0x00aa
                           0000AF   643 _EA	=	0x00af
                           0000D0   644 _P	=	0x00d0
                           0000D1   645 _F1	=	0x00d1
                           0000D2   646 _OV	=	0x00d2
                           0000D3   647 _RS0	=	0x00d3
                           0000D4   648 _RS1	=	0x00d4
                           0000D5   649 _F0	=	0x00d5
                           0000D6   650 _AC	=	0x00d6
                           0000D7   651 _CY	=	0x00d7
                           00008C   652 _T0RUN	=	0x008c
                           00008E   653 _T1RUN	=	0x008e
                           0000A9   654 _T0IE	=	0x00a9
                           0000AB   655 _T1IE	=	0x00ab
                           00009F   656 _S1SM0_FE	=	0x009f
                                    657 ;--------------------------------------------------------
                                    658 ; overlayable register banks
                                    659 ;--------------------------------------------------------
                                    660 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        661 	.ds 8
                                    662 ;--------------------------------------------------------
                                    663 ; internal ram data
                                    664 ;--------------------------------------------------------
                                    665 	.area DSEG    (DATA)
      000000                        666 _nrf24_print_internal_register_values_sloc0_1_0:
      000000                        667 	.ds 2
      000002                        668 _nrf24_print_internal_register_values_sloc1_1_0:
      000002                        669 	.ds 2
                                    670 ;--------------------------------------------------------
                                    671 ; overlayable items in internal ram 
                                    672 ;--------------------------------------------------------
                                    673 ;--------------------------------------------------------
                                    674 ; indirectly addressable internal ram data
                                    675 ;--------------------------------------------------------
                                    676 	.area ISEG    (DATA)
                                    677 ;--------------------------------------------------------
                                    678 ; absolute internal ram data
                                    679 ;--------------------------------------------------------
                                    680 	.area IABS    (ABS,DATA)
                                    681 	.area IABS    (ABS,DATA)
                                    682 ;--------------------------------------------------------
                                    683 ; bit data
                                    684 ;--------------------------------------------------------
                                    685 	.area BSEG    (BIT)
                                    686 ;--------------------------------------------------------
                                    687 ; paged external ram data
                                    688 ;--------------------------------------------------------
                                    689 	.area PSEG    (PAG,XDATA)
                                    690 ;--------------------------------------------------------
                                    691 ; external ram data
                                    692 ;--------------------------------------------------------
                                    693 	.area XSEG    (XDATA)
                           00FEA8   694 _ADCTIM	=	0xfea8
                           00FEAD   695 _ADCEXCFG	=	0xfead
                           00FA10   696 _DMA_ADC_CFG	=	0xfa10
                           00FA11   697 _DMA_ADC_CR	=	0xfa11
                           00FA12   698 _DMA_ADC_STA	=	0xfa12
                           00FA17   699 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   700 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   701 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   702 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   703 _DMA_ADC_CHSW1	=	0xfa1b
                           00FDE0   704 _CHIP_GUID	=	0xfde0
                           00FDE7   705 ___OTHER_INFO	=	0xfde7
                           00FDEB   706 _IRTRIM_22_1184MHz	=	0xfdeb
                           00FDEC   707 _IRTRIM_24MHz	=	0xfdec
                           00FDED   708 _IRTRIM_27MHz	=	0xfded
                           00FDEE   709 _IRTRIM_30MHz	=	0xfdee
                           00FDEF   710 _IRTRIM_33_1776MHz	=	0xfdef
                           00FDF0   711 _IRTRIM_35MHz	=	0xfdf0
                           00FDF1   712 _IRTRIM_36_864MHz	=	0xfdf1
                           00FDF2   713 _IRTRIM_40MHz	=	0xfdf2
                           00FDF3   714 _IRTRIM_44_2368MHz	=	0xfdf3
                           00FDF4   715 _IRTRIM_48MHz	=	0xfdf4
                           00FDF5   716 _VRTRIM_6MHz	=	0xfdf5
                           00FDF6   717 _VRTRIM_10MHz	=	0xfdf6
                           00FDF7   718 _VRTRIM_27MHz	=	0xfdf7
                           00FDF8   719 _VRTRIM_44MHz	=	0xfdf8
                           00FDF9   720 _PROGRAM_AREA_SIZE	=	0xfdf9
                           00FDFB   721 _CHIP_TEST_YEAR_BCD	=	0xfdfb
                           00FDFC   722 _CHIP_TEST_MONTH_BCD	=	0xfdfc
                           00FDFD   723 _CHIP_TEST_DAY_BCD	=	0xfdfd
                           00FDFE   724 _CHIP_PACKAGE_TYPE	=	0xfdfe
                           00FEAE   725 _CMPEXCFG	=	0xfeae
                           00FA00   726 _DMA_M2M_CFG	=	0xfa00
                           00FA01   727 _DMA_M2M_CR	=	0xfa01
                           00FA02   728 _DMA_M2M_STA	=	0xfa02
                           00FA03   729 _DMA_M2M_AMT	=	0xfa03
                           00FA04   730 _DMA_M2M_DONE	=	0xfa04
                           00FA05   731 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   732 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   733 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   734 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   735 _P1INTE	=	0xfd01
                           00FD11   736 _P1INTF	=	0xfd11
                           00FD21   737 _P1IM0	=	0xfd21
                           00FD31   738 _P1IM1	=	0xfd31
                           00FD41   739 _P1WKUE	=	0xfd41
                           00FE11   740 _P1PU	=	0xfe11
                           00FE19   741 _P1NCS	=	0xfe19
                           00FE21   742 _P1SR	=	0xfe21
                           00FE29   743 _P1DR	=	0xfe29
                           00FE31   744 _P1IE	=	0xfe31
                           00FD02   745 _P2INTE	=	0xfd02
                           00FD12   746 _P2INTF	=	0xfd12
                           00FD22   747 _P2IM0	=	0xfd22
                           00FD32   748 _P2IM1	=	0xfd32
                           00FD42   749 _P2WKUE	=	0xfd42
                           00FE12   750 _P2PU	=	0xfe12
                           00FE1A   751 _P2NCS	=	0xfe1a
                           00FE22   752 _P2SR	=	0xfe22
                           00FE2A   753 _P2DR	=	0xfe2a
                           00FE32   754 _P2IE	=	0xfe32
                           00FD03   755 _P3INTE	=	0xfd03
                           00FD13   756 _P3INTF	=	0xfd13
                           00FD23   757 _P3IM0	=	0xfd23
                           00FD33   758 _P3IM1	=	0xfd33
                           00FD43   759 _P3WKUE	=	0xfd43
                           00FE13   760 _P3PU	=	0xfe13
                           00FE1B   761 _P3NCS	=	0xfe1b
                           00FE23   762 _P3SR	=	0xfe23
                           00FE2B   763 _P3DR	=	0xfe2b
                           00FE33   764 _P3IE	=	0xfe33
                           00FD05   765 _P5INTE	=	0xfd05
                           00FD15   766 _P5INTF	=	0xfd15
                           00FD25   767 _P5IM0	=	0xfd25
                           00FD35   768 _P5IM1	=	0xfd35
                           00FD45   769 _P5WKUE	=	0xfd45
                           00FE15   770 _P5PU	=	0xfe15
                           00FE1D   771 _P5NCS	=	0xfe1d
                           00FE25   772 _P5SR	=	0xfe25
                           00FE2D   773 _P5DR	=	0xfe2d
                           00FE35   774 _P5IE	=	0xfe35
                           00FD60   775 _PINIPL	=	0xfd60
                           00FD61   776 _PINIPH	=	0xfd61
                           00FE80   777 _I2CCFG	=	0xfe80
                           00FE81   778 _I2CMSCR	=	0xfe81
                           00FE82   779 _I2CMSST	=	0xfe82
                           00FE83   780 _I2CSLCR	=	0xfe83
                           00FE84   781 _I2CSLST	=	0xfe84
                           00FE85   782 _I2CSLADR	=	0xfe85
                           00FE86   783 _I2CTXD	=	0xfe86
                           00FE87   784 _I2CRXD	=	0xfe87
                           00FE88   785 _I2CMSAUX	=	0xfe88
                           00FE50   786 _LCMCFG	=	0xfe50
                           00FE51   787 _LCMCFG2	=	0xfe51
                           00FE52   788 _LCMCR	=	0xfe52
                           00FE53   789 _LCMSTA	=	0xfe53
                           00FE54   790 _LCMIDDATL	=	0xfe54
                           00FE55   791 _LCMIDDATH	=	0xfe55
                           00FE54   792 _LCMIDDAT	=	0xfe54
                           00FA70   793 _DMA_LCM_CFG	=	0xfa70
                           00FA71   794 _DMA_LCM_CR	=	0xfa71
                           00FA72   795 _DMA_LCM_STA	=	0xfa72
                           00FA73   796 _DMA_LCM_AMT	=	0xfa73
                           00FA74   797 _DMA_LCM_DONE	=	0xfa74
                           00FA75   798 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   799 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   800 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   801 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   802 _MD3	=	0xfcf0
                           00FCF1   803 _MD2	=	0xfcf1
                           00FCF2   804 _MD1	=	0xfcf2
                           00FCF3   805 _MD0	=	0xfcf3
                           00FCF4   806 _MD5	=	0xfcf4
                           00FCF5   807 _MD4	=	0xfcf5
                           00FCF6   808 _ARCON	=	0xfcf6
                           00FCF7   809 _OPCON	=	0xfcf7
                           00FE08   810 _SPFUNC	=	0xfe08
                           00FE09   811 _RSTFLAG	=	0xfe09
                           00FEB0   812 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   813 _PWMA_ENO	=	0xfeb1
                           00FEB2   814 _PWMA_PS	=	0xfeb2
                           00FEB3   815 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   816 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   817 _PWMB_ENO	=	0xfeb5
                           00FEB6   818 _PWMB_PS	=	0xfeb6
                           00FEB7   819 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   820 _PWMA_CR1	=	0xfec0
                           00FEC1   821 _PWMA_CR2	=	0xfec1
                           00FEC2   822 _PWMA_SMCR	=	0xfec2
                           00FEC3   823 _PWMA_ETR	=	0xfec3
                           00FEC4   824 _PWMA_IER	=	0xfec4
                           00FEC5   825 _PWMA_SR1	=	0xfec5
                           00FEC6   826 _PWMA_SR2	=	0xfec6
                           00FEC7   827 _PWMA_EGR	=	0xfec7
                           00FEC8   828 _PWMA_CCMR1	=	0xfec8
                           00FEC9   829 _PWMA_CCMR2	=	0xfec9
                           00FECA   830 _PWMA_CCMR3	=	0xfeca
                           00FECB   831 _PWMA_CCMR4	=	0xfecb
                           00FECC   832 _PWMA_CCER1	=	0xfecc
                           00FECD   833 _PWMA_CCER2	=	0xfecd
                           00FECE   834 _PWMA_CNTRH	=	0xfece
                           00FECF   835 _PWMA_CNTRL	=	0xfecf
                           00FED0   836 _PWMA_PSCRH	=	0xfed0
                           00FED1   837 _PWMA_PSCRL	=	0xfed1
                           00FED2   838 _PWMA_ARRH	=	0xfed2
                           00FED3   839 _PWMA_ARRL	=	0xfed3
                           00FED4   840 _PWMA_RCR	=	0xfed4
                           00FED5   841 _PWMA_CCR1H	=	0xfed5
                           00FED6   842 _PWMA_CCR1L	=	0xfed6
                           00FED7   843 _PWMA_CCR2H	=	0xfed7
                           00FED8   844 _PWMA_CCR2L	=	0xfed8
                           00FED9   845 _PWMA_CCR3H	=	0xfed9
                           00FEDA   846 _PWMA_CCR3L	=	0xfeda
                           00FEDB   847 _PWMA_CCR4H	=	0xfedb
                           00FEDC   848 _PWMA_CCR4L	=	0xfedc
                           00FEDD   849 _PWMA_BKR	=	0xfedd
                           00FEDE   850 _PWMA_DTR	=	0xfede
                           00FEDF   851 _PWMA_OISR	=	0xfedf
                           00FEE0   852 _PWMB_CR1	=	0xfee0
                           00FEE1   853 _PWMB_CR2	=	0xfee1
                           00FEE2   854 _PWMB_SMCR	=	0xfee2
                           00FEE3   855 _PWMB_ETR	=	0xfee3
                           00FEE4   856 _PWMB_IER	=	0xfee4
                           00FEE5   857 _PWMB_SR1	=	0xfee5
                           00FEE6   858 _PWMB_SR2	=	0xfee6
                           00FEE7   859 _PWMB_EGR	=	0xfee7
                           00FEE8   860 _PWMB_CCMR1	=	0xfee8
                           00FEE9   861 _PWMB_CCMR2	=	0xfee9
                           00FEEA   862 _PWMB_CCMR3	=	0xfeea
                           00FEEB   863 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   864 _PWMB_CCER1	=	0xfeec
                           00FEED   865 _PWMB_CCER2	=	0xfeed
                           00FEEE   866 _PWMB_CNTRH	=	0xfeee
                           00FEEF   867 _PWMB_CNTRL	=	0xfeef
                           00FEF0   868 _PWMB_PSCRH	=	0xfef0
                           00FEF1   869 _PWMB_PSCRL	=	0xfef1
                           00FEF2   870 _PWMB_ARRH	=	0xfef2
                           00FEF3   871 _PWMB_ARRL	=	0xfef3
                           00FEF4   872 _PWMB_RCR	=	0xfef4
                           00FEF5   873 _PWMB_CCR1H	=	0xfef5
                           00FEF6   874 _PWMB_CCR1L	=	0xfef6
                           00FEF7   875 _PWMB_CCR2H	=	0xfef7
                           00FEF8   876 _PWMB_CCR2L	=	0xfef8
                           00FEF9   877 _PWMB_CCR3H	=	0xfef9
                           00FEFA   878 _PWMB_CCR3L	=	0xfefa
                           00FEFB   879 _PWMB_CCR4H	=	0xfefb
                           00FEFC   880 _PWMB_CCR4L	=	0xfefc
                           00FEFD   881 _PWMB_BKR	=	0xfefd
                           00FEFE   882 _PWMB_DTR	=	0xfefe
                           00FEFF   883 _PWMB_OISR	=	0xfeff
                           00FE60   884 _RTCCR	=	0xfe60
                           00FE61   885 _RTCCFG	=	0xfe61
                           00FE62   886 _RTCIEN	=	0xfe62
                           00FE63   887 _RTCIF	=	0xfe63
                           00FE64   888 _ALAHOUR	=	0xfe64
                           00FE65   889 _ALAMIN	=	0xfe65
                           00FE66   890 _ALASEC	=	0xfe66
                           00FE67   891 _ALASSEC	=	0xfe67
                           00FE68   892 _INIYEAR	=	0xfe68
                           00FE69   893 _INIMONTH	=	0xfe69
                           00FE6A   894 _INIDAY	=	0xfe6a
                           00FE6B   895 _INIHOUR	=	0xfe6b
                           00FE6C   896 _INIMIN	=	0xfe6c
                           00FE6D   897 _INISEC	=	0xfe6d
                           00FE6E   898 _INISSEC	=	0xfe6e
                           00FE70   899 _YEAR	=	0xfe70
                           00FE71   900 _MONTH	=	0xfe71
                           00FE72   901 _DAY	=	0xfe72
                           00FE73   902 _HOUR	=	0xfe73
                           00FE74   903 _MIN	=	0xfe74
                           00FE75   904 _SEC	=	0xfe75
                           00FE76   905 _SSEC	=	0xfe76
                           00FA20   906 _DMA_SPI_CFG	=	0xfa20
                           00FA21   907 _DMA_SPI_CR	=	0xfa21
                           00FA22   908 _DMA_SPI_STA	=	0xfa22
                           00FA23   909 _DMA_SPI_AMT	=	0xfa23
                           00FA24   910 _DMA_SPI_DONE	=	0xfa24
                           00FA25   911 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   912 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   913 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   914 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   915 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   916 _CLKDIV	=	0xfe01
                           00FE02   917 _HIRCCR	=	0xfe02
                           00FE03   918 _XOSCCR	=	0xfe03
                           00FE08   919 _X32KCR	=	0xfe08
                           00FE04   920 _IRC32KCR	=	0xfe04
                           00FE00   921 _CKSEL	=	0xfe00
                           00FE05   922 _MCLKOCR	=	0xfe05
                           00FE06   923 _IRCDB	=	0xfe06
                           00FE07   924 _IRC48MCR	=	0xfe07
                           00FEA2   925 _TM2PS	=	0xfea2
                           00FEA3   926 _TM3PS	=	0xfea3
                           00FEA4   927 _TM4PS	=	0xfea4
                           00FA30   928 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   929 _DMA_UR1T_CR	=	0xfa31
                           00FA32   930 _DMA_UR1T_STA	=	0xfa32
                           00FA33   931 _DMA_URTX_AMT	=	0xfa33
                           00FA34   932 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   933 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   934 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   935 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   936 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   937 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   938 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   939 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   940 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   941 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   942 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   943 _DMA_UR2T_CR	=	0xfa31
                           00FA32   944 _DMA_UR2T_STA	=	0xfa32
                           00FA33   945 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   946 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   947 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   948 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   949 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   950 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   951 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   952 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   953 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   954 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   955 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   956 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   957 _DMA_UR3T_CR	=	0xfa31
                           00FA32   958 _DMA_UR3T_STA	=	0xfa32
                           00FA33   959 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   960 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   961 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   962 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   963 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   964 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   965 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   966 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   967 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   968 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   969 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   970 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   971 _DMA_UR4T_CR	=	0xfa31
                           00FA32   972 _DMA_UR4T_STA	=	0xfa32
                           00FA33   973 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   974 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   975 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   976 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   977 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   978 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   979 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   980 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   981 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   982 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   983 _DMA_UR4R_TXAL	=	0xfa3e
      000000                        984 _uartGetCharacter_result_65536_69:
      000000                        985 	.ds 1
      000001                        986 _SPI_command:
      000001                        987 	.ds 1
      000002                        988 _register_current_value:
      000002                        989 	.ds 1
      000003                        990 _register_new_value:
      000003                        991 	.ds 1
      000004                        992 _write_pointer:
      000004                        993 	.ds 1
      000005                        994 _current_address_width:
      000005                        995 	.ds 1
      000006                        996 _current_payload_width:
      000006                        997 	.ds 1
      000007                        998 _delay_function_duration_ms_65536_131:
      000007                        999 	.ds 4
      00000B                       1000 _nrf24_SPI_input_65536_137:
      00000B                       1001 	.ds 1
      00000C                       1002 _SPI_send_command_command_65536_139:
      00000C                       1003 	.ds 1
      00000D                       1004 _nrf24_CE_input_65536_141:
      00000D                       1005 	.ds 1
      00000E                       1006 _nrf24_dynamic_ack_state_65536_143:
      00000E                       1007 	.ds 1
      00000F                       1008 _nrf24_transmit_PARM_2:
      00000F                       1009 	.ds 1
      000010                       1010 _nrf24_transmit_PARM_3:
      000010                       1011 	.ds 1
      000011                       1012 _nrf24_transmit_payload_65536_147:
      000011                       1013 	.ds 3
      000014                       1014 _nrf24_send_payload_PARM_2:
      000014                       1015 	.ds 1
      000015                       1016 _nrf24_send_payload_payload_65536_151:
      000015                       1017 	.ds 3
      000018                       1018 _nrf24_flush_fifo_select_65536_172:
      000018                       1019 	.ds 1
      000019                       1020 _nrf24_device_PARM_2:
      000019                       1021 	.ds 1
      00001A                       1022 _nrf24_device_device_mode_65536_181:
      00001A                       1023 	.ds 1
      00001B                       1024 _nrf24_device_new_value_65537_184:
      00001B                       1025 	.ds 1
      00001C                       1026 _nrf24_print_internal_register_values_pipe_address_65536_191:
      00001C                       1027 	.ds 5
      000021                       1028 _nrf24_automatic_retransmit_setup_PARM_2:
      000021                       1029 	.ds 1
      000022                       1030 _nrf24_automatic_retransmit_setup_delay_time_65536_196:
      000022                       1031 	.ds 2
      000024                       1032 _nrf24_auto_acknowledgment_setup_datapipe_65536_199:
      000024                       1033 	.ds 1
      000025                       1034 _nrf24_dynamic_payload_PARM_2:
      000025                       1035 	.ds 1
      000026                       1036 _nrf24_dynamic_payload_state_65536_201:
      000026                       1037 	.ds 1
      000027                       1038 _nrf24_datapipe_ptx_datapipe_number_65536_205:
      000027                       1039 	.ds 1
      000028                       1040 _nrf24_prx_static_payload_width_PARM_2:
      000028                       1041 	.ds 1
      000029                       1042 _nrf24_prx_static_payload_width_static_payload_width_65536_211:
      000029                       1043 	.ds 1
      00002A                       1044 _nrf24_datapipe_enable_number_of_datapipes_65536_215:
      00002A                       1045 	.ds 1
      00002B                       1046 _nrf24_address_width_address_width_65536_217:
      00002B                       1047 	.ds 1
      00002C                       1048 _nrf24_rf_datarate_rf_datarate_65536_221:
      00002C                       1049 	.ds 2
      00002E                       1050 _nrf24_rf_power_rf_power_65536_224:
      00002E                       1051 	.ds 1
      00002F                       1052 _nrf24_rf_channel_rf_channel_65536_227:
      00002F                       1053 	.ds 1
      000030                       1054 _nrf24_rf_channel_write_pointer_131072_229:
      000030                       1055 	.ds 1
      000031                       1056 _nrf24_rf_channel_write_pointer_131072_230:
      000031                       1057 	.ds 1
      000032                       1058 _nrf24_interrupt_mask_PARM_2:
      000032                       1059 	.ds 1
      000033                       1060 _nrf24_interrupt_mask_PARM_3:
      000033                       1061 	.ds 1
      000034                       1062 _nrf24_interrupt_mask_rx_mask_65536_231:
      000034                       1063 	.ds 1
      000035                       1064 _nrf24_crc_configuration_PARM_2:
      000035                       1065 	.ds 1
      000036                       1066 _nrf24_crc_configuration_crc_enable_65536_233:
      000036                       1067 	.ds 1
      000037                       1068 _nrf24_mode_mode_65536_235:
      000037                       1069 	.ds 1
      000038                       1070 _nrf24_read_PARM_2:
      000038                       1071 	.ds 3
      00003B                       1072 _nrf24_read_PARM_3:
      00003B                       1073 	.ds 1
      00003C                       1074 _nrf24_read_PARM_4:
      00003C                       1075 	.ds 1
      00003D                       1076 _nrf24_read_address_65536_238:
      00003D                       1077 	.ds 1
      00003E                       1078 _nrf24_write_PARM_2:
      00003E                       1079 	.ds 3
      000041                       1080 _nrf24_write_PARM_3:
      000041                       1081 	.ds 1
      000042                       1082 _nrf24_write_PARM_4:
      000042                       1083 	.ds 1
      000043                       1084 _nrf24_write_address_65536_243:
      000043                       1085 	.ds 1
                                   1086 ;--------------------------------------------------------
                                   1087 ; absolute external ram data
                                   1088 ;--------------------------------------------------------
                                   1089 	.area XABS    (ABS,XDATA)
                                   1090 ;--------------------------------------------------------
                                   1091 ; external initialized ram data
                                   1092 ;--------------------------------------------------------
                                   1093 	.area XISEG   (XDATA)
      000000                       1094 _dataReady::
      000000                       1095 	.ds 1
      000001                       1096 _CSN_pin:
      000001                       1097 	.ds 13
      00000E                       1098 _CE_pin:
      00000E                       1099 	.ds 13
      00001B                       1100 _reset_flag:
      00001B                       1101 	.ds 1
      00001C                       1102 _current_mode:
      00001C                       1103 	.ds 1
      00001D                       1104 _current_acknowledgement_state:
      00001D                       1105 	.ds 1
      00001E                       1106 _dynamic_payload:
      00001E                       1107 	.ds 1
      00001F                       1108 _hardwareCheckPassed:
      00001F                       1109 	.ds 1
      000020                       1110 _datapipe_address::
      000020                       1111 	.ds 30
                                   1112 	.area HOME    (CODE)
                                   1113 	.area GSINIT0 (CODE)
                                   1114 	.area GSINIT1 (CODE)
                                   1115 	.area GSINIT2 (CODE)
                                   1116 	.area GSINIT3 (CODE)
                                   1117 	.area GSINIT4 (CODE)
                                   1118 	.area GSINIT5 (CODE)
                                   1119 	.area GSINIT  (CODE)
                                   1120 	.area GSFINAL (CODE)
                                   1121 	.area CSEG    (CODE)
                                   1122 ;--------------------------------------------------------
                                   1123 ; global & static initialisations
                                   1124 ;--------------------------------------------------------
                                   1125 	.area HOME    (CODE)
                                   1126 	.area GSINIT  (CODE)
                                   1127 	.area GSFINAL (CODE)
                                   1128 	.area GSINIT  (CODE)
                                   1129 ;--------------------------------------------------------
                                   1130 ; Home
                                   1131 ;--------------------------------------------------------
                                   1132 	.area HOME    (CODE)
                                   1133 	.area HOME    (CODE)
                                   1134 ;--------------------------------------------------------
                                   1135 ; code
                                   1136 ;--------------------------------------------------------
                                   1137 	.area CSEG    (CODE)
                                   1138 ;------------------------------------------------------------
                                   1139 ;Allocation info for local variables in function 'delay_function'
                                   1140 ;------------------------------------------------------------
                                   1141 ;duration_ms               Allocated with name '_delay_function_duration_ms_65536_131'
                                   1142 ;------------------------------------------------------------
                                   1143 ;	nrf24l01.c:48: void delay_function(uint32_t duration_ms)
                                   1144 ;	-----------------------------------------
                                   1145 ;	 function delay_function
                                   1146 ;	-----------------------------------------
      000000                       1147 _delay_function:
                           000007  1148 	ar7 = 0x07
                           000006  1149 	ar6 = 0x06
                           000005  1150 	ar5 = 0x05
                           000004  1151 	ar4 = 0x04
                           000003  1152 	ar3 = 0x03
                           000002  1153 	ar2 = 0x02
                           000001  1154 	ar1 = 0x01
                           000000  1155 	ar0 = 0x00
      000000 AF 82            [24] 1156 	mov	r7,dpl
      000002 AE 83            [24] 1157 	mov	r6,dph
      000004 AD F0            [24] 1158 	mov	r5,b
      000006 FC               [12] 1159 	mov	r4,a
      000007 90r00r07         [24] 1160 	mov	dptr,#_delay_function_duration_ms_65536_131
      00000A EF               [12] 1161 	mov	a,r7
      00000B F0               [24] 1162 	movx	@dptr,a
      00000C EE               [12] 1163 	mov	a,r6
      00000D A3               [24] 1164 	inc	dptr
      00000E F0               [24] 1165 	movx	@dptr,a
      00000F ED               [12] 1166 	mov	a,r5
      000010 A3               [24] 1167 	inc	dptr
      000011 F0               [24] 1168 	movx	@dptr,a
      000012 EC               [12] 1169 	mov	a,r4
      000013 A3               [24] 1170 	inc	dptr
      000014 F0               [24] 1171 	movx	@dptr,a
                                   1172 ;	nrf24l01.c:50: delay1ms(duration_ms);
      000015 90r00r07         [24] 1173 	mov	dptr,#_delay_function_duration_ms_65536_131
      000018 E0               [24] 1174 	movx	a,@dptr
      000019 FC               [12] 1175 	mov	r4,a
      00001A A3               [24] 1176 	inc	dptr
      00001B E0               [24] 1177 	movx	a,@dptr
      00001C FD               [12] 1178 	mov	r5,a
      00001D A3               [24] 1179 	inc	dptr
      00001E E0               [24] 1180 	movx	a,@dptr
      00001F A3               [24] 1181 	inc	dptr
      000020 E0               [24] 1182 	movx	a,@dptr
      000021 8C 82            [24] 1183 	mov	dpl,r4
      000023 8D 83            [24] 1184 	mov	dph,r5
                                   1185 ;	nrf24l01.c:51: }
      000025 02r00r00         [24] 1186 	ljmp	_delay1ms
                                   1187 ;------------------------------------------------------------
                                   1188 ;Allocation info for local variables in function 'SPI_Initializer'
                                   1189 ;------------------------------------------------------------
                                   1190 ;	nrf24l01.c:55: void SPI_Initializer(void) {
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function SPI_Initializer
                                   1193 ;	-----------------------------------------
      000028                       1194 _SPI_Initializer:
                                   1195 ;	nrf24l01.c:59: spiSelectSpeed(SPI_SPEED), 
      000028 90 09 00         [24] 1196 	mov	dptr,#0x0900
      00002B 75 F0 3D         [24] 1197 	mov	b,#0x3d
      00002E E4               [12] 1198 	clr	a
      00002F 12r00r00         [24] 1199 	lcall	_spiSelectSpeed
      000032 AF 82            [24] 1200 	mov	r7,dpl
                                   1201 ;	nrf24l01.c:61: GPIO_BIDIRECTIONAL_MODE
      000034 90r00r00         [24] 1202 	mov	dptr,#_spiConfigure_PARM_2
      000037 E4               [12] 1203 	clr	a
      000038 F0               [24] 1204 	movx	@dptr,a
      000039 90r00r00         [24] 1205 	mov	dptr,#_spiConfigure_PARM_3
      00003C EF               [12] 1206 	mov	a,r7
      00003D F0               [24] 1207 	movx	@dptr,a
      00003E 90r00r00         [24] 1208 	mov	dptr,#_spiConfigure_PARM_4
      000041 74 01            [12] 1209 	mov	a,#0x01
      000043 F0               [24] 1210 	movx	@dptr,a
      000044 90r00r00         [24] 1211 	mov	dptr,#_spiConfigure_PARM_5
      000047 E4               [12] 1212 	clr	a
      000048 F0               [24] 1213 	movx	@dptr,a
      000049 75 82 00         [24] 1214 	mov	dpl,#0x00
                                   1215 ;	nrf24l01.c:63: }
      00004C 02r00r00         [24] 1216 	ljmp	_spiConfigure
                                   1217 ;------------------------------------------------------------
                                   1218 ;Allocation info for local variables in function 'pinout_Initializer'
                                   1219 ;------------------------------------------------------------
                                   1220 ;	nrf24l01.c:66: void pinout_Initializer(void)
                                   1221 ;	-----------------------------------------
                                   1222 ;	 function pinout_Initializer
                                   1223 ;	-----------------------------------------
      00004F                       1224 _pinout_Initializer:
                                   1225 ;	nrf24l01.c:69: gpioConfigure(&CSN_pin);
      00004F 90r00r01         [24] 1226 	mov	dptr,#_CSN_pin
      000052 75 F0 00         [24] 1227 	mov	b,#0x00
      000055 12r00r00         [24] 1228 	lcall	_gpioConfigure
                                   1229 ;	nrf24l01.c:70: gpioConfigure(&CE_pin);
      000058 90r00r0E         [24] 1230 	mov	dptr,#_CE_pin
      00005B 75 F0 00         [24] 1231 	mov	b,#0x00
      00005E 12r00r00         [24] 1232 	lcall	_gpioConfigure
                                   1233 ;	nrf24l01.c:72: gpioWrite(&CSN_pin, SPI_OFF);
      000061 90r00r00         [24] 1234 	mov	dptr,#_gpioWrite_PARM_2
      000064 74 01            [12] 1235 	mov	a,#0x01
      000066 F0               [24] 1236 	movx	@dptr,a
      000067 90r00r01         [24] 1237 	mov	dptr,#_CSN_pin
      00006A 75 F0 00         [24] 1238 	mov	b,#0x00
      00006D 12r00r00         [24] 1239 	lcall	_gpioWrite
                                   1240 ;	nrf24l01.c:73: gpioWrite(&CE_pin, CE_OFF);
      000070 90r00r00         [24] 1241 	mov	dptr,#_gpioWrite_PARM_2
      000073 E4               [12] 1242 	clr	a
      000074 F0               [24] 1243 	movx	@dptr,a
      000075 90r00r0E         [24] 1244 	mov	dptr,#_CE_pin
      000078 75 F0 00         [24] 1245 	mov	b,#0x00
                                   1246 ;	nrf24l01.c:75: }
      00007B 02r00r00         [24] 1247 	ljmp	_gpioWrite
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'nrf24_SPI'
                                   1250 ;------------------------------------------------------------
                                   1251 ;input                     Allocated with name '_nrf24_SPI_input_65536_137'
                                   1252 ;------------------------------------------------------------
                                   1253 ;	nrf24l01.c:78: void nrf24_SPI(uint8_t input)
                                   1254 ;	-----------------------------------------
                                   1255 ;	 function nrf24_SPI
                                   1256 ;	-----------------------------------------
      00007E                       1257 _nrf24_SPI:
      00007E E5 82            [12] 1258 	mov	a,dpl
      000080 90r00r0B         [24] 1259 	mov	dptr,#_nrf24_SPI_input_65536_137
      000083 F0               [24] 1260 	movx	@dptr,a
                                   1261 ;	nrf24l01.c:80: gpioWrite(&CSN_pin, input);
      000084 E0               [24] 1262 	movx	a,@dptr
      000085 90r00r00         [24] 1263 	mov	dptr,#_gpioWrite_PARM_2
      000088 F0               [24] 1264 	movx	@dptr,a
      000089 90r00r01         [24] 1265 	mov	dptr,#_CSN_pin
      00008C 75 F0 00         [24] 1266 	mov	b,#0x00
                                   1267 ;	nrf24l01.c:81: }
      00008F 02r00r00         [24] 1268 	ljmp	_gpioWrite
                                   1269 ;------------------------------------------------------------
                                   1270 ;Allocation info for local variables in function 'SPI_send_command'
                                   1271 ;------------------------------------------------------------
                                   1272 ;command                   Allocated with name '_SPI_send_command_command_65536_139'
                                   1273 ;------------------------------------------------------------
                                   1274 ;	nrf24l01.c:84: uint8_t SPI_send_command(uint8_t command) {
                                   1275 ;	-----------------------------------------
                                   1276 ;	 function SPI_send_command
                                   1277 ;	-----------------------------------------
      000092                       1278 _SPI_send_command:
      000092 E5 82            [12] 1279 	mov	a,dpl
      000094 90r00r0C         [24] 1280 	mov	dptr,#_SPI_send_command_command_65536_139
      000097 F0               [24] 1281 	movx	@dptr,a
                                   1282 ;	nrf24l01.c:85: spiSend(&command, 1, &dataReady);
      000098 90r00r00         [24] 1283 	mov	dptr,#_spiSend_PARM_2
      00009B 74 01            [12] 1284 	mov	a,#0x01
      00009D F0               [24] 1285 	movx	@dptr,a
      00009E E4               [12] 1286 	clr	a
      00009F A3               [24] 1287 	inc	dptr
      0000A0 F0               [24] 1288 	movx	@dptr,a
      0000A1 90r00r00         [24] 1289 	mov	dptr,#_spiSend_PARM_3
      0000A4 74r00            [12] 1290 	mov	a,#_dataReady
      0000A6 F0               [24] 1291 	movx	@dptr,a
      0000A7 74s00            [12] 1292 	mov	a,#(_dataReady >> 8)
      0000A9 A3               [24] 1293 	inc	dptr
      0000AA F0               [24] 1294 	movx	@dptr,a
      0000AB E4               [12] 1295 	clr	a
      0000AC A3               [24] 1296 	inc	dptr
      0000AD F0               [24] 1297 	movx	@dptr,a
      0000AE 90r00r0C         [24] 1298 	mov	dptr,#_SPI_send_command_command_65536_139
      0000B1 75 F0 00         [24] 1299 	mov	b,#0x00
      0000B4 12r00r00         [24] 1300 	lcall	_spiSend
                                   1301 ;	nrf24l01.c:88: while(!dataReady);
      0000B7                       1302 00101$:
      0000B7 90r00r00         [24] 1303 	mov	dptr,#_dataReady
      0000BA E0               [24] 1304 	movx	a,@dptr
      0000BB 60 FA            [24] 1305 	jz	00101$
                                   1306 ;	nrf24l01.c:90: return command;
      0000BD 90r00r0C         [24] 1307 	mov	dptr,#_SPI_send_command_command_65536_139
      0000C0 E0               [24] 1308 	movx	a,@dptr
                                   1309 ;	nrf24l01.c:91: }
      0000C1 F5 82            [12] 1310 	mov	dpl,a
      0000C3 22               [24] 1311 	ret
                                   1312 ;------------------------------------------------------------
                                   1313 ;Allocation info for local variables in function 'nrf24_CE'
                                   1314 ;------------------------------------------------------------
                                   1315 ;input                     Allocated with name '_nrf24_CE_input_65536_141'
                                   1316 ;------------------------------------------------------------
                                   1317 ;	nrf24l01.c:94: void nrf24_CE(uint8_t input)
                                   1318 ;	-----------------------------------------
                                   1319 ;	 function nrf24_CE
                                   1320 ;	-----------------------------------------
      0000C4                       1321 _nrf24_CE:
      0000C4 E5 82            [12] 1322 	mov	a,dpl
      0000C6 90r00r0D         [24] 1323 	mov	dptr,#_nrf24_CE_input_65536_141
      0000C9 F0               [24] 1324 	movx	@dptr,a
                                   1325 ;	nrf24l01.c:96: gpioWrite(&CE_pin, input);
      0000CA E0               [24] 1326 	movx	a,@dptr
      0000CB 90r00r00         [24] 1327 	mov	dptr,#_gpioWrite_PARM_2
      0000CE F0               [24] 1328 	movx	@dptr,a
      0000CF 90r00r0E         [24] 1329 	mov	dptr,#_CE_pin
      0000D2 75 F0 00         [24] 1330 	mov	b,#0x00
                                   1331 ;	nrf24l01.c:97: }
      0000D5 02r00r00         [24] 1332 	ljmp	_gpioWrite
                                   1333 ;------------------------------------------------------------
                                   1334 ;Allocation info for local variables in function 'nrf24_dynamic_ack'
                                   1335 ;------------------------------------------------------------
                                   1336 ;state                     Allocated with name '_nrf24_dynamic_ack_state_65536_143'
                                   1337 ;------------------------------------------------------------
                                   1338 ;	nrf24l01.c:103: void nrf24_dynamic_ack(uint8_t state) {
                                   1339 ;	-----------------------------------------
                                   1340 ;	 function nrf24_dynamic_ack
                                   1341 ;	-----------------------------------------
      0000D8                       1342 _nrf24_dynamic_ack:
      0000D8 E5 82            [12] 1343 	mov	a,dpl
      0000DA 90r00r0E         [24] 1344 	mov	dptr,#_nrf24_dynamic_ack_state_65536_143
      0000DD F0               [24] 1345 	movx	@dptr,a
                                   1346 ;	nrf24l01.c:104: if (state == ENABLE) {
      0000DE E0               [24] 1347 	movx	a,@dptr
      0000DF FF               [12] 1348 	mov	r7,a
      0000E0 BF 01 44         [24] 1349 	cjne	r7,#0x01,00102$
                                   1350 ;	nrf24l01.c:105: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0000E3 90r00r38         [24] 1351 	mov	dptr,#_nrf24_read_PARM_2
      0000E6 74r02            [12] 1352 	mov	a,#_register_current_value
      0000E8 F0               [24] 1353 	movx	@dptr,a
      0000E9 74s00            [12] 1354 	mov	a,#(_register_current_value >> 8)
      0000EB A3               [24] 1355 	inc	dptr
      0000EC F0               [24] 1356 	movx	@dptr,a
      0000ED E4               [12] 1357 	clr	a
      0000EE A3               [24] 1358 	inc	dptr
      0000EF F0               [24] 1359 	movx	@dptr,a
      0000F0 90r00r3B         [24] 1360 	mov	dptr,#_nrf24_read_PARM_3
      0000F3 04               [12] 1361 	inc	a
      0000F4 F0               [24] 1362 	movx	@dptr,a
      0000F5 90r00r3C         [24] 1363 	mov	dptr,#_nrf24_read_PARM_4
      0000F8 E4               [12] 1364 	clr	a
      0000F9 F0               [24] 1365 	movx	@dptr,a
      0000FA 75 82 1D         [24] 1366 	mov	dpl,#0x1d
      0000FD 12r0Fr48         [24] 1367 	lcall	_nrf24_read
                                   1368 ;	nrf24l01.c:106: register_new_value = register_current_value | (1 << EN_DYN_ACK);
      000100 90r00r02         [24] 1369 	mov	dptr,#_register_current_value
      000103 E0               [24] 1370 	movx	a,@dptr
      000104 90r00r03         [24] 1371 	mov	dptr,#_register_new_value
      000107 44 01            [12] 1372 	orl	a,#0x01
      000109 F0               [24] 1373 	movx	@dptr,a
                                   1374 ;	nrf24l01.c:107: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      00010A 90r00r3E         [24] 1375 	mov	dptr,#_nrf24_write_PARM_2
      00010D 74r03            [12] 1376 	mov	a,#_register_new_value
      00010F F0               [24] 1377 	movx	@dptr,a
      000110 74s00            [12] 1378 	mov	a,#(_register_new_value >> 8)
      000112 A3               [24] 1379 	inc	dptr
      000113 F0               [24] 1380 	movx	@dptr,a
      000114 E4               [12] 1381 	clr	a
      000115 A3               [24] 1382 	inc	dptr
      000116 F0               [24] 1383 	movx	@dptr,a
      000117 90r00r41         [24] 1384 	mov	dptr,#_nrf24_write_PARM_3
      00011A 04               [12] 1385 	inc	a
      00011B F0               [24] 1386 	movx	@dptr,a
      00011C 90r00r42         [24] 1387 	mov	dptr,#_nrf24_write_PARM_4
      00011F E4               [12] 1388 	clr	a
      000120 F0               [24] 1389 	movx	@dptr,a
      000121 75 82 1D         [24] 1390 	mov	dpl,#0x1d
      000124 02r0FrB4         [24] 1391 	ljmp	_nrf24_write
      000127                       1392 00102$:
                                   1393 ;	nrf24l01.c:109: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      000127 90r00r38         [24] 1394 	mov	dptr,#_nrf24_read_PARM_2
      00012A 74r02            [12] 1395 	mov	a,#_register_current_value
      00012C F0               [24] 1396 	movx	@dptr,a
      00012D 74s00            [12] 1397 	mov	a,#(_register_current_value >> 8)
      00012F A3               [24] 1398 	inc	dptr
      000130 F0               [24] 1399 	movx	@dptr,a
      000131 E4               [12] 1400 	clr	a
      000132 A3               [24] 1401 	inc	dptr
      000133 F0               [24] 1402 	movx	@dptr,a
      000134 90r00r3B         [24] 1403 	mov	dptr,#_nrf24_read_PARM_3
      000137 04               [12] 1404 	inc	a
      000138 F0               [24] 1405 	movx	@dptr,a
      000139 90r00r3C         [24] 1406 	mov	dptr,#_nrf24_read_PARM_4
      00013C E4               [12] 1407 	clr	a
      00013D F0               [24] 1408 	movx	@dptr,a
      00013E 75 82 1D         [24] 1409 	mov	dpl,#0x1d
      000141 12r0Fr48         [24] 1410 	lcall	_nrf24_read
                                   1411 ;	nrf24l01.c:110: register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
      000144 90r00r02         [24] 1412 	mov	dptr,#_register_current_value
      000147 E0               [24] 1413 	movx	a,@dptr
      000148 90r00r03         [24] 1414 	mov	dptr,#_register_new_value
      00014B 54 FE            [12] 1415 	anl	a,#0xfe
      00014D F0               [24] 1416 	movx	@dptr,a
                                   1417 ;	nrf24l01.c:111: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      00014E 90r00r3E         [24] 1418 	mov	dptr,#_nrf24_write_PARM_2
      000151 74r03            [12] 1419 	mov	a,#_register_new_value
      000153 F0               [24] 1420 	movx	@dptr,a
      000154 74s00            [12] 1421 	mov	a,#(_register_new_value >> 8)
      000156 A3               [24] 1422 	inc	dptr
      000157 F0               [24] 1423 	movx	@dptr,a
      000158 E4               [12] 1424 	clr	a
      000159 A3               [24] 1425 	inc	dptr
      00015A F0               [24] 1426 	movx	@dptr,a
      00015B 90r00r41         [24] 1427 	mov	dptr,#_nrf24_write_PARM_3
      00015E 04               [12] 1428 	inc	a
      00015F F0               [24] 1429 	movx	@dptr,a
      000160 90r00r42         [24] 1430 	mov	dptr,#_nrf24_write_PARM_4
      000163 E4               [12] 1431 	clr	a
      000164 F0               [24] 1432 	movx	@dptr,a
      000165 75 82 1D         [24] 1433 	mov	dpl,#0x1d
                                   1434 ;	nrf24l01.c:113: }
      000168 02r0FrB4         [24] 1435 	ljmp	_nrf24_write
                                   1436 ;------------------------------------------------------------
                                   1437 ;Allocation info for local variables in function 'nrf24_transmit'
                                   1438 ;------------------------------------------------------------
                                   1439 ;payload_width             Allocated with name '_nrf24_transmit_PARM_2'
                                   1440 ;acknowledgement_state     Allocated with name '_nrf24_transmit_PARM_3'
                                   1441 ;payload                   Allocated with name '_nrf24_transmit_payload_65536_147'
                                   1442 ;------------------------------------------------------------
                                   1443 ;	nrf24l01.c:116: uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state) {
                                   1444 ;	-----------------------------------------
                                   1445 ;	 function nrf24_transmit
                                   1446 ;	-----------------------------------------
      00016B                       1447 _nrf24_transmit:
      00016B AF F0            [24] 1448 	mov	r7,b
      00016D AE 83            [24] 1449 	mov	r6,dph
      00016F E5 82            [12] 1450 	mov	a,dpl
      000171 90r00r11         [24] 1451 	mov	dptr,#_nrf24_transmit_payload_65536_147
      000174 F0               [24] 1452 	movx	@dptr,a
      000175 EE               [12] 1453 	mov	a,r6
      000176 A3               [24] 1454 	inc	dptr
      000177 F0               [24] 1455 	movx	@dptr,a
      000178 EF               [12] 1456 	mov	a,r7
      000179 A3               [24] 1457 	inc	dptr
      00017A F0               [24] 1458 	movx	@dptr,a
                                   1459 ;	nrf24l01.c:117: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
      00017B 90r00r38         [24] 1460 	mov	dptr,#_nrf24_read_PARM_2
      00017E 74r02            [12] 1461 	mov	a,#_register_current_value
      000180 F0               [24] 1462 	movx	@dptr,a
      000181 74s00            [12] 1463 	mov	a,#(_register_current_value >> 8)
      000183 A3               [24] 1464 	inc	dptr
      000184 F0               [24] 1465 	movx	@dptr,a
      000185 E4               [12] 1466 	clr	a
      000186 A3               [24] 1467 	inc	dptr
      000187 F0               [24] 1468 	movx	@dptr,a
      000188 90r00r3B         [24] 1469 	mov	dptr,#_nrf24_read_PARM_3
      00018B 04               [12] 1470 	inc	a
      00018C F0               [24] 1471 	movx	@dptr,a
      00018D 90r00r3C         [24] 1472 	mov	dptr,#_nrf24_read_PARM_4
      000190 E4               [12] 1473 	clr	a
      000191 F0               [24] 1474 	movx	@dptr,a
      000192 75 82 07         [24] 1475 	mov	dpl,#0x07
      000195 12r0Fr48         [24] 1476 	lcall	_nrf24_read
                                   1477 ;	nrf24l01.c:118: if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX)) {
      000198 90r00r02         [24] 1478 	mov	dptr,#_register_current_value
      00019B E0               [24] 1479 	movx	a,@dptr
      00019C 20 E5 30         [24] 1480 	jb	acc.5,00102$
      00019F 90r00r1C         [24] 1481 	mov	dptr,#_current_mode
      0001A2 E0               [24] 1482 	movx	a,@dptr
      0001A3 FF               [12] 1483 	mov	r7,a
      0001A4 BF 03 28         [24] 1484 	cjne	r7,#0x03,00102$
                                   1485 ;	nrf24l01.c:119: current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
      0001A7 90r00r10         [24] 1486 	mov	dptr,#_nrf24_transmit_PARM_3
      0001AA E0               [24] 1487 	movx	a,@dptr
      0001AB 90r00r1D         [24] 1488 	mov	dptr,#_current_acknowledgement_state
      0001AE F0               [24] 1489 	movx	@dptr,a
                                   1490 ;	nrf24l01.c:123: nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
      0001AF 90r00r11         [24] 1491 	mov	dptr,#_nrf24_transmit_payload_65536_147
      0001B2 E0               [24] 1492 	movx	a,@dptr
      0001B3 FD               [12] 1493 	mov	r5,a
      0001B4 A3               [24] 1494 	inc	dptr
      0001B5 E0               [24] 1495 	movx	a,@dptr
      0001B6 FE               [12] 1496 	mov	r6,a
      0001B7 A3               [24] 1497 	inc	dptr
      0001B8 E0               [24] 1498 	movx	a,@dptr
      0001B9 FF               [12] 1499 	mov	r7,a
      0001BA 90r00r0F         [24] 1500 	mov	dptr,#_nrf24_transmit_PARM_2
      0001BD E0               [24] 1501 	movx	a,@dptr
      0001BE 90r00r14         [24] 1502 	mov	dptr,#_nrf24_send_payload_PARM_2
      0001C1 F0               [24] 1503 	movx	@dptr,a
      0001C2 8D 82            [24] 1504 	mov	dpl,r5
      0001C4 8E 83            [24] 1505 	mov	dph,r6
      0001C6 8F F0            [24] 1506 	mov	b,r7
      0001C8 12r01rD3         [24] 1507 	lcall	_nrf24_send_payload
                                   1508 ;	nrf24l01.c:124: return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
      0001CB 75 82 01         [24] 1509 	mov	dpl,#0x01
      0001CE 22               [24] 1510 	ret
      0001CF                       1511 00102$:
                                   1512 ;	nrf24l01.c:127: return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
      0001CF 75 82 00         [24] 1513 	mov	dpl,#0x00
                                   1514 ;	nrf24l01.c:130: }
      0001D2 22               [24] 1515 	ret
                                   1516 ;------------------------------------------------------------
                                   1517 ;Allocation info for local variables in function 'nrf24_send_payload'
                                   1518 ;------------------------------------------------------------
                                   1519 ;payload_width             Allocated with name '_nrf24_send_payload_PARM_2'
                                   1520 ;payload                   Allocated with name '_nrf24_send_payload_payload_65536_151'
                                   1521 ;------------------------------------------------------------
                                   1522 ;	nrf24l01.c:133: void nrf24_send_payload(uint8_t *payload, uint8_t payload_width) {
                                   1523 ;	-----------------------------------------
                                   1524 ;	 function nrf24_send_payload
                                   1525 ;	-----------------------------------------
      0001D3                       1526 _nrf24_send_payload:
      0001D3 AF F0            [24] 1527 	mov	r7,b
      0001D5 AE 83            [24] 1528 	mov	r6,dph
      0001D7 E5 82            [12] 1529 	mov	a,dpl
      0001D9 90r00r15         [24] 1530 	mov	dptr,#_nrf24_send_payload_payload_65536_151
      0001DC F0               [24] 1531 	movx	@dptr,a
      0001DD EE               [12] 1532 	mov	a,r6
      0001DE A3               [24] 1533 	inc	dptr
      0001DF F0               [24] 1534 	movx	@dptr,a
      0001E0 EF               [12] 1535 	mov	a,r7
      0001E1 A3               [24] 1536 	inc	dptr
      0001E2 F0               [24] 1537 	movx	@dptr,a
                                   1538 ;	nrf24l01.c:135: nrf24_SPI(SPI_ON);
      0001E3 75 82 00         [24] 1539 	mov	dpl,#0x00
      0001E6 12r00r7E         [24] 1540 	lcall	_nrf24_SPI
                                   1541 ;	nrf24l01.c:137: if (current_acknowledgement_state == NO_ACK_MODE) {SPI_command = W_TX_PAYLOAD_NOACK;}
      0001E9 90r00r1D         [24] 1542 	mov	dptr,#_current_acknowledgement_state
      0001EC E0               [24] 1543 	movx	a,@dptr
      0001ED FF               [12] 1544 	mov	r7,a
      0001EE BF 01 08         [24] 1545 	cjne	r7,#0x01,00102$
      0001F1 90r00r01         [24] 1546 	mov	dptr,#_SPI_command
      0001F4 74 B0            [12] 1547 	mov	a,#0xb0
      0001F6 F0               [24] 1548 	movx	@dptr,a
      0001F7 80 06            [24] 1549 	sjmp	00103$
      0001F9                       1550 00102$:
                                   1551 ;	nrf24l01.c:138: else { SPI_command = W_TX_PAYLOAD; }
      0001F9 90r00r01         [24] 1552 	mov	dptr,#_SPI_command
      0001FC 74 A0            [12] 1553 	mov	a,#0xa0
      0001FE F0               [24] 1554 	movx	@dptr,a
      0001FF                       1555 00103$:
                                   1556 ;	nrf24l01.c:141: SPI_send_command(W_TX_PAYLOAD);
      0001FF 75 82 A0         [24] 1557 	mov	dpl,#0xa0
      000202 12r00r92         [24] 1558 	lcall	_SPI_send_command
      000205 90r00r15         [24] 1559 	mov	dptr,#_nrf24_send_payload_payload_65536_151
      000208 E0               [24] 1560 	movx	a,@dptr
      000209 FD               [12] 1561 	mov	r5,a
      00020A A3               [24] 1562 	inc	dptr
      00020B E0               [24] 1563 	movx	a,@dptr
      00020C FE               [12] 1564 	mov	r6,a
      00020D A3               [24] 1565 	inc	dptr
      00020E E0               [24] 1566 	movx	a,@dptr
      00020F FF               [12] 1567 	mov	r7,a
      000210 90r00r14         [24] 1568 	mov	dptr,#_nrf24_send_payload_PARM_2
      000213 E0               [24] 1569 	movx	a,@dptr
      000214 FC               [12] 1570 	mov	r4,a
      000215                       1571 00106$:
                                   1572 ;	nrf24l01.c:142: for (; payload_width; payload_width--) {
      000215 EC               [12] 1573 	mov	a,r4
      000216 60 37            [24] 1574 	jz	00104$
                                   1575 ;	nrf24l01.c:145: SPI_command = payload[payload_width-1];
      000218 8C 02            [24] 1576 	mov	ar2,r4
      00021A 7B 00            [12] 1577 	mov	r3,#0x00
      00021C 1A               [12] 1578 	dec	r2
      00021D BA FF 01         [24] 1579 	cjne	r2,#0xff,00126$
      000220 1B               [12] 1580 	dec	r3
      000221                       1581 00126$:
      000221 EA               [12] 1582 	mov	a,r2
      000222 2D               [12] 1583 	add	a,r5
      000223 FA               [12] 1584 	mov	r2,a
      000224 EB               [12] 1585 	mov	a,r3
      000225 3E               [12] 1586 	addc	a,r6
      000226 F9               [12] 1587 	mov	r1,a
      000227 8F 03            [24] 1588 	mov	ar3,r7
      000229 8A 82            [24] 1589 	mov	dpl,r2
      00022B 89 83            [24] 1590 	mov	dph,r1
      00022D 8B F0            [24] 1591 	mov	b,r3
      00022F 12r00r00         [24] 1592 	lcall	__gptrget
      000232 FA               [12] 1593 	mov	r2,a
      000233 90r00r01         [24] 1594 	mov	dptr,#_SPI_command
      000236 F0               [24] 1595 	movx	@dptr,a
                                   1596 ;	nrf24l01.c:146: SPI_send_command(SPI_command);
      000237 8A 82            [24] 1597 	mov	dpl,r2
      000239 C0 07            [24] 1598 	push	ar7
      00023B C0 06            [24] 1599 	push	ar6
      00023D C0 05            [24] 1600 	push	ar5
      00023F C0 04            [24] 1601 	push	ar4
      000241 12r00r92         [24] 1602 	lcall	_SPI_send_command
      000244 D0 04            [24] 1603 	pop	ar4
      000246 D0 05            [24] 1604 	pop	ar5
      000248 D0 06            [24] 1605 	pop	ar6
      00024A D0 07            [24] 1606 	pop	ar7
                                   1607 ;	nrf24l01.c:142: for (; payload_width; payload_width--) {
      00024C 1C               [12] 1608 	dec	r4
      00024D 80 C6            [24] 1609 	sjmp	00106$
      00024F                       1610 00104$:
                                   1611 ;	nrf24l01.c:148: nrf24_SPI(SPI_OFF);
      00024F 75 82 01         [24] 1612 	mov	dpl,#0x01
                                   1613 ;	nrf24l01.c:149: }
      000252 02r00r7E         [24] 1614 	ljmp	_nrf24_SPI
                                   1615 ;------------------------------------------------------------
                                   1616 ;Allocation info for local variables in function 'nrf24_transmit_status'
                                   1617 ;------------------------------------------------------------
                                   1618 ;	nrf24l01.c:153: uint8_t nrf24_transmit_status(void)
                                   1619 ;	-----------------------------------------
                                   1620 ;	 function nrf24_transmit_status
                                   1621 ;	-----------------------------------------
      000255                       1622 _nrf24_transmit_status:
                                   1623 ;	nrf24l01.c:155: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
      000255 90r00r38         [24] 1624 	mov	dptr,#_nrf24_read_PARM_2
      000258 74r02            [12] 1625 	mov	a,#_register_current_value
      00025A F0               [24] 1626 	movx	@dptr,a
      00025B 74s00            [12] 1627 	mov	a,#(_register_current_value >> 8)
      00025D A3               [24] 1628 	inc	dptr
      00025E F0               [24] 1629 	movx	@dptr,a
      00025F E4               [12] 1630 	clr	a
      000260 A3               [24] 1631 	inc	dptr
      000261 F0               [24] 1632 	movx	@dptr,a
      000262 90r00r3B         [24] 1633 	mov	dptr,#_nrf24_read_PARM_3
      000265 04               [12] 1634 	inc	a
      000266 F0               [24] 1635 	movx	@dptr,a
      000267 90r00r3C         [24] 1636 	mov	dptr,#_nrf24_read_PARM_4
      00026A E4               [12] 1637 	clr	a
      00026B F0               [24] 1638 	movx	@dptr,a
      00026C 75 82 07         [24] 1639 	mov	dpl,#0x07
      00026F 12r0Fr48         [24] 1640 	lcall	_nrf24_read
                                   1641 ;	nrf24l01.c:156: if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
      000272 90r00r02         [24] 1642 	mov	dptr,#_register_current_value
      000275 E0               [24] 1643 	movx	a,@dptr
      000276 FF               [12] 1644 	mov	r7,a
      000277 30 E5 21         [24] 1645 	jnb	acc.5,00105$
                                   1646 ;	nrf24l01.c:158: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      00027A 90r00r3E         [24] 1647 	mov	dptr,#_nrf24_write_PARM_2
      00027D 74r02            [12] 1648 	mov	a,#_register_current_value
      00027F F0               [24] 1649 	movx	@dptr,a
      000280 74s00            [12] 1650 	mov	a,#(_register_current_value >> 8)
      000282 A3               [24] 1651 	inc	dptr
      000283 F0               [24] 1652 	movx	@dptr,a
      000284 E4               [12] 1653 	clr	a
      000285 A3               [24] 1654 	inc	dptr
      000286 F0               [24] 1655 	movx	@dptr,a
      000287 90r00r41         [24] 1656 	mov	dptr,#_nrf24_write_PARM_3
      00028A 04               [12] 1657 	inc	a
      00028B F0               [24] 1658 	movx	@dptr,a
      00028C 90r00r42         [24] 1659 	mov	dptr,#_nrf24_write_PARM_4
      00028F E4               [12] 1660 	clr	a
      000290 F0               [24] 1661 	movx	@dptr,a
      000291 75 82 07         [24] 1662 	mov	dpl,#0x07
      000294 12r0FrB4         [24] 1663 	lcall	_nrf24_write
                                   1664 ;	nrf24l01.c:159: return TRANSMIT_DONE;
      000297 75 82 01         [24] 1665 	mov	dpl,#0x01
      00029A 22               [24] 1666 	ret
      00029B                       1667 00105$:
                                   1668 ;	nrf24l01.c:161: } else if (register_current_value & (1 << MAX_RT)) {
      00029B EF               [12] 1669 	mov	a,r7
      00029C 30 E4 21         [24] 1670 	jnb	acc.4,00102$
                                   1671 ;	nrf24l01.c:162: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      00029F 90r00r3E         [24] 1672 	mov	dptr,#_nrf24_write_PARM_2
      0002A2 74r02            [12] 1673 	mov	a,#_register_current_value
      0002A4 F0               [24] 1674 	movx	@dptr,a
      0002A5 74s00            [12] 1675 	mov	a,#(_register_current_value >> 8)
      0002A7 A3               [24] 1676 	inc	dptr
      0002A8 F0               [24] 1677 	movx	@dptr,a
      0002A9 E4               [12] 1678 	clr	a
      0002AA A3               [24] 1679 	inc	dptr
      0002AB F0               [24] 1680 	movx	@dptr,a
      0002AC 90r00r41         [24] 1681 	mov	dptr,#_nrf24_write_PARM_3
      0002AF 04               [12] 1682 	inc	a
      0002B0 F0               [24] 1683 	movx	@dptr,a
      0002B1 90r00r42         [24] 1684 	mov	dptr,#_nrf24_write_PARM_4
      0002B4 E4               [12] 1685 	clr	a
      0002B5 F0               [24] 1686 	movx	@dptr,a
      0002B6 75 82 07         [24] 1687 	mov	dpl,#0x07
      0002B9 12r0FrB4         [24] 1688 	lcall	_nrf24_write
                                   1689 ;	nrf24l01.c:163: return TRANSMIT_FAILED;
      0002BC 75 82 FF         [24] 1690 	mov	dpl,#0xff
      0002BF 22               [24] 1691 	ret
      0002C0                       1692 00102$:
                                   1693 ;	nrf24l01.c:166: return TRANSMIT_IN_PROGRESS;
      0002C0 75 82 00         [24] 1694 	mov	dpl,#0x00
                                   1695 ;	nrf24l01.c:168: }
      0002C3 22               [24] 1696 	ret
                                   1697 ;------------------------------------------------------------
                                   1698 ;Allocation info for local variables in function 'nrf24_receive'
                                   1699 ;------------------------------------------------------------
                                   1700 ;payload_width             Allocated to stack - _bp -3
                                   1701 ;payload                   Allocated to registers r5 r6 r7 
                                   1702 ;------------------------------------------------------------
                                   1703 ;	nrf24l01.c:172: uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width) __reentrant {
                                   1704 ;	-----------------------------------------
                                   1705 ;	 function nrf24_receive
                                   1706 ;	-----------------------------------------
      0002C4                       1707 _nrf24_receive:
      0002C4 C0*00            [24] 1708 	push	_bp
      0002C6 85 81*00         [24] 1709 	mov	_bp,sp
      0002C9 AD 82            [24] 1710 	mov	r5,dpl
      0002CB AE 83            [24] 1711 	mov	r6,dph
      0002CD AF F0            [24] 1712 	mov	r7,b
                                   1713 ;	nrf24l01.c:174: if (current_mode == PRX) {
      0002CF 90r00r1C         [24] 1714 	mov	dptr,#_current_mode
      0002D2 E0               [24] 1715 	movx	a,@dptr
      0002D3 FC               [12] 1716 	mov	r4,a
      0002D4 BC 04 02         [24] 1717 	cjne	r4,#0x04,00142$
      0002D7 80 03            [24] 1718 	sjmp	00143$
      0002D9                       1719 00142$:
      0002D9 02r03rF1         [24] 1720 	ljmp	00110$
      0002DC                       1721 00143$:
                                   1722 ;	nrf24l01.c:175: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0002DC 90r00r38         [24] 1723 	mov	dptr,#_nrf24_read_PARM_2
      0002DF 74r02            [12] 1724 	mov	a,#_register_current_value
      0002E1 F0               [24] 1725 	movx	@dptr,a
      0002E2 74s00            [12] 1726 	mov	a,#(_register_current_value >> 8)
      0002E4 A3               [24] 1727 	inc	dptr
      0002E5 F0               [24] 1728 	movx	@dptr,a
      0002E6 E4               [12] 1729 	clr	a
      0002E7 A3               [24] 1730 	inc	dptr
      0002E8 F0               [24] 1731 	movx	@dptr,a
      0002E9 90r00r3B         [24] 1732 	mov	dptr,#_nrf24_read_PARM_3
      0002EC 04               [12] 1733 	inc	a
      0002ED F0               [24] 1734 	movx	@dptr,a
      0002EE 90r00r3C         [24] 1735 	mov	dptr,#_nrf24_read_PARM_4
      0002F1 E4               [12] 1736 	clr	a
      0002F2 F0               [24] 1737 	movx	@dptr,a
      0002F3 75 82 07         [24] 1738 	mov	dpl,#0x07
      0002F6 C0 07            [24] 1739 	push	ar7
      0002F8 C0 06            [24] 1740 	push	ar6
      0002FA C0 05            [24] 1741 	push	ar5
      0002FC 12r0Fr48         [24] 1742 	lcall	_nrf24_read
      0002FF D0 05            [24] 1743 	pop	ar5
      000301 D0 06            [24] 1744 	pop	ar6
      000303 D0 07            [24] 1745 	pop	ar7
                                   1746 ;	nrf24l01.c:178: if (register_current_value & (1 << RX_DR)) {
      000305 90r00r02         [24] 1747 	mov	dptr,#_register_current_value
      000308 E0               [24] 1748 	movx	a,@dptr
      000309 20 E6 03         [24] 1749 	jb	acc.6,00144$
      00030C 02r03rEC         [24] 1750 	ljmp	00107$
      00030F                       1751 00144$:
                                   1752 ;	nrf24l01.c:181: if(dynamic_payload == DISABLE) { payload_width = current_payload_width; }
      00030F 90r00r1E         [24] 1753 	mov	dptr,#_dynamic_payload
      000312 E0               [24] 1754 	movx	a,@dptr
      000313 70 0C            [24] 1755 	jnz	00102$
      000315 90r00r06         [24] 1756 	mov	dptr,#_current_payload_width
      000318 E0               [24] 1757 	movx	a,@dptr
      000319 FC               [12] 1758 	mov	r4,a
      00031A E5*00            [12] 1759 	mov	a,_bp
      00031C 24 FD            [12] 1760 	add	a,#0xfd
      00031E F8               [12] 1761 	mov	r0,a
      00031F A6 04            [24] 1762 	mov	@r0,ar4
      000321                       1763 00102$:
                                   1764 ;	nrf24l01.c:183: nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/                          
      000321 75 82 00         [24] 1765 	mov	dpl,#0x00
      000324 C0 07            [24] 1766 	push	ar7
      000326 C0 06            [24] 1767 	push	ar6
      000328 C0 05            [24] 1768 	push	ar5
      00032A 12r00r7E         [24] 1769 	lcall	_nrf24_SPI
                                   1770 ;	nrf24l01.c:184: SPI_command = R_RX_PAYLOAD;
      00032D 90r00r01         [24] 1771 	mov	dptr,#_SPI_command
      000330 74 61            [12] 1772 	mov	a,#0x61
      000332 F0               [24] 1773 	movx	@dptr,a
                                   1774 ;	nrf24l01.c:185: SPI_send_command(SPI_command);
      000333 75 82 61         [24] 1775 	mov	dpl,#0x61
      000336 12r00r92         [24] 1776 	lcall	_SPI_send_command
      000339 D0 05            [24] 1777 	pop	ar5
      00033B D0 06            [24] 1778 	pop	ar6
      00033D D0 07            [24] 1779 	pop	ar7
      00033F E5*00            [12] 1780 	mov	a,_bp
      000341 24 FD            [12] 1781 	add	a,#0xfd
      000343 F8               [12] 1782 	mov	r0,a
      000344 86 04            [24] 1783 	mov	ar4,@r0
      000346                       1784 00113$:
                                   1785 ;	nrf24l01.c:187: for (; payload_width; payload_width--) {
      000346 EC               [12] 1786 	mov	a,r4
      000347 60 30            [24] 1787 	jz	00103$
                                   1788 ;	nrf24l01.c:188: SPI_command = NOP_CMD;
      000349 90r00r01         [24] 1789 	mov	dptr,#_SPI_command
      00034C 74 FF            [12] 1790 	mov	a,#0xff
      00034E F0               [24] 1791 	movx	@dptr,a
                                   1792 ;	nrf24l01.c:189: *payload = SPI_send_command(SPI_command); // newly added
      00034F 75 82 FF         [24] 1793 	mov	dpl,#0xff
      000352 C0 07            [24] 1794 	push	ar7
      000354 C0 06            [24] 1795 	push	ar6
      000356 C0 05            [24] 1796 	push	ar5
      000358 C0 04            [24] 1797 	push	ar4
      00035A 12r00r92         [24] 1798 	lcall	_SPI_send_command
      00035D AB 82            [24] 1799 	mov	r3,dpl
      00035F D0 04            [24] 1800 	pop	ar4
      000361 D0 05            [24] 1801 	pop	ar5
      000363 D0 06            [24] 1802 	pop	ar6
      000365 D0 07            [24] 1803 	pop	ar7
      000367 8D 82            [24] 1804 	mov	dpl,r5
      000369 8E 83            [24] 1805 	mov	dph,r6
      00036B 8F F0            [24] 1806 	mov	b,r7
      00036D EB               [12] 1807 	mov	a,r3
      00036E 12r00r00         [24] 1808 	lcall	__gptrput
      000371 A3               [24] 1809 	inc	dptr
      000372 AD 82            [24] 1810 	mov	r5,dpl
      000374 AE 83            [24] 1811 	mov	r6,dph
                                   1812 ;	nrf24l01.c:190: payload++;
                                   1813 ;	nrf24l01.c:187: for (; payload_width; payload_width--) {
      000376 1C               [12] 1814 	dec	r4
      000377 80 CD            [24] 1815 	sjmp	00113$
      000379                       1816 00103$:
                                   1817 ;	nrf24l01.c:192: nrf24_SPI(SPI_OFF); 
      000379 75 82 01         [24] 1818 	mov	dpl,#0x01
      00037C 12r00r7E         [24] 1819 	lcall	_nrf24_SPI
                                   1820 ;	nrf24l01.c:193: nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
      00037F 90r00r38         [24] 1821 	mov	dptr,#_nrf24_read_PARM_2
      000382 74r02            [12] 1822 	mov	a,#_register_current_value
      000384 F0               [24] 1823 	movx	@dptr,a
      000385 74s00            [12] 1824 	mov	a,#(_register_current_value >> 8)
      000387 A3               [24] 1825 	inc	dptr
      000388 F0               [24] 1826 	movx	@dptr,a
      000389 E4               [12] 1827 	clr	a
      00038A A3               [24] 1828 	inc	dptr
      00038B F0               [24] 1829 	movx	@dptr,a
      00038C 90r00r3B         [24] 1830 	mov	dptr,#_nrf24_read_PARM_3
      00038F 04               [12] 1831 	inc	a
      000390 F0               [24] 1832 	movx	@dptr,a
      000391 90r00r3C         [24] 1833 	mov	dptr,#_nrf24_read_PARM_4
      000394 E4               [12] 1834 	clr	a
      000395 F0               [24] 1835 	movx	@dptr,a
      000396 75 82 17         [24] 1836 	mov	dpl,#0x17
      000399 12r0Fr48         [24] 1837 	lcall	_nrf24_read
                                   1838 ;	nrf24l01.c:194: if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
      00039C 90r00r02         [24] 1839 	mov	dptr,#_register_current_value
      00039F E0               [24] 1840 	movx	a,@dptr
      0003A0 30 E0 44         [24] 1841 	jnb	acc.0,00105$
                                   1842 ;	nrf24l01.c:196: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0003A3 90r00r38         [24] 1843 	mov	dptr,#_nrf24_read_PARM_2
      0003A6 74r02            [12] 1844 	mov	a,#_register_current_value
      0003A8 F0               [24] 1845 	movx	@dptr,a
      0003A9 74s00            [12] 1846 	mov	a,#(_register_current_value >> 8)
      0003AB A3               [24] 1847 	inc	dptr
      0003AC F0               [24] 1848 	movx	@dptr,a
      0003AD E4               [12] 1849 	clr	a
      0003AE A3               [24] 1850 	inc	dptr
      0003AF F0               [24] 1851 	movx	@dptr,a
      0003B0 90r00r3B         [24] 1852 	mov	dptr,#_nrf24_read_PARM_3
      0003B3 04               [12] 1853 	inc	a
      0003B4 F0               [24] 1854 	movx	@dptr,a
      0003B5 90r00r3C         [24] 1855 	mov	dptr,#_nrf24_read_PARM_4
      0003B8 E4               [12] 1856 	clr	a
      0003B9 F0               [24] 1857 	movx	@dptr,a
      0003BA 75 82 07         [24] 1858 	mov	dpl,#0x07
      0003BD 12r0Fr48         [24] 1859 	lcall	_nrf24_read
                                   1860 ;	nrf24l01.c:197: register_new_value = register_current_value | (1 << RX_DR);
      0003C0 90r00r02         [24] 1861 	mov	dptr,#_register_current_value
      0003C3 E0               [24] 1862 	movx	a,@dptr
      0003C4 90r00r03         [24] 1863 	mov	dptr,#_register_new_value
      0003C7 44 40            [12] 1864 	orl	a,#0x40
      0003C9 F0               [24] 1865 	movx	@dptr,a
                                   1866 ;	nrf24l01.c:198: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE); 
      0003CA 90r00r3E         [24] 1867 	mov	dptr,#_nrf24_write_PARM_2
      0003CD 74r03            [12] 1868 	mov	a,#_register_new_value
      0003CF F0               [24] 1869 	movx	@dptr,a
      0003D0 74s00            [12] 1870 	mov	a,#(_register_new_value >> 8)
      0003D2 A3               [24] 1871 	inc	dptr
      0003D3 F0               [24] 1872 	movx	@dptr,a
      0003D4 E4               [12] 1873 	clr	a
      0003D5 A3               [24] 1874 	inc	dptr
      0003D6 F0               [24] 1875 	movx	@dptr,a
      0003D7 90r00r41         [24] 1876 	mov	dptr,#_nrf24_write_PARM_3
      0003DA 04               [12] 1877 	inc	a
      0003DB F0               [24] 1878 	movx	@dptr,a
      0003DC 90r00r42         [24] 1879 	mov	dptr,#_nrf24_write_PARM_4
      0003DF E4               [12] 1880 	clr	a
      0003E0 F0               [24] 1881 	movx	@dptr,a
      0003E1 75 82 07         [24] 1882 	mov	dpl,#0x07
      0003E4 12r0FrB4         [24] 1883 	lcall	_nrf24_write
      0003E7                       1884 00105$:
                                   1885 ;	nrf24l01.c:200: return OPERATION_DONE;
      0003E7 75 82 01         [24] 1886 	mov	dpl,#0x01
      0003EA 80 08            [24] 1887 	sjmp	00115$
      0003EC                       1888 00107$:
                                   1889 ;	nrf24l01.c:202: } else { return RECEIVE_FIFO_EMPTY; }
      0003EC 75 82 02         [24] 1890 	mov	dpl,#0x02
      0003EF 80 03            [24] 1891 	sjmp	00115$
      0003F1                       1892 00110$:
                                   1893 ;	nrf24l01.c:204: } else { return OPERATION_ERROR; }
      0003F1 75 82 00         [24] 1894 	mov	dpl,#0x00
      0003F4                       1895 00115$:
                                   1896 ;	nrf24l01.c:206: }
      0003F4 D0*00            [24] 1897 	pop	_bp
      0003F6 22               [24] 1898 	ret
                                   1899 ;------------------------------------------------------------
                                   1900 ;Allocation info for local variables in function 'nrf24_flush'
                                   1901 ;------------------------------------------------------------
                                   1902 ;fifo_select               Allocated with name '_nrf24_flush_fifo_select_65536_172'
                                   1903 ;------------------------------------------------------------
                                   1904 ;	nrf24l01.c:210: uint8_t nrf24_flush(uint8_t fifo_select)
                                   1905 ;	-----------------------------------------
                                   1906 ;	 function nrf24_flush
                                   1907 ;	-----------------------------------------
      0003F7                       1908 _nrf24_flush:
      0003F7 E5 82            [12] 1909 	mov	a,dpl
      0003F9 90r00r18         [24] 1910 	mov	dptr,#_nrf24_flush_fifo_select_65536_172
      0003FC F0               [24] 1911 	movx	@dptr,a
                                   1912 ;	nrf24l01.c:212: switch (fifo_select) {
      0003FD E0               [24] 1913 	movx	a,@dptr
      0003FE FF               [12] 1914 	mov	r7,a
      0003FF 60 2B            [24] 1915 	jz	00105$
      000401 BF 01 50         [24] 1916 	cjne	r7,#0x01,00109$
                                   1917 ;	nrf24l01.c:214: if (current_mode == PTX) {
      000404 90r00r1C         [24] 1918 	mov	dptr,#_current_mode
      000407 E0               [24] 1919 	movx	a,@dptr
      000408 FF               [12] 1920 	mov	r7,a
      000409 BF 03 1C         [24] 1921 	cjne	r7,#0x03,00103$
                                   1922 ;	nrf24l01.c:215: nrf24_SPI(SPI_ON);
      00040C 75 82 00         [24] 1923 	mov	dpl,#0x00
      00040F 12r00r7E         [24] 1924 	lcall	_nrf24_SPI
                                   1925 ;	nrf24l01.c:216: SPI_command = FLUSH_TX;
      000412 90r00r01         [24] 1926 	mov	dptr,#_SPI_command
      000415 74 E1            [12] 1927 	mov	a,#0xe1
      000417 F0               [24] 1928 	movx	@dptr,a
                                   1929 ;	nrf24l01.c:217: SPI_send_command(SPI_command);
      000418 75 82 E1         [24] 1930 	mov	dpl,#0xe1
      00041B 12r00r92         [24] 1931 	lcall	_SPI_send_command
                                   1932 ;	nrf24l01.c:218: nrf24_SPI(SPI_OFF);
      00041E 75 82 01         [24] 1933 	mov	dpl,#0x01
      000421 12r00r7E         [24] 1934 	lcall	_nrf24_SPI
                                   1935 ;	nrf24l01.c:219: return OPERATION_DONE;
      000424 75 82 01         [24] 1936 	mov	dpl,#0x01
      000427 22               [24] 1937 	ret
      000428                       1938 00103$:
                                   1939 ;	nrf24l01.c:222: return OPERATION_ERROR;
      000428 75 82 00         [24] 1940 	mov	dpl,#0x00
                                   1941 ;	nrf24l01.c:224: case RX_BUFFER:
      00042B 22               [24] 1942 	ret
      00042C                       1943 00105$:
                                   1944 ;	nrf24l01.c:225: if (current_mode == PRX) {
      00042C 90r00r1C         [24] 1945 	mov	dptr,#_current_mode
      00042F E0               [24] 1946 	movx	a,@dptr
      000430 FF               [12] 1947 	mov	r7,a
      000431 BF 04 1C         [24] 1948 	cjne	r7,#0x04,00107$
                                   1949 ;	nrf24l01.c:226: nrf24_SPI(SPI_ON);
      000434 75 82 00         [24] 1950 	mov	dpl,#0x00
      000437 12r00r7E         [24] 1951 	lcall	_nrf24_SPI
                                   1952 ;	nrf24l01.c:227: SPI_command = FLUSH_RX;
      00043A 90r00r01         [24] 1953 	mov	dptr,#_SPI_command
      00043D 74 E2            [12] 1954 	mov	a,#0xe2
      00043F F0               [24] 1955 	movx	@dptr,a
                                   1956 ;	nrf24l01.c:228: SPI_send_command(SPI_command);
      000440 75 82 E2         [24] 1957 	mov	dpl,#0xe2
      000443 12r00r92         [24] 1958 	lcall	_SPI_send_command
                                   1959 ;	nrf24l01.c:229: nrf24_SPI(SPI_OFF);
      000446 75 82 01         [24] 1960 	mov	dpl,#0x01
      000449 12r00r7E         [24] 1961 	lcall	_nrf24_SPI
                                   1962 ;	nrf24l01.c:230: return OPERATION_DONE;
      00044C 75 82 01         [24] 1963 	mov	dpl,#0x01
      00044F 22               [24] 1964 	ret
      000450                       1965 00107$:
                                   1966 ;	nrf24l01.c:233: return OPERATION_ERROR;
      000450 75 82 00         [24] 1967 	mov	dpl,#0x00
                                   1968 ;	nrf24l01.c:236: default:
      000453 22               [24] 1969 	ret
      000454                       1970 00109$:
                                   1971 ;	nrf24l01.c:237: return OPERATION_ERROR;
      000454 75 82 00         [24] 1972 	mov	dpl,#0x00
                                   1973 ;	nrf24l01.c:238: }
                                   1974 ;	nrf24l01.c:239: }
      000457 22               [24] 1975 	ret
                                   1976 ;------------------------------------------------------------
                                   1977 ;Allocation info for local variables in function 'nrf24_reset'
                                   1978 ;------------------------------------------------------------
                                   1979 ;	nrf24l01.c:242: void nrf24_reset(void) {
                                   1980 ;	-----------------------------------------
                                   1981 ;	 function nrf24_reset
                                   1982 ;	-----------------------------------------
      000458                       1983 _nrf24_reset:
                                   1984 ;	nrf24l01.c:243: reset_flag = 1;
      000458 90r00r1B         [24] 1985 	mov	dptr,#_reset_flag
      00045B 74 01            [12] 1986 	mov	a,#0x01
      00045D F0               [24] 1987 	movx	@dptr,a
                                   1988 ;	nrf24l01.c:244: nrf24_CE(CE_OFF);
      00045E 75 82 00         [24] 1989 	mov	dpl,#0x00
      000461 12r00rC4         [24] 1990 	lcall	_nrf24_CE
                                   1991 ;	nrf24l01.c:245: register_new_value = CONFIG_REGISTER_DEFAULT;
      000464 90r00r03         [24] 1992 	mov	dptr,#_register_new_value
      000467 74 08            [12] 1993 	mov	a,#0x08
      000469 F0               [24] 1994 	movx	@dptr,a
                                   1995 ;	nrf24l01.c:246: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      00046A 90r00r3E         [24] 1996 	mov	dptr,#_nrf24_write_PARM_2
      00046D 74r03            [12] 1997 	mov	a,#_register_new_value
      00046F F0               [24] 1998 	movx	@dptr,a
      000470 74s00            [12] 1999 	mov	a,#(_register_new_value >> 8)
      000472 A3               [24] 2000 	inc	dptr
      000473 F0               [24] 2001 	movx	@dptr,a
      000474 E4               [12] 2002 	clr	a
      000475 A3               [24] 2003 	inc	dptr
      000476 F0               [24] 2004 	movx	@dptr,a
      000477 90r00r41         [24] 2005 	mov	dptr,#_nrf24_write_PARM_3
      00047A 04               [12] 2006 	inc	a
      00047B F0               [24] 2007 	movx	@dptr,a
      00047C 90r00r42         [24] 2008 	mov	dptr,#_nrf24_write_PARM_4
      00047F E4               [12] 2009 	clr	a
      000480 F0               [24] 2010 	movx	@dptr,a
      000481 75 82 00         [24] 2011 	mov	dpl,#0x00
      000484 12r0FrB4         [24] 2012 	lcall	_nrf24_write
                                   2013 ;	nrf24l01.c:247: register_new_value = EN_AA_REGISTER_DEFAULT;
      000487 90r00r03         [24] 2014 	mov	dptr,#_register_new_value
      00048A 74 3F            [12] 2015 	mov	a,#0x3f
      00048C F0               [24] 2016 	movx	@dptr,a
                                   2017 ;	nrf24l01.c:248: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      00048D 90r00r3E         [24] 2018 	mov	dptr,#_nrf24_write_PARM_2
      000490 74r03            [12] 2019 	mov	a,#_register_new_value
      000492 F0               [24] 2020 	movx	@dptr,a
      000493 74s00            [12] 2021 	mov	a,#(_register_new_value >> 8)
      000495 A3               [24] 2022 	inc	dptr
      000496 F0               [24] 2023 	movx	@dptr,a
      000497 E4               [12] 2024 	clr	a
      000498 A3               [24] 2025 	inc	dptr
      000499 F0               [24] 2026 	movx	@dptr,a
      00049A 90r00r41         [24] 2027 	mov	dptr,#_nrf24_write_PARM_3
      00049D 04               [12] 2028 	inc	a
      00049E F0               [24] 2029 	movx	@dptr,a
      00049F 90r00r42         [24] 2030 	mov	dptr,#_nrf24_write_PARM_4
      0004A2 E4               [12] 2031 	clr	a
      0004A3 F0               [24] 2032 	movx	@dptr,a
      0004A4 75 82 01         [24] 2033 	mov	dpl,#0x01
      0004A7 12r0FrB4         [24] 2034 	lcall	_nrf24_write
                                   2035 ;	nrf24l01.c:249: register_new_value = EN_RXADDR_REGISTER_DEFAULT;
      0004AA 90r00r03         [24] 2036 	mov	dptr,#_register_new_value
      0004AD E4               [12] 2037 	clr	a
      0004AE F0               [24] 2038 	movx	@dptr,a
                                   2039 ;	nrf24l01.c:250: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0004AF 90r00r3E         [24] 2040 	mov	dptr,#_nrf24_write_PARM_2
      0004B2 74r03            [12] 2041 	mov	a,#_register_new_value
      0004B4 F0               [24] 2042 	movx	@dptr,a
      0004B5 74s00            [12] 2043 	mov	a,#(_register_new_value >> 8)
      0004B7 A3               [24] 2044 	inc	dptr
      0004B8 F0               [24] 2045 	movx	@dptr,a
      0004B9 E4               [12] 2046 	clr	a
      0004BA A3               [24] 2047 	inc	dptr
      0004BB F0               [24] 2048 	movx	@dptr,a
      0004BC 90r00r41         [24] 2049 	mov	dptr,#_nrf24_write_PARM_3
      0004BF 04               [12] 2050 	inc	a
      0004C0 F0               [24] 2051 	movx	@dptr,a
      0004C1 90r00r42         [24] 2052 	mov	dptr,#_nrf24_write_PARM_4
      0004C4 E4               [12] 2053 	clr	a
      0004C5 F0               [24] 2054 	movx	@dptr,a
      0004C6 75 82 02         [24] 2055 	mov	dpl,#0x02
      0004C9 12r0FrB4         [24] 2056 	lcall	_nrf24_write
                                   2057 ;	nrf24l01.c:251: register_new_value = SETUP_AW_REGISTER_DEFAULT;
      0004CC 90r00r03         [24] 2058 	mov	dptr,#_register_new_value
      0004CF 74 03            [12] 2059 	mov	a,#0x03
      0004D1 F0               [24] 2060 	movx	@dptr,a
                                   2061 ;	nrf24l01.c:252: nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
      0004D2 90r00r3E         [24] 2062 	mov	dptr,#_nrf24_write_PARM_2
      0004D5 74r03            [12] 2063 	mov	a,#_register_new_value
      0004D7 F0               [24] 2064 	movx	@dptr,a
      0004D8 74s00            [12] 2065 	mov	a,#(_register_new_value >> 8)
      0004DA A3               [24] 2066 	inc	dptr
      0004DB F0               [24] 2067 	movx	@dptr,a
      0004DC E4               [12] 2068 	clr	a
      0004DD A3               [24] 2069 	inc	dptr
      0004DE F0               [24] 2070 	movx	@dptr,a
      0004DF 90r00r41         [24] 2071 	mov	dptr,#_nrf24_write_PARM_3
      0004E2 04               [12] 2072 	inc	a
      0004E3 F0               [24] 2073 	movx	@dptr,a
      0004E4 90r00r42         [24] 2074 	mov	dptr,#_nrf24_write_PARM_4
      0004E7 E4               [12] 2075 	clr	a
      0004E8 F0               [24] 2076 	movx	@dptr,a
      0004E9 75 82 03         [24] 2077 	mov	dpl,#0x03
      0004EC 12r0FrB4         [24] 2078 	lcall	_nrf24_write
                                   2079 ;	nrf24l01.c:253: register_new_value = RF_CH_REGISTER_DEFAULT;
      0004EF 90r00r03         [24] 2080 	mov	dptr,#_register_new_value
      0004F2 74 02            [12] 2081 	mov	a,#0x02
      0004F4 F0               [24] 2082 	movx	@dptr,a
                                   2083 ;	nrf24l01.c:254: nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
      0004F5 90r00r3E         [24] 2084 	mov	dptr,#_nrf24_write_PARM_2
      0004F8 74r03            [12] 2085 	mov	a,#_register_new_value
      0004FA F0               [24] 2086 	movx	@dptr,a
      0004FB 74s00            [12] 2087 	mov	a,#(_register_new_value >> 8)
      0004FD A3               [24] 2088 	inc	dptr
      0004FE F0               [24] 2089 	movx	@dptr,a
      0004FF E4               [12] 2090 	clr	a
      000500 A3               [24] 2091 	inc	dptr
      000501 F0               [24] 2092 	movx	@dptr,a
      000502 90r00r41         [24] 2093 	mov	dptr,#_nrf24_write_PARM_3
      000505 04               [12] 2094 	inc	a
      000506 F0               [24] 2095 	movx	@dptr,a
      000507 90r00r42         [24] 2096 	mov	dptr,#_nrf24_write_PARM_4
      00050A E4               [12] 2097 	clr	a
      00050B F0               [24] 2098 	movx	@dptr,a
      00050C 75 82 05         [24] 2099 	mov	dpl,#0x05
      00050F 12r0FrB4         [24] 2100 	lcall	_nrf24_write
                                   2101 ;	nrf24l01.c:255: register_new_value = RF_SETUP_REGISTER_DEFAULT;
      000512 90r00r03         [24] 2102 	mov	dptr,#_register_new_value
      000515 74 27            [12] 2103 	mov	a,#0x27
      000517 F0               [24] 2104 	movx	@dptr,a
                                   2105 ;	nrf24l01.c:256: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000518 90r00r3E         [24] 2106 	mov	dptr,#_nrf24_write_PARM_2
      00051B 74r03            [12] 2107 	mov	a,#_register_new_value
      00051D F0               [24] 2108 	movx	@dptr,a
      00051E 74s00            [12] 2109 	mov	a,#(_register_new_value >> 8)
      000520 A3               [24] 2110 	inc	dptr
      000521 F0               [24] 2111 	movx	@dptr,a
      000522 E4               [12] 2112 	clr	a
      000523 A3               [24] 2113 	inc	dptr
      000524 F0               [24] 2114 	movx	@dptr,a
      000525 90r00r41         [24] 2115 	mov	dptr,#_nrf24_write_PARM_3
      000528 04               [12] 2116 	inc	a
      000529 F0               [24] 2117 	movx	@dptr,a
      00052A 90r00r42         [24] 2118 	mov	dptr,#_nrf24_write_PARM_4
      00052D E4               [12] 2119 	clr	a
      00052E F0               [24] 2120 	movx	@dptr,a
      00052F 75 82 06         [24] 2121 	mov	dpl,#0x06
      000532 12r0FrB4         [24] 2122 	lcall	_nrf24_write
                                   2123 ;	nrf24l01.c:257: register_new_value = STATUS_REGISTER_DEFAULT;
      000535 90r00r03         [24] 2124 	mov	dptr,#_register_new_value
      000538 74 0E            [12] 2125 	mov	a,#0x0e
      00053A F0               [24] 2126 	movx	@dptr,a
                                   2127 ;	nrf24l01.c:258: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      00053B 90r00r3E         [24] 2128 	mov	dptr,#_nrf24_write_PARM_2
      00053E 74r03            [12] 2129 	mov	a,#_register_new_value
      000540 F0               [24] 2130 	movx	@dptr,a
      000541 74s00            [12] 2131 	mov	a,#(_register_new_value >> 8)
      000543 A3               [24] 2132 	inc	dptr
      000544 F0               [24] 2133 	movx	@dptr,a
      000545 E4               [12] 2134 	clr	a
      000546 A3               [24] 2135 	inc	dptr
      000547 F0               [24] 2136 	movx	@dptr,a
      000548 90r00r41         [24] 2137 	mov	dptr,#_nrf24_write_PARM_3
      00054B 04               [12] 2138 	inc	a
      00054C F0               [24] 2139 	movx	@dptr,a
      00054D 90r00r42         [24] 2140 	mov	dptr,#_nrf24_write_PARM_4
      000550 E4               [12] 2141 	clr	a
      000551 F0               [24] 2142 	movx	@dptr,a
      000552 75 82 07         [24] 2143 	mov	dpl,#0x07
      000555 12r0FrB4         [24] 2144 	lcall	_nrf24_write
                                   2145 ;	nrf24l01.c:265: nrf24_mode(PTX);
      000558 75 82 03         [24] 2146 	mov	dpl,#0x03
      00055B 12r0Er31         [24] 2147 	lcall	_nrf24_mode
                                   2148 ;	nrf24l01.c:266: nrf24_flush(TX_BUFFER);
      00055E 75 82 01         [24] 2149 	mov	dpl,#0x01
      000561 12r03rF7         [24] 2150 	lcall	_nrf24_flush
                                   2151 ;	nrf24l01.c:267: nrf24_mode(PRX);
      000564 75 82 04         [24] 2152 	mov	dpl,#0x04
      000567 12r0Er31         [24] 2153 	lcall	_nrf24_mode
                                   2154 ;	nrf24l01.c:268: nrf24_flush(RX_BUFFER);
      00056A 75 82 00         [24] 2155 	mov	dpl,#0x00
      00056D 12r03rF7         [24] 2156 	lcall	_nrf24_flush
                                   2157 ;	nrf24l01.c:270: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      000570 90r00r38         [24] 2158 	mov	dptr,#_nrf24_read_PARM_2
      000573 74r02            [12] 2159 	mov	a,#_register_current_value
      000575 F0               [24] 2160 	movx	@dptr,a
      000576 74s00            [12] 2161 	mov	a,#(_register_current_value >> 8)
      000578 A3               [24] 2162 	inc	dptr
      000579 F0               [24] 2163 	movx	@dptr,a
      00057A E4               [12] 2164 	clr	a
      00057B A3               [24] 2165 	inc	dptr
      00057C F0               [24] 2166 	movx	@dptr,a
      00057D 90r00r3B         [24] 2167 	mov	dptr,#_nrf24_read_PARM_3
      000580 04               [12] 2168 	inc	a
      000581 F0               [24] 2169 	movx	@dptr,a
      000582 90r00r3C         [24] 2170 	mov	dptr,#_nrf24_read_PARM_4
      000585 E4               [12] 2171 	clr	a
      000586 F0               [24] 2172 	movx	@dptr,a
      000587 75 82 07         [24] 2173 	mov	dpl,#0x07
      00058A 12r0Fr48         [24] 2174 	lcall	_nrf24_read
                                   2175 ;	nrf24l01.c:271: register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
      00058D 90r00r02         [24] 2176 	mov	dptr,#_register_current_value
      000590 E0               [24] 2177 	movx	a,@dptr
      000591 90r00r03         [24] 2178 	mov	dptr,#_register_new_value
      000594 44 70            [12] 2179 	orl	a,#0x70
      000596 F0               [24] 2180 	movx	@dptr,a
                                   2181 ;	nrf24l01.c:272: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      000597 90r00r3E         [24] 2182 	mov	dptr,#_nrf24_write_PARM_2
      00059A 74r03            [12] 2183 	mov	a,#_register_new_value
      00059C F0               [24] 2184 	movx	@dptr,a
      00059D 74s00            [12] 2185 	mov	a,#(_register_new_value >> 8)
      00059F A3               [24] 2186 	inc	dptr
      0005A0 F0               [24] 2187 	movx	@dptr,a
      0005A1 E4               [12] 2188 	clr	a
      0005A2 A3               [24] 2189 	inc	dptr
      0005A3 F0               [24] 2190 	movx	@dptr,a
      0005A4 90r00r41         [24] 2191 	mov	dptr,#_nrf24_write_PARM_3
      0005A7 04               [12] 2192 	inc	a
      0005A8 F0               [24] 2193 	movx	@dptr,a
      0005A9 90r00r42         [24] 2194 	mov	dptr,#_nrf24_write_PARM_4
      0005AC E4               [12] 2195 	clr	a
      0005AD F0               [24] 2196 	movx	@dptr,a
      0005AE 75 82 07         [24] 2197 	mov	dpl,#0x07
      0005B1 12r0FrB4         [24] 2198 	lcall	_nrf24_write
                                   2199 ;	nrf24l01.c:275: nrf24_crc_configuration(ENABLE, 2);
      0005B4 90r00r35         [24] 2200 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      0005B7 74 02            [12] 2201 	mov	a,#0x02
      0005B9 F0               [24] 2202 	movx	@dptr,a
      0005BA 75 82 01         [24] 2203 	mov	dpl,#0x01
      0005BD 12r0DrBD         [24] 2204 	lcall	_nrf24_crc_configuration
                                   2205 ;	nrf24l01.c:276: nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
      0005C0 75 82 05         [24] 2206 	mov	dpl,#0x05
      0005C3 12r0Br6C         [24] 2207 	lcall	_nrf24_address_width
                                   2208 ;	nrf24l01.c:279: nrf24_rf_channel(RF_CHANNEL_DEFAULT);
      0005C6 75 82 2E         [24] 2209 	mov	dpl,#0x2e
      0005C9 12r0CrDD         [24] 2210 	lcall	_nrf24_rf_channel
                                   2211 ;	nrf24l01.c:280: nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
      0005CC 75 82 02         [24] 2212 	mov	dpl,#0x02
      0005CF 12r0Br35         [24] 2213 	lcall	_nrf24_datapipe_enable
                                   2214 ;	nrf24l01.c:281: nrf24_datapipe_address_configuration();  // I uncommented it
      0005D2 12r0ArB0         [24] 2215 	lcall	_nrf24_datapipe_address_configuration
                                   2216 ;	nrf24l01.c:282: nrf24_datapipe_ptx(1);  // I uncommented it
      0005D5 75 82 01         [24] 2217 	mov	dpl,#0x01
      0005D8 12r0Ar62         [24] 2218 	lcall	_nrf24_datapipe_ptx
                                   2219 ;	nrf24l01.c:283: nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
      0005DB 90r00r28         [24] 2220 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      0005DE 74 02            [12] 2221 	mov	a,#0x02
      0005E0 F0               [24] 2222 	movx	@dptr,a
      0005E1 75 82 10         [24] 2223 	mov	dpl,#0x10
      0005E4 12r0ArF4         [24] 2224 	lcall	_nrf24_prx_static_payload_width
                                   2225 ;	nrf24l01.c:284: nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
      0005E7 90r00r21         [24] 2226 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      0005EA 74 08            [12] 2227 	mov	a,#0x08
      0005EC F0               [24] 2228 	movx	@dptr,a
      0005ED 90 06 D6         [24] 2229 	mov	dptr,#0x06d6
      0005F0 12r08rE1         [24] 2230 	lcall	_nrf24_automatic_retransmit_setup
                                   2231 ;	nrf24l01.c:285: nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
      0005F3 75 82 02         [24] 2232 	mov	dpl,#0x02
      0005F6 12r09r5A         [24] 2233 	lcall	_nrf24_auto_acknowledgment_setup
                                   2234 ;	nrf24l01.c:286: nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
      0005F9 90r00r25         [24] 2235 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      0005FC 74 02            [12] 2236 	mov	a,#0x02
      0005FE F0               [24] 2237 	movx	@dptr,a
      0005FF 75 82 00         [24] 2238 	mov	dpl,#0x00
      000602 12r09r96         [24] 2239 	lcall	_nrf24_dynamic_payload
                                   2240 ;	nrf24l01.c:287: nrf24_dynamic_ack(DISABLE);
      000605 75 82 00         [24] 2241 	mov	dpl,#0x00
                                   2242 ;	nrf24l01.c:289: }
      000608 02r00rD8         [24] 2243 	ljmp	_nrf24_dynamic_ack
                                   2244 ;------------------------------------------------------------
                                   2245 ;Allocation info for local variables in function 'nrf24_device'
                                   2246 ;------------------------------------------------------------
                                   2247 ;reset_state               Allocated with name '_nrf24_device_PARM_2'
                                   2248 ;device_mode               Allocated with name '_nrf24_device_device_mode_65536_181'
                                   2249 ;new_value                 Allocated with name '_nrf24_device_new_value_65537_184'
                                   2250 ;------------------------------------------------------------
                                   2251 ;	nrf24l01.c:294: void nrf24_device(uint8_t device_mode, uint8_t reset_state)
                                   2252 ;	-----------------------------------------
                                   2253 ;	 function nrf24_device
                                   2254 ;	-----------------------------------------
      00060B                       2255 _nrf24_device:
      00060B E5 82            [12] 2256 	mov	a,dpl
      00060D 90r00r1A         [24] 2257 	mov	dptr,#_nrf24_device_device_mode_65536_181
      000610 F0               [24] 2258 	movx	@dptr,a
                                   2259 ;	nrf24l01.c:296: if(!hardwareCheckPassed) {
      000611 90r00r1F         [24] 2260 	mov	dptr,#_hardwareCheckPassed
      000614 E0               [24] 2261 	movx	a,@dptr
      000615 70 0F            [24] 2262 	jnz	00102$
                                   2263 ;	nrf24l01.c:297: SPI_Initializer();
      000617 12r00r28         [24] 2264 	lcall	_SPI_Initializer
                                   2265 ;	nrf24l01.c:298: pinout_Initializer();
      00061A 12r00r4F         [24] 2266 	lcall	_pinout_Initializer
                                   2267 ;	nrf24l01.c:299: delay_function(STARTUP_DELAY);
      00061D 90 00 96         [24] 2268 	mov	dptr,#(0x96&0x00ff)
      000620 E4               [12] 2269 	clr	a
      000621 F5 F0            [12] 2270 	mov	b,a
      000623 12r00r00         [24] 2271 	lcall	_delay_function
      000626                       2272 00102$:
                                   2273 ;	nrf24l01.c:301: nrf24_CE(CE_OFF);
      000626 75 82 00         [24] 2274 	mov	dpl,#0x00
      000629 12r00rC4         [24] 2275 	lcall	_nrf24_CE
                                   2276 ;	nrf24l01.c:305: while (!hardwareCheckPassed) {
      00062C                       2277 00106$:
      00062C 90r00r1F         [24] 2278 	mov	dptr,#_hardwareCheckPassed
      00062F E0               [24] 2279 	movx	a,@dptr
      000630 60 03            [24] 2280 	jz	00145$
      000632 02r06rCD         [24] 2281 	ljmp	00108$
      000635                       2282 00145$:
                                   2283 ;	nrf24l01.c:307: nrf24_read(HARDWARE_TEST_REGISTER, &register_current_value, 1, CLOSE);
      000635 90r00r38         [24] 2284 	mov	dptr,#_nrf24_read_PARM_2
      000638 74r02            [12] 2285 	mov	a,#_register_current_value
      00063A F0               [24] 2286 	movx	@dptr,a
      00063B 74s00            [12] 2287 	mov	a,#(_register_current_value >> 8)
      00063D A3               [24] 2288 	inc	dptr
      00063E F0               [24] 2289 	movx	@dptr,a
      00063F E4               [12] 2290 	clr	a
      000640 A3               [24] 2291 	inc	dptr
      000641 F0               [24] 2292 	movx	@dptr,a
      000642 90r00r3B         [24] 2293 	mov	dptr,#_nrf24_read_PARM_3
      000645 04               [12] 2294 	inc	a
      000646 F0               [24] 2295 	movx	@dptr,a
      000647 90r00r3C         [24] 2296 	mov	dptr,#_nrf24_read_PARM_4
      00064A E4               [12] 2297 	clr	a
      00064B F0               [24] 2298 	movx	@dptr,a
      00064C 75 82 00         [24] 2299 	mov	dpl,#0x00
      00064F 12r0Fr48         [24] 2300 	lcall	_nrf24_read
                                   2301 ;	nrf24l01.c:313: new_value = register_current_value+3;
      000652 90r00r02         [24] 2302 	mov	dptr,#_register_current_value
      000655 E0               [24] 2303 	movx	a,@dptr
      000656 FF               [12] 2304 	mov	r7,a
      000657 0F               [12] 2305 	inc	r7
      000658 0F               [12] 2306 	inc	r7
      000659 0F               [12] 2307 	inc	r7
      00065A 90r00r1B         [24] 2308 	mov	dptr,#_nrf24_device_new_value_65537_184
      00065D EF               [12] 2309 	mov	a,r7
      00065E F0               [24] 2310 	movx	@dptr,a
                                   2311 ;	nrf24l01.c:314: register_new_value = new_value;
      00065F 90r00r03         [24] 2312 	mov	dptr,#_register_new_value
      000662 EF               [12] 2313 	mov	a,r7
      000663 F0               [24] 2314 	movx	@dptr,a
                                   2315 ;	nrf24l01.c:315: nrf24_write(HARDWARE_TEST_REGISTER, &register_new_value, 1, CLOSE); // restarts the nrf?!?!? where is requires two read calls to return 8 again
      000664 90r00r3E         [24] 2316 	mov	dptr,#_nrf24_write_PARM_2
      000667 74r03            [12] 2317 	mov	a,#_register_new_value
      000669 F0               [24] 2318 	movx	@dptr,a
      00066A 74s00            [12] 2319 	mov	a,#(_register_new_value >> 8)
      00066C A3               [24] 2320 	inc	dptr
      00066D F0               [24] 2321 	movx	@dptr,a
      00066E E4               [12] 2322 	clr	a
      00066F A3               [24] 2323 	inc	dptr
      000670 F0               [24] 2324 	movx	@dptr,a
      000671 90r00r41         [24] 2325 	mov	dptr,#_nrf24_write_PARM_3
      000674 04               [12] 2326 	inc	a
      000675 F0               [24] 2327 	movx	@dptr,a
      000676 90r00r42         [24] 2328 	mov	dptr,#_nrf24_write_PARM_4
      000679 E4               [12] 2329 	clr	a
      00067A F0               [24] 2330 	movx	@dptr,a
      00067B 75 82 00         [24] 2331 	mov	dpl,#0x00
      00067E 12r0FrB4         [24] 2332 	lcall	_nrf24_write
                                   2333 ;	nrf24l01.c:321: nrf24_read(HARDWARE_TEST_REGISTER, &register_current_value, 1, CLOSE);
      000681 90r00r38         [24] 2334 	mov	dptr,#_nrf24_read_PARM_2
      000684 74r02            [12] 2335 	mov	a,#_register_current_value
      000686 F0               [24] 2336 	movx	@dptr,a
      000687 74s00            [12] 2337 	mov	a,#(_register_current_value >> 8)
      000689 A3               [24] 2338 	inc	dptr
      00068A F0               [24] 2339 	movx	@dptr,a
      00068B E4               [12] 2340 	clr	a
      00068C A3               [24] 2341 	inc	dptr
      00068D F0               [24] 2342 	movx	@dptr,a
      00068E 90r00r3B         [24] 2343 	mov	dptr,#_nrf24_read_PARM_3
      000691 04               [12] 2344 	inc	a
      000692 F0               [24] 2345 	movx	@dptr,a
      000693 90r00r3C         [24] 2346 	mov	dptr,#_nrf24_read_PARM_4
      000696 E4               [12] 2347 	clr	a
      000697 F0               [24] 2348 	movx	@dptr,a
      000698 75 82 00         [24] 2349 	mov	dpl,#0x00
      00069B 12r0Fr48         [24] 2350 	lcall	_nrf24_read
                                   2351 ;	nrf24l01.c:326: if (register_current_value == new_value) {
      00069E 90r00r02         [24] 2352 	mov	dptr,#_register_current_value
      0006A1 E0               [24] 2353 	movx	a,@dptr
      0006A2 FF               [12] 2354 	mov	r7,a
      0006A3 90r00r1B         [24] 2355 	mov	dptr,#_nrf24_device_new_value_65537_184
      0006A6 E0               [24] 2356 	movx	a,@dptr
      0006A7 FE               [12] 2357 	mov	r6,a
      0006A8 EF               [12] 2358 	mov	a,r7
      0006A9 B5 06 09         [24] 2359 	cjne	a,ar6,00104$
                                   2360 ;	nrf24l01.c:330: hardwareCheckPassed = true;
      0006AC 90r00r1F         [24] 2361 	mov	dptr,#_hardwareCheckPassed
      0006AF 74 01            [12] 2362 	mov	a,#0x01
      0006B1 F0               [24] 2363 	movx	@dptr,a
      0006B2 02r06r2C         [24] 2364 	ljmp	00106$
      0006B5                       2365 00104$:
                                   2366 ;	nrf24l01.c:332: printf("\rnrf24l01 Failed to Initialize:\nRead value doesn't match the newly written value ;(\n");
      0006B5 74r00            [12] 2367 	mov	a,#___str_0
      0006B7 C0 E0            [24] 2368 	push	acc
      0006B9 74s00            [12] 2369 	mov	a,#(___str_0 >> 8)
      0006BB C0 E0            [24] 2370 	push	acc
      0006BD 74 80            [12] 2371 	mov	a,#0x80
      0006BF C0 E0            [24] 2372 	push	acc
      0006C1 12r00r00         [24] 2373 	lcall	_printf
      0006C4 15 81            [12] 2374 	dec	sp
      0006C6 15 81            [12] 2375 	dec	sp
      0006C8 15 81            [12] 2376 	dec	sp
      0006CA 02r06r2C         [24] 2377 	ljmp	00106$
      0006CD                       2378 00108$:
                                   2379 ;	nrf24l01.c:338: if ((reset_state == RESET) || (reset_flag == 0)) {
      0006CD 90r00r19         [24] 2380 	mov	dptr,#_nrf24_device_PARM_2
      0006D0 E0               [24] 2381 	movx	a,@dptr
      0006D1 FF               [12] 2382 	mov	r7,a
      0006D2 BF 01 02         [24] 2383 	cjne	r7,#0x01,00148$
      0006D5 80 06            [24] 2384 	sjmp	00109$
      0006D7                       2385 00148$:
      0006D7 90r00r1B         [24] 2386 	mov	dptr,#_reset_flag
      0006DA E0               [24] 2387 	movx	a,@dptr
      0006DB 70 03            [24] 2388 	jnz	00110$
      0006DD                       2389 00109$:
                                   2390 ;	nrf24l01.c:339: nrf24_reset();
      0006DD 12r04r58         [24] 2391 	lcall	_nrf24_reset
      0006E0                       2392 00110$:
                                   2393 ;	nrf24l01.c:342: switch (device_mode) {
      0006E0 90r00r1A         [24] 2394 	mov	dptr,#_nrf24_device_device_mode_65536_181
      0006E3 E0               [24] 2395 	movx	a,@dptr
      0006E4 FF               [12] 2396 	mov  r7,a
      0006E5 24 FC            [12] 2397 	add	a,#0xff - 0x03
      0006E7 40 38            [24] 2398 	jc	00116$
      0006E9 EF               [12] 2399 	mov	a,r7
      0006EA 2F               [12] 2400 	add	a,r7
                                   2401 ;	nrf24l01.c:343: case TRANSMITTER:
      0006EB 90r06rEF         [24] 2402 	mov	dptr,#00151$
      0006EE 73               [24] 2403 	jmp	@a+dptr
      0006EF                       2404 00151$:
      0006EF 80 06            [24] 2405 	sjmp	00112$
      0006F1 80 10            [24] 2406 	sjmp	00113$
      0006F3 80 1A            [24] 2407 	sjmp	00114$
      0006F5 80 24            [24] 2408 	sjmp	00115$
      0006F7                       2409 00112$:
                                   2410 ;	nrf24l01.c:344: nrf24_mode(POWER_DOWN);
      0006F7 75 82 00         [24] 2411 	mov	dpl,#0x00
      0006FA 12r0Er31         [24] 2412 	lcall	_nrf24_mode
                                   2413 ;	nrf24l01.c:346: nrf24_mode(PTX);
      0006FD 75 82 03         [24] 2414 	mov	dpl,#0x03
                                   2415 ;	nrf24l01.c:347: break;
                                   2416 ;	nrf24l01.c:349: case RECEIVER:
      000700 02r0Er31         [24] 2417 	ljmp	_nrf24_mode
      000703                       2418 00113$:
                                   2419 ;	nrf24l01.c:350: nrf24_mode(POWER_DOWN);
      000703 75 82 00         [24] 2420 	mov	dpl,#0x00
      000706 12r0Er31         [24] 2421 	lcall	_nrf24_mode
                                   2422 ;	nrf24l01.c:352: nrf24_mode(PRX);
      000709 75 82 04         [24] 2423 	mov	dpl,#0x04
                                   2424 ;	nrf24l01.c:353: break;
                                   2425 ;	nrf24l01.c:355: case POWER_SAVING:
      00070C 02r0Er31         [24] 2426 	ljmp	_nrf24_mode
      00070F                       2427 00114$:
                                   2428 ;	nrf24l01.c:356: nrf24_mode(POWER_DOWN);
      00070F 75 82 00         [24] 2429 	mov	dpl,#0x00
      000712 12r0Er31         [24] 2430 	lcall	_nrf24_mode
                                   2431 ;	nrf24l01.c:358: nrf24_mode(STANDBYI);
      000715 75 82 01         [24] 2432 	mov	dpl,#0x01
                                   2433 ;	nrf24l01.c:359: break;
                                   2434 ;	nrf24l01.c:361: case TURN_OFF:
      000718 02r0Er31         [24] 2435 	ljmp	_nrf24_mode
      00071B                       2436 00115$:
                                   2437 ;	nrf24l01.c:362: nrf24_mode(POWER_DOWN);
      00071B 75 82 00         [24] 2438 	mov	dpl,#0x00
                                   2439 ;	nrf24l01.c:364: break;
                                   2440 ;	nrf24l01.c:366: default:
      00071E 02r0Er31         [24] 2441 	ljmp	_nrf24_mode
      000721                       2442 00116$:
                                   2443 ;	nrf24l01.c:367: nrf24_mode(POWER_DOWN);
      000721 75 82 00         [24] 2444 	mov	dpl,#0x00
                                   2445 ;	nrf24l01.c:370: }
                                   2446 ;	nrf24l01.c:376: }
      000724 02r0Er31         [24] 2447 	ljmp	_nrf24_mode
                                   2448 ;------------------------------------------------------------
                                   2449 ;Allocation info for local variables in function 'nrf24_print_internal_register_values'
                                   2450 ;------------------------------------------------------------
                                   2451 ;sloc0                     Allocated with name '_nrf24_print_internal_register_values_sloc0_1_0'
                                   2452 ;sloc1                     Allocated with name '_nrf24_print_internal_register_values_sloc1_1_0'
                                   2453 ;pipe_address              Allocated with name '_nrf24_print_internal_register_values_pipe_address_65536_191'
                                   2454 ;i                         Allocated with name '_nrf24_print_internal_register_values_i_131072_192'
                                   2455 ;------------------------------------------------------------
                                   2456 ;	nrf24l01.c:378: void nrf24_print_internal_register_values(void) {
                                   2457 ;	-----------------------------------------
                                   2458 ;	 function nrf24_print_internal_register_values
                                   2459 ;	-----------------------------------------
      000727                       2460 _nrf24_print_internal_register_values:
                                   2461 ;	nrf24l01.c:381: for (int i=0; i<24; i++) {
      000727 7E 00            [12] 2462 	mov	r6,#0x00
      000729 7F 00            [12] 2463 	mov	r7,#0x00
      00072B                       2464 00108$:
      00072B C3               [12] 2465 	clr	c
      00072C EE               [12] 2466 	mov	a,r6
      00072D 94 18            [12] 2467 	subb	a,#0x18
      00072F EF               [12] 2468 	mov	a,r7
      000730 64 80            [12] 2469 	xrl	a,#0x80
      000732 94 80            [12] 2470 	subb	a,#0x80
      000734 40 03            [24] 2471 	jc	00129$
      000736 02r08r45         [24] 2472 	ljmp	00106$
      000739                       2473 00129$:
                                   2474 ;	nrf24l01.c:382: if (i == 0x0a || i == 0x0b || i == 0x10) {
      000739 BE 0A 05         [24] 2475 	cjne	r6,#0x0a,00130$
      00073C BF 00 02         [24] 2476 	cjne	r7,#0x00,00130$
      00073F 80 13            [24] 2477 	sjmp	00101$
      000741                       2478 00130$:
      000741 BE 0B 05         [24] 2479 	cjne	r6,#0x0b,00131$
      000744 BF 00 02         [24] 2480 	cjne	r7,#0x00,00131$
      000747 80 0B            [24] 2481 	sjmp	00101$
      000749                       2482 00131$:
      000749 BE 10 05         [24] 2483 	cjne	r6,#0x10,00132$
      00074C BF 00 02         [24] 2484 	cjne	r7,#0x00,00132$
      00074F 80 03            [24] 2485 	sjmp	00133$
      000751                       2486 00132$:
      000751 02r07rDD         [24] 2487 	ljmp	00102$
      000754                       2488 00133$:
      000754                       2489 00101$:
                                   2490 ;	nrf24l01.c:383: nrf24_read(i, pipe_address, current_address_width, CLOSE);
      000754 8E 05            [24] 2491 	mov	ar5,r6
      000756 90r00r05         [24] 2492 	mov	dptr,#_current_address_width
      000759 E0               [24] 2493 	movx	a,@dptr
      00075A FC               [12] 2494 	mov	r4,a
      00075B 90r00r38         [24] 2495 	mov	dptr,#_nrf24_read_PARM_2
      00075E 74r1C            [12] 2496 	mov	a,#_nrf24_print_internal_register_values_pipe_address_65536_191
      000760 F0               [24] 2497 	movx	@dptr,a
      000761 74s00            [12] 2498 	mov	a,#(_nrf24_print_internal_register_values_pipe_address_65536_191 >> 8)
      000763 A3               [24] 2499 	inc	dptr
      000764 F0               [24] 2500 	movx	@dptr,a
      000765 E4               [12] 2501 	clr	a
      000766 A3               [24] 2502 	inc	dptr
      000767 F0               [24] 2503 	movx	@dptr,a
      000768 90r00r3B         [24] 2504 	mov	dptr,#_nrf24_read_PARM_3
      00076B EC               [12] 2505 	mov	a,r4
      00076C F0               [24] 2506 	movx	@dptr,a
      00076D 90r00r3C         [24] 2507 	mov	dptr,#_nrf24_read_PARM_4
      000770 E4               [12] 2508 	clr	a
      000771 F0               [24] 2509 	movx	@dptr,a
      000772 8D 82            [24] 2510 	mov	dpl,r5
      000774 C0 07            [24] 2511 	push	ar7
      000776 C0 06            [24] 2512 	push	ar6
      000778 12r0Fr48         [24] 2513 	lcall	_nrf24_read
      00077B D0 06            [24] 2514 	pop	ar6
      00077D D0 07            [24] 2515 	pop	ar7
                                   2516 ;	nrf24l01.c:384: printf("\rRegister 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\n",   i, \
      00077F 90r00r20         [24] 2517 	mov	dptr,#(_nrf24_print_internal_register_values_pipe_address_65536_191 + 0x0004)
      000782 E0               [24] 2518 	movx	a,@dptr
      000783 FD               [12] 2519 	mov	r5,a
      000784 7C 00            [12] 2520 	mov	r4,#0x00
      000786 90r00r1F         [24] 2521 	mov	dptr,#(_nrf24_print_internal_register_values_pipe_address_65536_191 + 0x0003)
      000789 E0               [24] 2522 	movx	a,@dptr
      00078A FB               [12] 2523 	mov	r3,a
      00078B 7A 00            [12] 2524 	mov	r2,#0x00
      00078D 90r00r1E         [24] 2525 	mov	dptr,#(_nrf24_print_internal_register_values_pipe_address_65536_191 + 0x0002)
      000790 E0               [24] 2526 	movx	a,@dptr
      000791 F9               [12] 2527 	mov	r1,a
      000792 89*00            [24] 2528 	mov	_nrf24_print_internal_register_values_sloc0_1_0,r1
                                   2529 ;	1-genFromRTrack replaced	mov	(_nrf24_print_internal_register_values_sloc0_1_0 + 1),#0x00
      000794 8C*01            [24] 2530 	mov	(_nrf24_print_internal_register_values_sloc0_1_0 + 1),r4
      000796 90r00r1D         [24] 2531 	mov	dptr,#(_nrf24_print_internal_register_values_pipe_address_65536_191 + 0x0001)
      000799 E0               [24] 2532 	movx	a,@dptr
      00079A F9               [12] 2533 	mov	r1,a
      00079B 89*02            [24] 2534 	mov	_nrf24_print_internal_register_values_sloc1_1_0,r1
                                   2535 ;	1-genFromRTrack replaced	mov	(_nrf24_print_internal_register_values_sloc1_1_0 + 1),#0x00
      00079D 8C*03            [24] 2536 	mov	(_nrf24_print_internal_register_values_sloc1_1_0 + 1),r4
      00079F 90r00r1C         [24] 2537 	mov	dptr,#_nrf24_print_internal_register_values_pipe_address_65536_191
      0007A2 E0               [24] 2538 	movx	a,@dptr
      0007A3 F8               [12] 2539 	mov	r0,a
      0007A4 79 00            [12] 2540 	mov	r1,#0x00
      0007A6 C0 07            [24] 2541 	push	ar7
      0007A8 C0 06            [24] 2542 	push	ar6
      0007AA C0 05            [24] 2543 	push	ar5
      0007AC C0 04            [24] 2544 	push	ar4
      0007AE C0 03            [24] 2545 	push	ar3
      0007B0 C0 02            [24] 2546 	push	ar2
      0007B2 C0*00            [24] 2547 	push	_nrf24_print_internal_register_values_sloc0_1_0
      0007B4 C0*01            [24] 2548 	push	(_nrf24_print_internal_register_values_sloc0_1_0 + 1)
      0007B6 C0*02            [24] 2549 	push	_nrf24_print_internal_register_values_sloc1_1_0
      0007B8 C0*03            [24] 2550 	push	(_nrf24_print_internal_register_values_sloc1_1_0 + 1)
      0007BA C0 00            [24] 2551 	push	ar0
      0007BC C0 01            [24] 2552 	push	ar1
      0007BE C0 06            [24] 2553 	push	ar6
      0007C0 C0 07            [24] 2554 	push	ar7
      0007C2 74r55            [12] 2555 	mov	a,#___str_1
      0007C4 C0 E0            [24] 2556 	push	acc
      0007C6 74s00            [12] 2557 	mov	a,#(___str_1 >> 8)
      0007C8 C0 E0            [24] 2558 	push	acc
      0007CA 74 80            [12] 2559 	mov	a,#0x80
      0007CC C0 E0            [24] 2560 	push	acc
      0007CE 12r00r00         [24] 2561 	lcall	_printf
      0007D1 E5 81            [12] 2562 	mov	a,sp
      0007D3 24 F1            [12] 2563 	add	a,#0xf1
      0007D5 F5 81            [12] 2564 	mov	sp,a
      0007D7 D0 06            [24] 2565 	pop	ar6
      0007D9 D0 07            [24] 2566 	pop	ar7
      0007DB 80 52            [24] 2567 	sjmp	00103$
      0007DD                       2568 00102$:
                                   2569 ;	nrf24l01.c:393: nrf24_read(i, &register_current_value, 1, CLOSE);
      0007DD 8E 05            [24] 2570 	mov	ar5,r6
      0007DF 90r00r38         [24] 2571 	mov	dptr,#_nrf24_read_PARM_2
      0007E2 74r02            [12] 2572 	mov	a,#_register_current_value
      0007E4 F0               [24] 2573 	movx	@dptr,a
      0007E5 74s00            [12] 2574 	mov	a,#(_register_current_value >> 8)
      0007E7 A3               [24] 2575 	inc	dptr
      0007E8 F0               [24] 2576 	movx	@dptr,a
      0007E9 E4               [12] 2577 	clr	a
      0007EA A3               [24] 2578 	inc	dptr
      0007EB F0               [24] 2579 	movx	@dptr,a
      0007EC 90r00r3B         [24] 2580 	mov	dptr,#_nrf24_read_PARM_3
      0007EF 04               [12] 2581 	inc	a
      0007F0 F0               [24] 2582 	movx	@dptr,a
      0007F1 90r00r3C         [24] 2583 	mov	dptr,#_nrf24_read_PARM_4
      0007F4 E4               [12] 2584 	clr	a
      0007F5 F0               [24] 2585 	movx	@dptr,a
      0007F6 8D 82            [24] 2586 	mov	dpl,r5
      0007F8 C0 07            [24] 2587 	push	ar7
      0007FA C0 06            [24] 2588 	push	ar6
      0007FC 12r0Fr48         [24] 2589 	lcall	_nrf24_read
      0007FF D0 06            [24] 2590 	pop	ar6
      000801 D0 07            [24] 2591 	pop	ar7
                                   2592 ;	nrf24l01.c:394: printf("\rRegister 0x%02x: %d\n", i, register_current_value);
      000803 90r00r02         [24] 2593 	mov	dptr,#_register_current_value
      000806 E0               [24] 2594 	movx	a,@dptr
      000807 FD               [12] 2595 	mov	r5,a
      000808 7C 00            [12] 2596 	mov	r4,#0x00
      00080A C0 07            [24] 2597 	push	ar7
      00080C C0 06            [24] 2598 	push	ar6
      00080E C0 05            [24] 2599 	push	ar5
      000810 C0 04            [24] 2600 	push	ar4
      000812 C0 06            [24] 2601 	push	ar6
      000814 C0 07            [24] 2602 	push	ar7
      000816 74r8B            [12] 2603 	mov	a,#___str_2
      000818 C0 E0            [24] 2604 	push	acc
      00081A 74s00            [12] 2605 	mov	a,#(___str_2 >> 8)
      00081C C0 E0            [24] 2606 	push	acc
      00081E 74 80            [12] 2607 	mov	a,#0x80
      000820 C0 E0            [24] 2608 	push	acc
      000822 12r00r00         [24] 2609 	lcall	_printf
      000825 E5 81            [12] 2610 	mov	a,sp
      000827 24 F9            [12] 2611 	add	a,#0xf9
      000829 F5 81            [12] 2612 	mov	sp,a
      00082B D0 06            [24] 2613 	pop	ar6
      00082D D0 07            [24] 2614 	pop	ar7
      00082F                       2615 00103$:
                                   2616 ;	nrf24l01.c:397: delay1ms(20);
      00082F 90 00 14         [24] 2617 	mov	dptr,#0x0014
      000832 C0 07            [24] 2618 	push	ar7
      000834 C0 06            [24] 2619 	push	ar6
      000836 12r00r00         [24] 2620 	lcall	_delay1ms
      000839 D0 06            [24] 2621 	pop	ar6
      00083B D0 07            [24] 2622 	pop	ar7
                                   2623 ;	nrf24l01.c:381: for (int i=0; i<24; i++) {
      00083D 0E               [12] 2624 	inc	r6
      00083E BE 00 01         [24] 2625 	cjne	r6,#0x00,00134$
      000841 0F               [12] 2626 	inc	r7
      000842                       2627 00134$:
      000842 02r07r2B         [24] 2628 	ljmp	00108$
      000845                       2629 00106$:
                                   2630 ;	nrf24l01.c:400: nrf24_read(0X1C, &register_current_value, 1, CLOSE);
      000845 90r00r38         [24] 2631 	mov	dptr,#_nrf24_read_PARM_2
      000848 74r02            [12] 2632 	mov	a,#_register_current_value
      00084A F0               [24] 2633 	movx	@dptr,a
      00084B 74s00            [12] 2634 	mov	a,#(_register_current_value >> 8)
      00084D A3               [24] 2635 	inc	dptr
      00084E F0               [24] 2636 	movx	@dptr,a
      00084F E4               [12] 2637 	clr	a
      000850 A3               [24] 2638 	inc	dptr
      000851 F0               [24] 2639 	movx	@dptr,a
      000852 90r00r3B         [24] 2640 	mov	dptr,#_nrf24_read_PARM_3
      000855 04               [12] 2641 	inc	a
      000856 F0               [24] 2642 	movx	@dptr,a
      000857 90r00r3C         [24] 2643 	mov	dptr,#_nrf24_read_PARM_4
      00085A E4               [12] 2644 	clr	a
      00085B F0               [24] 2645 	movx	@dptr,a
      00085C 75 82 1C         [24] 2646 	mov	dpl,#0x1c
      00085F 12r0Fr48         [24] 2647 	lcall	_nrf24_read
                                   2648 ;	nrf24l01.c:401: printf("\rRegister 0x1C: %d\n", register_current_value);
      000862 90r00r02         [24] 2649 	mov	dptr,#_register_current_value
      000865 E0               [24] 2650 	movx	a,@dptr
      000866 FF               [12] 2651 	mov	r7,a
      000867 7E 00            [12] 2652 	mov	r6,#0x00
      000869 C0 07            [24] 2653 	push	ar7
      00086B C0 06            [24] 2654 	push	ar6
      00086D 74rA1            [12] 2655 	mov	a,#___str_3
      00086F C0 E0            [24] 2656 	push	acc
      000871 74s00            [12] 2657 	mov	a,#(___str_3 >> 8)
      000873 C0 E0            [24] 2658 	push	acc
      000875 74 80            [12] 2659 	mov	a,#0x80
      000877 C0 E0            [24] 2660 	push	acc
      000879 12r00r00         [24] 2661 	lcall	_printf
      00087C E5 81            [12] 2662 	mov	a,sp
      00087E 24 FB            [12] 2663 	add	a,#0xfb
      000880 F5 81            [12] 2664 	mov	sp,a
                                   2665 ;	nrf24l01.c:402: delay1ms(20);
      000882 90 00 14         [24] 2666 	mov	dptr,#0x0014
      000885 12r00r00         [24] 2667 	lcall	_delay1ms
                                   2668 ;	nrf24l01.c:404: nrf24_read(0X1D, &register_current_value, 1, CLOSE);
      000888 90r00r38         [24] 2669 	mov	dptr,#_nrf24_read_PARM_2
      00088B 74r02            [12] 2670 	mov	a,#_register_current_value
      00088D F0               [24] 2671 	movx	@dptr,a
      00088E 74s00            [12] 2672 	mov	a,#(_register_current_value >> 8)
      000890 A3               [24] 2673 	inc	dptr
      000891 F0               [24] 2674 	movx	@dptr,a
      000892 E4               [12] 2675 	clr	a
      000893 A3               [24] 2676 	inc	dptr
      000894 F0               [24] 2677 	movx	@dptr,a
      000895 90r00r3B         [24] 2678 	mov	dptr,#_nrf24_read_PARM_3
      000898 04               [12] 2679 	inc	a
      000899 F0               [24] 2680 	movx	@dptr,a
      00089A 90r00r3C         [24] 2681 	mov	dptr,#_nrf24_read_PARM_4
      00089D E4               [12] 2682 	clr	a
      00089E F0               [24] 2683 	movx	@dptr,a
      00089F 75 82 1D         [24] 2684 	mov	dpl,#0x1d
      0008A2 12r0Fr48         [24] 2685 	lcall	_nrf24_read
                                   2686 ;	nrf24l01.c:405: printf("\rRegister 0x1D: %d\n", register_current_value);
      0008A5 90r00r02         [24] 2687 	mov	dptr,#_register_current_value
      0008A8 E0               [24] 2688 	movx	a,@dptr
      0008A9 FF               [12] 2689 	mov	r7,a
      0008AA 7E 00            [12] 2690 	mov	r6,#0x00
      0008AC C0 07            [24] 2691 	push	ar7
      0008AE C0 06            [24] 2692 	push	ar6
      0008B0 74rB5            [12] 2693 	mov	a,#___str_4
      0008B2 C0 E0            [24] 2694 	push	acc
      0008B4 74s00            [12] 2695 	mov	a,#(___str_4 >> 8)
      0008B6 C0 E0            [24] 2696 	push	acc
      0008B8 74 80            [12] 2697 	mov	a,#0x80
      0008BA C0 E0            [24] 2698 	push	acc
      0008BC 12r00r00         [24] 2699 	lcall	_printf
      0008BF E5 81            [12] 2700 	mov	a,sp
      0008C1 24 FB            [12] 2701 	add	a,#0xfb
      0008C3 F5 81            [12] 2702 	mov	sp,a
                                   2703 ;	nrf24l01.c:406: delay1ms(20);
      0008C5 90 00 14         [24] 2704 	mov	dptr,#0x0014
      0008C8 12r00r00         [24] 2705 	lcall	_delay1ms
                                   2706 ;	nrf24l01.c:408: printf("\n\n");
      0008CB 74rC9            [12] 2707 	mov	a,#___str_5
      0008CD C0 E0            [24] 2708 	push	acc
      0008CF 74s00            [12] 2709 	mov	a,#(___str_5 >> 8)
      0008D1 C0 E0            [24] 2710 	push	acc
      0008D3 74 80            [12] 2711 	mov	a,#0x80
      0008D5 C0 E0            [24] 2712 	push	acc
      0008D7 12r00r00         [24] 2713 	lcall	_printf
      0008DA 15 81            [12] 2714 	dec	sp
      0008DC 15 81            [12] 2715 	dec	sp
      0008DE 15 81            [12] 2716 	dec	sp
                                   2717 ;	nrf24l01.c:409: }
      0008E0 22               [24] 2718 	ret
                                   2719 ;------------------------------------------------------------
                                   2720 ;Allocation info for local variables in function 'nrf24_automatic_retransmit_setup'
                                   2721 ;------------------------------------------------------------
                                   2722 ;retransmit_count          Allocated with name '_nrf24_automatic_retransmit_setup_PARM_2'
                                   2723 ;delay_time                Allocated with name '_nrf24_automatic_retransmit_setup_delay_time_65536_196'
                                   2724 ;------------------------------------------------------------
                                   2725 ;	nrf24l01.c:412: void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count) {
                                   2726 ;	-----------------------------------------
                                   2727 ;	 function nrf24_automatic_retransmit_setup
                                   2728 ;	-----------------------------------------
      0008E1                       2729 _nrf24_automatic_retransmit_setup:
      0008E1 AF 83            [24] 2730 	mov	r7,dph
      0008E3 E5 82            [12] 2731 	mov	a,dpl
      0008E5 90r00r22         [24] 2732 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_196
      0008E8 F0               [24] 2733 	movx	@dptr,a
      0008E9 EF               [12] 2734 	mov	a,r7
      0008EA A3               [24] 2735 	inc	dptr
      0008EB F0               [24] 2736 	movx	@dptr,a
                                   2737 ;	nrf24l01.c:413: register_new_value = 0x00;
      0008EC 90r00r03         [24] 2738 	mov	dptr,#_register_new_value
      0008EF E4               [12] 2739 	clr	a
      0008F0 F0               [24] 2740 	movx	@dptr,a
      0008F1                       2741 00108$:
                                   2742 ;	nrf24l01.c:414: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      0008F1 90r00r22         [24] 2743 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_196
      0008F4 E0               [24] 2744 	movx	a,@dptr
      0008F5 FE               [12] 2745 	mov	r6,a
      0008F6 A3               [24] 2746 	inc	dptr
      0008F7 E0               [24] 2747 	movx	a,@dptr
      0008F8 FF               [12] 2748 	mov	r7,a
      0008F9 C3               [12] 2749 	clr	c
      0008FA 74 FA            [12] 2750 	mov	a,#0xfa
      0008FC 9E               [12] 2751 	subb	a,r6
      0008FD E4               [12] 2752 	clr	a
      0008FE 9F               [12] 2753 	subb	a,r7
      0008FF 50 22            [24] 2754 	jnc	00101$
      000901 90r00r03         [24] 2755 	mov	dptr,#_register_new_value
      000904 E0               [24] 2756 	movx	a,@dptr
      000905 FD               [12] 2757 	mov	r5,a
      000906 BD 0F 00         [24] 2758 	cjne	r5,#0x0f,00133$
      000909                       2759 00133$:
      000909 50 18            [24] 2760 	jnc	00101$
                                   2761 ;	nrf24l01.c:415: register_new_value++;
      00090B 90r00r03         [24] 2762 	mov	dptr,#_register_new_value
      00090E ED               [12] 2763 	mov	a,r5
      00090F 04               [12] 2764 	inc	a
      000910 F0               [24] 2765 	movx	@dptr,a
                                   2766 ;	nrf24l01.c:414: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      000911 EE               [12] 2767 	mov	a,r6
      000912 24 06            [12] 2768 	add	a,#0x06
      000914 FE               [12] 2769 	mov	r6,a
      000915 EF               [12] 2770 	mov	a,r7
      000916 34 FF            [12] 2771 	addc	a,#0xff
      000918 FF               [12] 2772 	mov	r7,a
      000919 90r00r22         [24] 2773 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_196
      00091C EE               [12] 2774 	mov	a,r6
      00091D F0               [24] 2775 	movx	@dptr,a
      00091E EF               [12] 2776 	mov	a,r7
      00091F A3               [24] 2777 	inc	dptr
      000920 F0               [24] 2778 	movx	@dptr,a
      000921 80 CE            [24] 2779 	sjmp	00108$
      000923                       2780 00101$:
                                   2781 ;	nrf24l01.c:416: register_new_value <<= ARD_0;
      000923 90r00r03         [24] 2782 	mov	dptr,#_register_new_value
      000926 E0               [24] 2783 	movx	a,@dptr
      000927 C4               [12] 2784 	swap	a
      000928 54 F0            [12] 2785 	anl	a,#0xf0
      00092A F0               [24] 2786 	movx	@dptr,a
                                   2787 ;	nrf24l01.c:417: if ((retransmit_count > 0) && (retransmit_count < 16))
      00092B 90r00r21         [24] 2788 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      00092E E0               [24] 2789 	movx	a,@dptr
      00092F FF               [12] 2790 	mov	r7,a
      000930 60 0B            [24] 2791 	jz	00103$
      000932 BF 10 00         [24] 2792 	cjne	r7,#0x10,00136$
      000935                       2793 00136$:
      000935 50 06            [24] 2794 	jnc	00103$
                                   2795 ;	nrf24l01.c:418: register_new_value |= retransmit_count;
      000937 90r00r03         [24] 2796 	mov	dptr,#_register_new_value
      00093A E0               [24] 2797 	movx	a,@dptr
      00093B 4F               [12] 2798 	orl	a,r7
      00093C F0               [24] 2799 	movx	@dptr,a
                                   2800 ;	nrf24l01.c:420: register_new_value |= 0;
      00093D                       2801 00103$:
                                   2802 ;	nrf24l01.c:421: nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
      00093D 90r00r3E         [24] 2803 	mov	dptr,#_nrf24_write_PARM_2
      000940 74r03            [12] 2804 	mov	a,#_register_new_value
      000942 F0               [24] 2805 	movx	@dptr,a
      000943 74s00            [12] 2806 	mov	a,#(_register_new_value >> 8)
      000945 A3               [24] 2807 	inc	dptr
      000946 F0               [24] 2808 	movx	@dptr,a
      000947 E4               [12] 2809 	clr	a
      000948 A3               [24] 2810 	inc	dptr
      000949 F0               [24] 2811 	movx	@dptr,a
      00094A 90r00r41         [24] 2812 	mov	dptr,#_nrf24_write_PARM_3
      00094D 04               [12] 2813 	inc	a
      00094E F0               [24] 2814 	movx	@dptr,a
      00094F 90r00r42         [24] 2815 	mov	dptr,#_nrf24_write_PARM_4
      000952 E4               [12] 2816 	clr	a
      000953 F0               [24] 2817 	movx	@dptr,a
      000954 75 82 04         [24] 2818 	mov	dpl,#0x04
                                   2819 ;	nrf24l01.c:422: }
      000957 02r0FrB4         [24] 2820 	ljmp	_nrf24_write
                                   2821 ;------------------------------------------------------------
                                   2822 ;Allocation info for local variables in function 'nrf24_auto_acknowledgment_setup'
                                   2823 ;------------------------------------------------------------
                                   2824 ;datapipe                  Allocated with name '_nrf24_auto_acknowledgment_setup_datapipe_65536_199'
                                   2825 ;------------------------------------------------------------
                                   2826 ;	nrf24l01.c:425: void nrf24_auto_acknowledgment_setup(uint8_t datapipe) {
                                   2827 ;	-----------------------------------------
                                   2828 ;	 function nrf24_auto_acknowledgment_setup
                                   2829 ;	-----------------------------------------
      00095A                       2830 _nrf24_auto_acknowledgment_setup:
      00095A E5 82            [12] 2831 	mov	a,dpl
      00095C 90r00r24         [24] 2832 	mov	dptr,#_nrf24_auto_acknowledgment_setup_datapipe_65536_199
      00095F F0               [24] 2833 	movx	@dptr,a
                                   2834 ;	nrf24l01.c:426: if (datapipe < 7)
      000960 E0               [24] 2835 	movx	a,@dptr
      000961 FF               [12] 2836 	mov	r7,a
      000962 BF 07 00         [24] 2837 	cjne	r7,#0x07,00109$
      000965                       2838 00109$:
      000965 50 12            [24] 2839 	jnc	00102$
                                   2840 ;	nrf24l01.c:427: register_new_value = (1 << datapipe) - 1;
      000967 8F F0            [24] 2841 	mov	b,r7
      000969 05 F0            [12] 2842 	inc	b
      00096B 74 01            [12] 2843 	mov	a,#0x01
      00096D 80 02            [24] 2844 	sjmp	00113$
      00096F                       2845 00111$:
      00096F 25 E0            [12] 2846 	add	a,acc
      000971                       2847 00113$:
      000971 D5 F0 FB         [24] 2848 	djnz	b,00111$
      000974 14               [12] 2849 	dec	a
      000975 90r00r03         [24] 2850 	mov	dptr,#_register_new_value
      000978 F0               [24] 2851 	movx	@dptr,a
      000979                       2852 00102$:
                                   2853 ;	nrf24l01.c:428: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      000979 90r00r3E         [24] 2854 	mov	dptr,#_nrf24_write_PARM_2
      00097C 74r03            [12] 2855 	mov	a,#_register_new_value
      00097E F0               [24] 2856 	movx	@dptr,a
      00097F 74s00            [12] 2857 	mov	a,#(_register_new_value >> 8)
      000981 A3               [24] 2858 	inc	dptr
      000982 F0               [24] 2859 	movx	@dptr,a
      000983 E4               [12] 2860 	clr	a
      000984 A3               [24] 2861 	inc	dptr
      000985 F0               [24] 2862 	movx	@dptr,a
      000986 90r00r41         [24] 2863 	mov	dptr,#_nrf24_write_PARM_3
      000989 04               [12] 2864 	inc	a
      00098A F0               [24] 2865 	movx	@dptr,a
      00098B 90r00r42         [24] 2866 	mov	dptr,#_nrf24_write_PARM_4
      00098E E4               [12] 2867 	clr	a
      00098F F0               [24] 2868 	movx	@dptr,a
      000990 75 82 01         [24] 2869 	mov	dpl,#0x01
                                   2870 ;	nrf24l01.c:429: }
      000993 02r0FrB4         [24] 2871 	ljmp	_nrf24_write
                                   2872 ;------------------------------------------------------------
                                   2873 ;Allocation info for local variables in function 'nrf24_dynamic_payload'
                                   2874 ;------------------------------------------------------------
                                   2875 ;datapipe                  Allocated with name '_nrf24_dynamic_payload_PARM_2'
                                   2876 ;state                     Allocated with name '_nrf24_dynamic_payload_state_65536_201'
                                   2877 ;------------------------------------------------------------
                                   2878 ;	nrf24l01.c:432: void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe) {
                                   2879 ;	-----------------------------------------
                                   2880 ;	 function nrf24_dynamic_payload
                                   2881 ;	-----------------------------------------
      000996                       2882 _nrf24_dynamic_payload:
      000996 E5 82            [12] 2883 	mov	a,dpl
      000998 90r00r26         [24] 2884 	mov	dptr,#_nrf24_dynamic_payload_state_65536_201
      00099B F0               [24] 2885 	movx	@dptr,a
                                   2886 ;	nrf24l01.c:433: nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
      00099C 90r00r25         [24] 2887 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      00099F E0               [24] 2888 	movx	a,@dptr
      0009A0 FF               [12] 2889 	mov	r7,a
      0009A1 F5 82            [12] 2890 	mov	dpl,a
      0009A3 C0 07            [24] 2891 	push	ar7
      0009A5 12r09r5A         [24] 2892 	lcall	_nrf24_auto_acknowledgment_setup
                                   2893 ;	nrf24l01.c:434: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0009A8 90r00r38         [24] 2894 	mov	dptr,#_nrf24_read_PARM_2
      0009AB 74r02            [12] 2895 	mov	a,#_register_current_value
      0009AD F0               [24] 2896 	movx	@dptr,a
      0009AE 74s00            [12] 2897 	mov	a,#(_register_current_value >> 8)
      0009B0 A3               [24] 2898 	inc	dptr
      0009B1 F0               [24] 2899 	movx	@dptr,a
      0009B2 E4               [12] 2900 	clr	a
      0009B3 A3               [24] 2901 	inc	dptr
      0009B4 F0               [24] 2902 	movx	@dptr,a
      0009B5 90r00r3B         [24] 2903 	mov	dptr,#_nrf24_read_PARM_3
      0009B8 04               [12] 2904 	inc	a
      0009B9 F0               [24] 2905 	movx	@dptr,a
      0009BA 90r00r3C         [24] 2906 	mov	dptr,#_nrf24_read_PARM_4
      0009BD E4               [12] 2907 	clr	a
      0009BE F0               [24] 2908 	movx	@dptr,a
      0009BF 75 82 1D         [24] 2909 	mov	dpl,#0x1d
      0009C2 12r0Fr48         [24] 2910 	lcall	_nrf24_read
      0009C5 D0 07            [24] 2911 	pop	ar7
                                   2912 ;	nrf24l01.c:435: if (state == ENABLE) {
      0009C7 90r00r26         [24] 2913 	mov	dptr,#_nrf24_dynamic_payload_state_65536_201
      0009CA E0               [24] 2914 	movx	a,@dptr
      0009CB FE               [12] 2915 	mov	r6,a
      0009CC BE 01 66         [24] 2916 	cjne	r6,#0x01,00104$
                                   2917 ;	nrf24l01.c:436: register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
      0009CF 90r00r02         [24] 2918 	mov	dptr,#_register_current_value
      0009D2 E0               [24] 2919 	movx	a,@dptr
      0009D3 90r00r03         [24] 2920 	mov	dptr,#_register_new_value
      0009D6 44 04            [12] 2921 	orl	a,#0x04
      0009D8 F0               [24] 2922 	movx	@dptr,a
                                   2923 ;	nrf24l01.c:437: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      0009D9 90r00r3E         [24] 2924 	mov	dptr,#_nrf24_write_PARM_2
      0009DC 74r03            [12] 2925 	mov	a,#_register_new_value
      0009DE F0               [24] 2926 	movx	@dptr,a
      0009DF 74s00            [12] 2927 	mov	a,#(_register_new_value >> 8)
      0009E1 A3               [24] 2928 	inc	dptr
      0009E2 F0               [24] 2929 	movx	@dptr,a
      0009E3 E4               [12] 2930 	clr	a
      0009E4 A3               [24] 2931 	inc	dptr
      0009E5 F0               [24] 2932 	movx	@dptr,a
      0009E6 90r00r41         [24] 2933 	mov	dptr,#_nrf24_write_PARM_3
      0009E9 04               [12] 2934 	inc	a
      0009EA F0               [24] 2935 	movx	@dptr,a
      0009EB 90r00r42         [24] 2936 	mov	dptr,#_nrf24_write_PARM_4
      0009EE E4               [12] 2937 	clr	a
      0009EF F0               [24] 2938 	movx	@dptr,a
      0009F0 75 82 1D         [24] 2939 	mov	dpl,#0x1d
      0009F3 C0 07            [24] 2940 	push	ar7
      0009F5 12r0FrB4         [24] 2941 	lcall	_nrf24_write
      0009F8 D0 07            [24] 2942 	pop	ar7
                                   2943 ;	nrf24l01.c:438: if (datapipe < 7)
      0009FA BF 07 00         [24] 2944 	cjne	r7,#0x07,00118$
      0009FD                       2945 00118$:
      0009FD 50 12            [24] 2946 	jnc	00102$
                                   2947 ;	nrf24l01.c:440: register_new_value = (1 << datapipe) - 1;
      0009FF 8F F0            [24] 2948 	mov	b,r7
      000A01 05 F0            [12] 2949 	inc	b
      000A03 74 01            [12] 2950 	mov	a,#0x01
      000A05 80 02            [24] 2951 	sjmp	00122$
      000A07                       2952 00120$:
      000A07 25 E0            [12] 2953 	add	a,acc
      000A09                       2954 00122$:
      000A09 D5 F0 FB         [24] 2955 	djnz	b,00120$
      000A0C 14               [12] 2956 	dec	a
      000A0D 90r00r03         [24] 2957 	mov	dptr,#_register_new_value
      000A10 F0               [24] 2958 	movx	@dptr,a
      000A11                       2959 00102$:
                                   2960 ;	nrf24l01.c:441: nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
      000A11 90r00r3E         [24] 2961 	mov	dptr,#_nrf24_write_PARM_2
      000A14 74r03            [12] 2962 	mov	a,#_register_new_value
      000A16 F0               [24] 2963 	movx	@dptr,a
      000A17 74s00            [12] 2964 	mov	a,#(_register_new_value >> 8)
      000A19 A3               [24] 2965 	inc	dptr
      000A1A F0               [24] 2966 	movx	@dptr,a
      000A1B E4               [12] 2967 	clr	a
      000A1C A3               [24] 2968 	inc	dptr
      000A1D F0               [24] 2969 	movx	@dptr,a
      000A1E 90r00r41         [24] 2970 	mov	dptr,#_nrf24_write_PARM_3
      000A21 04               [12] 2971 	inc	a
      000A22 F0               [24] 2972 	movx	@dptr,a
      000A23 90r00r42         [24] 2973 	mov	dptr,#_nrf24_write_PARM_4
      000A26 E4               [12] 2974 	clr	a
      000A27 F0               [24] 2975 	movx	@dptr,a
      000A28 75 82 1C         [24] 2976 	mov	dpl,#0x1c
      000A2B 12r0FrB4         [24] 2977 	lcall	_nrf24_write
                                   2978 ;	nrf24l01.c:442: dynamic_payload = ENABLE;
      000A2E 90r00r1E         [24] 2979 	mov	dptr,#_dynamic_payload
      000A31 74 01            [12] 2980 	mov	a,#0x01
      000A33 F0               [24] 2981 	movx	@dptr,a
      000A34 22               [24] 2982 	ret
      000A35                       2983 00104$:
                                   2984 ;	nrf24l01.c:444: register_new_value = register_current_value & (~(1 << EN_DPL));
      000A35 90r00r02         [24] 2985 	mov	dptr,#_register_current_value
      000A38 E0               [24] 2986 	movx	a,@dptr
      000A39 90r00r03         [24] 2987 	mov	dptr,#_register_new_value
      000A3C 54 FB            [12] 2988 	anl	a,#0xfb
      000A3E F0               [24] 2989 	movx	@dptr,a
                                   2990 ;	nrf24l01.c:445: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000A3F 90r00r3E         [24] 2991 	mov	dptr,#_nrf24_write_PARM_2
      000A42 74r03            [12] 2992 	mov	a,#_register_new_value
      000A44 F0               [24] 2993 	movx	@dptr,a
      000A45 74s00            [12] 2994 	mov	a,#(_register_new_value >> 8)
      000A47 A3               [24] 2995 	inc	dptr
      000A48 F0               [24] 2996 	movx	@dptr,a
      000A49 E4               [12] 2997 	clr	a
      000A4A A3               [24] 2998 	inc	dptr
      000A4B F0               [24] 2999 	movx	@dptr,a
      000A4C 90r00r41         [24] 3000 	mov	dptr,#_nrf24_write_PARM_3
      000A4F 04               [12] 3001 	inc	a
      000A50 F0               [24] 3002 	movx	@dptr,a
      000A51 90r00r42         [24] 3003 	mov	dptr,#_nrf24_write_PARM_4
      000A54 E4               [12] 3004 	clr	a
      000A55 F0               [24] 3005 	movx	@dptr,a
      000A56 75 82 1D         [24] 3006 	mov	dpl,#0x1d
      000A59 12r0FrB4         [24] 3007 	lcall	_nrf24_write
                                   3008 ;	nrf24l01.c:446: dynamic_payload = DISABLE;
      000A5C 90r00r1E         [24] 3009 	mov	dptr,#_dynamic_payload
      000A5F E4               [12] 3010 	clr	a
      000A60 F0               [24] 3011 	movx	@dptr,a
                                   3012 ;	nrf24l01.c:448: }
      000A61 22               [24] 3013 	ret
                                   3014 ;------------------------------------------------------------
                                   3015 ;Allocation info for local variables in function 'nrf24_datapipe_ptx'
                                   3016 ;------------------------------------------------------------
                                   3017 ;datapipe_number           Allocated with name '_nrf24_datapipe_ptx_datapipe_number_65536_205'
                                   3018 ;------------------------------------------------------------
                                   3019 ;	nrf24l01.c:451: void nrf24_datapipe_ptx(uint8_t datapipe_number) {
                                   3020 ;	-----------------------------------------
                                   3021 ;	 function nrf24_datapipe_ptx
                                   3022 ;	-----------------------------------------
      000A62                       3023 _nrf24_datapipe_ptx:
      000A62 E5 82            [12] 3024 	mov	a,dpl
      000A64 90r00r27         [24] 3025 	mov	dptr,#_nrf24_datapipe_ptx_datapipe_number_65536_205
      000A67 F0               [24] 3026 	movx	@dptr,a
                                   3027 ;	nrf24l01.c:452: nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
      000A68 E0               [24] 3028 	movx	a,@dptr
      000A69 FF               [12] 3029 	mov	r7,a
      000A6A 1F               [12] 3030 	dec	r7
      000A6B C2 D5            [12] 3031 	clr	F0
      000A6D 75 F0 05         [24] 3032 	mov	b,#0x05
      000A70 EF               [12] 3033 	mov	a,r7
      000A71 30 E7 04         [24] 3034 	jnb	acc.7,00103$
      000A74 B2 D5            [12] 3035 	cpl	F0
      000A76 F4               [12] 3036 	cpl	a
      000A77 04               [12] 3037 	inc	a
      000A78                       3038 00103$:
      000A78 A4               [48] 3039 	mul	ab
      000A79 30 D5 0A         [24] 3040 	jnb	F0,00104$
      000A7C F4               [12] 3041 	cpl	a
      000A7D 24 01            [12] 3042 	add	a,#0x01
      000A7F C5 F0            [12] 3043 	xch	a,b
      000A81 F4               [12] 3044 	cpl	a
      000A82 34 00            [12] 3045 	addc	a,#0x00
      000A84 C5 F0            [12] 3046 	xch	a,b
      000A86                       3047 00104$:
      000A86 24r20            [12] 3048 	add	a,#_datapipe_address
      000A88 FE               [12] 3049 	mov	r6,a
      000A89 74s00            [12] 3050 	mov	a,#(_datapipe_address >> 8)
      000A8B 35 F0            [12] 3051 	addc	a,b
      000A8D FF               [12] 3052 	mov	r7,a
      000A8E 7D 00            [12] 3053 	mov	r5,#0x00
      000A90 90r00r05         [24] 3054 	mov	dptr,#_current_address_width
      000A93 E0               [24] 3055 	movx	a,@dptr
      000A94 FC               [12] 3056 	mov	r4,a
      000A95 90r00r3E         [24] 3057 	mov	dptr,#_nrf24_write_PARM_2
      000A98 EE               [12] 3058 	mov	a,r6
      000A99 F0               [24] 3059 	movx	@dptr,a
      000A9A EF               [12] 3060 	mov	a,r7
      000A9B A3               [24] 3061 	inc	dptr
      000A9C F0               [24] 3062 	movx	@dptr,a
      000A9D ED               [12] 3063 	mov	a,r5
      000A9E A3               [24] 3064 	inc	dptr
      000A9F F0               [24] 3065 	movx	@dptr,a
      000AA0 90r00r41         [24] 3066 	mov	dptr,#_nrf24_write_PARM_3
      000AA3 EC               [12] 3067 	mov	a,r4
      000AA4 F0               [24] 3068 	movx	@dptr,a
      000AA5 90r00r42         [24] 3069 	mov	dptr,#_nrf24_write_PARM_4
      000AA8 E4               [12] 3070 	clr	a
      000AA9 F0               [24] 3071 	movx	@dptr,a
      000AAA 75 82 10         [24] 3072 	mov	dpl,#0x10
                                   3073 ;	nrf24l01.c:453: }
      000AAD 02r0FrB4         [24] 3074 	ljmp	_nrf24_write
                                   3075 ;------------------------------------------------------------
                                   3076 ;Allocation info for local variables in function 'nrf24_datapipe_address_configuration'
                                   3077 ;------------------------------------------------------------
                                   3078 ;address                   Allocated with name '_nrf24_datapipe_address_configuration_address_65536_208'
                                   3079 ;counter                   Allocated with name '_nrf24_datapipe_address_configuration_counter_131072_209'
                                   3080 ;------------------------------------------------------------
                                   3081 ;	nrf24l01.c:456: void nrf24_datapipe_address_configuration(void) {
                                   3082 ;	-----------------------------------------
                                   3083 ;	 function nrf24_datapipe_address_configuration
                                   3084 ;	-----------------------------------------
      000AB0                       3085 _nrf24_datapipe_address_configuration:
                                   3086 ;	nrf24l01.c:459: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000AB0 7F 0A            [12] 3087 	mov	r7,#0x0a
      000AB2 7E 00            [12] 3088 	mov	r6,#0x00
      000AB4                       3089 00103$:
      000AB4 BE 02 00         [24] 3090 	cjne	r6,#0x02,00116$
      000AB7                       3091 00116$:
      000AB7 50 3A            [24] 3092 	jnc	00105$
                                   3093 ;	nrf24l01.c:461: nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
      000AB9 EE               [12] 3094 	mov	a,r6
      000ABA 75 F0 05         [24] 3095 	mov	b,#0x05
      000ABD A4               [48] 3096 	mul	ab
      000ABE 24r20            [12] 3097 	add	a,#_datapipe_address
      000AC0 FC               [12] 3098 	mov	r4,a
      000AC1 74s00            [12] 3099 	mov	a,#(_datapipe_address >> 8)
      000AC3 35 F0            [12] 3100 	addc	a,b
      000AC5 FD               [12] 3101 	mov	r5,a
      000AC6 7B 00            [12] 3102 	mov	r3,#0x00
      000AC8 90r00r05         [24] 3103 	mov	dptr,#_current_address_width
      000ACB E0               [24] 3104 	movx	a,@dptr
      000ACC FA               [12] 3105 	mov	r2,a
      000ACD 90r00r3E         [24] 3106 	mov	dptr,#_nrf24_write_PARM_2
      000AD0 EC               [12] 3107 	mov	a,r4
      000AD1 F0               [24] 3108 	movx	@dptr,a
      000AD2 ED               [12] 3109 	mov	a,r5
      000AD3 A3               [24] 3110 	inc	dptr
      000AD4 F0               [24] 3111 	movx	@dptr,a
      000AD5 EB               [12] 3112 	mov	a,r3
      000AD6 A3               [24] 3113 	inc	dptr
      000AD7 F0               [24] 3114 	movx	@dptr,a
      000AD8 90r00r41         [24] 3115 	mov	dptr,#_nrf24_write_PARM_3
      000ADB EA               [12] 3116 	mov	a,r2
      000ADC F0               [24] 3117 	movx	@dptr,a
      000ADD 90r00r42         [24] 3118 	mov	dptr,#_nrf24_write_PARM_4
      000AE0 E4               [12] 3119 	clr	a
      000AE1 F0               [24] 3120 	movx	@dptr,a
      000AE2 8F 82            [24] 3121 	mov	dpl,r7
      000AE4 C0 07            [24] 3122 	push	ar7
      000AE6 C0 06            [24] 3123 	push	ar6
      000AE8 12r0FrB4         [24] 3124 	lcall	_nrf24_write
      000AEB D0 06            [24] 3125 	pop	ar6
      000AED D0 07            [24] 3126 	pop	ar7
                                   3127 ;	nrf24l01.c:462: address++;
      000AEF 0F               [12] 3128 	inc	r7
                                   3129 ;	nrf24l01.c:459: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000AF0 0E               [12] 3130 	inc	r6
      000AF1 80 C1            [24] 3131 	sjmp	00103$
      000AF3                       3132 00105$:
                                   3133 ;	nrf24l01.c:464: }
      000AF3 22               [24] 3134 	ret
                                   3135 ;------------------------------------------------------------
                                   3136 ;Allocation info for local variables in function 'nrf24_prx_static_payload_width'
                                   3137 ;------------------------------------------------------------
                                   3138 ;number_of_datapipes       Allocated with name '_nrf24_prx_static_payload_width_PARM_2'
                                   3139 ;static_payload_width      Allocated with name '_nrf24_prx_static_payload_width_static_payload_width_65536_211'
                                   3140 ;address                   Allocated with name '_nrf24_prx_static_payload_width_address_131072_213'
                                   3141 ;------------------------------------------------------------
                                   3142 ;	nrf24l01.c:467: void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
                                   3143 ;	-----------------------------------------
                                   3144 ;	 function nrf24_prx_static_payload_width
                                   3145 ;	-----------------------------------------
      000AF4                       3146 _nrf24_prx_static_payload_width:
      000AF4 E5 82            [12] 3147 	mov	a,dpl
      000AF6 90r00r29         [24] 3148 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_211
      000AF9 F0               [24] 3149 	movx	@dptr,a
                                   3150 ;	nrf24l01.c:469: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000AFA 7F 11            [12] 3151 	mov	r7,#0x11
      000AFC 90r00r28         [24] 3152 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      000AFF E0               [24] 3153 	movx	a,@dptr
      000B00 FE               [12] 3154 	mov	r6,a
      000B01                       3155 00103$:
      000B01 EE               [12] 3156 	mov	a,r6
      000B02 60 28            [24] 3157 	jz	00101$
                                   3158 ;	nrf24l01.c:471: nrf24_write(address, &static_payload_width, 1, CLOSE);
      000B04 90r00r3E         [24] 3159 	mov	dptr,#_nrf24_write_PARM_2
      000B07 74r29            [12] 3160 	mov	a,#_nrf24_prx_static_payload_width_static_payload_width_65536_211
      000B09 F0               [24] 3161 	movx	@dptr,a
      000B0A 74s00            [12] 3162 	mov	a,#(_nrf24_prx_static_payload_width_static_payload_width_65536_211 >> 8)
      000B0C A3               [24] 3163 	inc	dptr
      000B0D F0               [24] 3164 	movx	@dptr,a
      000B0E E4               [12] 3165 	clr	a
      000B0F A3               [24] 3166 	inc	dptr
      000B10 F0               [24] 3167 	movx	@dptr,a
      000B11 90r00r41         [24] 3168 	mov	dptr,#_nrf24_write_PARM_3
      000B14 04               [12] 3169 	inc	a
      000B15 F0               [24] 3170 	movx	@dptr,a
      000B16 90r00r42         [24] 3171 	mov	dptr,#_nrf24_write_PARM_4
      000B19 E4               [12] 3172 	clr	a
      000B1A F0               [24] 3173 	movx	@dptr,a
      000B1B 8F 82            [24] 3174 	mov	dpl,r7
      000B1D C0 07            [24] 3175 	push	ar7
      000B1F C0 06            [24] 3176 	push	ar6
      000B21 12r0FrB4         [24] 3177 	lcall	_nrf24_write
      000B24 D0 06            [24] 3178 	pop	ar6
      000B26 D0 07            [24] 3179 	pop	ar7
                                   3180 ;	nrf24l01.c:472: address++;
      000B28 0F               [12] 3181 	inc	r7
                                   3182 ;	nrf24l01.c:469: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000B29 1E               [12] 3183 	dec	r6
      000B2A 80 D5            [24] 3184 	sjmp	00103$
      000B2C                       3185 00101$:
                                   3186 ;	nrf24l01.c:474: current_payload_width = static_payload_width;
      000B2C 90r00r29         [24] 3187 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_211
      000B2F E0               [24] 3188 	movx	a,@dptr
      000B30 90r00r06         [24] 3189 	mov	dptr,#_current_payload_width
      000B33 F0               [24] 3190 	movx	@dptr,a
                                   3191 ;	nrf24l01.c:475: }
      000B34 22               [24] 3192 	ret
                                   3193 ;------------------------------------------------------------
                                   3194 ;Allocation info for local variables in function 'nrf24_datapipe_enable'
                                   3195 ;------------------------------------------------------------
                                   3196 ;number_of_datapipes       Allocated with name '_nrf24_datapipe_enable_number_of_datapipes_65536_215'
                                   3197 ;------------------------------------------------------------
                                   3198 ;	nrf24l01.c:478: void nrf24_datapipe_enable(uint8_t number_of_datapipes)
                                   3199 ;	-----------------------------------------
                                   3200 ;	 function nrf24_datapipe_enable
                                   3201 ;	-----------------------------------------
      000B35                       3202 _nrf24_datapipe_enable:
      000B35 E5 82            [12] 3203 	mov	a,dpl
      000B37 90r00r2A         [24] 3204 	mov	dptr,#_nrf24_datapipe_enable_number_of_datapipes_65536_215
      000B3A F0               [24] 3205 	movx	@dptr,a
                                   3206 ;	nrf24l01.c:480: register_new_value = (1 << number_of_datapipes) - 1;
      000B3B E0               [24] 3207 	movx	a,@dptr
      000B3C FF               [12] 3208 	mov	r7,a
      000B3D 8F F0            [24] 3209 	mov	b,r7
      000B3F 05 F0            [12] 3210 	inc	b
      000B41 74 01            [12] 3211 	mov	a,#0x01
      000B43 80 02            [24] 3212 	sjmp	00105$
      000B45                       3213 00103$:
      000B45 25 E0            [12] 3214 	add	a,acc
      000B47                       3215 00105$:
      000B47 D5 F0 FB         [24] 3216 	djnz	b,00103$
      000B4A 14               [12] 3217 	dec	a
      000B4B 90r00r03         [24] 3218 	mov	dptr,#_register_new_value
      000B4E F0               [24] 3219 	movx	@dptr,a
                                   3220 ;	nrf24l01.c:481: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      000B4F 90r00r3E         [24] 3221 	mov	dptr,#_nrf24_write_PARM_2
      000B52 74r03            [12] 3222 	mov	a,#_register_new_value
      000B54 F0               [24] 3223 	movx	@dptr,a
      000B55 74s00            [12] 3224 	mov	a,#(_register_new_value >> 8)
      000B57 A3               [24] 3225 	inc	dptr
      000B58 F0               [24] 3226 	movx	@dptr,a
      000B59 E4               [12] 3227 	clr	a
      000B5A A3               [24] 3228 	inc	dptr
      000B5B F0               [24] 3229 	movx	@dptr,a
      000B5C 90r00r41         [24] 3230 	mov	dptr,#_nrf24_write_PARM_3
      000B5F 04               [12] 3231 	inc	a
      000B60 F0               [24] 3232 	movx	@dptr,a
      000B61 90r00r42         [24] 3233 	mov	dptr,#_nrf24_write_PARM_4
      000B64 E4               [12] 3234 	clr	a
      000B65 F0               [24] 3235 	movx	@dptr,a
      000B66 75 82 02         [24] 3236 	mov	dpl,#0x02
                                   3237 ;	nrf24l01.c:482: }
      000B69 02r0FrB4         [24] 3238 	ljmp	_nrf24_write
                                   3239 ;------------------------------------------------------------
                                   3240 ;Allocation info for local variables in function 'nrf24_address_width'
                                   3241 ;------------------------------------------------------------
                                   3242 ;address_width             Allocated with name '_nrf24_address_width_address_width_65536_217'
                                   3243 ;------------------------------------------------------------
                                   3244 ;	nrf24l01.c:485: void nrf24_address_width(uint8_t address_width) {
                                   3245 ;	-----------------------------------------
                                   3246 ;	 function nrf24_address_width
                                   3247 ;	-----------------------------------------
      000B6C                       3248 _nrf24_address_width:
      000B6C E5 82            [12] 3249 	mov	a,dpl
      000B6E 90r00r2B         [24] 3250 	mov	dptr,#_nrf24_address_width_address_width_65536_217
      000B71 F0               [24] 3251 	movx	@dptr,a
                                   3252 ;	nrf24l01.c:486: if ((address_width <= 5) && (address_width >= 3)) {
      000B72 E0               [24] 3253 	movx	a,@dptr
      000B73 FF               [12] 3254 	mov  r7,a
      000B74 24 FA            [12] 3255 	add	a,#0xff - 0x05
      000B76 40 0E            [24] 3256 	jc	00102$
      000B78 BF 03 00         [24] 3257 	cjne	r7,#0x03,00116$
      000B7B                       3258 00116$:
      000B7B 40 09            [24] 3259 	jc	00102$
                                   3260 ;	nrf24l01.c:487: write_pointer = address_width - 2;
      000B7D EF               [12] 3261 	mov	a,r7
      000B7E 24 FE            [12] 3262 	add	a,#0xfe
      000B80 90r00r04         [24] 3263 	mov	dptr,#_write_pointer
      000B83 F0               [24] 3264 	movx	@dptr,a
      000B84 80 06            [24] 3265 	sjmp	00103$
      000B86                       3266 00102$:
                                   3267 ;	nrf24l01.c:490: write_pointer = 3;
      000B86 90r00r04         [24] 3268 	mov	dptr,#_write_pointer
      000B89 74 03            [12] 3269 	mov	a,#0x03
      000B8B F0               [24] 3270 	movx	@dptr,a
      000B8C                       3271 00103$:
                                   3272 ;	nrf24l01.c:493: nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
      000B8C 90r00r3E         [24] 3273 	mov	dptr,#_nrf24_write_PARM_2
      000B8F 74r04            [12] 3274 	mov	a,#_write_pointer
      000B91 F0               [24] 3275 	movx	@dptr,a
      000B92 74s00            [12] 3276 	mov	a,#(_write_pointer >> 8)
      000B94 A3               [24] 3277 	inc	dptr
      000B95 F0               [24] 3278 	movx	@dptr,a
      000B96 E4               [12] 3279 	clr	a
      000B97 A3               [24] 3280 	inc	dptr
      000B98 F0               [24] 3281 	movx	@dptr,a
      000B99 90r00r41         [24] 3282 	mov	dptr,#_nrf24_write_PARM_3
      000B9C 04               [12] 3283 	inc	a
      000B9D F0               [24] 3284 	movx	@dptr,a
      000B9E 90r00r42         [24] 3285 	mov	dptr,#_nrf24_write_PARM_4
      000BA1 E4               [12] 3286 	clr	a
      000BA2 F0               [24] 3287 	movx	@dptr,a
      000BA3 75 82 03         [24] 3288 	mov	dpl,#0x03
      000BA6 12r0FrB4         [24] 3289 	lcall	_nrf24_write
                                   3290 ;	nrf24l01.c:494: current_address_width = address_width;
      000BA9 90r00r2B         [24] 3291 	mov	dptr,#_nrf24_address_width_address_width_65536_217
      000BAC E0               [24] 3292 	movx	a,@dptr
      000BAD 90r00r05         [24] 3293 	mov	dptr,#_current_address_width
      000BB0 F0               [24] 3294 	movx	@dptr,a
                                   3295 ;	nrf24l01.c:495: }
      000BB1 22               [24] 3296 	ret
                                   3297 ;------------------------------------------------------------
                                   3298 ;Allocation info for local variables in function 'nrf24_rf_datarate'
                                   3299 ;------------------------------------------------------------
                                   3300 ;rf_datarate               Allocated with name '_nrf24_rf_datarate_rf_datarate_65536_221'
                                   3301 ;------------------------------------------------------------
                                   3302 ;	nrf24l01.c:498: void nrf24_rf_datarate(uint16_t rf_datarate)
                                   3303 ;	-----------------------------------------
                                   3304 ;	 function nrf24_rf_datarate
                                   3305 ;	-----------------------------------------
      000BB2                       3306 _nrf24_rf_datarate:
      000BB2 AF 83            [24] 3307 	mov	r7,dph
      000BB4 E5 82            [12] 3308 	mov	a,dpl
      000BB6 90r00r2C         [24] 3309 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_221
      000BB9 F0               [24] 3310 	movx	@dptr,a
      000BBA EF               [12] 3311 	mov	a,r7
      000BBB A3               [24] 3312 	inc	dptr
      000BBC F0               [24] 3313 	movx	@dptr,a
                                   3314 ;	nrf24l01.c:500: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000BBD 90r00r38         [24] 3315 	mov	dptr,#_nrf24_read_PARM_2
      000BC0 74r02            [12] 3316 	mov	a,#_register_current_value
      000BC2 F0               [24] 3317 	movx	@dptr,a
      000BC3 74s00            [12] 3318 	mov	a,#(_register_current_value >> 8)
      000BC5 A3               [24] 3319 	inc	dptr
      000BC6 F0               [24] 3320 	movx	@dptr,a
      000BC7 E4               [12] 3321 	clr	a
      000BC8 A3               [24] 3322 	inc	dptr
      000BC9 F0               [24] 3323 	movx	@dptr,a
      000BCA 90r00r3B         [24] 3324 	mov	dptr,#_nrf24_read_PARM_3
      000BCD 04               [12] 3325 	inc	a
      000BCE F0               [24] 3326 	movx	@dptr,a
      000BCF 90r00r3C         [24] 3327 	mov	dptr,#_nrf24_read_PARM_4
      000BD2 E4               [12] 3328 	clr	a
      000BD3 F0               [24] 3329 	movx	@dptr,a
      000BD4 75 82 06         [24] 3330 	mov	dpl,#0x06
      000BD7 12r0Fr48         [24] 3331 	lcall	_nrf24_read
                                   3332 ;	nrf24l01.c:501: register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
      000BDA 90r00r02         [24] 3333 	mov	dptr,#_register_current_value
      000BDD E0               [24] 3334 	movx	a,@dptr
      000BDE 53 E0 D7         [24] 3335 	anl	acc,#0xd7
      000BE1 F0               [24] 3336 	movx	@dptr,a
                                   3337 ;	nrf24l01.c:502: switch (rf_datarate)
      000BE2 90r00r2C         [24] 3338 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_221
      000BE5 E0               [24] 3339 	movx	a,@dptr
      000BE6 FE               [12] 3340 	mov	r6,a
      000BE7 A3               [24] 3341 	inc	dptr
      000BE8 E0               [24] 3342 	movx	a,@dptr
      000BE9 FF               [12] 3343 	mov	r7,a
      000BEA BE FA 05         [24] 3344 	cjne	r6,#0xfa,00120$
      000BED BF 00 02         [24] 3345 	cjne	r7,#0x00,00120$
      000BF0 80 24            [24] 3346 	sjmp	00103$
      000BF2                       3347 00120$:
      000BF2 BE E8 05         [24] 3348 	cjne	r6,#0xe8,00121$
      000BF5 BF 03 02         [24] 3349 	cjne	r7,#0x03,00121$
      000BF8 80 12            [24] 3350 	sjmp	00102$
      000BFA                       3351 00121$:
      000BFA BE D0 25         [24] 3352 	cjne	r6,#0xd0,00104$
      000BFD BF 07 22         [24] 3353 	cjne	r7,#0x07,00104$
                                   3354 ;	nrf24l01.c:505: register_new_value = register_current_value | (1 << RF_DR_HIGH);
      000C00 90r00r02         [24] 3355 	mov	dptr,#_register_current_value
      000C03 E0               [24] 3356 	movx	a,@dptr
      000C04 90r00r03         [24] 3357 	mov	dptr,#_register_new_value
      000C07 44 08            [12] 3358 	orl	a,#0x08
      000C09 F0               [24] 3359 	movx	@dptr,a
                                   3360 ;	nrf24l01.c:506: break;
                                   3361 ;	nrf24l01.c:507: case 1000:
      000C0A 80 1E            [24] 3362 	sjmp	00105$
      000C0C                       3363 00102$:
                                   3364 ;	nrf24l01.c:508: register_new_value = register_current_value;
      000C0C 90r00r02         [24] 3365 	mov	dptr,#_register_current_value
      000C0F E0               [24] 3366 	movx	a,@dptr
      000C10 90r00r03         [24] 3367 	mov	dptr,#_register_new_value
      000C13 F0               [24] 3368 	movx	@dptr,a
                                   3369 ;	nrf24l01.c:509: break;
                                   3370 ;	nrf24l01.c:510: case 250:
      000C14 80 14            [24] 3371 	sjmp	00105$
      000C16                       3372 00103$:
                                   3373 ;	nrf24l01.c:511: register_new_value = register_current_value | (1 << RF_DR_LOW);
      000C16 90r00r02         [24] 3374 	mov	dptr,#_register_current_value
      000C19 E0               [24] 3375 	movx	a,@dptr
      000C1A 90r00r03         [24] 3376 	mov	dptr,#_register_new_value
      000C1D 44 20            [12] 3377 	orl	a,#0x20
      000C1F F0               [24] 3378 	movx	@dptr,a
                                   3379 ;	nrf24l01.c:512: break;
                                   3380 ;	nrf24l01.c:513: default:
      000C20 80 08            [24] 3381 	sjmp	00105$
      000C22                       3382 00104$:
                                   3383 ;	nrf24l01.c:514: register_new_value = register_current_value;
      000C22 90r00r02         [24] 3384 	mov	dptr,#_register_current_value
      000C25 E0               [24] 3385 	movx	a,@dptr
      000C26 90r00r03         [24] 3386 	mov	dptr,#_register_new_value
      000C29 F0               [24] 3387 	movx	@dptr,a
                                   3388 ;	nrf24l01.c:516: }
      000C2A                       3389 00105$:
                                   3390 ;	nrf24l01.c:517: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000C2A 90r00r3E         [24] 3391 	mov	dptr,#_nrf24_write_PARM_2
      000C2D 74r03            [12] 3392 	mov	a,#_register_new_value
      000C2F F0               [24] 3393 	movx	@dptr,a
      000C30 74s00            [12] 3394 	mov	a,#(_register_new_value >> 8)
      000C32 A3               [24] 3395 	inc	dptr
      000C33 F0               [24] 3396 	movx	@dptr,a
      000C34 E4               [12] 3397 	clr	a
      000C35 A3               [24] 3398 	inc	dptr
      000C36 F0               [24] 3399 	movx	@dptr,a
      000C37 90r00r41         [24] 3400 	mov	dptr,#_nrf24_write_PARM_3
      000C3A 04               [12] 3401 	inc	a
      000C3B F0               [24] 3402 	movx	@dptr,a
      000C3C 90r00r42         [24] 3403 	mov	dptr,#_nrf24_write_PARM_4
      000C3F E4               [12] 3404 	clr	a
      000C40 F0               [24] 3405 	movx	@dptr,a
      000C41 75 82 06         [24] 3406 	mov	dpl,#0x06
                                   3407 ;	nrf24l01.c:518: }
      000C44 02r0FrB4         [24] 3408 	ljmp	_nrf24_write
                                   3409 ;------------------------------------------------------------
                                   3410 ;Allocation info for local variables in function 'nrf24_rf_power'
                                   3411 ;------------------------------------------------------------
                                   3412 ;rf_power                  Allocated with name '_nrf24_rf_power_rf_power_65536_224'
                                   3413 ;------------------------------------------------------------
                                   3414 ;	nrf24l01.c:521: void nrf24_rf_power(uint8_t rf_power)
                                   3415 ;	-----------------------------------------
                                   3416 ;	 function nrf24_rf_power
                                   3417 ;	-----------------------------------------
      000C47                       3418 _nrf24_rf_power:
      000C47 E5 82            [12] 3419 	mov	a,dpl
      000C49 90r00r2E         [24] 3420 	mov	dptr,#_nrf24_rf_power_rf_power_65536_224
      000C4C F0               [24] 3421 	movx	@dptr,a
                                   3422 ;	nrf24l01.c:523: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000C4D 90r00r38         [24] 3423 	mov	dptr,#_nrf24_read_PARM_2
      000C50 74r02            [12] 3424 	mov	a,#_register_current_value
      000C52 F0               [24] 3425 	movx	@dptr,a
      000C53 74s00            [12] 3426 	mov	a,#(_register_current_value >> 8)
      000C55 A3               [24] 3427 	inc	dptr
      000C56 F0               [24] 3428 	movx	@dptr,a
      000C57 E4               [12] 3429 	clr	a
      000C58 A3               [24] 3430 	inc	dptr
      000C59 F0               [24] 3431 	movx	@dptr,a
      000C5A 90r00r3B         [24] 3432 	mov	dptr,#_nrf24_read_PARM_3
      000C5D 04               [12] 3433 	inc	a
      000C5E F0               [24] 3434 	movx	@dptr,a
      000C5F 90r00r3C         [24] 3435 	mov	dptr,#_nrf24_read_PARM_4
      000C62 E4               [12] 3436 	clr	a
      000C63 F0               [24] 3437 	movx	@dptr,a
      000C64 75 82 06         [24] 3438 	mov	dpl,#0x06
      000C67 12r0Fr48         [24] 3439 	lcall	_nrf24_read
                                   3440 ;	nrf24l01.c:524: register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000C6A 90r00r02         [24] 3441 	mov	dptr,#_register_current_value
      000C6D E0               [24] 3442 	movx	a,@dptr
      000C6E 53 E0 F9         [24] 3443 	anl	acc,#0xf9
      000C71 F0               [24] 3444 	movx	@dptr,a
                                   3445 ;	nrf24l01.c:525: switch (rf_power)
      000C72 90r00r2E         [24] 3446 	mov	dptr,#_nrf24_rf_power_rf_power_65536_224
      000C75 E0               [24] 3447 	movx	a,@dptr
      000C76 FF               [12] 3448 	mov	r7,a
      000C77 60 0F            [24] 3449 	jz	00101$
      000C79 BF 06 02         [24] 3450 	cjne	r7,#0x06,00126$
      000C7C 80 16            [24] 3451 	sjmp	00102$
      000C7E                       3452 00126$:
      000C7E BF 0C 02         [24] 3453 	cjne	r7,#0x0c,00127$
      000C81 80 1D            [24] 3454 	sjmp	00103$
      000C83                       3455 00127$:
                                   3456 ;	nrf24l01.c:527: case 0:
      000C83 BF 12 30         [24] 3457 	cjne	r7,#0x12,00105$
      000C86 80 24            [24] 3458 	sjmp	00104$
      000C88                       3459 00101$:
                                   3460 ;	nrf24l01.c:528: register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000C88 90r00r02         [24] 3461 	mov	dptr,#_register_current_value
      000C8B E0               [24] 3462 	movx	a,@dptr
      000C8C 90r00r03         [24] 3463 	mov	dptr,#_register_new_value
      000C8F 44 06            [12] 3464 	orl	a,#0x06
      000C91 F0               [24] 3465 	movx	@dptr,a
                                   3466 ;	nrf24l01.c:529: break;
                                   3467 ;	nrf24l01.c:530: case 6:
      000C92 80 2C            [24] 3468 	sjmp	00106$
      000C94                       3469 00102$:
                                   3470 ;	nrf24l01.c:531: register_new_value = register_current_value | (1 << RF_PWR_1);
      000C94 90r00r02         [24] 3471 	mov	dptr,#_register_current_value
      000C97 E0               [24] 3472 	movx	a,@dptr
      000C98 90r00r03         [24] 3473 	mov	dptr,#_register_new_value
      000C9B 44 04            [12] 3474 	orl	a,#0x04
      000C9D F0               [24] 3475 	movx	@dptr,a
                                   3476 ;	nrf24l01.c:532: break;
                                   3477 ;	nrf24l01.c:533: case 12:
      000C9E 80 20            [24] 3478 	sjmp	00106$
      000CA0                       3479 00103$:
                                   3480 ;	nrf24l01.c:534: register_new_value = register_current_value | (1 << RF_PWR_0);
      000CA0 90r00r02         [24] 3481 	mov	dptr,#_register_current_value
      000CA3 E0               [24] 3482 	movx	a,@dptr
      000CA4 90r00r03         [24] 3483 	mov	dptr,#_register_new_value
      000CA7 44 02            [12] 3484 	orl	a,#0x02
      000CA9 F0               [24] 3485 	movx	@dptr,a
                                   3486 ;	nrf24l01.c:535: break;
                                   3487 ;	nrf24l01.c:536: case 18:
      000CAA 80 14            [24] 3488 	sjmp	00106$
      000CAC                       3489 00104$:
                                   3490 ;	nrf24l01.c:537: register_new_value = register_current_value;
      000CAC 90r00r02         [24] 3491 	mov	dptr,#_register_current_value
      000CAF E0               [24] 3492 	movx	a,@dptr
      000CB0 90r00r03         [24] 3493 	mov	dptr,#_register_new_value
      000CB3 F0               [24] 3494 	movx	@dptr,a
                                   3495 ;	nrf24l01.c:538: break;
                                   3496 ;	nrf24l01.c:539: default:
      000CB4 80 0A            [24] 3497 	sjmp	00106$
      000CB6                       3498 00105$:
                                   3499 ;	nrf24l01.c:540: register_new_value = register_current_value | (1 << RF_PWR_1);
      000CB6 90r00r02         [24] 3500 	mov	dptr,#_register_current_value
      000CB9 E0               [24] 3501 	movx	a,@dptr
      000CBA 90r00r03         [24] 3502 	mov	dptr,#_register_new_value
      000CBD 44 04            [12] 3503 	orl	a,#0x04
      000CBF F0               [24] 3504 	movx	@dptr,a
                                   3505 ;	nrf24l01.c:542: }
      000CC0                       3506 00106$:
                                   3507 ;	nrf24l01.c:543: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000CC0 90r00r3E         [24] 3508 	mov	dptr,#_nrf24_write_PARM_2
      000CC3 74r03            [12] 3509 	mov	a,#_register_new_value
      000CC5 F0               [24] 3510 	movx	@dptr,a
      000CC6 74s00            [12] 3511 	mov	a,#(_register_new_value >> 8)
      000CC8 A3               [24] 3512 	inc	dptr
      000CC9 F0               [24] 3513 	movx	@dptr,a
      000CCA E4               [12] 3514 	clr	a
      000CCB A3               [24] 3515 	inc	dptr
      000CCC F0               [24] 3516 	movx	@dptr,a
      000CCD 90r00r41         [24] 3517 	mov	dptr,#_nrf24_write_PARM_3
      000CD0 04               [12] 3518 	inc	a
      000CD1 F0               [24] 3519 	movx	@dptr,a
      000CD2 90r00r42         [24] 3520 	mov	dptr,#_nrf24_write_PARM_4
      000CD5 E4               [12] 3521 	clr	a
      000CD6 F0               [24] 3522 	movx	@dptr,a
      000CD7 75 82 06         [24] 3523 	mov	dpl,#0x06
                                   3524 ;	nrf24l01.c:544: }
      000CDA 02r0FrB4         [24] 3525 	ljmp	_nrf24_write
                                   3526 ;------------------------------------------------------------
                                   3527 ;Allocation info for local variables in function 'nrf24_rf_channel'
                                   3528 ;------------------------------------------------------------
                                   3529 ;rf_channel                Allocated with name '_nrf24_rf_channel_rf_channel_65536_227'
                                   3530 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_229'
                                   3531 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_230'
                                   3532 ;------------------------------------------------------------
                                   3533 ;	nrf24l01.c:547: void nrf24_rf_channel(uint8_t rf_channel)
                                   3534 ;	-----------------------------------------
                                   3535 ;	 function nrf24_rf_channel
                                   3536 ;	-----------------------------------------
      000CDD                       3537 _nrf24_rf_channel:
      000CDD E5 82            [12] 3538 	mov	a,dpl
      000CDF 90r00r2F         [24] 3539 	mov	dptr,#_nrf24_rf_channel_rf_channel_65536_227
      000CE2 F0               [24] 3540 	movx	@dptr,a
                                   3541 ;	nrf24l01.c:549: if ((rf_channel <= 125) && (rf_channel >= 1))
      000CE3 E0               [24] 3542 	movx	a,@dptr
      000CE4 FF               [12] 3543 	mov  r7,a
      000CE5 24 82            [12] 3544 	add	a,#0xff - 0x7d
      000CE7 40 27            [24] 3545 	jc	00102$
      000CE9 BF 01 00         [24] 3546 	cjne	r7,#0x01,00116$
      000CEC                       3547 00116$:
      000CEC 40 22            [24] 3548 	jc	00102$
                                   3549 ;	nrf24l01.c:551: uint8_t write_pointer = rf_channel;
      000CEE 90r00r30         [24] 3550 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_229
      000CF1 EF               [12] 3551 	mov	a,r7
      000CF2 F0               [24] 3552 	movx	@dptr,a
                                   3553 ;	nrf24l01.c:552: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000CF3 90r00r3E         [24] 3554 	mov	dptr,#_nrf24_write_PARM_2
      000CF6 74r30            [12] 3555 	mov	a,#_nrf24_rf_channel_write_pointer_131072_229
      000CF8 F0               [24] 3556 	movx	@dptr,a
      000CF9 74s00            [12] 3557 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_229 >> 8)
      000CFB A3               [24] 3558 	inc	dptr
      000CFC F0               [24] 3559 	movx	@dptr,a
      000CFD E4               [12] 3560 	clr	a
      000CFE A3               [24] 3561 	inc	dptr
      000CFF F0               [24] 3562 	movx	@dptr,a
      000D00 90r00r41         [24] 3563 	mov	dptr,#_nrf24_write_PARM_3
      000D03 04               [12] 3564 	inc	a
      000D04 F0               [24] 3565 	movx	@dptr,a
      000D05 90r00r42         [24] 3566 	mov	dptr,#_nrf24_write_PARM_4
      000D08 E4               [12] 3567 	clr	a
      000D09 F0               [24] 3568 	movx	@dptr,a
      000D0A 75 82 05         [24] 3569 	mov	dpl,#0x05
      000D0D 02r0FrB4         [24] 3570 	ljmp	_nrf24_write
      000D10                       3571 00102$:
                                   3572 ;	nrf24l01.c:556: uint8_t write_pointer = 1;
      000D10 90r00r31         [24] 3573 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_230
      000D13 74 01            [12] 3574 	mov	a,#0x01
      000D15 F0               [24] 3575 	movx	@dptr,a
                                   3576 ;	nrf24l01.c:557: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000D16 90r00r3E         [24] 3577 	mov	dptr,#_nrf24_write_PARM_2
      000D19 74r31            [12] 3578 	mov	a,#_nrf24_rf_channel_write_pointer_131072_230
      000D1B F0               [24] 3579 	movx	@dptr,a
      000D1C 74s00            [12] 3580 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_230 >> 8)
      000D1E A3               [24] 3581 	inc	dptr
      000D1F F0               [24] 3582 	movx	@dptr,a
      000D20 E4               [12] 3583 	clr	a
      000D21 A3               [24] 3584 	inc	dptr
      000D22 F0               [24] 3585 	movx	@dptr,a
      000D23 90r00r41         [24] 3586 	mov	dptr,#_nrf24_write_PARM_3
      000D26 04               [12] 3587 	inc	a
      000D27 F0               [24] 3588 	movx	@dptr,a
      000D28 90r00r42         [24] 3589 	mov	dptr,#_nrf24_write_PARM_4
      000D2B E4               [12] 3590 	clr	a
      000D2C F0               [24] 3591 	movx	@dptr,a
      000D2D 75 82 05         [24] 3592 	mov	dpl,#0x05
                                   3593 ;	nrf24l01.c:559: }
      000D30 02r0FrB4         [24] 3594 	ljmp	_nrf24_write
                                   3595 ;------------------------------------------------------------
                                   3596 ;Allocation info for local variables in function 'nrf24_interrupt_mask'
                                   3597 ;------------------------------------------------------------
                                   3598 ;tx_mask                   Allocated with name '_nrf24_interrupt_mask_PARM_2'
                                   3599 ;max_rt_mask               Allocated with name '_nrf24_interrupt_mask_PARM_3'
                                   3600 ;rx_mask                   Allocated with name '_nrf24_interrupt_mask_rx_mask_65536_231'
                                   3601 ;------------------------------------------------------------
                                   3602 ;	nrf24l01.c:562: void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
                                   3603 ;	-----------------------------------------
                                   3604 ;	 function nrf24_interrupt_mask
                                   3605 ;	-----------------------------------------
      000D33                       3606 _nrf24_interrupt_mask:
      000D33 E5 82            [12] 3607 	mov	a,dpl
      000D35 90r00r34         [24] 3608 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_231
      000D38 F0               [24] 3609 	movx	@dptr,a
                                   3610 ;	nrf24l01.c:564: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000D39 90r00r38         [24] 3611 	mov	dptr,#_nrf24_read_PARM_2
      000D3C 74r02            [12] 3612 	mov	a,#_register_current_value
      000D3E F0               [24] 3613 	movx	@dptr,a
      000D3F 74s00            [12] 3614 	mov	a,#(_register_current_value >> 8)
      000D41 A3               [24] 3615 	inc	dptr
      000D42 F0               [24] 3616 	movx	@dptr,a
      000D43 E4               [12] 3617 	clr	a
      000D44 A3               [24] 3618 	inc	dptr
      000D45 F0               [24] 3619 	movx	@dptr,a
      000D46 90r00r3B         [24] 3620 	mov	dptr,#_nrf24_read_PARM_3
      000D49 04               [12] 3621 	inc	a
      000D4A F0               [24] 3622 	movx	@dptr,a
      000D4B 90r00r3C         [24] 3623 	mov	dptr,#_nrf24_read_PARM_4
      000D4E E4               [12] 3624 	clr	a
      000D4F F0               [24] 3625 	movx	@dptr,a
      000D50 75 82 00         [24] 3626 	mov	dpl,#0x00
      000D53 12r0Fr48         [24] 3627 	lcall	_nrf24_read
                                   3628 ;	nrf24l01.c:565: if (rx_mask)
      000D56 90r00r34         [24] 3629 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_231
      000D59 E0               [24] 3630 	movx	a,@dptr
      000D5A 60 0C            [24] 3631 	jz	00102$
                                   3632 ;	nrf24l01.c:566: register_new_value = (register_current_value) | (1 << MASK_RX_DR);
      000D5C 90r00r02         [24] 3633 	mov	dptr,#_register_current_value
      000D5F E0               [24] 3634 	movx	a,@dptr
      000D60 90r00r03         [24] 3635 	mov	dptr,#_register_new_value
      000D63 44 40            [12] 3636 	orl	a,#0x40
      000D65 F0               [24] 3637 	movx	@dptr,a
      000D66 80 08            [24] 3638 	sjmp	00103$
      000D68                       3639 00102$:
                                   3640 ;	nrf24l01.c:568: register_new_value &= (~(1 << MASK_RX_DR));
      000D68 90r00r03         [24] 3641 	mov	dptr,#_register_new_value
      000D6B E0               [24] 3642 	movx	a,@dptr
      000D6C 53 E0 BF         [24] 3643 	anl	acc,#0xbf
      000D6F F0               [24] 3644 	movx	@dptr,a
      000D70                       3645 00103$:
                                   3646 ;	nrf24l01.c:569: if (tx_mask)
      000D70 90r00r32         [24] 3647 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000D73 E0               [24] 3648 	movx	a,@dptr
      000D74 60 0A            [24] 3649 	jz	00105$
                                   3650 ;	nrf24l01.c:570: register_new_value |= (1 << MASK_TX_DS);
      000D76 90r00r03         [24] 3651 	mov	dptr,#_register_new_value
      000D79 E0               [24] 3652 	movx	a,@dptr
      000D7A 43 E0 20         [24] 3653 	orl	acc,#0x20
      000D7D F0               [24] 3654 	movx	@dptr,a
      000D7E 80 08            [24] 3655 	sjmp	00106$
      000D80                       3656 00105$:
                                   3657 ;	nrf24l01.c:572: register_new_value &= (~(1 << MASK_TX_DS));
      000D80 90r00r03         [24] 3658 	mov	dptr,#_register_new_value
      000D83 E0               [24] 3659 	movx	a,@dptr
      000D84 53 E0 DF         [24] 3660 	anl	acc,#0xdf
      000D87 F0               [24] 3661 	movx	@dptr,a
      000D88                       3662 00106$:
                                   3663 ;	nrf24l01.c:573: if (max_rt_mask)
      000D88 90r00r33         [24] 3664 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000D8B E0               [24] 3665 	movx	a,@dptr
      000D8C 60 0A            [24] 3666 	jz	00108$
                                   3667 ;	nrf24l01.c:574: register_new_value |= (1 << MASK_MAX_RT);
      000D8E 90r00r03         [24] 3668 	mov	dptr,#_register_new_value
      000D91 E0               [24] 3669 	movx	a,@dptr
      000D92 43 E0 10         [24] 3670 	orl	acc,#0x10
      000D95 F0               [24] 3671 	movx	@dptr,a
      000D96 80 08            [24] 3672 	sjmp	00109$
      000D98                       3673 00108$:
                                   3674 ;	nrf24l01.c:576: register_new_value &= (~(1 << MASK_MAX_RT));
      000D98 90r00r03         [24] 3675 	mov	dptr,#_register_new_value
      000D9B E0               [24] 3676 	movx	a,@dptr
      000D9C 53 E0 EF         [24] 3677 	anl	acc,#0xef
      000D9F F0               [24] 3678 	movx	@dptr,a
      000DA0                       3679 00109$:
                                   3680 ;	nrf24l01.c:578: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000DA0 90r00r3E         [24] 3681 	mov	dptr,#_nrf24_write_PARM_2
      000DA3 74r03            [12] 3682 	mov	a,#_register_new_value
      000DA5 F0               [24] 3683 	movx	@dptr,a
      000DA6 74s00            [12] 3684 	mov	a,#(_register_new_value >> 8)
      000DA8 A3               [24] 3685 	inc	dptr
      000DA9 F0               [24] 3686 	movx	@dptr,a
      000DAA E4               [12] 3687 	clr	a
      000DAB A3               [24] 3688 	inc	dptr
      000DAC F0               [24] 3689 	movx	@dptr,a
      000DAD 90r00r41         [24] 3690 	mov	dptr,#_nrf24_write_PARM_3
      000DB0 04               [12] 3691 	inc	a
      000DB1 F0               [24] 3692 	movx	@dptr,a
      000DB2 90r00r42         [24] 3693 	mov	dptr,#_nrf24_write_PARM_4
      000DB5 E4               [12] 3694 	clr	a
      000DB6 F0               [24] 3695 	movx	@dptr,a
      000DB7 75 82 00         [24] 3696 	mov	dpl,#0x00
                                   3697 ;	nrf24l01.c:579: }
      000DBA 02r0FrB4         [24] 3698 	ljmp	_nrf24_write
                                   3699 ;------------------------------------------------------------
                                   3700 ;Allocation info for local variables in function 'nrf24_crc_configuration'
                                   3701 ;------------------------------------------------------------
                                   3702 ;crc_encoding_scheme       Allocated with name '_nrf24_crc_configuration_PARM_2'
                                   3703 ;crc_enable                Allocated with name '_nrf24_crc_configuration_crc_enable_65536_233'
                                   3704 ;------------------------------------------------------------
                                   3705 ;	nrf24l01.c:582: void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
                                   3706 ;	-----------------------------------------
                                   3707 ;	 function nrf24_crc_configuration
                                   3708 ;	-----------------------------------------
      000DBD                       3709 _nrf24_crc_configuration:
      000DBD E5 82            [12] 3710 	mov	a,dpl
      000DBF 90r00r36         [24] 3711 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_233
      000DC2 F0               [24] 3712 	movx	@dptr,a
                                   3713 ;	nrf24l01.c:584: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000DC3 90r00r38         [24] 3714 	mov	dptr,#_nrf24_read_PARM_2
      000DC6 74r02            [12] 3715 	mov	a,#_register_current_value
      000DC8 F0               [24] 3716 	movx	@dptr,a
      000DC9 74s00            [12] 3717 	mov	a,#(_register_current_value >> 8)
      000DCB A3               [24] 3718 	inc	dptr
      000DCC F0               [24] 3719 	movx	@dptr,a
      000DCD E4               [12] 3720 	clr	a
      000DCE A3               [24] 3721 	inc	dptr
      000DCF F0               [24] 3722 	movx	@dptr,a
      000DD0 90r00r3B         [24] 3723 	mov	dptr,#_nrf24_read_PARM_3
      000DD3 04               [12] 3724 	inc	a
      000DD4 F0               [24] 3725 	movx	@dptr,a
      000DD5 90r00r3C         [24] 3726 	mov	dptr,#_nrf24_read_PARM_4
      000DD8 E4               [12] 3727 	clr	a
      000DD9 F0               [24] 3728 	movx	@dptr,a
      000DDA 75 82 00         [24] 3729 	mov	dpl,#0x00
      000DDD 12r0Fr48         [24] 3730 	lcall	_nrf24_read
                                   3731 ;	nrf24l01.c:585: if (crc_enable)
      000DE0 90r00r36         [24] 3732 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_233
      000DE3 E0               [24] 3733 	movx	a,@dptr
      000DE4 60 0C            [24] 3734 	jz	00102$
                                   3735 ;	nrf24l01.c:586: register_new_value = (register_current_value) | (1 << EN_CRC);
      000DE6 90r00r02         [24] 3736 	mov	dptr,#_register_current_value
      000DE9 E0               [24] 3737 	movx	a,@dptr
      000DEA 90r00r03         [24] 3738 	mov	dptr,#_register_new_value
      000DED 44 08            [12] 3739 	orl	a,#0x08
      000DEF F0               [24] 3740 	movx	@dptr,a
      000DF0 80 08            [24] 3741 	sjmp	00103$
      000DF2                       3742 00102$:
                                   3743 ;	nrf24l01.c:588: register_new_value &= (~(1 << EN_CRC));
      000DF2 90r00r03         [24] 3744 	mov	dptr,#_register_new_value
      000DF5 E0               [24] 3745 	movx	a,@dptr
      000DF6 53 E0 F7         [24] 3746 	anl	acc,#0xf7
      000DF9 F0               [24] 3747 	movx	@dptr,a
      000DFA                       3748 00103$:
                                   3749 ;	nrf24l01.c:589: if (crc_encoding_scheme == 2)
      000DFA 90r00r35         [24] 3750 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      000DFD E0               [24] 3751 	movx	a,@dptr
      000DFE FF               [12] 3752 	mov	r7,a
      000DFF BF 02 0A         [24] 3753 	cjne	r7,#0x02,00105$
                                   3754 ;	nrf24l01.c:590: register_new_value |= (1 << CRCO);
      000E02 90r00r03         [24] 3755 	mov	dptr,#_register_new_value
      000E05 E0               [24] 3756 	movx	a,@dptr
      000E06 43 E0 04         [24] 3757 	orl	acc,#0x04
      000E09 F0               [24] 3758 	movx	@dptr,a
      000E0A 80 08            [24] 3759 	sjmp	00106$
      000E0C                       3760 00105$:
                                   3761 ;	nrf24l01.c:592: register_new_value &= (~(1 << CRCO));
      000E0C 90r00r03         [24] 3762 	mov	dptr,#_register_new_value
      000E0F E0               [24] 3763 	movx	a,@dptr
      000E10 53 E0 FB         [24] 3764 	anl	acc,#0xfb
      000E13 F0               [24] 3765 	movx	@dptr,a
      000E14                       3766 00106$:
                                   3767 ;	nrf24l01.c:594: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000E14 90r00r3E         [24] 3768 	mov	dptr,#_nrf24_write_PARM_2
      000E17 74r03            [12] 3769 	mov	a,#_register_new_value
      000E19 F0               [24] 3770 	movx	@dptr,a
      000E1A 74s00            [12] 3771 	mov	a,#(_register_new_value >> 8)
      000E1C A3               [24] 3772 	inc	dptr
      000E1D F0               [24] 3773 	movx	@dptr,a
      000E1E E4               [12] 3774 	clr	a
      000E1F A3               [24] 3775 	inc	dptr
      000E20 F0               [24] 3776 	movx	@dptr,a
      000E21 90r00r41         [24] 3777 	mov	dptr,#_nrf24_write_PARM_3
      000E24 04               [12] 3778 	inc	a
      000E25 F0               [24] 3779 	movx	@dptr,a
      000E26 90r00r42         [24] 3780 	mov	dptr,#_nrf24_write_PARM_4
      000E29 E4               [12] 3781 	clr	a
      000E2A F0               [24] 3782 	movx	@dptr,a
      000E2B 75 82 00         [24] 3783 	mov	dpl,#0x00
                                   3784 ;	nrf24l01.c:595: }
      000E2E 02r0FrB4         [24] 3785 	ljmp	_nrf24_write
                                   3786 ;------------------------------------------------------------
                                   3787 ;Allocation info for local variables in function 'nrf24_mode'
                                   3788 ;------------------------------------------------------------
                                   3789 ;mode                      Allocated with name '_nrf24_mode_mode_65536_235'
                                   3790 ;------------------------------------------------------------
                                   3791 ;	nrf24l01.c:598: void nrf24_mode(uint8_t mode) {
                                   3792 ;	-----------------------------------------
                                   3793 ;	 function nrf24_mode
                                   3794 ;	-----------------------------------------
      000E31                       3795 _nrf24_mode:
      000E31 E5 82            [12] 3796 	mov	a,dpl
      000E33 90r00r37         [24] 3797 	mov	dptr,#_nrf24_mode_mode_65536_235
      000E36 F0               [24] 3798 	movx	@dptr,a
                                   3799 ;	nrf24l01.c:599: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000E37 90r00r38         [24] 3800 	mov	dptr,#_nrf24_read_PARM_2
      000E3A 74r02            [12] 3801 	mov	a,#_register_current_value
      000E3C F0               [24] 3802 	movx	@dptr,a
      000E3D 74s00            [12] 3803 	mov	a,#(_register_current_value >> 8)
      000E3F A3               [24] 3804 	inc	dptr
      000E40 F0               [24] 3805 	movx	@dptr,a
      000E41 E4               [12] 3806 	clr	a
      000E42 A3               [24] 3807 	inc	dptr
      000E43 F0               [24] 3808 	movx	@dptr,a
      000E44 90r00r3B         [24] 3809 	mov	dptr,#_nrf24_read_PARM_3
      000E47 04               [12] 3810 	inc	a
      000E48 F0               [24] 3811 	movx	@dptr,a
      000E49 90r00r3C         [24] 3812 	mov	dptr,#_nrf24_read_PARM_4
      000E4C E4               [12] 3813 	clr	a
      000E4D F0               [24] 3814 	movx	@dptr,a
      000E4E 75 82 00         [24] 3815 	mov	dpl,#0x00
      000E51 12r0Fr48         [24] 3816 	lcall	_nrf24_read
                                   3817 ;	nrf24l01.c:600: switch (mode) {
      000E54 90r00r37         [24] 3818 	mov	dptr,#_nrf24_mode_mode_65536_235
      000E57 E0               [24] 3819 	movx	a,@dptr
      000E58 FF               [12] 3820 	mov  r7,a
      000E59 24 FB            [12] 3821 	add	a,#0xff - 0x04
      000E5B 50 03            [24] 3822 	jnc	00114$
      000E5D 02r0Fr04         [24] 3823 	ljmp	00106$
      000E60                       3824 00114$:
      000E60 EF               [12] 3825 	mov	a,r7
      000E61 2F               [12] 3826 	add	a,r7
                                   3827 ;	nrf24l01.c:601: case POWER_DOWN:
      000E62 90r0Er66         [24] 3828 	mov	dptr,#00115$
      000E65 73               [24] 3829 	jmp	@a+dptr
      000E66                       3830 00115$:
      000E66 80 08            [24] 3831 	sjmp	00101$
      000E68 80 26            [24] 3832 	sjmp	00102$
      000E6A 80 43            [24] 3833 	sjmp	00103$
      000E6C 80 5C            [24] 3834 	sjmp	00104$
      000E6E 80 75            [24] 3835 	sjmp	00105$
      000E70                       3836 00101$:
                                   3837 ;	nrf24l01.c:602: nrf24_CE(CE_OFF);
      000E70 75 82 00         [24] 3838 	mov	dpl,#0x00
      000E73 C0 07            [24] 3839 	push	ar7
      000E75 12r00rC4         [24] 3840 	lcall	_nrf24_CE
                                   3841 ;	nrf24l01.c:603: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000E78 90r00r02         [24] 3842 	mov	dptr,#_register_current_value
      000E7B E0               [24] 3843 	movx	a,@dptr
      000E7C 90r00r03         [24] 3844 	mov	dptr,#_register_new_value
      000E7F 54 FD            [12] 3845 	anl	a,#0xfd
      000E81 F0               [24] 3846 	movx	@dptr,a
                                   3847 ;	nrf24l01.c:604: delay_function(POWER_DOWN_DELAY);
      000E82 90 00 02         [24] 3848 	mov	dptr,#(0x02&0x00ff)
      000E85 E4               [12] 3849 	clr	a
      000E86 F5 F0            [12] 3850 	mov	b,a
      000E88 12r00r00         [24] 3851 	lcall	_delay_function
      000E8B D0 07            [24] 3852 	pop	ar7
                                   3853 ;	nrf24l01.c:605: break;
      000E8D 02r0Fr21         [24] 3854 	ljmp	00107$
                                   3855 ;	nrf24l01.c:606: case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
      000E90                       3856 00102$:
                                   3857 ;	nrf24l01.c:607: nrf24_CE(CE_OFF);
      000E90 75 82 00         [24] 3858 	mov	dpl,#0x00
      000E93 C0 07            [24] 3859 	push	ar7
      000E95 12r00rC4         [24] 3860 	lcall	_nrf24_CE
                                   3861 ;	nrf24l01.c:608: register_new_value = (register_current_value) | (1 << PWR_UP);
      000E98 90r00r02         [24] 3862 	mov	dptr,#_register_current_value
      000E9B E0               [24] 3863 	movx	a,@dptr
      000E9C 90r00r03         [24] 3864 	mov	dptr,#_register_new_value
      000E9F 44 02            [12] 3865 	orl	a,#0x02
      000EA1 F0               [24] 3866 	movx	@dptr,a
                                   3867 ;	nrf24l01.c:609: delay_function(STANDBYI_DELAY);
      000EA2 90 00 02         [24] 3868 	mov	dptr,#(0x02&0x00ff)
      000EA5 E4               [12] 3869 	clr	a
      000EA6 F5 F0            [12] 3870 	mov	b,a
      000EA8 12r00r00         [24] 3871 	lcall	_delay_function
      000EAB D0 07            [24] 3872 	pop	ar7
                                   3873 ;	nrf24l01.c:610: break;
                                   3874 ;	nrf24l01.c:611: case STANDBYII:                                 /*standby ii is related to a ptx device*/
      000EAD 80 72            [24] 3875 	sjmp	00107$
      000EAF                       3876 00103$:
                                   3877 ;	nrf24l01.c:613: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000EAF 90r00r02         [24] 3878 	mov	dptr,#_register_current_value
      000EB2 E0               [24] 3879 	movx	a,@dptr
      000EB3 44 02            [12] 3880 	orl	a,#0x02
      000EB5 90r00r03         [24] 3881 	mov	dptr,#_register_new_value
      000EB8 54 FE            [12] 3882 	anl	a,#0xfe
      000EBA F0               [24] 3883 	movx	@dptr,a
                                   3884 ;	nrf24l01.c:614: delay_function(STANDBYI_DELAY);
      000EBB 90 00 02         [24] 3885 	mov	dptr,#(0x02&0x00ff)
      000EBE E4               [12] 3886 	clr	a
      000EBF F5 F0            [12] 3887 	mov	b,a
      000EC1 C0 07            [24] 3888 	push	ar7
      000EC3 12r00r00         [24] 3889 	lcall	_delay_function
      000EC6 D0 07            [24] 3890 	pop	ar7
                                   3891 ;	nrf24l01.c:615: break;
                                   3892 ;	nrf24l01.c:616: case PTX:
      000EC8 80 57            [24] 3893 	sjmp	00107$
      000ECA                       3894 00104$:
                                   3895 ;	nrf24l01.c:618: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000ECA 90r00r02         [24] 3896 	mov	dptr,#_register_current_value
      000ECD E0               [24] 3897 	movx	a,@dptr
      000ECE 44 02            [12] 3898 	orl	a,#0x02
      000ED0 90r00r03         [24] 3899 	mov	dptr,#_register_new_value
      000ED3 54 FE            [12] 3900 	anl	a,#0xfe
      000ED5 F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	nrf24l01.c:619: delay_function(STANDBYI_DELAY);
      000ED6 90 00 02         [24] 3903 	mov	dptr,#(0x02&0x00ff)
      000ED9 E4               [12] 3904 	clr	a
      000EDA F5 F0            [12] 3905 	mov	b,a
      000EDC C0 07            [24] 3906 	push	ar7
      000EDE 12r00r00         [24] 3907 	lcall	_delay_function
      000EE1 D0 07            [24] 3908 	pop	ar7
                                   3909 ;	nrf24l01.c:620: break;
                                   3910 ;	nrf24l01.c:621: case PRX:
      000EE3 80 3C            [24] 3911 	sjmp	00107$
      000EE5                       3912 00105$:
                                   3913 ;	nrf24l01.c:622: nrf24_CE(CE_ON);
      000EE5 75 82 01         [24] 3914 	mov	dpl,#0x01
      000EE8 C0 07            [24] 3915 	push	ar7
      000EEA 12r00rC4         [24] 3916 	lcall	_nrf24_CE
                                   3917 ;	nrf24l01.c:623: register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
      000EED 90r00r02         [24] 3918 	mov	dptr,#_register_current_value
      000EF0 E0               [24] 3919 	movx	a,@dptr
      000EF1 90r00r03         [24] 3920 	mov	dptr,#_register_new_value
      000EF4 44 03            [12] 3921 	orl	a,#0x03
      000EF6 F0               [24] 3922 	movx	@dptr,a
                                   3923 ;	nrf24l01.c:624: delay_function(STANDBYI_DELAY);
      000EF7 90 00 02         [24] 3924 	mov	dptr,#(0x02&0x00ff)
      000EFA E4               [12] 3925 	clr	a
      000EFB F5 F0            [12] 3926 	mov	b,a
      000EFD 12r00r00         [24] 3927 	lcall	_delay_function
      000F00 D0 07            [24] 3928 	pop	ar7
                                   3929 ;	nrf24l01.c:625: break;
                                   3930 ;	nrf24l01.c:626: default:
      000F02 80 1D            [24] 3931 	sjmp	00107$
      000F04                       3932 00106$:
                                   3933 ;	nrf24l01.c:627: nrf24_CE(CE_OFF);
      000F04 75 82 00         [24] 3934 	mov	dpl,#0x00
      000F07 C0 07            [24] 3935 	push	ar7
      000F09 12r00rC4         [24] 3936 	lcall	_nrf24_CE
                                   3937 ;	nrf24l01.c:628: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000F0C 90r00r02         [24] 3938 	mov	dptr,#_register_current_value
      000F0F E0               [24] 3939 	movx	a,@dptr
      000F10 90r00r03         [24] 3940 	mov	dptr,#_register_new_value
      000F13 54 FD            [12] 3941 	anl	a,#0xfd
      000F15 F0               [24] 3942 	movx	@dptr,a
                                   3943 ;	nrf24l01.c:629: delay_function(POWER_DOWN_DELAY);
      000F16 90 00 02         [24] 3944 	mov	dptr,#(0x02&0x00ff)
      000F19 E4               [12] 3945 	clr	a
      000F1A F5 F0            [12] 3946 	mov	b,a
      000F1C 12r00r00         [24] 3947 	lcall	_delay_function
      000F1F D0 07            [24] 3948 	pop	ar7
                                   3949 ;	nrf24l01.c:631: }
      000F21                       3950 00107$:
                                   3951 ;	nrf24l01.c:632: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000F21 90r00r3E         [24] 3952 	mov	dptr,#_nrf24_write_PARM_2
      000F24 74r03            [12] 3953 	mov	a,#_register_new_value
      000F26 F0               [24] 3954 	movx	@dptr,a
      000F27 74s00            [12] 3955 	mov	a,#(_register_new_value >> 8)
      000F29 A3               [24] 3956 	inc	dptr
      000F2A F0               [24] 3957 	movx	@dptr,a
      000F2B E4               [12] 3958 	clr	a
      000F2C A3               [24] 3959 	inc	dptr
      000F2D F0               [24] 3960 	movx	@dptr,a
      000F2E 90r00r41         [24] 3961 	mov	dptr,#_nrf24_write_PARM_3
      000F31 04               [12] 3962 	inc	a
      000F32 F0               [24] 3963 	movx	@dptr,a
      000F33 90r00r42         [24] 3964 	mov	dptr,#_nrf24_write_PARM_4
      000F36 E4               [12] 3965 	clr	a
      000F37 F0               [24] 3966 	movx	@dptr,a
      000F38 75 82 00         [24] 3967 	mov	dpl,#0x00
      000F3B C0 07            [24] 3968 	push	ar7
      000F3D 12r0FrB4         [24] 3969 	lcall	_nrf24_write
      000F40 D0 07            [24] 3970 	pop	ar7
                                   3971 ;	nrf24l01.c:633: current_mode = mode;
      000F42 90r00r1C         [24] 3972 	mov	dptr,#_current_mode
      000F45 EF               [12] 3973 	mov	a,r7
      000F46 F0               [24] 3974 	movx	@dptr,a
                                   3975 ;	nrf24l01.c:634: }
      000F47 22               [24] 3976 	ret
                                   3977 ;------------------------------------------------------------
                                   3978 ;Allocation info for local variables in function 'nrf24_read'
                                   3979 ;------------------------------------------------------------
                                   3980 ;value                     Allocated with name '_nrf24_read_PARM_2'
                                   3981 ;data_length               Allocated with name '_nrf24_read_PARM_3'
                                   3982 ;spi_state                 Allocated with name '_nrf24_read_PARM_4'
                                   3983 ;address                   Allocated with name '_nrf24_read_address_65536_238'
                                   3984 ;------------------------------------------------------------
                                   3985 ;	nrf24l01.c:638: void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state) {
                                   3986 ;	-----------------------------------------
                                   3987 ;	 function nrf24_read
                                   3988 ;	-----------------------------------------
      000F48                       3989 _nrf24_read:
      000F48 E5 82            [12] 3990 	mov	a,dpl
      000F4A 90r00r3D         [24] 3991 	mov	dptr,#_nrf24_read_address_65536_238
      000F4D F0               [24] 3992 	movx	@dptr,a
                                   3993 ;	nrf24l01.c:639: nrf24_SPI(SPI_ON);
      000F4E 75 82 00         [24] 3994 	mov	dpl,#0x00
      000F51 12r00r7E         [24] 3995 	lcall	_nrf24_SPI
                                   3996 ;	nrf24l01.c:641: SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      000F54 90r00r3D         [24] 3997 	mov	dptr,#_nrf24_read_address_65536_238
      000F57 E0               [24] 3998 	movx	a,@dptr
      000F58 FF               [12] 3999 	mov	r7,a
      000F59 90r00r01         [24] 4000 	mov	dptr,#_SPI_command
      000F5C F0               [24] 4001 	movx	@dptr,a
                                   4002 ;	nrf24l01.c:642: SPI_send_command(SPI_command);
      000F5D 8F 82            [24] 4003 	mov	dpl,r7
      000F5F 12r00r92         [24] 4004 	lcall	_SPI_send_command
                                   4005 ;	nrf24l01.c:644: SPI_command = 0;
      000F62 90r00r01         [24] 4006 	mov	dptr,#_SPI_command
      000F65 E4               [12] 4007 	clr	a
      000F66 F0               [24] 4008 	movx	@dptr,a
      000F67 90r00r38         [24] 4009 	mov	dptr,#_nrf24_read_PARM_2
      000F6A E0               [24] 4010 	movx	a,@dptr
      000F6B FD               [12] 4011 	mov	r5,a
      000F6C A3               [24] 4012 	inc	dptr
      000F6D E0               [24] 4013 	movx	a,@dptr
      000F6E FE               [12] 4014 	mov	r6,a
      000F6F A3               [24] 4015 	inc	dptr
      000F70 E0               [24] 4016 	movx	a,@dptr
      000F71 FF               [12] 4017 	mov	r7,a
      000F72 90r00r3B         [24] 4018 	mov	dptr,#_nrf24_read_PARM_3
      000F75 E0               [24] 4019 	movx	a,@dptr
      000F76 FC               [12] 4020 	mov	r4,a
      000F77                       4021 00105$:
                                   4022 ;	nrf24l01.c:645: for (; data_length ; data_length--) {
      000F77 EC               [12] 4023 	mov	a,r4
      000F78 60 2D            [24] 4024 	jz	00101$
                                   4025 ;	nrf24l01.c:646: *value = SPI_send_command(SPI_command);
      000F7A 90r00r01         [24] 4026 	mov	dptr,#_SPI_command
      000F7D E0               [24] 4027 	movx	a,@dptr
      000F7E F5 82            [12] 4028 	mov	dpl,a
      000F80 C0 07            [24] 4029 	push	ar7
      000F82 C0 06            [24] 4030 	push	ar6
      000F84 C0 05            [24] 4031 	push	ar5
      000F86 C0 04            [24] 4032 	push	ar4
      000F88 12r00r92         [24] 4033 	lcall	_SPI_send_command
      000F8B AB 82            [24] 4034 	mov	r3,dpl
      000F8D D0 04            [24] 4035 	pop	ar4
      000F8F D0 05            [24] 4036 	pop	ar5
      000F91 D0 06            [24] 4037 	pop	ar6
      000F93 D0 07            [24] 4038 	pop	ar7
      000F95 8D 82            [24] 4039 	mov	dpl,r5
      000F97 8E 83            [24] 4040 	mov	dph,r6
      000F99 8F F0            [24] 4041 	mov	b,r7
      000F9B EB               [12] 4042 	mov	a,r3
      000F9C 12r00r00         [24] 4043 	lcall	__gptrput
      000F9F A3               [24] 4044 	inc	dptr
      000FA0 AD 82            [24] 4045 	mov	r5,dpl
      000FA2 AE 83            [24] 4046 	mov	r6,dph
                                   4047 ;	nrf24l01.c:647: value++;
                                   4048 ;	nrf24l01.c:645: for (; data_length ; data_length--) {
      000FA4 1C               [12] 4049 	dec	r4
      000FA5 80 D0            [24] 4050 	sjmp	00105$
      000FA7                       4051 00101$:
                                   4052 ;	nrf24l01.c:649: if (spi_state == CLOSE) {
      000FA7 90r00r3C         [24] 4053 	mov	dptr,#_nrf24_read_PARM_4
      000FAA E0               [24] 4054 	movx	a,@dptr
      000FAB 70 06            [24] 4055 	jnz	00107$
                                   4056 ;	nrf24l01.c:650: nrf24_SPI(SPI_OFF);
      000FAD 75 82 01         [24] 4057 	mov	dpl,#0x01
                                   4058 ;	nrf24l01.c:652: }
      000FB0 02r00r7E         [24] 4059 	ljmp	_nrf24_SPI
      000FB3                       4060 00107$:
      000FB3 22               [24] 4061 	ret
                                   4062 ;------------------------------------------------------------
                                   4063 ;Allocation info for local variables in function 'nrf24_write'
                                   4064 ;------------------------------------------------------------
                                   4065 ;value                     Allocated with name '_nrf24_write_PARM_2'
                                   4066 ;data_length               Allocated with name '_nrf24_write_PARM_3'
                                   4067 ;spi_state                 Allocated with name '_nrf24_write_PARM_4'
                                   4068 ;address                   Allocated with name '_nrf24_write_address_65536_243'
                                   4069 ;------------------------------------------------------------
                                   4070 ;	nrf24l01.c:654: void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state) {
                                   4071 ;	-----------------------------------------
                                   4072 ;	 function nrf24_write
                                   4073 ;	-----------------------------------------
      000FB4                       4074 _nrf24_write:
      000FB4 E5 82            [12] 4075 	mov	a,dpl
      000FB6 90r00r43         [24] 4076 	mov	dptr,#_nrf24_write_address_65536_243
      000FB9 F0               [24] 4077 	movx	@dptr,a
                                   4078 ;	nrf24l01.c:655: nrf24_SPI(SPI_ON);
      000FBA 75 82 00         [24] 4079 	mov	dpl,#0x00
      000FBD 12r00r7E         [24] 4080 	lcall	_nrf24_SPI
                                   4081 ;	nrf24l01.c:657: SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      000FC0 90r00r43         [24] 4082 	mov	dptr,#_nrf24_write_address_65536_243
      000FC3 E0               [24] 4083 	movx	a,@dptr
      000FC4 44 20            [12] 4084 	orl	a,#0x20
      000FC6 FF               [12] 4085 	mov	r7,a
      000FC7 90r00r01         [24] 4086 	mov	dptr,#_SPI_command
      000FCA F0               [24] 4087 	movx	@dptr,a
                                   4088 ;	nrf24l01.c:658: SPI_send_command(SPI_command);
      000FCB 8F 82            [24] 4089 	mov	dpl,r7
      000FCD 12r00r92         [24] 4090 	lcall	_SPI_send_command
      000FD0 90r00r3E         [24] 4091 	mov	dptr,#_nrf24_write_PARM_2
      000FD3 E0               [24] 4092 	movx	a,@dptr
      000FD4 FD               [12] 4093 	mov	r5,a
      000FD5 A3               [24] 4094 	inc	dptr
      000FD6 E0               [24] 4095 	movx	a,@dptr
      000FD7 FE               [12] 4096 	mov	r6,a
      000FD8 A3               [24] 4097 	inc	dptr
      000FD9 E0               [24] 4098 	movx	a,@dptr
      000FDA FF               [12] 4099 	mov	r7,a
      000FDB 90r00r41         [24] 4100 	mov	dptr,#_nrf24_write_PARM_3
      000FDE E0               [24] 4101 	movx	a,@dptr
      000FDF FC               [12] 4102 	mov	r4,a
      000FE0                       4103 00105$:
                                   4104 ;	nrf24l01.c:659: for (; data_length ; data_length--) {
      000FE0 EC               [12] 4105 	mov	a,r4
      000FE1 60 2D            [24] 4106 	jz	00101$
                                   4107 ;	nrf24l01.c:660: SPI_command = *value;
      000FE3 8D 82            [24] 4108 	mov	dpl,r5
      000FE5 8E 83            [24] 4109 	mov	dph,r6
      000FE7 8F F0            [24] 4110 	mov	b,r7
      000FE9 12r00r00         [24] 4111 	lcall	__gptrget
      000FEC FB               [12] 4112 	mov	r3,a
      000FED A3               [24] 4113 	inc	dptr
      000FEE AD 82            [24] 4114 	mov	r5,dpl
      000FF0 AE 83            [24] 4115 	mov	r6,dph
      000FF2 90r00r01         [24] 4116 	mov	dptr,#_SPI_command
      000FF5 EB               [12] 4117 	mov	a,r3
      000FF6 F0               [24] 4118 	movx	@dptr,a
                                   4119 ;	nrf24l01.c:661: value++;
                                   4120 ;	nrf24l01.c:662: SPI_send_command(SPI_command);
      000FF7 E0               [24] 4121 	movx	a,@dptr
      000FF8 F5 82            [12] 4122 	mov	dpl,a
      000FFA C0 07            [24] 4123 	push	ar7
      000FFC C0 06            [24] 4124 	push	ar6
      000FFE C0 05            [24] 4125 	push	ar5
      001000 C0 04            [24] 4126 	push	ar4
      001002 12r00r92         [24] 4127 	lcall	_SPI_send_command
      001005 D0 04            [24] 4128 	pop	ar4
      001007 D0 05            [24] 4129 	pop	ar5
      001009 D0 06            [24] 4130 	pop	ar6
      00100B D0 07            [24] 4131 	pop	ar7
                                   4132 ;	nrf24l01.c:659: for (; data_length ; data_length--) {
      00100D 1C               [12] 4133 	dec	r4
      00100E 80 D0            [24] 4134 	sjmp	00105$
      001010                       4135 00101$:
                                   4136 ;	nrf24l01.c:664: if (spi_state == CLOSE) {
      001010 90r00r42         [24] 4137 	mov	dptr,#_nrf24_write_PARM_4
      001013 E0               [24] 4138 	movx	a,@dptr
      001014 70 06            [24] 4139 	jnz	00107$
                                   4140 ;	nrf24l01.c:665: nrf24_SPI(SPI_OFF);
      001016 75 82 01         [24] 4141 	mov	dpl,#0x01
                                   4142 ;	nrf24l01.c:667: }
      001019 02r00r7E         [24] 4143 	ljmp	_nrf24_SPI
      00101C                       4144 00107$:
      00101C 22               [24] 4145 	ret
                                   4146 	.area CSEG    (CODE)
                                   4147 	.area CONST   (CODE)
                                   4148 	.area CONST   (CODE)
      000000                       4149 ___str_0:
      000000 0D                    4150 	.db 0x0d
      000001 6E 72 66 32 34 6C 30  4151 	.ascii "nrf24l01 Failed to Initialize:"
             31 20 46 61 69 6C 65
             64 20 74 6F 20 49 6E
             69 74 69 61 6C 69 7A
             65 3A
      00001F 0A                    4152 	.db 0x0a
      000020 52 65 61 64 20 76 61  4153 	.ascii "Read value doesn't match the newly written value ;("
             6C 75 65 20 64 6F 65
             73 6E 27 74 20 6D 61
             74 63 68 20 74 68 65
             20 6E 65 77 6C 79 20
             77 72 69 74 74 65 6E
             20 76 61 6C 75 65 20
             3B 28
      000053 0A                    4154 	.db 0x0a
      000054 00                    4155 	.db 0x00
                                   4156 	.area CSEG    (CODE)
                                   4157 	.area CONST   (CODE)
      000055                       4158 ___str_1:
      000055 0D                    4159 	.db 0x0d
      000056 52 65 67 69 73 74 65  4160 	.ascii "Register 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
             72 20 30 78 25 30 32
             78 3A 20 30 78 25 30
             32 78 20 30 78 25 30
             32 78 20 30 78 25 30
             32 78 20 30 78 25 30
             32 78 20 30 78 25 30
             32 78
      000089 0A                    4161 	.db 0x0a
      00008A 00                    4162 	.db 0x00
                                   4163 	.area CSEG    (CODE)
                                   4164 	.area CONST   (CODE)
      00008B                       4165 ___str_2:
      00008B 0D                    4166 	.db 0x0d
      00008C 52 65 67 69 73 74 65  4167 	.ascii "Register 0x%02x: %d"
             72 20 30 78 25 30 32
             78 3A 20 25 64
      00009F 0A                    4168 	.db 0x0a
      0000A0 00                    4169 	.db 0x00
                                   4170 	.area CSEG    (CODE)
                                   4171 	.area CONST   (CODE)
      0000A1                       4172 ___str_3:
      0000A1 0D                    4173 	.db 0x0d
      0000A2 52 65 67 69 73 74 65  4174 	.ascii "Register 0x1C: %d"
             72 20 30 78 31 43 3A
             20 25 64
      0000B3 0A                    4175 	.db 0x0a
      0000B4 00                    4176 	.db 0x00
                                   4177 	.area CSEG    (CODE)
                                   4178 	.area CONST   (CODE)
      0000B5                       4179 ___str_4:
      0000B5 0D                    4180 	.db 0x0d
      0000B6 52 65 67 69 73 74 65  4181 	.ascii "Register 0x1D: %d"
             72 20 30 78 31 44 3A
             20 25 64
      0000C7 0A                    4182 	.db 0x0a
      0000C8 00                    4183 	.db 0x00
                                   4184 	.area CSEG    (CODE)
                                   4185 	.area CONST   (CODE)
      0000C9                       4186 ___str_5:
      0000C9 0A                    4187 	.db 0x0a
      0000CA 0A                    4188 	.db 0x0a
      0000CB 00                    4189 	.db 0x00
                                   4190 	.area CSEG    (CODE)
                                   4191 	.area XINIT   (CODE)
      000000                       4192 __xinit__dataReady:
      000000 00                    4193 	.db #0x00	;  0
      000001                       4194 __xinit__CSN_pin:
      000001 02                    4195 	.db #0x02	; 2
      000002 02                    4196 	.db #0x02	; 2
      000003 01                    4197 	.db #0x01	; 1
      000004 00                    4198 	.db #0x00	; 0
      000005 01                    4199 	.db #0x01	; 1
      000006 00                    4200 	.db #0x00	; 0
      000007 03                    4201 	.db #0x03	; 3
      000008 01                    4202 	.db #0x01	; 1
      000009 00                    4203 	.db #0x00	; 0
      00000A 00                    4204 	.db #0x00	; 0
      00000B 00                    4205 	.db #0x00	; 0
      00000C 00                    4206 	.db #0x00	; 0
      00000D 00                    4207 	.db #0x00	; 0
      00000E                       4208 __xinit__CE_pin:
      00000E 02                    4209 	.db #0x02	; 2
      00000F 06                    4210 	.db #0x06	; 6
      000010 01                    4211 	.db #0x01	; 1
      000011 00                    4212 	.db #0x00	; 0
      000012 01                    4213 	.db #0x01	; 1
      000013 00                    4214 	.db #0x00	; 0
      000014 03                    4215 	.db #0x03	; 3
      000015 01                    4216 	.db #0x01	; 1
      000016 00                    4217 	.db #0x00	; 0
      000017 00                    4218 	.db #0x00	; 0
      000018 00                    4219 	.db #0x00	; 0
      000019 00                    4220 	.db #0x00	; 0
      00001A 00                    4221 	.db #0x00	; 0
      00001B                       4222 __xinit__reset_flag:
      00001B 00                    4223 	.db #0x00	; 0
      00001C                       4224 __xinit__current_mode:
      00001C 05                    4225 	.db #0x05	; 5
      00001D                       4226 __xinit__current_acknowledgement_state:
      00001D 01                    4227 	.db #0x01	; 1
      00001E                       4228 __xinit__dynamic_payload:
      00001E 00                    4229 	.db #0x00	; 0
      00001F                       4230 __xinit__hardwareCheckPassed:
      00001F 00                    4231 	.db #0x00	;  0
      000020                       4232 __xinit__datapipe_address:
      000020 E1                    4233 	.db #0xe1	; 225
      000021 F0                    4234 	.db #0xf0	; 240
      000022 F0                    4235 	.db #0xf0	; 240
      000023 F0                    4236 	.db #0xf0	; 240
      000024 F0                    4237 	.db #0xf0	; 240
      000025 D2                    4238 	.db #0xd2	; 210
      000026 F0                    4239 	.db #0xf0	; 240
      000027 F0                    4240 	.db #0xf0	; 240
      000028 F0                    4241 	.db #0xf0	; 240
      000029 F0                    4242 	.db #0xf0	; 240
      00002A F0                    4243 	.db #0xf0	; 240
      00002B F0                    4244 	.db #0xf0	; 240
      00002C F0                    4245 	.db #0xf0	; 240
      00002D F0                    4246 	.db #0xf0	; 240
      00002E F0                    4247 	.db #0xf0	; 240
      00002F F0                    4248 	.db #0xf0	; 240
      000030 F0                    4249 	.db #0xf0	; 240
      000031 F0                    4250 	.db #0xf0	; 240
      000032 F0                    4251 	.db #0xf0	; 240
      000033 F0                    4252 	.db #0xf0	; 240
      000034 F0                    4253 	.db #0xf0	; 240
      000035 F0                    4254 	.db #0xf0	; 240
      000036 F0                    4255 	.db #0xf0	; 240
      000037 F0                    4256 	.db #0xf0	; 240
      000038 F0                    4257 	.db #0xf0	; 240
      000039 F0                    4258 	.db #0xf0	; 240
      00003A F0                    4259 	.db #0xf0	; 240
      00003B F0                    4260 	.db #0xf0	; 240
      00003C F0                    4261 	.db #0xf0	; 240
      00003D F0                    4262 	.db #0xf0	; 240
                                   4263 	.area CABS    (ABS,CODE)
