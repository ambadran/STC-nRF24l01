                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module terminal
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _nrf24_print_internal_register_values
                                     12 	.globl _report
                                     13 	.globl _get_current_time
                                     14 	.globl _memset
                                     15 	.globl _printf
                                     16 	.globl _S1SM0_FE
                                     17 	.globl _T1IE
                                     18 	.globl _T0IE
                                     19 	.globl _T1RUN
                                     20 	.globl _T0RUN
                                     21 	.globl _CY
                                     22 	.globl _AC
                                     23 	.globl _F0
                                     24 	.globl _RS1
                                     25 	.globl _RS0
                                     26 	.globl _OV
                                     27 	.globl _F1
                                     28 	.globl _P
                                     29 	.globl _EA
                                     30 	.globl _INT1IE
                                     31 	.globl _INT0IE
                                     32 	.globl _INT1TR
                                     33 	.globl _INT0TR
                                     34 	.globl _P5_5
                                     35 	.globl _P5_4
                                     36 	.globl _P5_3
                                     37 	.globl _P5_2
                                     38 	.globl _P5_1
                                     39 	.globl _P5_0
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _P1_7
                                     57 	.globl _P1_6
                                     58 	.globl _P1_5
                                     59 	.globl _P1_4
                                     60 	.globl _P1_3
                                     61 	.globl _P1_2
                                     62 	.globl _P1_1
                                     63 	.globl _P1_0
                                     64 	.globl _USBADR
                                     65 	.globl _USBCON
                                     66 	.globl _USBDAT
                                     67 	.globl _USBCLK
                                     68 	.globl _S4BUF
                                     69 	.globl _S4CON
                                     70 	.globl _S3BUF
                                     71 	.globl _S3CON
                                     72 	.globl _S2BUF
                                     73 	.globl _S2CON
                                     74 	.globl _S1BUF
                                     75 	.globl _S1CON
                                     76 	.globl _SADEN
                                     77 	.globl _SADDR
                                     78 	.globl _AUXINTIF
                                     79 	.globl _T3
                                     80 	.globl _T3L
                                     81 	.globl _T3H
                                     82 	.globl _T4
                                     83 	.globl _T4L
                                     84 	.globl _T4H
                                     85 	.globl _T4T3M
                                     86 	.globl _WDT_CONTR
                                     87 	.globl _AUXR
                                     88 	.globl _T2
                                     89 	.globl _T2H
                                     90 	.globl _T2L
                                     91 	.globl _T1
                                     92 	.globl _T1H
                                     93 	.globl _T1L
                                     94 	.globl _T0
                                     95 	.globl _T0H
                                     96 	.globl _T0L
                                     97 	.globl _TMOD
                                     98 	.globl _TCON
                                     99 	.globl _IRTRIM
                                    100 	.globl _LIRTRIM
                                    101 	.globl _IRCBAND
                                    102 	.globl _SPDAT
                                    103 	.globl _SPCTL
                                    104 	.globl _SPSTAT
                                    105 	.globl _WKTC
                                    106 	.globl _WKTCH
                                    107 	.globl _WKTCL
                                    108 	.globl _BUS_SPEED
                                    109 	.globl _P_SW2
                                    110 	.globl _P_SW1
                                    111 	.globl _RSTCFG
                                    112 	.globl _PCON
                                    113 	.globl _B
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _SP
                                    117 	.globl _IP3H
                                    118 	.globl _IP3L
                                    119 	.globl _IP2H
                                    120 	.globl _IP2L
                                    121 	.globl _IE2
                                    122 	.globl _IP1H
                                    123 	.globl _IP1L
                                    124 	.globl _IE1
                                    125 	.globl _INT_CLKO
                                    126 	.globl _IAP_TPS
                                    127 	.globl _IAP_CONTR
                                    128 	.globl _IAP_TRIG
                                    129 	.globl _IAP_CMD
                                    130 	.globl _IAP_ADDR
                                    131 	.globl _IAP_ADDRL
                                    132 	.globl _IAP_ADDRH
                                    133 	.globl _IAP_DATA
                                    134 	.globl _P5M0
                                    135 	.globl _P5M1
                                    136 	.globl _P5
                                    137 	.globl _P3M0
                                    138 	.globl _P3M1
                                    139 	.globl _P3
                                    140 	.globl _P2M0
                                    141 	.globl _P2M1
                                    142 	.globl _P2
                                    143 	.globl _P1M0
                                    144 	.globl _P1M1
                                    145 	.globl _P1
                                    146 	.globl _TA
                                    147 	.globl _DPH1
                                    148 	.globl _DPL1
                                    149 	.globl _DPS
                                    150 	.globl _DP
                                    151 	.globl _DPH
                                    152 	.globl _DPL
                                    153 	.globl _CMPCR2
                                    154 	.globl _CMPCR1
                                    155 	.globl _DMA_ADC_AMT
                                    156 	.globl _ADCCFG
                                    157 	.globl _ADC_RES
                                    158 	.globl _ADC_RESL
                                    159 	.globl _ADC_RESH
                                    160 	.globl _ADC_CONTR
                                    161 	.globl _read_int_PARM_3
                                    162 	.globl _read_int_PARM_2
                                    163 	.globl _DMA_UR4R_TXAL
                                    164 	.globl _DMA_UR4R_TXAH
                                    165 	.globl _DMA_UR4R_DONE
                                    166 	.globl _DMA_UR4R_AMT
                                    167 	.globl _DMA_UR4R_STA
                                    168 	.globl _DMA_UR4R_CR
                                    169 	.globl _DMA_UR4R_CFG
                                    170 	.globl _DMA_UR4T_TXAL
                                    171 	.globl _DMA_UR4T_TXAH
                                    172 	.globl _DMA_UR4T_DONE
                                    173 	.globl _DMA_UR4T_AMT
                                    174 	.globl _DMA_UR4T_STA
                                    175 	.globl _DMA_UR4T_CR
                                    176 	.globl _DMA_UR4T_CFG
                                    177 	.globl _DMA_UR3R_TXAL
                                    178 	.globl _DMA_UR3R_TXAH
                                    179 	.globl _DMA_UR3R_DONE
                                    180 	.globl _DMA_UR3R_AMT
                                    181 	.globl _DMA_UR3R_STA
                                    182 	.globl _DMA_UR3R_CR
                                    183 	.globl _DMA_UR3R_CFG
                                    184 	.globl _DMA_UR3T_TXAL
                                    185 	.globl _DMA_UR3T_TXAH
                                    186 	.globl _DMA_UR3T_DONE
                                    187 	.globl _DMA_UR3T_AMT
                                    188 	.globl _DMA_UR3T_STA
                                    189 	.globl _DMA_UR3T_CR
                                    190 	.globl _DMA_UR3T_CFG
                                    191 	.globl _DMA_UR2R_TXAL
                                    192 	.globl _DMA_UR2R_TXAH
                                    193 	.globl _DMA_UR2R_DONE
                                    194 	.globl _DMA_UR2R_AMT
                                    195 	.globl _DMA_UR2R_STA
                                    196 	.globl _DMA_UR2R_CR
                                    197 	.globl _DMA_UR2R_CFG
                                    198 	.globl _DMA_UR2T_TXAL
                                    199 	.globl _DMA_UR2T_TXAH
                                    200 	.globl _DMA_UR2T_DONE
                                    201 	.globl _DMA_UR2T_AMT
                                    202 	.globl _DMA_UR2T_STA
                                    203 	.globl _DMA_UR2T_CR
                                    204 	.globl _DMA_UR2T_CFG
                                    205 	.globl _DMA_UR1R_TXAL
                                    206 	.globl _DMA_UR1R_TXAH
                                    207 	.globl _DMA_UR1R_DONE
                                    208 	.globl _DMA_UR1R_AMT
                                    209 	.globl _DMA_UR1R_STA
                                    210 	.globl _DMA_UR1R_CR
                                    211 	.globl _DMA_UR1R_CFG
                                    212 	.globl _DMA_UR1T_TXAL
                                    213 	.globl _DMA_UR1T_TXAH
                                    214 	.globl _DMA_UR1T_DONE
                                    215 	.globl _DMA_URTX_AMT
                                    216 	.globl _DMA_UR1T_STA
                                    217 	.globl _DMA_UR1T_CR
                                    218 	.globl _DMA_UR1T_CFG
                                    219 	.globl _TM4PS
                                    220 	.globl _TM3PS
                                    221 	.globl _TM2PS
                                    222 	.globl _IRC48MCR
                                    223 	.globl _IRCDB
                                    224 	.globl _MCLKOCR
                                    225 	.globl _CKSEL
                                    226 	.globl _IRC32KCR
                                    227 	.globl _X32KCR
                                    228 	.globl _XOSCCR
                                    229 	.globl _HIRCCR
                                    230 	.globl _CLKDIV
                                    231 	.globl _DMA_SPI_CFG2
                                    232 	.globl _DMA_SPI_RXAL
                                    233 	.globl _DMA_SPI_RXAH
                                    234 	.globl _DMA_SPI_TXAL
                                    235 	.globl _DMA_SPI_TXAH
                                    236 	.globl _DMA_SPI_DONE
                                    237 	.globl _DMA_SPI_AMT
                                    238 	.globl _DMA_SPI_STA
                                    239 	.globl _DMA_SPI_CR
                                    240 	.globl _DMA_SPI_CFG
                                    241 	.globl _SSEC
                                    242 	.globl _SEC
                                    243 	.globl _MIN
                                    244 	.globl _HOUR
                                    245 	.globl _DAY
                                    246 	.globl _MONTH
                                    247 	.globl _YEAR
                                    248 	.globl _INISSEC
                                    249 	.globl _INISEC
                                    250 	.globl _INIMIN
                                    251 	.globl _INIHOUR
                                    252 	.globl _INIDAY
                                    253 	.globl _INIMONTH
                                    254 	.globl _INIYEAR
                                    255 	.globl _ALASSEC
                                    256 	.globl _ALASEC
                                    257 	.globl _ALAMIN
                                    258 	.globl _ALAHOUR
                                    259 	.globl _RTCIF
                                    260 	.globl _RTCIEN
                                    261 	.globl _RTCCFG
                                    262 	.globl _RTCCR
                                    263 	.globl _PWMB_OISR
                                    264 	.globl _PWMB_DTR
                                    265 	.globl _PWMB_BKR
                                    266 	.globl _PWMB_CCR4L
                                    267 	.globl _PWMB_CCR4H
                                    268 	.globl _PWMB_CCR3L
                                    269 	.globl _PWMB_CCR3H
                                    270 	.globl _PWMB_CCR2L
                                    271 	.globl _PWMB_CCR2H
                                    272 	.globl _PWMB_CCR1L
                                    273 	.globl _PWMB_CCR1H
                                    274 	.globl _PWMB_RCR
                                    275 	.globl _PWMB_ARRL
                                    276 	.globl _PWMB_ARRH
                                    277 	.globl _PWMB_PSCRL
                                    278 	.globl _PWMB_PSCRH
                                    279 	.globl _PWMB_CNTRL
                                    280 	.globl _PWMB_CNTRH
                                    281 	.globl _PWMB_CCER2
                                    282 	.globl _PWMB_CCER1
                                    283 	.globl _PWMB_CCMR4
                                    284 	.globl _PWMB_CCMR3
                                    285 	.globl _PWMB_CCMR2
                                    286 	.globl _PWMB_CCMR1
                                    287 	.globl _PWMB_EGR
                                    288 	.globl _PWMB_SR2
                                    289 	.globl _PWMB_SR1
                                    290 	.globl _PWMB_IER
                                    291 	.globl _PWMB_ETR
                                    292 	.globl _PWMB_SMCR
                                    293 	.globl _PWMB_CR2
                                    294 	.globl _PWMB_CR1
                                    295 	.globl _PWMA_OISR
                                    296 	.globl _PWMA_DTR
                                    297 	.globl _PWMA_BKR
                                    298 	.globl _PWMA_CCR4L
                                    299 	.globl _PWMA_CCR4H
                                    300 	.globl _PWMA_CCR3L
                                    301 	.globl _PWMA_CCR3H
                                    302 	.globl _PWMA_CCR2L
                                    303 	.globl _PWMA_CCR2H
                                    304 	.globl _PWMA_CCR1L
                                    305 	.globl _PWMA_CCR1H
                                    306 	.globl _PWMA_RCR
                                    307 	.globl _PWMA_ARRL
                                    308 	.globl _PWMA_ARRH
                                    309 	.globl _PWMA_PSCRL
                                    310 	.globl _PWMA_PSCRH
                                    311 	.globl _PWMA_CNTRL
                                    312 	.globl _PWMA_CNTRH
                                    313 	.globl _PWMA_CCER2
                                    314 	.globl _PWMA_CCER1
                                    315 	.globl _PWMA_CCMR4
                                    316 	.globl _PWMA_CCMR3
                                    317 	.globl _PWMA_CCMR2
                                    318 	.globl _PWMA_CCMR1
                                    319 	.globl _PWMA_EGR
                                    320 	.globl _PWMA_SR2
                                    321 	.globl _PWMA_SR1
                                    322 	.globl _PWMA_IER
                                    323 	.globl _PWMA_ETR
                                    324 	.globl _PWMA_SMCR
                                    325 	.globl _PWMA_CR2
                                    326 	.globl _PWMA_CR1
                                    327 	.globl _PWMB_IOAUX
                                    328 	.globl _PWMB_PS
                                    329 	.globl _PWMB_ENO
                                    330 	.globl _PWMB_ETRPS
                                    331 	.globl _PWMA_IOAUX
                                    332 	.globl _PWMA_PS
                                    333 	.globl _PWMA_ENO
                                    334 	.globl _PWMA_ETRPS
                                    335 	.globl _RSTFLAG
                                    336 	.globl _SPFUNC
                                    337 	.globl _OPCON
                                    338 	.globl _ARCON
                                    339 	.globl _MD4
                                    340 	.globl _MD5
                                    341 	.globl _MD0
                                    342 	.globl _MD1
                                    343 	.globl _MD2
                                    344 	.globl _MD3
                                    345 	.globl _DMA_LCM_RXAL
                                    346 	.globl _DMA_LCM_RXAH
                                    347 	.globl _DMA_LCM_TXAL
                                    348 	.globl _DMA_LCM_TXAH
                                    349 	.globl _DMA_LCM_DONE
                                    350 	.globl _DMA_LCM_AMT
                                    351 	.globl _DMA_LCM_STA
                                    352 	.globl _DMA_LCM_CR
                                    353 	.globl _DMA_LCM_CFG
                                    354 	.globl _LCMIDDAT
                                    355 	.globl _LCMIDDATH
                                    356 	.globl _LCMIDDATL
                                    357 	.globl _LCMSTA
                                    358 	.globl _LCMCR
                                    359 	.globl _LCMCFG2
                                    360 	.globl _LCMCFG
                                    361 	.globl _I2CMSAUX
                                    362 	.globl _I2CRXD
                                    363 	.globl _I2CTXD
                                    364 	.globl _I2CSLADR
                                    365 	.globl _I2CSLST
                                    366 	.globl _I2CSLCR
                                    367 	.globl _I2CMSST
                                    368 	.globl _I2CMSCR
                                    369 	.globl _I2CCFG
                                    370 	.globl _PINIPH
                                    371 	.globl _PINIPL
                                    372 	.globl _P5IE
                                    373 	.globl _P5DR
                                    374 	.globl _P5SR
                                    375 	.globl _P5NCS
                                    376 	.globl _P5PU
                                    377 	.globl _P5WKUE
                                    378 	.globl _P5IM1
                                    379 	.globl _P5IM0
                                    380 	.globl _P5INTF
                                    381 	.globl _P5INTE
                                    382 	.globl _P3IE
                                    383 	.globl _P3DR
                                    384 	.globl _P3SR
                                    385 	.globl _P3NCS
                                    386 	.globl _P3PU
                                    387 	.globl _P3WKUE
                                    388 	.globl _P3IM1
                                    389 	.globl _P3IM0
                                    390 	.globl _P3INTF
                                    391 	.globl _P3INTE
                                    392 	.globl _P2IE
                                    393 	.globl _P2DR
                                    394 	.globl _P2SR
                                    395 	.globl _P2NCS
                                    396 	.globl _P2PU
                                    397 	.globl _P2WKUE
                                    398 	.globl _P2IM1
                                    399 	.globl _P2IM0
                                    400 	.globl _P2INTF
                                    401 	.globl _P2INTE
                                    402 	.globl _P1IE
                                    403 	.globl _P1DR
                                    404 	.globl _P1SR
                                    405 	.globl _P1NCS
                                    406 	.globl _P1PU
                                    407 	.globl _P1WKUE
                                    408 	.globl _P1IM1
                                    409 	.globl _P1IM0
                                    410 	.globl _P1INTF
                                    411 	.globl _P1INTE
                                    412 	.globl _DMA_M2M_RXAL
                                    413 	.globl _DMA_M2M_RXAH
                                    414 	.globl _DMA_M2M_TXAL
                                    415 	.globl _DMA_M2M_TXAH
                                    416 	.globl _DMA_M2M_DONE
                                    417 	.globl _DMA_M2M_AMT
                                    418 	.globl _DMA_M2M_STA
                                    419 	.globl _DMA_M2M_CR
                                    420 	.globl _DMA_M2M_CFG
                                    421 	.globl _CMPEXCFG
                                    422 	.globl _CHIP_PACKAGE_TYPE
                                    423 	.globl _CHIP_TEST_DAY_BCD
                                    424 	.globl _CHIP_TEST_MONTH_BCD
                                    425 	.globl _CHIP_TEST_YEAR_BCD
                                    426 	.globl _PROGRAM_AREA_SIZE
                                    427 	.globl _VRTRIM_44MHz
                                    428 	.globl _VRTRIM_27MHz
                                    429 	.globl _VRTRIM_10MHz
                                    430 	.globl _VRTRIM_6MHz
                                    431 	.globl _IRTRIM_48MHz
                                    432 	.globl _IRTRIM_44_2368MHz
                                    433 	.globl _IRTRIM_40MHz
                                    434 	.globl _IRTRIM_36_864MHz
                                    435 	.globl _IRTRIM_35MHz
                                    436 	.globl _IRTRIM_33_1776MHz
                                    437 	.globl _IRTRIM_30MHz
                                    438 	.globl _IRTRIM_27MHz
                                    439 	.globl _IRTRIM_24MHz
                                    440 	.globl _IRTRIM_22_1184MHz
                                    441 	.globl ___OTHER_INFO
                                    442 	.globl _CHIP_GUID
                                    443 	.globl _DMA_ADC_CHSW1
                                    444 	.globl _DMA_ADC_CHSW0
                                    445 	.globl _DMA_ADC_CFG2
                                    446 	.globl _DMA_ADC_RXAL
                                    447 	.globl _DMA_ADC_RXAH
                                    448 	.globl _DMA_ADC_STA
                                    449 	.globl _DMA_ADC_CR
                                    450 	.globl _DMA_ADC_CFG
                                    451 	.globl _ADCEXCFG
                                    452 	.globl _ADCTIM
                                    453 	.globl _read_int
                                    454 	.globl _terminal_execute_line
                                    455 ;--------------------------------------------------------
                                    456 ; special function registers
                                    457 ;--------------------------------------------------------
                                    458 	.area RSEG    (ABS,DATA)
      000000                        459 	.org 0x0000
                           0000BC   460 _ADC_CONTR	=	0x00bc
                           0000BD   461 _ADC_RESH	=	0x00bd
                           0000BE   462 _ADC_RESL	=	0x00be
                           00BDBE   463 _ADC_RES	=	0xbdbe
                           0000DE   464 _ADCCFG	=	0x00de
                           0000FA   465 _DMA_ADC_AMT	=	0x00fa
                           0000E6   466 _CMPCR1	=	0x00e6
                           0000E7   467 _CMPCR2	=	0x00e7
                           000082   468 _DPL	=	0x0082
                           000083   469 _DPH	=	0x0083
                           008382   470 _DP	=	0x8382
                           0000E3   471 _DPS	=	0x00e3
                           0000E4   472 _DPL1	=	0x00e4
                           0000E5   473 _DPH1	=	0x00e5
                           0000AE   474 _TA	=	0x00ae
                           000090   475 _P1	=	0x0090
                           000091   476 _P1M1	=	0x0091
                           000092   477 _P1M0	=	0x0092
                           0000A0   478 _P2	=	0x00a0
                           000095   479 _P2M1	=	0x0095
                           000096   480 _P2M0	=	0x0096
                           0000B0   481 _P3	=	0x00b0
                           0000B1   482 _P3M1	=	0x00b1
                           0000B2   483 _P3M0	=	0x00b2
                           0000C8   484 _P5	=	0x00c8
                           0000C9   485 _P5M1	=	0x00c9
                           0000CA   486 _P5M0	=	0x00ca
                           0000C2   487 _IAP_DATA	=	0x00c2
                           0000C3   488 _IAP_ADDRH	=	0x00c3
                           0000C4   489 _IAP_ADDRL	=	0x00c4
                           00C3C4   490 _IAP_ADDR	=	0xc3c4
                           0000C5   491 _IAP_CMD	=	0x00c5
                           0000C6   492 _IAP_TRIG	=	0x00c6
                           0000C7   493 _IAP_CONTR	=	0x00c7
                           0000F5   494 _IAP_TPS	=	0x00f5
                           00008F   495 _INT_CLKO	=	0x008f
                           0000A8   496 _IE1	=	0x00a8
                           0000B8   497 _IP1L	=	0x00b8
                           0000B7   498 _IP1H	=	0x00b7
                           0000AF   499 _IE2	=	0x00af
                           0000B5   500 _IP2L	=	0x00b5
                           0000B6   501 _IP2H	=	0x00b6
                           0000DF   502 _IP3L	=	0x00df
                           0000EE   503 _IP3H	=	0x00ee
                           000081   504 _SP	=	0x0081
                           0000D0   505 _PSW	=	0x00d0
                           0000E0   506 _ACC	=	0x00e0
                           0000F0   507 _B	=	0x00f0
                           000087   508 _PCON	=	0x0087
                           0000FF   509 _RSTCFG	=	0x00ff
                           0000A2   510 _P_SW1	=	0x00a2
                           0000BA   511 _P_SW2	=	0x00ba
                           0000A1   512 _BUS_SPEED	=	0x00a1
                           0000AA   513 _WKTCL	=	0x00aa
                           0000AB   514 _WKTCH	=	0x00ab
                           00ABAA   515 _WKTC	=	0xabaa
                           0000CD   516 _SPSTAT	=	0x00cd
                           0000CE   517 _SPCTL	=	0x00ce
                           0000CF   518 _SPDAT	=	0x00cf
                           00009D   519 _IRCBAND	=	0x009d
                           00009E   520 _LIRTRIM	=	0x009e
                           00009F   521 _IRTRIM	=	0x009f
                           000088   522 _TCON	=	0x0088
                           000089   523 _TMOD	=	0x0089
                           00008A   524 _T0L	=	0x008a
                           00008C   525 _T0H	=	0x008c
                           008C8A   526 _T0	=	0x8c8a
                           00008B   527 _T1L	=	0x008b
                           00008D   528 _T1H	=	0x008d
                           008D8B   529 _T1	=	0x8d8b
                           0000D7   530 _T2L	=	0x00d7
                           0000D6   531 _T2H	=	0x00d6
                           00D6D7   532 _T2	=	0xd6d7
                           00008E   533 _AUXR	=	0x008e
                           0000C1   534 _WDT_CONTR	=	0x00c1
                           0000D1   535 _T4T3M	=	0x00d1
                           0000D2   536 _T4H	=	0x00d2
                           0000D3   537 _T4L	=	0x00d3
                           00D2D3   538 _T4	=	0xd2d3
                           0000D4   539 _T3H	=	0x00d4
                           0000D5   540 _T3L	=	0x00d5
                           00D4D5   541 _T3	=	0xd4d5
                           0000EF   542 _AUXINTIF	=	0x00ef
                           0000A9   543 _SADDR	=	0x00a9
                           0000B9   544 _SADEN	=	0x00b9
                           000098   545 _S1CON	=	0x0098
                           000099   546 _S1BUF	=	0x0099
                           00009A   547 _S2CON	=	0x009a
                           00009B   548 _S2BUF	=	0x009b
                           0000AC   549 _S3CON	=	0x00ac
                           0000AD   550 _S3BUF	=	0x00ad
                           000084   551 _S4CON	=	0x0084
                           000085   552 _S4BUF	=	0x0085
                           0000DC   553 _USBCLK	=	0x00dc
                           0000EC   554 _USBDAT	=	0x00ec
                           0000F4   555 _USBCON	=	0x00f4
                           0000FC   556 _USBADR	=	0x00fc
                                    557 ;--------------------------------------------------------
                                    558 ; special function bits
                                    559 ;--------------------------------------------------------
                                    560 	.area RSEG    (ABS,DATA)
      000000                        561 	.org 0x0000
                           000090   562 _P1_0	=	0x0090
                           000091   563 _P1_1	=	0x0091
                           000092   564 _P1_2	=	0x0092
                           000093   565 _P1_3	=	0x0093
                           000094   566 _P1_4	=	0x0094
                           000095   567 _P1_5	=	0x0095
                           000096   568 _P1_6	=	0x0096
                           000097   569 _P1_7	=	0x0097
                           0000A0   570 _P2_0	=	0x00a0
                           0000A1   571 _P2_1	=	0x00a1
                           0000A2   572 _P2_2	=	0x00a2
                           0000A3   573 _P2_3	=	0x00a3
                           0000A4   574 _P2_4	=	0x00a4
                           0000A5   575 _P2_5	=	0x00a5
                           0000A6   576 _P2_6	=	0x00a6
                           0000A7   577 _P2_7	=	0x00a7
                           0000B0   578 _P3_0	=	0x00b0
                           0000B1   579 _P3_1	=	0x00b1
                           0000B2   580 _P3_2	=	0x00b2
                           0000B3   581 _P3_3	=	0x00b3
                           0000B4   582 _P3_4	=	0x00b4
                           0000B5   583 _P3_5	=	0x00b5
                           0000B6   584 _P3_6	=	0x00b6
                           0000B7   585 _P3_7	=	0x00b7
                           0000C8   586 _P5_0	=	0x00c8
                           0000C9   587 _P5_1	=	0x00c9
                           0000CA   588 _P5_2	=	0x00ca
                           0000CB   589 _P5_3	=	0x00cb
                           0000CC   590 _P5_4	=	0x00cc
                           0000CD   591 _P5_5	=	0x00cd
                           000088   592 _INT0TR	=	0x0088
                           00008A   593 _INT1TR	=	0x008a
                           0000A8   594 _INT0IE	=	0x00a8
                           0000AA   595 _INT1IE	=	0x00aa
                           0000AF   596 _EA	=	0x00af
                           0000D0   597 _P	=	0x00d0
                           0000D1   598 _F1	=	0x00d1
                           0000D2   599 _OV	=	0x00d2
                           0000D3   600 _RS0	=	0x00d3
                           0000D4   601 _RS1	=	0x00d4
                           0000D5   602 _F0	=	0x00d5
                           0000D6   603 _AC	=	0x00d6
                           0000D7   604 _CY	=	0x00d7
                           00008C   605 _T0RUN	=	0x008c
                           00008E   606 _T1RUN	=	0x008e
                           0000A9   607 _T0IE	=	0x00a9
                           0000AB   608 _T1IE	=	0x00ab
                           00009F   609 _S1SM0_FE	=	0x009f
                                    610 ;--------------------------------------------------------
                                    611 ; overlayable register banks
                                    612 ;--------------------------------------------------------
                                    613 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        614 	.ds 8
                                    615 ;--------------------------------------------------------
                                    616 ; internal ram data
                                    617 ;--------------------------------------------------------
                                    618 	.area DSEG    (DATA)
      000000                        619 _read_int_sloc0_1_0:
      000000                        620 	.ds 3
      000003                        621 _read_int_sloc1_1_0:
      000003                        622 	.ds 1
      000004                        623 _read_int_sloc2_1_0:
      000004                        624 	.ds 4
                                    625 ;--------------------------------------------------------
                                    626 ; overlayable items in internal ram 
                                    627 ;--------------------------------------------------------
                                    628 ;--------------------------------------------------------
                                    629 ; indirectly addressable internal ram data
                                    630 ;--------------------------------------------------------
                                    631 	.area ISEG    (DATA)
                                    632 ;--------------------------------------------------------
                                    633 ; absolute internal ram data
                                    634 ;--------------------------------------------------------
                                    635 	.area IABS    (ABS,DATA)
                                    636 	.area IABS    (ABS,DATA)
                                    637 ;--------------------------------------------------------
                                    638 ; bit data
                                    639 ;--------------------------------------------------------
                                    640 	.area BSEG    (BIT)
                                    641 ;--------------------------------------------------------
                                    642 ; paged external ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area PSEG    (PAG,XDATA)
                                    645 ;--------------------------------------------------------
                                    646 ; external ram data
                                    647 ;--------------------------------------------------------
                                    648 	.area XSEG    (XDATA)
                           00FEA8   649 _ADCTIM	=	0xfea8
                           00FEAD   650 _ADCEXCFG	=	0xfead
                           00FA10   651 _DMA_ADC_CFG	=	0xfa10
                           00FA11   652 _DMA_ADC_CR	=	0xfa11
                           00FA12   653 _DMA_ADC_STA	=	0xfa12
                           00FA17   654 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   655 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   656 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   657 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   658 _DMA_ADC_CHSW1	=	0xfa1b
                           00FDE0   659 _CHIP_GUID	=	0xfde0
                           00FDE7   660 ___OTHER_INFO	=	0xfde7
                           00FDEB   661 _IRTRIM_22_1184MHz	=	0xfdeb
                           00FDEC   662 _IRTRIM_24MHz	=	0xfdec
                           00FDED   663 _IRTRIM_27MHz	=	0xfded
                           00FDEE   664 _IRTRIM_30MHz	=	0xfdee
                           00FDEF   665 _IRTRIM_33_1776MHz	=	0xfdef
                           00FDF0   666 _IRTRIM_35MHz	=	0xfdf0
                           00FDF1   667 _IRTRIM_36_864MHz	=	0xfdf1
                           00FDF2   668 _IRTRIM_40MHz	=	0xfdf2
                           00FDF3   669 _IRTRIM_44_2368MHz	=	0xfdf3
                           00FDF4   670 _IRTRIM_48MHz	=	0xfdf4
                           00FDF5   671 _VRTRIM_6MHz	=	0xfdf5
                           00FDF6   672 _VRTRIM_10MHz	=	0xfdf6
                           00FDF7   673 _VRTRIM_27MHz	=	0xfdf7
                           00FDF8   674 _VRTRIM_44MHz	=	0xfdf8
                           00FDF9   675 _PROGRAM_AREA_SIZE	=	0xfdf9
                           00FDFB   676 _CHIP_TEST_YEAR_BCD	=	0xfdfb
                           00FDFC   677 _CHIP_TEST_MONTH_BCD	=	0xfdfc
                           00FDFD   678 _CHIP_TEST_DAY_BCD	=	0xfdfd
                           00FDFE   679 _CHIP_PACKAGE_TYPE	=	0xfdfe
                           00FEAE   680 _CMPEXCFG	=	0xfeae
                           00FA00   681 _DMA_M2M_CFG	=	0xfa00
                           00FA01   682 _DMA_M2M_CR	=	0xfa01
                           00FA02   683 _DMA_M2M_STA	=	0xfa02
                           00FA03   684 _DMA_M2M_AMT	=	0xfa03
                           00FA04   685 _DMA_M2M_DONE	=	0xfa04
                           00FA05   686 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   687 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   688 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   689 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   690 _P1INTE	=	0xfd01
                           00FD11   691 _P1INTF	=	0xfd11
                           00FD21   692 _P1IM0	=	0xfd21
                           00FD31   693 _P1IM1	=	0xfd31
                           00FD41   694 _P1WKUE	=	0xfd41
                           00FE11   695 _P1PU	=	0xfe11
                           00FE19   696 _P1NCS	=	0xfe19
                           00FE21   697 _P1SR	=	0xfe21
                           00FE29   698 _P1DR	=	0xfe29
                           00FE31   699 _P1IE	=	0xfe31
                           00FD02   700 _P2INTE	=	0xfd02
                           00FD12   701 _P2INTF	=	0xfd12
                           00FD22   702 _P2IM0	=	0xfd22
                           00FD32   703 _P2IM1	=	0xfd32
                           00FD42   704 _P2WKUE	=	0xfd42
                           00FE12   705 _P2PU	=	0xfe12
                           00FE1A   706 _P2NCS	=	0xfe1a
                           00FE22   707 _P2SR	=	0xfe22
                           00FE2A   708 _P2DR	=	0xfe2a
                           00FE32   709 _P2IE	=	0xfe32
                           00FD03   710 _P3INTE	=	0xfd03
                           00FD13   711 _P3INTF	=	0xfd13
                           00FD23   712 _P3IM0	=	0xfd23
                           00FD33   713 _P3IM1	=	0xfd33
                           00FD43   714 _P3WKUE	=	0xfd43
                           00FE13   715 _P3PU	=	0xfe13
                           00FE1B   716 _P3NCS	=	0xfe1b
                           00FE23   717 _P3SR	=	0xfe23
                           00FE2B   718 _P3DR	=	0xfe2b
                           00FE33   719 _P3IE	=	0xfe33
                           00FD05   720 _P5INTE	=	0xfd05
                           00FD15   721 _P5INTF	=	0xfd15
                           00FD25   722 _P5IM0	=	0xfd25
                           00FD35   723 _P5IM1	=	0xfd35
                           00FD45   724 _P5WKUE	=	0xfd45
                           00FE15   725 _P5PU	=	0xfe15
                           00FE1D   726 _P5NCS	=	0xfe1d
                           00FE25   727 _P5SR	=	0xfe25
                           00FE2D   728 _P5DR	=	0xfe2d
                           00FE35   729 _P5IE	=	0xfe35
                           00FD60   730 _PINIPL	=	0xfd60
                           00FD61   731 _PINIPH	=	0xfd61
                           00FE80   732 _I2CCFG	=	0xfe80
                           00FE81   733 _I2CMSCR	=	0xfe81
                           00FE82   734 _I2CMSST	=	0xfe82
                           00FE83   735 _I2CSLCR	=	0xfe83
                           00FE84   736 _I2CSLST	=	0xfe84
                           00FE85   737 _I2CSLADR	=	0xfe85
                           00FE86   738 _I2CTXD	=	0xfe86
                           00FE87   739 _I2CRXD	=	0xfe87
                           00FE88   740 _I2CMSAUX	=	0xfe88
                           00FE50   741 _LCMCFG	=	0xfe50
                           00FE51   742 _LCMCFG2	=	0xfe51
                           00FE52   743 _LCMCR	=	0xfe52
                           00FE53   744 _LCMSTA	=	0xfe53
                           00FE54   745 _LCMIDDATL	=	0xfe54
                           00FE55   746 _LCMIDDATH	=	0xfe55
                           00FE54   747 _LCMIDDAT	=	0xfe54
                           00FA70   748 _DMA_LCM_CFG	=	0xfa70
                           00FA71   749 _DMA_LCM_CR	=	0xfa71
                           00FA72   750 _DMA_LCM_STA	=	0xfa72
                           00FA73   751 _DMA_LCM_AMT	=	0xfa73
                           00FA74   752 _DMA_LCM_DONE	=	0xfa74
                           00FA75   753 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   754 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   755 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   756 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   757 _MD3	=	0xfcf0
                           00FCF1   758 _MD2	=	0xfcf1
                           00FCF2   759 _MD1	=	0xfcf2
                           00FCF3   760 _MD0	=	0xfcf3
                           00FCF4   761 _MD5	=	0xfcf4
                           00FCF5   762 _MD4	=	0xfcf5
                           00FCF6   763 _ARCON	=	0xfcf6
                           00FCF7   764 _OPCON	=	0xfcf7
                           00FE08   765 _SPFUNC	=	0xfe08
                           00FE09   766 _RSTFLAG	=	0xfe09
                           00FEB0   767 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   768 _PWMA_ENO	=	0xfeb1
                           00FEB2   769 _PWMA_PS	=	0xfeb2
                           00FEB3   770 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   771 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   772 _PWMB_ENO	=	0xfeb5
                           00FEB6   773 _PWMB_PS	=	0xfeb6
                           00FEB7   774 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   775 _PWMA_CR1	=	0xfec0
                           00FEC1   776 _PWMA_CR2	=	0xfec1
                           00FEC2   777 _PWMA_SMCR	=	0xfec2
                           00FEC3   778 _PWMA_ETR	=	0xfec3
                           00FEC4   779 _PWMA_IER	=	0xfec4
                           00FEC5   780 _PWMA_SR1	=	0xfec5
                           00FEC6   781 _PWMA_SR2	=	0xfec6
                           00FEC7   782 _PWMA_EGR	=	0xfec7
                           00FEC8   783 _PWMA_CCMR1	=	0xfec8
                           00FEC9   784 _PWMA_CCMR2	=	0xfec9
                           00FECA   785 _PWMA_CCMR3	=	0xfeca
                           00FECB   786 _PWMA_CCMR4	=	0xfecb
                           00FECC   787 _PWMA_CCER1	=	0xfecc
                           00FECD   788 _PWMA_CCER2	=	0xfecd
                           00FECE   789 _PWMA_CNTRH	=	0xfece
                           00FECF   790 _PWMA_CNTRL	=	0xfecf
                           00FED0   791 _PWMA_PSCRH	=	0xfed0
                           00FED1   792 _PWMA_PSCRL	=	0xfed1
                           00FED2   793 _PWMA_ARRH	=	0xfed2
                           00FED3   794 _PWMA_ARRL	=	0xfed3
                           00FED4   795 _PWMA_RCR	=	0xfed4
                           00FED5   796 _PWMA_CCR1H	=	0xfed5
                           00FED6   797 _PWMA_CCR1L	=	0xfed6
                           00FED7   798 _PWMA_CCR2H	=	0xfed7
                           00FED8   799 _PWMA_CCR2L	=	0xfed8
                           00FED9   800 _PWMA_CCR3H	=	0xfed9
                           00FEDA   801 _PWMA_CCR3L	=	0xfeda
                           00FEDB   802 _PWMA_CCR4H	=	0xfedb
                           00FEDC   803 _PWMA_CCR4L	=	0xfedc
                           00FEDD   804 _PWMA_BKR	=	0xfedd
                           00FEDE   805 _PWMA_DTR	=	0xfede
                           00FEDF   806 _PWMA_OISR	=	0xfedf
                           00FEE0   807 _PWMB_CR1	=	0xfee0
                           00FEE1   808 _PWMB_CR2	=	0xfee1
                           00FEE2   809 _PWMB_SMCR	=	0xfee2
                           00FEE3   810 _PWMB_ETR	=	0xfee3
                           00FEE4   811 _PWMB_IER	=	0xfee4
                           00FEE5   812 _PWMB_SR1	=	0xfee5
                           00FEE6   813 _PWMB_SR2	=	0xfee6
                           00FEE7   814 _PWMB_EGR	=	0xfee7
                           00FEE8   815 _PWMB_CCMR1	=	0xfee8
                           00FEE9   816 _PWMB_CCMR2	=	0xfee9
                           00FEEA   817 _PWMB_CCMR3	=	0xfeea
                           00FEEB   818 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   819 _PWMB_CCER1	=	0xfeec
                           00FEED   820 _PWMB_CCER2	=	0xfeed
                           00FEEE   821 _PWMB_CNTRH	=	0xfeee
                           00FEEF   822 _PWMB_CNTRL	=	0xfeef
                           00FEF0   823 _PWMB_PSCRH	=	0xfef0
                           00FEF1   824 _PWMB_PSCRL	=	0xfef1
                           00FEF2   825 _PWMB_ARRH	=	0xfef2
                           00FEF3   826 _PWMB_ARRL	=	0xfef3
                           00FEF4   827 _PWMB_RCR	=	0xfef4
                           00FEF5   828 _PWMB_CCR1H	=	0xfef5
                           00FEF6   829 _PWMB_CCR1L	=	0xfef6
                           00FEF7   830 _PWMB_CCR2H	=	0xfef7
                           00FEF8   831 _PWMB_CCR2L	=	0xfef8
                           00FEF9   832 _PWMB_CCR3H	=	0xfef9
                           00FEFA   833 _PWMB_CCR3L	=	0xfefa
                           00FEFB   834 _PWMB_CCR4H	=	0xfefb
                           00FEFC   835 _PWMB_CCR4L	=	0xfefc
                           00FEFD   836 _PWMB_BKR	=	0xfefd
                           00FEFE   837 _PWMB_DTR	=	0xfefe
                           00FEFF   838 _PWMB_OISR	=	0xfeff
                           00FE60   839 _RTCCR	=	0xfe60
                           00FE61   840 _RTCCFG	=	0xfe61
                           00FE62   841 _RTCIEN	=	0xfe62
                           00FE63   842 _RTCIF	=	0xfe63
                           00FE64   843 _ALAHOUR	=	0xfe64
                           00FE65   844 _ALAMIN	=	0xfe65
                           00FE66   845 _ALASEC	=	0xfe66
                           00FE67   846 _ALASSEC	=	0xfe67
                           00FE68   847 _INIYEAR	=	0xfe68
                           00FE69   848 _INIMONTH	=	0xfe69
                           00FE6A   849 _INIDAY	=	0xfe6a
                           00FE6B   850 _INIHOUR	=	0xfe6b
                           00FE6C   851 _INIMIN	=	0xfe6c
                           00FE6D   852 _INISEC	=	0xfe6d
                           00FE6E   853 _INISSEC	=	0xfe6e
                           00FE70   854 _YEAR	=	0xfe70
                           00FE71   855 _MONTH	=	0xfe71
                           00FE72   856 _DAY	=	0xfe72
                           00FE73   857 _HOUR	=	0xfe73
                           00FE74   858 _MIN	=	0xfe74
                           00FE75   859 _SEC	=	0xfe75
                           00FE76   860 _SSEC	=	0xfe76
                           00FA20   861 _DMA_SPI_CFG	=	0xfa20
                           00FA21   862 _DMA_SPI_CR	=	0xfa21
                           00FA22   863 _DMA_SPI_STA	=	0xfa22
                           00FA23   864 _DMA_SPI_AMT	=	0xfa23
                           00FA24   865 _DMA_SPI_DONE	=	0xfa24
                           00FA25   866 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   867 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   868 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   869 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   870 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   871 _CLKDIV	=	0xfe01
                           00FE02   872 _HIRCCR	=	0xfe02
                           00FE03   873 _XOSCCR	=	0xfe03
                           00FE08   874 _X32KCR	=	0xfe08
                           00FE04   875 _IRC32KCR	=	0xfe04
                           00FE00   876 _CKSEL	=	0xfe00
                           00FE05   877 _MCLKOCR	=	0xfe05
                           00FE06   878 _IRCDB	=	0xfe06
                           00FE07   879 _IRC48MCR	=	0xfe07
                           00FEA2   880 _TM2PS	=	0xfea2
                           00FEA3   881 _TM3PS	=	0xfea3
                           00FEA4   882 _TM4PS	=	0xfea4
                           00FA30   883 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   884 _DMA_UR1T_CR	=	0xfa31
                           00FA32   885 _DMA_UR1T_STA	=	0xfa32
                           00FA33   886 _DMA_URTX_AMT	=	0xfa33
                           00FA34   887 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   888 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   889 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   890 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   891 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   892 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   893 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   894 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   895 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   896 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   897 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   898 _DMA_UR2T_CR	=	0xfa31
                           00FA32   899 _DMA_UR2T_STA	=	0xfa32
                           00FA33   900 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   901 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   902 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   903 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   904 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   905 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   906 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   907 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   908 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   909 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   910 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   911 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   912 _DMA_UR3T_CR	=	0xfa31
                           00FA32   913 _DMA_UR3T_STA	=	0xfa32
                           00FA33   914 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   915 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   916 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   917 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   918 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   919 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   920 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   921 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   922 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   923 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   924 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   925 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   926 _DMA_UR4T_CR	=	0xfa31
                           00FA32   927 _DMA_UR4T_STA	=	0xfa32
                           00FA33   928 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   929 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   930 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   931 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   932 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   933 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   934 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   935 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   936 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   937 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   938 _DMA_UR4R_TXAL	=	0xfa3e
      000000                        939 _uartGetCharacter_result_65536_69:
      000000                        940 	.ds 1
      000001                        941 _command:
      000001                        942 	.ds 6
      000007                        943 _read_int_PARM_2:
      000007                        944 	.ds 3
      00000A                        945 _read_int_PARM_3:
      00000A                        946 	.ds 3
      00000D                        947 _read_int_line_65536_131:
      00000D                        948 	.ds 3
      000010                        949 _read_int_ptr_65536_132:
      000010                        950 	.ds 3
      000013                        951 _read_int_c_65536_132:
      000013                        952 	.ds 1
      000014                        953 _read_int_isnegative_65537_133:
      000014                        954 	.ds 1
      000015                        955 _read_int_intval_65538_136:
      000015                        956 	.ds 4
      000019                        957 _read_int_lival_65539_143:
      000019                        958 	.ds 4
      00001D                        959 _terminal_execute_line_line_65536_148:
      00001D                        960 	.ds 3
      000020                        961 _terminal_execute_line_char_count_65536_149:
      000020                        962 	.ds 1
      000021                        963 _terminal_execute_line_letter_65536_149:
      000021                        964 	.ds 1
      000022                        965 _terminal_execute_line_int_value_65536_149:
      000022                        966 	.ds 2
                                    967 ;--------------------------------------------------------
                                    968 ; absolute external ram data
                                    969 ;--------------------------------------------------------
                                    970 	.area XABS    (ABS,XDATA)
                                    971 ;--------------------------------------------------------
                                    972 ; external initialized ram data
                                    973 ;--------------------------------------------------------
                                    974 	.area XISEG   (XDATA)
                                    975 	.area HOME    (CODE)
                                    976 	.area GSINIT0 (CODE)
                                    977 	.area GSINIT1 (CODE)
                                    978 	.area GSINIT2 (CODE)
                                    979 	.area GSINIT3 (CODE)
                                    980 	.area GSINIT4 (CODE)
                                    981 	.area GSINIT5 (CODE)
                                    982 	.area GSINIT  (CODE)
                                    983 	.area GSFINAL (CODE)
                                    984 	.area CSEG    (CODE)
                                    985 ;--------------------------------------------------------
                                    986 ; global & static initialisations
                                    987 ;--------------------------------------------------------
                                    988 	.area HOME    (CODE)
                                    989 	.area GSINIT  (CODE)
                                    990 	.area GSFINAL (CODE)
                                    991 	.area GSINIT  (CODE)
                                    992 ;--------------------------------------------------------
                                    993 ; Home
                                    994 ;--------------------------------------------------------
                                    995 	.area HOME    (CODE)
                                    996 	.area HOME    (CODE)
                                    997 ;--------------------------------------------------------
                                    998 ; code
                                    999 ;--------------------------------------------------------
                                   1000 	.area CSEG    (CODE)
                                   1001 ;------------------------------------------------------------
                                   1002 ;Allocation info for local variables in function 'read_int'
                                   1003 ;------------------------------------------------------------
                                   1004 ;sloc0                     Allocated with name '_read_int_sloc0_1_0'
                                   1005 ;sloc1                     Allocated with name '_read_int_sloc1_1_0'
                                   1006 ;sloc2                     Allocated with name '_read_int_sloc2_1_0'
                                   1007 ;char_count                Allocated with name '_read_int_PARM_2'
                                   1008 ;int_value_ptr             Allocated with name '_read_int_PARM_3'
                                   1009 ;line                      Allocated with name '_read_int_line_65536_131'
                                   1010 ;ptr                       Allocated with name '_read_int_ptr_65536_132'
                                   1011 ;c                         Allocated with name '_read_int_c_65536_132'
                                   1012 ;isnegative                Allocated with name '_read_int_isnegative_65537_133'
                                   1013 ;intval                    Allocated with name '_read_int_intval_65538_136'
                                   1014 ;ndigit                    Allocated with name '_read_int_ndigit_65538_136'
                                   1015 ;exp                       Allocated with name '_read_int_exp_65538_136'
                                   1016 ;lival                     Allocated with name '_read_int_lival_65539_143'
                                   1017 ;------------------------------------------------------------
                                   1018 ;	terminal.c:6: bool read_int(char *line, uint8_t* char_count, int16_t* int_value_ptr) {
                                   1019 ;	-----------------------------------------
                                   1020 ;	 function read_int
                                   1021 ;	-----------------------------------------
      000000                       1022 _read_int:
                           000007  1023 	ar7 = 0x07
                           000006  1024 	ar6 = 0x06
                           000005  1025 	ar5 = 0x05
                           000004  1026 	ar4 = 0x04
                           000003  1027 	ar3 = 0x03
                           000002  1028 	ar2 = 0x02
                           000001  1029 	ar1 = 0x01
                           000000  1030 	ar0 = 0x00
      000000 AF F0            [24] 1031 	mov	r7,b
      000002 AE 83            [24] 1032 	mov	r6,dph
      000004 E5 82            [12] 1033 	mov	a,dpl
      000006 90r00r0D         [24] 1034 	mov	dptr,#_read_int_line_65536_131
      000009 F0               [24] 1035 	movx	@dptr,a
      00000A EE               [12] 1036 	mov	a,r6
      00000B A3               [24] 1037 	inc	dptr
      00000C F0               [24] 1038 	movx	@dptr,a
      00000D EF               [12] 1039 	mov	a,r7
      00000E A3               [24] 1040 	inc	dptr
      00000F F0               [24] 1041 	movx	@dptr,a
                                   1042 ;	terminal.c:8: char *ptr = line + *char_count; // the variable that will extract the next digit from
      000010 90r00r07         [24] 1043 	mov	dptr,#_read_int_PARM_2
      000013 E0               [24] 1044 	movx	a,@dptr
      000014 FD               [12] 1045 	mov	r5,a
      000015 A3               [24] 1046 	inc	dptr
      000016 E0               [24] 1047 	movx	a,@dptr
      000017 FE               [12] 1048 	mov	r6,a
      000018 A3               [24] 1049 	inc	dptr
      000019 E0               [24] 1050 	movx	a,@dptr
      00001A FF               [12] 1051 	mov	r7,a
      00001B 8D 82            [24] 1052 	mov	dpl,r5
      00001D 8E 83            [24] 1053 	mov	dph,r6
      00001F 8F F0            [24] 1054 	mov	b,r7
      000021 12r00r00         [24] 1055 	lcall	__gptrget
      000024 FC               [12] 1056 	mov	r4,a
      000025 90r00r0D         [24] 1057 	mov	dptr,#_read_int_line_65536_131
      000028 E0               [24] 1058 	movx	a,@dptr
      000029 F9               [12] 1059 	mov	r1,a
      00002A A3               [24] 1060 	inc	dptr
      00002B E0               [24] 1061 	movx	a,@dptr
      00002C FA               [12] 1062 	mov	r2,a
      00002D A3               [24] 1063 	inc	dptr
      00002E E0               [24] 1064 	movx	a,@dptr
      00002F FB               [12] 1065 	mov	r3,a
      000030 EC               [12] 1066 	mov	a,r4
      000031 29               [12] 1067 	add	a,r1
      000032 FC               [12] 1068 	mov	r4,a
      000033 E4               [12] 1069 	clr	a
      000034 3A               [12] 1070 	addc	a,r2
      000035 FA               [12] 1071 	mov	r2,a
                                   1072 ;	terminal.c:11: c = *ptr++;  // extracting the next digit!
      000036 8C 82            [24] 1073 	mov	dpl,r4
      000038 8A 83            [24] 1074 	mov	dph,r2
      00003A 8B F0            [24] 1075 	mov	b,r3
      00003C 12r00r00         [24] 1076 	lcall	__gptrget
      00003F F9               [12] 1077 	mov	r1,a
      000040 74 01            [12] 1078 	mov	a,#0x01
      000042 2C               [12] 1079 	add	a,r4
      000043 F5*00            [12] 1080 	mov	_read_int_sloc0_1_0,a
      000045 E4               [12] 1081 	clr	a
      000046 3A               [12] 1082 	addc	a,r2
      000047 F5*01            [12] 1083 	mov	(_read_int_sloc0_1_0 + 1),a
      000049 8B*02            [24] 1084 	mov	(_read_int_sloc0_1_0 + 2),r3
      00004B 90r00r10         [24] 1085 	mov	dptr,#_read_int_ptr_65536_132
      00004E E5*00            [12] 1086 	mov	a,_read_int_sloc0_1_0
      000050 F0               [24] 1087 	movx	@dptr,a
      000051 E5*01            [12] 1088 	mov	a,(_read_int_sloc0_1_0 + 1)
      000053 A3               [24] 1089 	inc	dptr
      000054 F0               [24] 1090 	movx	@dptr,a
      000055 E5*02            [12] 1091 	mov	a,(_read_int_sloc0_1_0 + 2)
      000057 A3               [24] 1092 	inc	dptr
      000058 F0               [24] 1093 	movx	@dptr,a
      000059 90r00r13         [24] 1094 	mov	dptr,#_read_int_c_65536_132
      00005C E9               [12] 1095 	mov	a,r1
      00005D F0               [24] 1096 	movx	@dptr,a
                                   1097 ;	terminal.c:14: bool isnegative = false;
      00005E 90r00r14         [24] 1098 	mov	dptr,#_read_int_isnegative_65537_133
      000061 E4               [12] 1099 	clr	a
      000062 F0               [24] 1100 	movx	@dptr,a
                                   1101 ;	terminal.c:15: if (c == '-') {
      000063 B9 2D 28         [24] 1102 	cjne	r1,#0x2d,00104$
                                   1103 ;	terminal.c:16: isnegative = true;
      000066 90r00r14         [24] 1104 	mov	dptr,#_read_int_isnegative_65537_133
      000069 74 01            [12] 1105 	mov	a,#0x01
      00006B F0               [24] 1106 	movx	@dptr,a
                                   1107 ;	terminal.c:17: c = *ptr++;
      00006C 85*00 82         [24] 1108 	mov	dpl,_read_int_sloc0_1_0
      00006F 85*01 83         [24] 1109 	mov	dph,(_read_int_sloc0_1_0 + 1)
      000072 85*02 F0         [24] 1110 	mov	b,(_read_int_sloc0_1_0 + 2)
      000075 12r00r00         [24] 1111 	lcall	__gptrget
      000078 F8               [12] 1112 	mov	r0,a
      000079 90r00r10         [24] 1113 	mov	dptr,#_read_int_ptr_65536_132
      00007C 74 02            [12] 1114 	mov	a,#0x02
      00007E 2C               [12] 1115 	add	a,r4
      00007F F0               [24] 1116 	movx	@dptr,a
      000080 E4               [12] 1117 	clr	a
      000081 3A               [12] 1118 	addc	a,r2
      000082 A3               [24] 1119 	inc	dptr
      000083 F0               [24] 1120 	movx	@dptr,a
      000084 EB               [12] 1121 	mov	a,r3
      000085 A3               [24] 1122 	inc	dptr
      000086 F0               [24] 1123 	movx	@dptr,a
      000087 90r00r13         [24] 1124 	mov	dptr,#_read_int_c_65536_132
      00008A E8               [12] 1125 	mov	a,r0
      00008B F0               [24] 1126 	movx	@dptr,a
      00008C 80 23            [24] 1127 	sjmp	00105$
      00008E                       1128 00104$:
                                   1129 ;	terminal.c:20: } else if (c == '+') {
      00008E B9 2B 20         [24] 1130 	cjne	r1,#0x2b,00105$
                                   1131 ;	terminal.c:21: c = *ptr++;
      000091 85*00 82         [24] 1132 	mov	dpl,_read_int_sloc0_1_0
      000094 85*01 83         [24] 1133 	mov	dph,(_read_int_sloc0_1_0 + 1)
      000097 85*02 F0         [24] 1134 	mov	b,(_read_int_sloc0_1_0 + 2)
      00009A 12r00r00         [24] 1135 	lcall	__gptrget
      00009D F9               [12] 1136 	mov	r1,a
      00009E 90r00r10         [24] 1137 	mov	dptr,#_read_int_ptr_65536_132
      0000A1 74 02            [12] 1138 	mov	a,#0x02
      0000A3 2C               [12] 1139 	add	a,r4
      0000A4 F0               [24] 1140 	movx	@dptr,a
      0000A5 E4               [12] 1141 	clr	a
      0000A6 3A               [12] 1142 	addc	a,r2
      0000A7 A3               [24] 1143 	inc	dptr
      0000A8 F0               [24] 1144 	movx	@dptr,a
      0000A9 EB               [12] 1145 	mov	a,r3
      0000AA A3               [24] 1146 	inc	dptr
      0000AB F0               [24] 1147 	movx	@dptr,a
      0000AC 90r00r13         [24] 1148 	mov	dptr,#_read_int_c_65536_132
      0000AF E9               [12] 1149 	mov	a,r1
      0000B0 F0               [24] 1150 	movx	@dptr,a
      0000B1                       1151 00105$:
                                   1152 ;	terminal.c:25: uint32_t intval = 0;
      0000B1 90r00r15         [24] 1153 	mov	dptr,#_read_int_intval_65538_136
      0000B4 E4               [12] 1154 	clr	a
      0000B5 F0               [24] 1155 	movx	@dptr,a
      0000B6 A3               [24] 1156 	inc	dptr
      0000B7 F0               [24] 1157 	movx	@dptr,a
      0000B8 A3               [24] 1158 	inc	dptr
      0000B9 F0               [24] 1159 	movx	@dptr,a
      0000BA A3               [24] 1160 	inc	dptr
      0000BB F0               [24] 1161 	movx	@dptr,a
                                   1162 ;	terminal.c:28: while (1) {
      0000BC 7C 00            [12] 1163 	mov	r4,#0x00
                                   1164 ;	1-genFromRTrack replaced	mov	_read_int_sloc1_1_0,#0x00
      0000BE F5*03            [12] 1165 	mov	_read_int_sloc1_1_0,a
      0000C0 90r00r10         [24] 1166 	mov	dptr,#_read_int_ptr_65536_132
      0000C3 E0               [24] 1167 	movx	a,@dptr
      0000C4 F8               [12] 1168 	mov	r0,a
      0000C5 A3               [24] 1169 	inc	dptr
      0000C6 E0               [24] 1170 	movx	a,@dptr
      0000C7 F9               [12] 1171 	mov	r1,a
      0000C8 A3               [24] 1172 	inc	dptr
      0000C9 E0               [24] 1173 	movx	a,@dptr
      0000CA FA               [12] 1174 	mov	r2,a
      0000CB                       1175 00113$:
                                   1176 ;	terminal.c:30: c -= '0';
      0000CB C0 05            [24] 1177 	push	ar5
      0000CD C0 06            [24] 1178 	push	ar6
      0000CF C0 07            [24] 1179 	push	ar7
      0000D1 90r00r13         [24] 1180 	mov	dptr,#_read_int_c_65536_132
      0000D4 E0               [24] 1181 	movx	a,@dptr
      0000D5 24 D0            [12] 1182 	add	a,#0xd0
      0000D7 F0               [24] 1183 	movx	@dptr,a
                                   1184 ;	terminal.c:31: if (c <= 9) {
      0000D8 E0               [24] 1185 	movx	a,@dptr
      0000D9 F5*00            [12] 1186 	mov	_read_int_sloc0_1_0,a
      0000DB C3               [12] 1187 	clr	c
      0000DC 74 09            [12] 1188 	mov	a,#0x09
      0000DE 95*00            [12] 1189 	subb	a,_read_int_sloc0_1_0
      0000E0 D0 07            [24] 1190 	pop	ar7
      0000E2 D0 06            [24] 1191 	pop	ar6
      0000E4 D0 05            [24] 1192 	pop	ar5
      0000E6 50 03            [24] 1193 	jnc	00168$
      0000E8 02r01r85         [24] 1194 	ljmp	00135$
      0000EB                       1195 00168$:
                                   1196 ;	terminal.c:32: ndigit++;
      0000EB 0C               [12] 1197 	inc	r4
                                   1198 ;	terminal.c:33: if (ndigit <= MAX_INT_DIGITS) {
      0000EC EC               [12] 1199 	mov	a,r4
      0000ED 24 F7            [12] 1200 	add	a,#0xff - 0x08
      0000EF 40 7B            [24] 1201 	jc	00107$
                                   1202 ;	terminal.c:35: intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
      0000F1 C0 05            [24] 1203 	push	ar5
      0000F3 C0 06            [24] 1204 	push	ar6
      0000F5 C0 07            [24] 1205 	push	ar7
      0000F7 90r00r15         [24] 1206 	mov	dptr,#_read_int_intval_65538_136
      0000FA E0               [24] 1207 	movx	a,@dptr
      0000FB F5*04            [12] 1208 	mov	_read_int_sloc2_1_0,a
      0000FD A3               [24] 1209 	inc	dptr
      0000FE E0               [24] 1210 	movx	a,@dptr
      0000FF F5*05            [12] 1211 	mov	(_read_int_sloc2_1_0 + 1),a
      000101 A3               [24] 1212 	inc	dptr
      000102 E0               [24] 1213 	movx	a,@dptr
      000103 F5*06            [12] 1214 	mov	(_read_int_sloc2_1_0 + 2),a
      000105 A3               [24] 1215 	inc	dptr
      000106 E0               [24] 1216 	movx	a,@dptr
      000107 F5*07            [12] 1217 	mov	(_read_int_sloc2_1_0 + 3),a
      000109 E5*04            [12] 1218 	mov	a,_read_int_sloc2_1_0
      00010B 25*04            [12] 1219 	add	a,_read_int_sloc2_1_0
      00010D FB               [12] 1220 	mov	r3,a
      00010E E5*05            [12] 1221 	mov	a,(_read_int_sloc2_1_0 + 1)
      000110 33               [12] 1222 	rlc	a
      000111 FD               [12] 1223 	mov	r5,a
      000112 E5*06            [12] 1224 	mov	a,(_read_int_sloc2_1_0 + 2)
      000114 33               [12] 1225 	rlc	a
      000115 FE               [12] 1226 	mov	r6,a
      000116 E5*07            [12] 1227 	mov	a,(_read_int_sloc2_1_0 + 3)
      000118 33               [12] 1228 	rlc	a
      000119 FF               [12] 1229 	mov	r7,a
      00011A EB               [12] 1230 	mov	a,r3
      00011B 2B               [12] 1231 	add	a,r3
      00011C FB               [12] 1232 	mov	r3,a
      00011D ED               [12] 1233 	mov	a,r5
      00011E 33               [12] 1234 	rlc	a
      00011F FD               [12] 1235 	mov	r5,a
      000120 EE               [12] 1236 	mov	a,r6
      000121 33               [12] 1237 	rlc	a
      000122 FE               [12] 1238 	mov	r6,a
      000123 EF               [12] 1239 	mov	a,r7
      000124 33               [12] 1240 	rlc	a
      000125 FF               [12] 1241 	mov	r7,a
      000126 E5*04            [12] 1242 	mov	a,_read_int_sloc2_1_0
      000128 2B               [12] 1243 	add	a,r3
      000129 FB               [12] 1244 	mov	r3,a
      00012A E5*05            [12] 1245 	mov	a,(_read_int_sloc2_1_0 + 1)
      00012C 3D               [12] 1246 	addc	a,r5
      00012D FD               [12] 1247 	mov	r5,a
      00012E E5*06            [12] 1248 	mov	a,(_read_int_sloc2_1_0 + 2)
      000130 3E               [12] 1249 	addc	a,r6
      000131 FE               [12] 1250 	mov	r6,a
      000132 E5*07            [12] 1251 	mov	a,(_read_int_sloc2_1_0 + 3)
      000134 3F               [12] 1252 	addc	a,r7
      000135 FF               [12] 1253 	mov	r7,a
      000136 EB               [12] 1254 	mov	a,r3
      000137 2B               [12] 1255 	add	a,r3
      000138 F5*04            [12] 1256 	mov	_read_int_sloc2_1_0,a
      00013A ED               [12] 1257 	mov	a,r5
      00013B 33               [12] 1258 	rlc	a
      00013C F5*05            [12] 1259 	mov	(_read_int_sloc2_1_0 + 1),a
      00013E EE               [12] 1260 	mov	a,r6
      00013F 33               [12] 1261 	rlc	a
      000140 F5*06            [12] 1262 	mov	(_read_int_sloc2_1_0 + 2),a
      000142 EF               [12] 1263 	mov	a,r7
      000143 33               [12] 1264 	rlc	a
      000144 F5*07            [12] 1265 	mov	(_read_int_sloc2_1_0 + 3),a
      000146 AB*00            [24] 1266 	mov	r3,_read_int_sloc0_1_0
      000148 7D 00            [12] 1267 	mov	r5,#0x00
      00014A 7E 00            [12] 1268 	mov	r6,#0x00
      00014C 7F 00            [12] 1269 	mov	r7,#0x00
      00014E 90r00r15         [24] 1270 	mov	dptr,#_read_int_intval_65538_136
      000151 EB               [12] 1271 	mov	a,r3
      000152 25*04            [12] 1272 	add	a,_read_int_sloc2_1_0
      000154 F0               [24] 1273 	movx	@dptr,a
      000155 ED               [12] 1274 	mov	a,r5
      000156 35*05            [12] 1275 	addc	a,(_read_int_sloc2_1_0 + 1)
      000158 A3               [24] 1276 	inc	dptr
      000159 F0               [24] 1277 	movx	@dptr,a
      00015A EE               [12] 1278 	mov	a,r6
      00015B 35*06            [12] 1279 	addc	a,(_read_int_sloc2_1_0 + 2)
      00015D A3               [24] 1280 	inc	dptr
      00015E F0               [24] 1281 	movx	@dptr,a
      00015F EF               [12] 1282 	mov	a,r7
      000160 35*07            [12] 1283 	addc	a,(_read_int_sloc2_1_0 + 3)
      000162 A3               [24] 1284 	inc	dptr
      000163 F0               [24] 1285 	movx	@dptr,a
      000164 D0 07            [24] 1286 	pop	ar7
      000166 D0 06            [24] 1287 	pop	ar6
      000168 D0 05            [24] 1288 	pop	ar5
      00016A 80 02            [24] 1289 	sjmp	00111$
      00016C                       1290 00107$:
                                   1291 ;	terminal.c:39: exp++;  // Drop overflow digits
      00016C 05*03            [12] 1292 	inc	_read_int_sloc1_1_0
                                   1293 ;	terminal.c:44: break;
      00016E                       1294 00111$:
                                   1295 ;	terminal.c:46: c = *ptr++;
      00016E 88 82            [24] 1296 	mov	dpl,r0
      000170 89 83            [24] 1297 	mov	dph,r1
      000172 8A F0            [24] 1298 	mov	b,r2
      000174 12r00r00         [24] 1299 	lcall	__gptrget
      000177 FB               [12] 1300 	mov	r3,a
      000178 A3               [24] 1301 	inc	dptr
      000179 A8 82            [24] 1302 	mov	r0,dpl
      00017B A9 83            [24] 1303 	mov	r1,dph
      00017D 90r00r13         [24] 1304 	mov	dptr,#_read_int_c_65536_132
      000180 EB               [12] 1305 	mov	a,r3
      000181 F0               [24] 1306 	movx	@dptr,a
      000182 02r00rCB         [24] 1307 	ljmp	00113$
      000185                       1308 00135$:
      000185 90r00r10         [24] 1309 	mov	dptr,#_read_int_ptr_65536_132
      000188 E8               [12] 1310 	mov	a,r0
      000189 F0               [24] 1311 	movx	@dptr,a
      00018A E9               [12] 1312 	mov	a,r1
      00018B A3               [24] 1313 	inc	dptr
      00018C F0               [24] 1314 	movx	@dptr,a
      00018D EA               [12] 1315 	mov	a,r2
      00018E A3               [24] 1316 	inc	dptr
      00018F F0               [24] 1317 	movx	@dptr,a
                                   1318 ;	terminal.c:50: if (!ndigit) { return(false); };
      000190 EC               [12] 1319 	mov	a,r4
      000191 70 03            [24] 1320 	jnz	00116$
      000193 F5 82            [12] 1321 	mov	dpl,a
      000195 22               [24] 1322 	ret
      000196                       1323 00116$:
                                   1324 ;	terminal.c:53: lival = (long int)intval;
      000196 90r00r15         [24] 1325 	mov	dptr,#_read_int_intval_65538_136
      000199 E0               [24] 1326 	movx	a,@dptr
      00019A F9               [12] 1327 	mov	r1,a
      00019B A3               [24] 1328 	inc	dptr
      00019C E0               [24] 1329 	movx	a,@dptr
      00019D FA               [12] 1330 	mov	r2,a
      00019E A3               [24] 1331 	inc	dptr
      00019F E0               [24] 1332 	movx	a,@dptr
      0001A0 FB               [12] 1333 	mov	r3,a
      0001A1 A3               [24] 1334 	inc	dptr
      0001A2 E0               [24] 1335 	movx	a,@dptr
      0001A3 FC               [12] 1336 	mov	r4,a
      0001A4 90r00r19         [24] 1337 	mov	dptr,#_read_int_lival_65539_143
      0001A7 E9               [12] 1338 	mov	a,r1
      0001A8 F0               [24] 1339 	movx	@dptr,a
      0001A9 EA               [12] 1340 	mov	a,r2
      0001AA A3               [24] 1341 	inc	dptr
      0001AB F0               [24] 1342 	movx	@dptr,a
      0001AC EB               [12] 1343 	mov	a,r3
      0001AD A3               [24] 1344 	inc	dptr
      0001AE F0               [24] 1345 	movx	@dptr,a
      0001AF EC               [12] 1346 	mov	a,r4
      0001B0 A3               [24] 1347 	inc	dptr
      0001B1 F0               [24] 1348 	movx	@dptr,a
                                   1349 ;	terminal.c:55: if (exp > 0) {
      0001B2 C3               [12] 1350 	clr	c
      0001B3 74 80            [12] 1351 	mov	a,#(0x00 ^ 0x80)
      0001B5 85*03 F0         [24] 1352 	mov	b,_read_int_sloc1_1_0
      0001B8 63 F0 80         [24] 1353 	xrl	b,#0x80
      0001BB 95 F0            [12] 1354 	subb	a,b
      0001BD 40 03            [24] 1355 	jc	00171$
      0001BF 02r02r3D         [24] 1356 	ljmp	00121$
      0001C2                       1357 00171$:
                                   1358 ;	terminal.c:56: do {
      0001C2 AC*03            [24] 1359 	mov	r4,_read_int_sloc1_1_0
      0001C4                       1360 00117$:
                                   1361 ;	terminal.c:57: lival *= 10.0;
      0001C4 90r00r19         [24] 1362 	mov	dptr,#_read_int_lival_65539_143
      0001C7 E0               [24] 1363 	movx	a,@dptr
      0001C8 F8               [12] 1364 	mov	r0,a
      0001C9 A3               [24] 1365 	inc	dptr
      0001CA E0               [24] 1366 	movx	a,@dptr
      0001CB F9               [12] 1367 	mov	r1,a
      0001CC A3               [24] 1368 	inc	dptr
      0001CD E0               [24] 1369 	movx	a,@dptr
      0001CE FA               [12] 1370 	mov	r2,a
      0001CF A3               [24] 1371 	inc	dptr
      0001D0 E0               [24] 1372 	movx	a,@dptr
      0001D1 88 82            [24] 1373 	mov	dpl,r0
      0001D3 89 83            [24] 1374 	mov	dph,r1
      0001D5 8A F0            [24] 1375 	mov	b,r2
      0001D7 C0 07            [24] 1376 	push	ar7
      0001D9 C0 06            [24] 1377 	push	ar6
      0001DB C0 05            [24] 1378 	push	ar5
      0001DD C0 04            [24] 1379 	push	ar4
      0001DF 12r00r00         [24] 1380 	lcall	___slong2fs
      0001E2 A8 82            [24] 1381 	mov	r0,dpl
      0001E4 A9 83            [24] 1382 	mov	r1,dph
      0001E6 AA F0            [24] 1383 	mov	r2,b
      0001E8 FB               [12] 1384 	mov	r3,a
      0001E9 C0 00            [24] 1385 	push	ar0
      0001EB C0 01            [24] 1386 	push	ar1
      0001ED C0 02            [24] 1387 	push	ar2
      0001EF C0 03            [24] 1388 	push	ar3
      0001F1 90 00 00         [24] 1389 	mov	dptr,#0x0000
      0001F4 75 F0 20         [24] 1390 	mov	b,#0x20
      0001F7 74 41            [12] 1391 	mov	a,#0x41
      0001F9 12r00r00         [24] 1392 	lcall	___fsmul
      0001FC A8 82            [24] 1393 	mov	r0,dpl
      0001FE A9 83            [24] 1394 	mov	r1,dph
      000200 AA F0            [24] 1395 	mov	r2,b
      000202 FB               [12] 1396 	mov	r3,a
      000203 E5 81            [12] 1397 	mov	a,sp
      000205 24 FC            [12] 1398 	add	a,#0xfc
      000207 F5 81            [12] 1399 	mov	sp,a
      000209 88 82            [24] 1400 	mov	dpl,r0
      00020B 89 83            [24] 1401 	mov	dph,r1
      00020D 8A F0            [24] 1402 	mov	b,r2
      00020F EB               [12] 1403 	mov	a,r3
      000210 12r00r00         [24] 1404 	lcall	___fs2slong
      000213 A8 82            [24] 1405 	mov	r0,dpl
      000215 A9 83            [24] 1406 	mov	r1,dph
      000217 AA F0            [24] 1407 	mov	r2,b
      000219 FB               [12] 1408 	mov	r3,a
      00021A D0 04            [24] 1409 	pop	ar4
      00021C D0 05            [24] 1410 	pop	ar5
      00021E D0 06            [24] 1411 	pop	ar6
      000220 D0 07            [24] 1412 	pop	ar7
      000222 90r00r19         [24] 1413 	mov	dptr,#_read_int_lival_65539_143
      000225 E8               [12] 1414 	mov	a,r0
      000226 F0               [24] 1415 	movx	@dptr,a
      000227 E9               [12] 1416 	mov	a,r1
      000228 A3               [24] 1417 	inc	dptr
      000229 F0               [24] 1418 	movx	@dptr,a
      00022A EA               [12] 1419 	mov	a,r2
      00022B A3               [24] 1420 	inc	dptr
      00022C F0               [24] 1421 	movx	@dptr,a
      00022D EB               [12] 1422 	mov	a,r3
      00022E A3               [24] 1423 	inc	dptr
      00022F F0               [24] 1424 	movx	@dptr,a
                                   1425 ;	terminal.c:58: } while (--exp > 0);
      000230 1C               [12] 1426 	dec	r4
      000231 C3               [12] 1427 	clr	c
      000232 74 80            [12] 1428 	mov	a,#(0x00 ^ 0x80)
      000234 8C F0            [24] 1429 	mov	b,r4
      000236 63 F0 80         [24] 1430 	xrl	b,#0x80
      000239 95 F0            [12] 1431 	subb	a,b
      00023B 40 87            [24] 1432 	jc	00117$
      00023D                       1433 00121$:
                                   1434 ;	terminal.c:62: if (isnegative) {
      00023D 90r00r14         [24] 1435 	mov	dptr,#_read_int_isnegative_65537_133
      000240 E0               [24] 1436 	movx	a,@dptr
      000241 60 3B            [24] 1437 	jz	00123$
                                   1438 ;	terminal.c:63: *int_value_ptr = -lival;
      000243 C0 05            [24] 1439 	push	ar5
      000245 C0 06            [24] 1440 	push	ar6
      000247 C0 07            [24] 1441 	push	ar7
      000249 90r00r0A         [24] 1442 	mov	dptr,#_read_int_PARM_3
      00024C E0               [24] 1443 	movx	a,@dptr
      00024D FA               [12] 1444 	mov	r2,a
      00024E A3               [24] 1445 	inc	dptr
      00024F E0               [24] 1446 	movx	a,@dptr
      000250 FB               [12] 1447 	mov	r3,a
      000251 A3               [24] 1448 	inc	dptr
      000252 E0               [24] 1449 	movx	a,@dptr
      000253 FC               [12] 1450 	mov	r4,a
      000254 90r00r19         [24] 1451 	mov	dptr,#_read_int_lival_65539_143
      000257 E0               [24] 1452 	movx	a,@dptr
      000258 F8               [12] 1453 	mov	r0,a
      000259 A3               [24] 1454 	inc	dptr
      00025A E0               [24] 1455 	movx	a,@dptr
      00025B F9               [12] 1456 	mov	r1,a
      00025C A3               [24] 1457 	inc	dptr
      00025D E0               [24] 1458 	movx	a,@dptr
      00025E A3               [24] 1459 	inc	dptr
      00025F E0               [24] 1460 	movx	a,@dptr
      000260 C3               [12] 1461 	clr	c
      000261 E4               [12] 1462 	clr	a
      000262 98               [12] 1463 	subb	a,r0
      000263 F8               [12] 1464 	mov	r0,a
      000264 E4               [12] 1465 	clr	a
      000265 99               [12] 1466 	subb	a,r1
      000266 F9               [12] 1467 	mov	r1,a
      000267 8A 82            [24] 1468 	mov	dpl,r2
      000269 8B 83            [24] 1469 	mov	dph,r3
      00026B 8C F0            [24] 1470 	mov	b,r4
      00026D E8               [12] 1471 	mov	a,r0
      00026E 12r00r00         [24] 1472 	lcall	__gptrput
      000271 A3               [24] 1473 	inc	dptr
      000272 E9               [12] 1474 	mov	a,r1
      000273 12r00r00         [24] 1475 	lcall	__gptrput
      000276 D0 07            [24] 1476 	pop	ar7
      000278 D0 06            [24] 1477 	pop	ar6
      00027A D0 05            [24] 1478 	pop	ar5
      00027C 80 32            [24] 1479 	sjmp	00124$
      00027E                       1480 00123$:
                                   1481 ;	terminal.c:65: *int_value_ptr = lival;
      00027E C0 05            [24] 1482 	push	ar5
      000280 C0 06            [24] 1483 	push	ar6
      000282 C0 07            [24] 1484 	push	ar7
      000284 90r00r0A         [24] 1485 	mov	dptr,#_read_int_PARM_3
      000287 E0               [24] 1486 	movx	a,@dptr
      000288 FA               [12] 1487 	mov	r2,a
      000289 A3               [24] 1488 	inc	dptr
      00028A E0               [24] 1489 	movx	a,@dptr
      00028B FB               [12] 1490 	mov	r3,a
      00028C A3               [24] 1491 	inc	dptr
      00028D E0               [24] 1492 	movx	a,@dptr
      00028E FC               [12] 1493 	mov	r4,a
      00028F 90r00r19         [24] 1494 	mov	dptr,#_read_int_lival_65539_143
      000292 E0               [24] 1495 	movx	a,@dptr
      000293 F8               [12] 1496 	mov	r0,a
      000294 A3               [24] 1497 	inc	dptr
      000295 E0               [24] 1498 	movx	a,@dptr
      000296 F9               [12] 1499 	mov	r1,a
      000297 A3               [24] 1500 	inc	dptr
      000298 E0               [24] 1501 	movx	a,@dptr
      000299 A3               [24] 1502 	inc	dptr
      00029A E0               [24] 1503 	movx	a,@dptr
      00029B 8A 82            [24] 1504 	mov	dpl,r2
      00029D 8B 83            [24] 1505 	mov	dph,r3
      00029F 8C F0            [24] 1506 	mov	b,r4
      0002A1 E8               [12] 1507 	mov	a,r0
      0002A2 12r00r00         [24] 1508 	lcall	__gptrput
      0002A5 A3               [24] 1509 	inc	dptr
      0002A6 E9               [12] 1510 	mov	a,r1
      0002A7 12r00r00         [24] 1511 	lcall	__gptrput
                                   1512 ;	terminal.c:70: return (true);
      0002AA D0 07            [24] 1513 	pop	ar7
      0002AC D0 06            [24] 1514 	pop	ar6
      0002AE D0 05            [24] 1515 	pop	ar5
                                   1516 ;	terminal.c:65: *int_value_ptr = lival;
      0002B0                       1517 00124$:
                                   1518 ;	terminal.c:68: *char_count = ptr - line - 1; // Set char_counter to next statement
      0002B0 90r00r0D         [24] 1519 	mov	dptr,#_read_int_line_65536_131
      0002B3 E0               [24] 1520 	movx	a,@dptr
      0002B4 F5*04            [12] 1521 	mov	_read_int_sloc2_1_0,a
      0002B6 A3               [24] 1522 	inc	dptr
      0002B7 E0               [24] 1523 	movx	a,@dptr
      0002B8 F5*05            [12] 1524 	mov	(_read_int_sloc2_1_0 + 1),a
      0002BA A3               [24] 1525 	inc	dptr
      0002BB E0               [24] 1526 	movx	a,@dptr
      0002BC F5*06            [12] 1527 	mov	(_read_int_sloc2_1_0 + 2),a
      0002BE 90r00r10         [24] 1528 	mov	dptr,#_read_int_ptr_65536_132
      0002C1 E0               [24] 1529 	movx	a,@dptr
      0002C2 F8               [12] 1530 	mov	r0,a
      0002C3 A3               [24] 1531 	inc	dptr
      0002C4 E0               [24] 1532 	movx	a,@dptr
      0002C5 A3               [24] 1533 	inc	dptr
      0002C6 E0               [24] 1534 	movx	a,@dptr
      0002C7 AA*04            [24] 1535 	mov	r2,_read_int_sloc2_1_0
      0002C9 E8               [12] 1536 	mov	a,r0
      0002CA C3               [12] 1537 	clr	c
      0002CB 9A               [12] 1538 	subb	a,r2
      0002CC 14               [12] 1539 	dec	a
      0002CD 8D 82            [24] 1540 	mov	dpl,r5
      0002CF 8E 83            [24] 1541 	mov	dph,r6
      0002D1 8F F0            [24] 1542 	mov	b,r7
      0002D3 12r00r00         [24] 1543 	lcall	__gptrput
                                   1544 ;	terminal.c:70: return (true);
      0002D6 75 82 01         [24] 1545 	mov	dpl,#0x01
                                   1546 ;	terminal.c:71: }
      0002D9 22               [24] 1547 	ret
                                   1548 ;------------------------------------------------------------
                                   1549 ;Allocation info for local variables in function 'terminal_execute_line'
                                   1550 ;------------------------------------------------------------
                                   1551 ;line                      Allocated with name '_terminal_execute_line_line_65536_148'
                                   1552 ;char_count                Allocated with name '_terminal_execute_line_char_count_65536_149'
                                   1553 ;letter                    Allocated with name '_terminal_execute_line_letter_65536_149'
                                   1554 ;int_value                 Allocated with name '_terminal_execute_line_int_value_65536_149'
                                   1555 ;------------------------------------------------------------
                                   1556 ;	terminal.c:74: LINE_STATUS terminal_execute_line(char* line) {
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function terminal_execute_line
                                   1559 ;	-----------------------------------------
      0002DA                       1560 _terminal_execute_line:
      0002DA AF F0            [24] 1561 	mov	r7,b
      0002DC AE 83            [24] 1562 	mov	r6,dph
      0002DE E5 82            [12] 1563 	mov	a,dpl
      0002E0 90r00r1D         [24] 1564 	mov	dptr,#_terminal_execute_line_line_65536_148
      0002E3 F0               [24] 1565 	movx	@dptr,a
      0002E4 EE               [12] 1566 	mov	a,r6
      0002E5 A3               [24] 1567 	inc	dptr
      0002E6 F0               [24] 1568 	movx	@dptr,a
      0002E7 EF               [12] 1569 	mov	a,r7
      0002E8 A3               [24] 1570 	inc	dptr
      0002E9 F0               [24] 1571 	movx	@dptr,a
                                   1572 ;	terminal.c:76: uint8_t char_count = 0;
      0002EA 90r00r20         [24] 1573 	mov	dptr,#_terminal_execute_line_char_count_65536_149
      0002ED E4               [12] 1574 	clr	a
      0002EE F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	terminal.c:78: uint16_t int_value = 0;  // temporary int value that gets read from the terminal then assigned to another variable of any other c component
      0002EF 90r00r22         [24] 1577 	mov	dptr,#_terminal_execute_line_int_value_65536_149
      0002F2 F0               [24] 1578 	movx	@dptr,a
      0002F3 A3               [24] 1579 	inc	dptr
      0002F4 F0               [24] 1580 	movx	@dptr,a
                                   1581 ;	terminal.c:81: memset(&command, 0, sizeof(command_t));
      0002F5 90r00r00         [24] 1582 	mov	dptr,#_memset_PARM_2
      0002F8 F0               [24] 1583 	movx	@dptr,a
      0002F9 90r00r00         [24] 1584 	mov	dptr,#_memset_PARM_3
      0002FC 74 06            [12] 1585 	mov	a,#0x06
      0002FE F0               [24] 1586 	movx	@dptr,a
      0002FF E4               [12] 1587 	clr	a
      000300 A3               [24] 1588 	inc	dptr
      000301 F0               [24] 1589 	movx	@dptr,a
      000302 90r00r01         [24] 1590 	mov	dptr,#_command
      000305 75 F0 00         [24] 1591 	mov	b,#0x00
      000308 12r00r00         [24] 1592 	lcall	_memset
                                   1593 ;	terminal.c:83: while (line[char_count] != 0) {
      00030B 90r00r1D         [24] 1594 	mov	dptr,#_terminal_execute_line_line_65536_148
      00030E E0               [24] 1595 	movx	a,@dptr
      00030F FD               [12] 1596 	mov	r5,a
      000310 A3               [24] 1597 	inc	dptr
      000311 E0               [24] 1598 	movx	a,@dptr
      000312 FE               [12] 1599 	mov	r6,a
      000313 A3               [24] 1600 	inc	dptr
      000314 E0               [24] 1601 	movx	a,@dptr
      000315 FF               [12] 1602 	mov	r7,a
      000316                       1603 00123$:
      000316 90r00r20         [24] 1604 	mov	dptr,#_terminal_execute_line_char_count_65536_149
      000319 E0               [24] 1605 	movx	a,@dptr
      00031A FC               [12] 1606 	mov	r4,a
      00031B 2D               [12] 1607 	add	a,r5
      00031C F9               [12] 1608 	mov	r1,a
      00031D E4               [12] 1609 	clr	a
      00031E 3E               [12] 1610 	addc	a,r6
      00031F FA               [12] 1611 	mov	r2,a
      000320 8F 03            [24] 1612 	mov	ar3,r7
      000322 89 82            [24] 1613 	mov	dpl,r1
      000324 8A 83            [24] 1614 	mov	dph,r2
      000326 8B F0            [24] 1615 	mov	b,r3
      000328 12r00r00         [24] 1616 	lcall	__gptrget
      00032B FB               [12] 1617 	mov	r3,a
      00032C 70 03            [24] 1618 	jnz	00222$
      00032E 02r05r24         [24] 1619 	ljmp	00125$
      000331                       1620 00222$:
                                   1621 ;	terminal.c:87: letter = line[char_count];
      000331 90r00r21         [24] 1622 	mov	dptr,#_terminal_execute_line_letter_65536_149
      000334 EB               [12] 1623 	mov	a,r3
      000335 F0               [24] 1624 	movx	@dptr,a
                                   1625 ;	terminal.c:90: char_count++;
      000336 90r00r20         [24] 1626 	mov	dptr,#_terminal_execute_line_char_count_65536_149
      000339 EC               [12] 1627 	mov	a,r4
      00033A 04               [12] 1628 	inc	a
      00033B F0               [24] 1629 	movx	@dptr,a
                                   1630 ;	terminal.c:96: if ( letter < 'A' || letter > 'z' || (letter > 'Z' && letter < 'a')) {
      00033C 90r00r21         [24] 1631 	mov	dptr,#_terminal_execute_line_letter_65536_149
      00033F E0               [24] 1632 	movx	a,@dptr
      000340 FC               [12] 1633 	mov	r4,a
      000341 BC 41 00         [24] 1634 	cjne	r4,#0x41,00223$
      000344                       1635 00223$:
      000344 40 0F            [24] 1636 	jc	00101$
      000346 EC               [12] 1637 	mov	a,r4
      000347 24 85            [12] 1638 	add	a,#0xff - 0x7a
      000349 40 0A            [24] 1639 	jc	00101$
      00034B EC               [12] 1640 	mov	a,r4
      00034C 24 A5            [12] 1641 	add	a,#0xff - 0x5a
      00034E 50 1E            [24] 1642 	jnc	00102$
      000350 BC 61 00         [24] 1643 	cjne	r4,#0x61,00227$
      000353                       1644 00227$:
      000353 50 19            [24] 1645 	jnc	00102$
      000355                       1646 00101$:
                                   1647 ;	terminal.c:97: printf("\rExpected a letter!\n"); 
      000355 74r00            [12] 1648 	mov	a,#___str_0
      000357 C0 E0            [24] 1649 	push	acc
      000359 74s00            [12] 1650 	mov	a,#(___str_0 >> 8)
      00035B C0 E0            [24] 1651 	push	acc
      00035D 74 80            [12] 1652 	mov	a,#0x80
      00035F C0 E0            [24] 1653 	push	acc
      000361 12r00r00         [24] 1654 	lcall	_printf
      000364 15 81            [12] 1655 	dec	sp
      000366 15 81            [12] 1656 	dec	sp
      000368 15 81            [12] 1657 	dec	sp
                                   1658 ;	terminal.c:98: return LINE_FAILED;
      00036A 75 82 01         [24] 1659 	mov	dpl,#0x01
      00036D 22               [24] 1660 	ret
      00036E                       1661 00102$:
                                   1662 ;	terminal.c:102: if (!(letter >= 'a' && letter < 'z') && \
      00036E 90r00r21         [24] 1663 	mov	dptr,#_terminal_execute_line_letter_65536_149
      000371 E0               [24] 1664 	movx	a,@dptr
      000372 FC               [12] 1665 	mov	r4,a
      000373 BC 61 00         [24] 1666 	cjne	r4,#0x61,00229$
      000376                       1667 00229$:
      000376 40 05            [24] 1668 	jc	00109$
      000378 BC 7A 00         [24] 1669 	cjne	r4,#0x7a,00231$
      00037B                       1670 00231$:
      00037B 40 1F            [24] 1671 	jc	00107$
      00037D                       1672 00109$:
      00037D 90r00r01         [24] 1673 	mov	dptr,#_command
      000380 E0               [24] 1674 	movx	a,@dptr
      000381 60 19            [24] 1675 	jz	00107$
                                   1676 ;	terminal.c:104: printf("Can't have >1 command letter in one command!\n");
      000383 74r15            [12] 1677 	mov	a,#___str_1
      000385 C0 E0            [24] 1678 	push	acc
      000387 74s00            [12] 1679 	mov	a,#(___str_1 >> 8)
      000389 C0 E0            [24] 1680 	push	acc
      00038B 74 80            [12] 1681 	mov	a,#0x80
      00038D C0 E0            [24] 1682 	push	acc
      00038F 12r00r00         [24] 1683 	lcall	_printf
      000392 15 81            [12] 1684 	dec	sp
      000394 15 81            [12] 1685 	dec	sp
      000396 15 81            [12] 1686 	dec	sp
                                   1687 ;	terminal.c:105: return LINE_FAILED;
      000398 75 82 01         [24] 1688 	mov	dpl,#0x01
      00039B 22               [24] 1689 	ret
      00039C                       1690 00107$:
                                   1691 ;	terminal.c:109: switch(letter) {
      00039C 90r00r21         [24] 1692 	mov	dptr,#_terminal_execute_line_letter_65536_149
      00039F E0               [24] 1693 	movx	a,@dptr
      0003A0 FC               [12] 1694 	mov	r4,a
      0003A1 BC 41 02         [24] 1695 	cjne	r4,#0x41,00234$
      0003A4 80 19            [24] 1696 	sjmp	00110$
      0003A6                       1697 00234$:
      0003A6 BC 4E 02         [24] 1698 	cjne	r4,#0x4e,00235$
      0003A9 80 74            [24] 1699 	sjmp	00113$
      0003AB                       1700 00235$:
      0003AB BC 54 02         [24] 1701 	cjne	r4,#0x54,00236$
      0003AE 80 78            [24] 1702 	sjmp	00114$
      0003B0                       1703 00236$:
      0003B0 BC 69 03         [24] 1704 	cjne	r4,#0x69,00237$
      0003B3 02r04r31         [24] 1705 	ljmp	00115$
      0003B6                       1706 00237$:
      0003B6 BC 6A 03         [24] 1707 	cjne	r4,#0x6a,00238$
      0003B9 02r04r9B         [24] 1708 	ljmp	00118$
      0003BC                       1709 00238$:
      0003BC 02r05r05         [24] 1710 	ljmp	00121$
                                   1711 ;	terminal.c:111: case 'A':
      0003BF                       1712 00110$:
                                   1713 ;	terminal.c:113: if (!read_int(line, &char_count, &int_value)) {
      0003BF 90r00r1D         [24] 1714 	mov	dptr,#_terminal_execute_line_line_65536_148
      0003C2 E0               [24] 1715 	movx	a,@dptr
      0003C3 F9               [12] 1716 	mov	r1,a
      0003C4 A3               [24] 1717 	inc	dptr
      0003C5 E0               [24] 1718 	movx	a,@dptr
      0003C6 FA               [12] 1719 	mov	r2,a
      0003C7 A3               [24] 1720 	inc	dptr
      0003C8 E0               [24] 1721 	movx	a,@dptr
      0003C9 FB               [12] 1722 	mov	r3,a
      0003CA 90r00r07         [24] 1723 	mov	dptr,#_read_int_PARM_2
      0003CD 74r20            [12] 1724 	mov	a,#_terminal_execute_line_char_count_65536_149
      0003CF F0               [24] 1725 	movx	@dptr,a
      0003D0 74s00            [12] 1726 	mov	a,#(_terminal_execute_line_char_count_65536_149 >> 8)
      0003D2 A3               [24] 1727 	inc	dptr
      0003D3 F0               [24] 1728 	movx	@dptr,a
      0003D4 E4               [12] 1729 	clr	a
      0003D5 A3               [24] 1730 	inc	dptr
      0003D6 F0               [24] 1731 	movx	@dptr,a
      0003D7 90r00r0A         [24] 1732 	mov	dptr,#_read_int_PARM_3
      0003DA 74r22            [12] 1733 	mov	a,#_terminal_execute_line_int_value_65536_149
      0003DC F0               [24] 1734 	movx	@dptr,a
      0003DD 74s00            [12] 1735 	mov	a,#(_terminal_execute_line_int_value_65536_149 >> 8)
      0003DF A3               [24] 1736 	inc	dptr
      0003E0 F0               [24] 1737 	movx	@dptr,a
      0003E1 E4               [12] 1738 	clr	a
      0003E2 A3               [24] 1739 	inc	dptr
      0003E3 F0               [24] 1740 	movx	@dptr,a
      0003E4 89 82            [24] 1741 	mov	dpl,r1
      0003E6 8A 83            [24] 1742 	mov	dph,r2
      0003E8 8B F0            [24] 1743 	mov	b,r3
      0003EA C0 07            [24] 1744 	push	ar7
      0003EC C0 06            [24] 1745 	push	ar6
      0003EE C0 05            [24] 1746 	push	ar5
      0003F0 12r00r00         [24] 1747 	lcall	_read_int
      0003F3 E5 82            [12] 1748 	mov	a,dpl
      0003F5 D0 05            [24] 1749 	pop	ar5
      0003F7 D0 06            [24] 1750 	pop	ar6
      0003F9 D0 07            [24] 1751 	pop	ar7
      0003FB 70 19            [24] 1752 	jnz	00112$
                                   1753 ;	terminal.c:114: printf("Bad integer Number Format\n");
      0003FD 74r43            [12] 1754 	mov	a,#___str_2
      0003FF C0 E0            [24] 1755 	push	acc
      000401 74s00            [12] 1756 	mov	a,#(___str_2 >> 8)
      000403 C0 E0            [24] 1757 	push	acc
      000405 74 80            [12] 1758 	mov	a,#0x80
      000407 C0 E0            [24] 1759 	push	acc
      000409 12r00r00         [24] 1760 	lcall	_printf
      00040C 15 81            [12] 1761 	dec	sp
      00040E 15 81            [12] 1762 	dec	sp
      000410 15 81            [12] 1763 	dec	sp
                                   1764 ;	terminal.c:115: return LINE_FAILED;
      000412 75 82 01         [24] 1765 	mov	dpl,#0x01
      000415 22               [24] 1766 	ret
      000416                       1767 00112$:
                                   1768 ;	terminal.c:118: command.command_type = COMMAND_TEST_INT_READING;
      000416 90r00r01         [24] 1769 	mov	dptr,#_command
      000419 74 01            [12] 1770 	mov	a,#0x01
      00041B F0               [24] 1771 	movx	@dptr,a
                                   1772 ;	terminal.c:119: break;
      00041C 02r03r16         [24] 1773 	ljmp	00123$
                                   1774 ;	terminal.c:121: case 'N':
      00041F                       1775 00113$:
                                   1776 ;	terminal.c:122: command.command_type = COMMAND_GET_NRF24_REGISTERS;
      00041F 90r00r01         [24] 1777 	mov	dptr,#_command
      000422 74 02            [12] 1778 	mov	a,#0x02
      000424 F0               [24] 1779 	movx	@dptr,a
                                   1780 ;	terminal.c:123: break;
      000425 02r03r16         [24] 1781 	ljmp	00123$
                                   1782 ;	terminal.c:125: case 'T':
      000428                       1783 00114$:
                                   1784 ;	terminal.c:126: command.command_type = COMMAND_GET_CURRENT_TIME;
      000428 90r00r01         [24] 1785 	mov	dptr,#_command
      00042B 74 03            [12] 1786 	mov	a,#0x03
      00042D F0               [24] 1787 	movx	@dptr,a
                                   1788 ;	terminal.c:127: break;
      00042E 02r03r16         [24] 1789 	ljmp	00123$
                                   1790 ;	terminal.c:129: case 'i':
      000431                       1791 00115$:
                                   1792 ;	terminal.c:131: if (!read_int(line, &char_count, &int_value)) {
      000431 90r00r1D         [24] 1793 	mov	dptr,#_terminal_execute_line_line_65536_148
      000434 E0               [24] 1794 	movx	a,@dptr
      000435 F9               [12] 1795 	mov	r1,a
      000436 A3               [24] 1796 	inc	dptr
      000437 E0               [24] 1797 	movx	a,@dptr
      000438 FA               [12] 1798 	mov	r2,a
      000439 A3               [24] 1799 	inc	dptr
      00043A E0               [24] 1800 	movx	a,@dptr
      00043B FB               [12] 1801 	mov	r3,a
      00043C 90r00r07         [24] 1802 	mov	dptr,#_read_int_PARM_2
      00043F 74r20            [12] 1803 	mov	a,#_terminal_execute_line_char_count_65536_149
      000441 F0               [24] 1804 	movx	@dptr,a
      000442 74s00            [12] 1805 	mov	a,#(_terminal_execute_line_char_count_65536_149 >> 8)
      000444 A3               [24] 1806 	inc	dptr
      000445 F0               [24] 1807 	movx	@dptr,a
      000446 E4               [12] 1808 	clr	a
      000447 A3               [24] 1809 	inc	dptr
      000448 F0               [24] 1810 	movx	@dptr,a
      000449 90r00r0A         [24] 1811 	mov	dptr,#_read_int_PARM_3
      00044C 74r22            [12] 1812 	mov	a,#_terminal_execute_line_int_value_65536_149
      00044E F0               [24] 1813 	movx	@dptr,a
      00044F 74s00            [12] 1814 	mov	a,#(_terminal_execute_line_int_value_65536_149 >> 8)
      000451 A3               [24] 1815 	inc	dptr
      000452 F0               [24] 1816 	movx	@dptr,a
      000453 E4               [12] 1817 	clr	a
      000454 A3               [24] 1818 	inc	dptr
      000455 F0               [24] 1819 	movx	@dptr,a
      000456 89 82            [24] 1820 	mov	dpl,r1
      000458 8A 83            [24] 1821 	mov	dph,r2
      00045A 8B F0            [24] 1822 	mov	b,r3
      00045C C0 07            [24] 1823 	push	ar7
      00045E C0 06            [24] 1824 	push	ar6
      000460 C0 05            [24] 1825 	push	ar5
      000462 12r00r00         [24] 1826 	lcall	_read_int
      000465 E5 82            [12] 1827 	mov	a,dpl
      000467 D0 05            [24] 1828 	pop	ar5
      000469 D0 06            [24] 1829 	pop	ar6
      00046B D0 07            [24] 1830 	pop	ar7
      00046D 70 19            [24] 1831 	jnz	00117$
                                   1832 ;	terminal.c:132: printf("Bad int Number Format\n");
      00046F 74r5E            [12] 1833 	mov	a,#___str_3
      000471 C0 E0            [24] 1834 	push	acc
      000473 74s00            [12] 1835 	mov	a,#(___str_3 >> 8)
      000475 C0 E0            [24] 1836 	push	acc
      000477 74 80            [12] 1837 	mov	a,#0x80
      000479 C0 E0            [24] 1838 	push	acc
      00047B 12r00r00         [24] 1839 	lcall	_printf
      00047E 15 81            [12] 1840 	dec	sp
      000480 15 81            [12] 1841 	dec	sp
      000482 15 81            [12] 1842 	dec	sp
                                   1843 ;	terminal.c:133: return LINE_FAILED;
      000484 75 82 01         [24] 1844 	mov	dpl,#0x01
      000487 22               [24] 1845 	ret
      000488                       1846 00117$:
                                   1847 ;	terminal.c:135: command.i = int_value;
      000488 90r00r22         [24] 1848 	mov	dptr,#_terminal_execute_line_int_value_65536_149
      00048B E0               [24] 1849 	movx	a,@dptr
      00048C FA               [12] 1850 	mov	r2,a
      00048D A3               [24] 1851 	inc	dptr
      00048E E0               [24] 1852 	movx	a,@dptr
      00048F FB               [12] 1853 	mov	r3,a
      000490 90r00r02         [24] 1854 	mov	dptr,#(_command + 0x0001)
      000493 EA               [12] 1855 	mov	a,r2
      000494 F0               [24] 1856 	movx	@dptr,a
      000495 EB               [12] 1857 	mov	a,r3
      000496 A3               [24] 1858 	inc	dptr
      000497 F0               [24] 1859 	movx	@dptr,a
                                   1860 ;	terminal.c:136: break;
      000498 02r03r16         [24] 1861 	ljmp	00123$
                                   1862 ;	terminal.c:138: case 'j':
      00049B                       1863 00118$:
                                   1864 ;	terminal.c:140: if (!read_int(line, &char_count, &int_value)) {
      00049B 90r00r1D         [24] 1865 	mov	dptr,#_terminal_execute_line_line_65536_148
      00049E E0               [24] 1866 	movx	a,@dptr
      00049F F9               [12] 1867 	mov	r1,a
      0004A0 A3               [24] 1868 	inc	dptr
      0004A1 E0               [24] 1869 	movx	a,@dptr
      0004A2 FA               [12] 1870 	mov	r2,a
      0004A3 A3               [24] 1871 	inc	dptr
      0004A4 E0               [24] 1872 	movx	a,@dptr
      0004A5 FB               [12] 1873 	mov	r3,a
      0004A6 90r00r07         [24] 1874 	mov	dptr,#_read_int_PARM_2
      0004A9 74r20            [12] 1875 	mov	a,#_terminal_execute_line_char_count_65536_149
      0004AB F0               [24] 1876 	movx	@dptr,a
      0004AC 74s00            [12] 1877 	mov	a,#(_terminal_execute_line_char_count_65536_149 >> 8)
      0004AE A3               [24] 1878 	inc	dptr
      0004AF F0               [24] 1879 	movx	@dptr,a
      0004B0 E4               [12] 1880 	clr	a
      0004B1 A3               [24] 1881 	inc	dptr
      0004B2 F0               [24] 1882 	movx	@dptr,a
      0004B3 90r00r0A         [24] 1883 	mov	dptr,#_read_int_PARM_3
      0004B6 74r22            [12] 1884 	mov	a,#_terminal_execute_line_int_value_65536_149
      0004B8 F0               [24] 1885 	movx	@dptr,a
      0004B9 74s00            [12] 1886 	mov	a,#(_terminal_execute_line_int_value_65536_149 >> 8)
      0004BB A3               [24] 1887 	inc	dptr
      0004BC F0               [24] 1888 	movx	@dptr,a
      0004BD E4               [12] 1889 	clr	a
      0004BE A3               [24] 1890 	inc	dptr
      0004BF F0               [24] 1891 	movx	@dptr,a
      0004C0 89 82            [24] 1892 	mov	dpl,r1
      0004C2 8A 83            [24] 1893 	mov	dph,r2
      0004C4 8B F0            [24] 1894 	mov	b,r3
      0004C6 C0 07            [24] 1895 	push	ar7
      0004C8 C0 06            [24] 1896 	push	ar6
      0004CA C0 05            [24] 1897 	push	ar5
      0004CC 12r00r00         [24] 1898 	lcall	_read_int
      0004CF E5 82            [12] 1899 	mov	a,dpl
      0004D1 D0 05            [24] 1900 	pop	ar5
      0004D3 D0 06            [24] 1901 	pop	ar6
      0004D5 D0 07            [24] 1902 	pop	ar7
      0004D7 70 19            [24] 1903 	jnz	00120$
                                   1904 ;	terminal.c:141: printf("Bad int Number Format\n");
      0004D9 74r5E            [12] 1905 	mov	a,#___str_3
      0004DB C0 E0            [24] 1906 	push	acc
      0004DD 74s00            [12] 1907 	mov	a,#(___str_3 >> 8)
      0004DF C0 E0            [24] 1908 	push	acc
      0004E1 74 80            [12] 1909 	mov	a,#0x80
      0004E3 C0 E0            [24] 1910 	push	acc
      0004E5 12r00r00         [24] 1911 	lcall	_printf
      0004E8 15 81            [12] 1912 	dec	sp
      0004EA 15 81            [12] 1913 	dec	sp
      0004EC 15 81            [12] 1914 	dec	sp
                                   1915 ;	terminal.c:142: return LINE_FAILED;
      0004EE 75 82 01         [24] 1916 	mov	dpl,#0x01
      0004F1 22               [24] 1917 	ret
      0004F2                       1918 00120$:
                                   1919 ;	terminal.c:144: command.j = int_value;
      0004F2 90r00r22         [24] 1920 	mov	dptr,#_terminal_execute_line_int_value_65536_149
      0004F5 E0               [24] 1921 	movx	a,@dptr
      0004F6 FA               [12] 1922 	mov	r2,a
      0004F7 A3               [24] 1923 	inc	dptr
      0004F8 E0               [24] 1924 	movx	a,@dptr
      0004F9 FB               [12] 1925 	mov	r3,a
      0004FA 90r00r04         [24] 1926 	mov	dptr,#(_command + 0x0003)
      0004FD EA               [12] 1927 	mov	a,r2
      0004FE F0               [24] 1928 	movx	@dptr,a
      0004FF EB               [12] 1929 	mov	a,r3
      000500 A3               [24] 1930 	inc	dptr
      000501 F0               [24] 1931 	movx	@dptr,a
                                   1932 ;	terminal.c:145: break;
      000502 02r03r16         [24] 1933 	ljmp	00123$
                                   1934 ;	terminal.c:147: default:
      000505                       1935 00121$:
                                   1936 ;	terminal.c:148: printf("Command Letter '%c' Not Implemented\n", letter);
      000505 7F 00            [12] 1937 	mov	r7,#0x00
      000507 C0 04            [24] 1938 	push	ar4
      000509 C0 07            [24] 1939 	push	ar7
      00050B 74r75            [12] 1940 	mov	a,#___str_4
      00050D C0 E0            [24] 1941 	push	acc
      00050F 74s00            [12] 1942 	mov	a,#(___str_4 >> 8)
      000511 C0 E0            [24] 1943 	push	acc
      000513 74 80            [12] 1944 	mov	a,#0x80
      000515 C0 E0            [24] 1945 	push	acc
      000517 12r00r00         [24] 1946 	lcall	_printf
      00051A E5 81            [12] 1947 	mov	a,sp
      00051C 24 FB            [12] 1948 	add	a,#0xfb
      00051E F5 81            [12] 1949 	mov	sp,a
                                   1950 ;	terminal.c:149: return LINE_FAILED;
      000520 75 82 01         [24] 1951 	mov	dpl,#0x01
      000523 22               [24] 1952 	ret
                                   1953 ;	terminal.c:150: }
      000524                       1954 00125$:
                                   1955 ;	terminal.c:154: switch(command.command_type) {
      000524 90r00r01         [24] 1956 	mov	dptr,#_command
      000527 E0               [24] 1957 	movx	a,@dptr
      000528 FF               [12] 1958 	mov	r7,a
      000529 BF 01 02         [24] 1959 	cjne	r7,#0x01,00242$
      00052C 80 23            [24] 1960 	sjmp	00130$
      00052E                       1961 00242$:
      00052E BF 02 02         [24] 1962 	cjne	r7,#0x02,00243$
      000531 80 1E            [24] 1963 	sjmp	00130$
      000533                       1964 00243$:
      000533 BF 03 02         [24] 1965 	cjne	r7,#0x03,00244$
      000536 80 19            [24] 1966 	sjmp	00130$
      000538                       1967 00244$:
                                   1968 ;	terminal.c:166: printf("SHOULD NEVER REACH HERE IN ERROR CHECKING.\n");
      000538 74r9A            [12] 1969 	mov	a,#___str_5
      00053A C0 E0            [24] 1970 	push	acc
      00053C 74s00            [12] 1971 	mov	a,#(___str_5 >> 8)
      00053E C0 E0            [24] 1972 	push	acc
      000540 74 80            [12] 1973 	mov	a,#0x80
      000542 C0 E0            [24] 1974 	push	acc
      000544 12r00r00         [24] 1975 	lcall	_printf
      000547 15 81            [12] 1976 	dec	sp
      000549 15 81            [12] 1977 	dec	sp
      00054B 15 81            [12] 1978 	dec	sp
                                   1979 ;	terminal.c:167: return LINE_FAILED;
      00054D 75 82 01         [24] 1980 	mov	dpl,#0x01
      000550 22               [24] 1981 	ret
                                   1982 ;	terminal.c:168: }
      000551                       1983 00130$:
                                   1984 ;	terminal.c:171: switch(command.command_type) {
      000551 90r00r01         [24] 1985 	mov	dptr,#_command
      000554 E0               [24] 1986 	movx	a,@dptr
      000555 FF               [12] 1987 	mov	r7,a
      000556 BF 01 02         [24] 1988 	cjne	r7,#0x01,00245$
      000559 80 0A            [24] 1989 	sjmp	00131$
      00055B                       1990 00245$:
      00055B BF 02 02         [24] 1991 	cjne	r7,#0x02,00246$
      00055E 80 26            [24] 1992 	sjmp	00132$
      000560                       1993 00246$:
                                   1994 ;	terminal.c:173: case COMMAND_TEST_INT_READING:
      000560 BF 03 51         [24] 1995 	cjne	r7,#0x03,00134$
      000563 80 26            [24] 1996 	sjmp	00133$
      000565                       1997 00131$:
                                   1998 ;	terminal.c:174: printf("Read INT value: %d\n", int_value);
      000565 90r00r22         [24] 1999 	mov	dptr,#_terminal_execute_line_int_value_65536_149
      000568 E0               [24] 2000 	movx	a,@dptr
      000569 C0 E0            [24] 2001 	push	acc
      00056B A3               [24] 2002 	inc	dptr
      00056C E0               [24] 2003 	movx	a,@dptr
      00056D C0 E0            [24] 2004 	push	acc
      00056F 74rC6            [12] 2005 	mov	a,#___str_6
      000571 C0 E0            [24] 2006 	push	acc
      000573 74s00            [12] 2007 	mov	a,#(___str_6 >> 8)
      000575 C0 E0            [24] 2008 	push	acc
      000577 74 80            [12] 2009 	mov	a,#0x80
      000579 C0 E0            [24] 2010 	push	acc
      00057B 12r00r00         [24] 2011 	lcall	_printf
      00057E E5 81            [12] 2012 	mov	a,sp
      000580 24 FB            [12] 2013 	add	a,#0xfb
      000582 F5 81            [12] 2014 	mov	sp,a
                                   2015 ;	terminal.c:175: break;
                                   2016 ;	terminal.c:177: case COMMAND_GET_NRF24_REGISTERS:
      000584 80 47            [24] 2017 	sjmp	00135$
      000586                       2018 00132$:
                                   2019 ;	terminal.c:178: nrf24_print_internal_register_values();
      000586 12r00r00         [24] 2020 	lcall	_nrf24_print_internal_register_values
                                   2021 ;	terminal.c:179: break;
                                   2022 ;	terminal.c:181: case COMMAND_GET_CURRENT_TIME:
      000589 80 42            [24] 2023 	sjmp	00135$
      00058B                       2024 00133$:
                                   2025 ;	terminal.c:182: report("Current Time Passed: %lu\n", get_current_time());
      00058B 12r00r00         [24] 2026 	lcall	_get_current_time
      00058E AC 82            [24] 2027 	mov	r4,dpl
      000590 AD 83            [24] 2028 	mov	r5,dph
      000592 AE F0            [24] 2029 	mov	r6,b
      000594 FF               [12] 2030 	mov	r7,a
      000595 C0 04            [24] 2031 	push	ar4
      000597 C0 05            [24] 2032 	push	ar5
      000599 C0 06            [24] 2033 	push	ar6
      00059B C0 07            [24] 2034 	push	ar7
      00059D 74rDA            [12] 2035 	mov	a,#___str_7
      00059F C0 E0            [24] 2036 	push	acc
      0005A1 74s00            [12] 2037 	mov	a,#(___str_7 >> 8)
      0005A3 C0 E0            [24] 2038 	push	acc
      0005A5 74 80            [12] 2039 	mov	a,#0x80
      0005A7 C0 E0            [24] 2040 	push	acc
      0005A9 12r00r00         [24] 2041 	lcall	_report
      0005AC E5 81            [12] 2042 	mov	a,sp
      0005AE 24 F9            [12] 2043 	add	a,#0xf9
      0005B0 F5 81            [12] 2044 	mov	sp,a
                                   2045 ;	terminal.c:183: break;
                                   2046 ;	terminal.c:185: default:
      0005B2 80 19            [24] 2047 	sjmp	00135$
      0005B4                       2048 00134$:
                                   2049 ;	terminal.c:190: printf("SHOULD NEVER REACH HERE.");
      0005B4 74rF4            [12] 2050 	mov	a,#___str_8
      0005B6 C0 E0            [24] 2051 	push	acc
      0005B8 74s00            [12] 2052 	mov	a,#(___str_8 >> 8)
      0005BA C0 E0            [24] 2053 	push	acc
      0005BC 74 80            [12] 2054 	mov	a,#0x80
      0005BE C0 E0            [24] 2055 	push	acc
      0005C0 12r00r00         [24] 2056 	lcall	_printf
      0005C3 15 81            [12] 2057 	dec	sp
      0005C5 15 81            [12] 2058 	dec	sp
      0005C7 15 81            [12] 2059 	dec	sp
                                   2060 ;	terminal.c:191: return LINE_FAILED;
      0005C9 75 82 01         [24] 2061 	mov	dpl,#0x01
                                   2062 ;	terminal.c:192: }
      0005CC 22               [24] 2063 	ret
      0005CD                       2064 00135$:
                                   2065 ;	terminal.c:194: return LINE_PASSED;
      0005CD 75 82 00         [24] 2066 	mov	dpl,#0x00
                                   2067 ;	terminal.c:196: }
      0005D0 22               [24] 2068 	ret
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
                                   2071 	.area CONST   (CODE)
      000000                       2072 ___str_0:
      000000 0D                    2073 	.db 0x0d
      000001 45 78 70 65 63 74 65  2074 	.ascii "Expected a letter!"
             64 20 61 20 6C 65 74
             74 65 72 21
      000013 0A                    2075 	.db 0x0a
      000014 00                    2076 	.db 0x00
                                   2077 	.area CSEG    (CODE)
                                   2078 	.area CONST   (CODE)
      000015                       2079 ___str_1:
      000015 43 61 6E 27 74 20 68  2080 	.ascii "Can't have >1 command letter in one command!"
             61 76 65 20 3E 31 20
             63 6F 6D 6D 61 6E 64
             20 6C 65 74 74 65 72
             20 69 6E 20 6F 6E 65
             20 63 6F 6D 6D 61 6E
             64 21
      000041 0A                    2081 	.db 0x0a
      000042 00                    2082 	.db 0x00
                                   2083 	.area CSEG    (CODE)
                                   2084 	.area CONST   (CODE)
      000043                       2085 ___str_2:
      000043 42 61 64 20 69 6E 74  2086 	.ascii "Bad integer Number Format"
             65 67 65 72 20 4E 75
             6D 62 65 72 20 46 6F
             72 6D 61 74
      00005C 0A                    2087 	.db 0x0a
      00005D 00                    2088 	.db 0x00
                                   2089 	.area CSEG    (CODE)
                                   2090 	.area CONST   (CODE)
      00005E                       2091 ___str_3:
      00005E 42 61 64 20 69 6E 74  2092 	.ascii "Bad int Number Format"
             20 4E 75 6D 62 65 72
             20 46 6F 72 6D 61 74
      000073 0A                    2093 	.db 0x0a
      000074 00                    2094 	.db 0x00
                                   2095 	.area CSEG    (CODE)
                                   2096 	.area CONST   (CODE)
      000075                       2097 ___str_4:
      000075 43 6F 6D 6D 61 6E 64  2098 	.ascii "Command Letter '%c' Not Implemented"
             20 4C 65 74 74 65 72
             20 27 25 63 27 20 4E
             6F 74 20 49 6D 70 6C
             65 6D 65 6E 74 65 64
      000098 0A                    2099 	.db 0x0a
      000099 00                    2100 	.db 0x00
                                   2101 	.area CSEG    (CODE)
                                   2102 	.area CONST   (CODE)
      00009A                       2103 ___str_5:
      00009A 53 48 4F 55 4C 44 20  2104 	.ascii "SHOULD NEVER REACH HERE IN ERROR CHECKING."
             4E 45 56 45 52 20 52
             45 41 43 48 20 48 45
             52 45 20 49 4E 20 45
             52 52 4F 52 20 43 48
             45 43 4B 49 4E 47 2E
      0000C4 0A                    2105 	.db 0x0a
      0000C5 00                    2106 	.db 0x00
                                   2107 	.area CSEG    (CODE)
                                   2108 	.area CONST   (CODE)
      0000C6                       2109 ___str_6:
      0000C6 52 65 61 64 20 49 4E  2110 	.ascii "Read INT value: %d"
             54 20 76 61 6C 75 65
             3A 20 25 64
      0000D8 0A                    2111 	.db 0x0a
      0000D9 00                    2112 	.db 0x00
                                   2113 	.area CSEG    (CODE)
                                   2114 	.area CONST   (CODE)
      0000DA                       2115 ___str_7:
      0000DA 43 75 72 72 65 6E 74  2116 	.ascii "Current Time Passed: %lu"
             20 54 69 6D 65 20 50
             61 73 73 65 64 3A 20
             25 6C 75
      0000F2 0A                    2117 	.db 0x0a
      0000F3 00                    2118 	.db 0x00
                                   2119 	.area CSEG    (CODE)
                                   2120 	.area CONST   (CODE)
      0000F4                       2121 ___str_8:
      0000F4 53 48 4F 55 4C 44 20  2122 	.ascii "SHOULD NEVER REACH HERE."
             4E 45 56 45 52 20 52
             45 41 43 48 20 48 45
             52 45 2E
      00010C 00                    2123 	.db 0x00
                                   2124 	.area CSEG    (CODE)
                                   2125 	.area XINIT   (CODE)
                                   2126 	.area CABS    (ABS,CODE)
