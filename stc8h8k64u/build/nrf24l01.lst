                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module nrf24l01
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bitReverseTable256
                                     12 	.globl _spiSend
                                     13 	.globl _spiConfigure
                                     14 	.globl _spiSelectSpeed
                                     15 	.globl _gpioWrite
                                     16 	.globl _gpioConfigure
                                     17 	.globl _delay1ms
                                     18 	.globl _printf
                                     19 	.globl _S1SM0_FE
                                     20 	.globl _T1IE
                                     21 	.globl _T0IE
                                     22 	.globl _T1RUN
                                     23 	.globl _T0RUN
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _EA
                                     33 	.globl _INT1IE
                                     34 	.globl _INT0IE
                                     35 	.globl _INT1TR
                                     36 	.globl _INT0TR
                                     37 	.globl _P5_5
                                     38 	.globl _P5_4
                                     39 	.globl _P5_3
                                     40 	.globl _P5_2
                                     41 	.globl _P5_1
                                     42 	.globl _P5_0
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _P1_7
                                     60 	.globl _P1_6
                                     61 	.globl _P1_5
                                     62 	.globl _P1_4
                                     63 	.globl _P1_3
                                     64 	.globl _P1_2
                                     65 	.globl _P1_1
                                     66 	.globl _P1_0
                                     67 	.globl _USBADR
                                     68 	.globl _USBCON
                                     69 	.globl _USBDAT
                                     70 	.globl _USBCLK
                                     71 	.globl _S4BUF
                                     72 	.globl _S4CON
                                     73 	.globl _S3BUF
                                     74 	.globl _S3CON
                                     75 	.globl _S2BUF
                                     76 	.globl _S2CON
                                     77 	.globl _S1BUF
                                     78 	.globl _S1CON
                                     79 	.globl _SADEN
                                     80 	.globl _SADDR
                                     81 	.globl _AUXINTIF
                                     82 	.globl _T3
                                     83 	.globl _T3L
                                     84 	.globl _T3H
                                     85 	.globl _T4
                                     86 	.globl _T4L
                                     87 	.globl _T4H
                                     88 	.globl _T4T3M
                                     89 	.globl _WDT_CONTR
                                     90 	.globl _AUXR
                                     91 	.globl _T2
                                     92 	.globl _T2H
                                     93 	.globl _T2L
                                     94 	.globl _T1
                                     95 	.globl _T1H
                                     96 	.globl _T1L
                                     97 	.globl _T0
                                     98 	.globl _T0H
                                     99 	.globl _T0L
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _IRTRIM
                                    103 	.globl _LIRTRIM
                                    104 	.globl _IRCBAND
                                    105 	.globl _SPDAT
                                    106 	.globl _SPCTL
                                    107 	.globl _SPSTAT
                                    108 	.globl _WKTC
                                    109 	.globl _WKTCH
                                    110 	.globl _WKTCL
                                    111 	.globl _BUS_SPEED
                                    112 	.globl _P_SW2
                                    113 	.globl _P_SW1
                                    114 	.globl _RSTCFG
                                    115 	.globl _PCON
                                    116 	.globl _B
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _SP
                                    120 	.globl _IP3H
                                    121 	.globl _IP3L
                                    122 	.globl _IP2H
                                    123 	.globl _IP2L
                                    124 	.globl _IE2
                                    125 	.globl _IP1H
                                    126 	.globl _IP1L
                                    127 	.globl _IE1
                                    128 	.globl _INT_CLKO
                                    129 	.globl _IAP_TPS
                                    130 	.globl _IAP_CONTR
                                    131 	.globl _IAP_TRIG
                                    132 	.globl _IAP_CMD
                                    133 	.globl _IAP_ADDR
                                    134 	.globl _IAP_ADDRL
                                    135 	.globl _IAP_ADDRH
                                    136 	.globl _IAP_DATA
                                    137 	.globl _P5M0
                                    138 	.globl _P5M1
                                    139 	.globl _P5
                                    140 	.globl _P3M0
                                    141 	.globl _P3M1
                                    142 	.globl _P3
                                    143 	.globl _P2M0
                                    144 	.globl _P2M1
                                    145 	.globl _P2
                                    146 	.globl _P1M0
                                    147 	.globl _P1M1
                                    148 	.globl _P1
                                    149 	.globl _TA
                                    150 	.globl _DPH1
                                    151 	.globl _DPL1
                                    152 	.globl _DPS
                                    153 	.globl _DP
                                    154 	.globl _DPH
                                    155 	.globl _DPL
                                    156 	.globl _CMPCR2
                                    157 	.globl _CMPCR1
                                    158 	.globl _DMA_ADC_AMT
                                    159 	.globl _ADCCFG
                                    160 	.globl _ADC_RES
                                    161 	.globl _ADC_RESL
                                    162 	.globl _ADC_RESH
                                    163 	.globl _ADC_CONTR
                                    164 	.globl _datapipe_address
                                    165 	.globl _CE_pin
                                    166 	.globl _CSN_pin
                                    167 	.globl _dataReady
                                    168 	.globl _nrf24_write_PARM_4
                                    169 	.globl _nrf24_write_PARM_3
                                    170 	.globl _nrf24_write_PARM_2
                                    171 	.globl _nrf24_read_PARM_4
                                    172 	.globl _nrf24_read_PARM_3
                                    173 	.globl _nrf24_read_PARM_2
                                    174 	.globl _nrf24_crc_configuration_PARM_2
                                    175 	.globl _nrf24_interrupt_mask_PARM_3
                                    176 	.globl _nrf24_interrupt_mask_PARM_2
                                    177 	.globl _nrf24_prx_static_payload_width_PARM_2
                                    178 	.globl _nrf24_dynamic_payload_PARM_2
                                    179 	.globl _nrf24_automatic_retransmit_setup_PARM_2
                                    180 	.globl _nrf24_device_PARM_2
                                    181 	.globl _nrf24_receive_PARM_2
                                    182 	.globl _nrf24_send_payload_PARM_2
                                    183 	.globl _nrf24_transmit_PARM_3
                                    184 	.globl _nrf24_transmit_PARM_2
                                    185 	.globl _DMA_UR4R_TXAL
                                    186 	.globl _DMA_UR4R_TXAH
                                    187 	.globl _DMA_UR4R_DONE
                                    188 	.globl _DMA_UR4R_AMT
                                    189 	.globl _DMA_UR4R_STA
                                    190 	.globl _DMA_UR4R_CR
                                    191 	.globl _DMA_UR4R_CFG
                                    192 	.globl _DMA_UR4T_TXAL
                                    193 	.globl _DMA_UR4T_TXAH
                                    194 	.globl _DMA_UR4T_DONE
                                    195 	.globl _DMA_UR4T_AMT
                                    196 	.globl _DMA_UR4T_STA
                                    197 	.globl _DMA_UR4T_CR
                                    198 	.globl _DMA_UR4T_CFG
                                    199 	.globl _DMA_UR3R_TXAL
                                    200 	.globl _DMA_UR3R_TXAH
                                    201 	.globl _DMA_UR3R_DONE
                                    202 	.globl _DMA_UR3R_AMT
                                    203 	.globl _DMA_UR3R_STA
                                    204 	.globl _DMA_UR3R_CR
                                    205 	.globl _DMA_UR3R_CFG
                                    206 	.globl _DMA_UR3T_TXAL
                                    207 	.globl _DMA_UR3T_TXAH
                                    208 	.globl _DMA_UR3T_DONE
                                    209 	.globl _DMA_UR3T_AMT
                                    210 	.globl _DMA_UR3T_STA
                                    211 	.globl _DMA_UR3T_CR
                                    212 	.globl _DMA_UR3T_CFG
                                    213 	.globl _DMA_UR2R_TXAL
                                    214 	.globl _DMA_UR2R_TXAH
                                    215 	.globl _DMA_UR2R_DONE
                                    216 	.globl _DMA_UR2R_AMT
                                    217 	.globl _DMA_UR2R_STA
                                    218 	.globl _DMA_UR2R_CR
                                    219 	.globl _DMA_UR2R_CFG
                                    220 	.globl _DMA_UR2T_TXAL
                                    221 	.globl _DMA_UR2T_TXAH
                                    222 	.globl _DMA_UR2T_DONE
                                    223 	.globl _DMA_UR2T_AMT
                                    224 	.globl _DMA_UR2T_STA
                                    225 	.globl _DMA_UR2T_CR
                                    226 	.globl _DMA_UR2T_CFG
                                    227 	.globl _DMA_UR1R_TXAL
                                    228 	.globl _DMA_UR1R_TXAH
                                    229 	.globl _DMA_UR1R_DONE
                                    230 	.globl _DMA_UR1R_AMT
                                    231 	.globl _DMA_UR1R_STA
                                    232 	.globl _DMA_UR1R_CR
                                    233 	.globl _DMA_UR1R_CFG
                                    234 	.globl _DMA_UR1T_TXAL
                                    235 	.globl _DMA_UR1T_TXAH
                                    236 	.globl _DMA_UR1T_DONE
                                    237 	.globl _DMA_URTX_AMT
                                    238 	.globl _DMA_UR1T_STA
                                    239 	.globl _DMA_UR1T_CR
                                    240 	.globl _DMA_UR1T_CFG
                                    241 	.globl _TM4PS
                                    242 	.globl _TM3PS
                                    243 	.globl _TM2PS
                                    244 	.globl _IRC48MCR
                                    245 	.globl _IRCDB
                                    246 	.globl _MCLKOCR
                                    247 	.globl _CKSEL
                                    248 	.globl _IRC32KCR
                                    249 	.globl _XOSCCR
                                    250 	.globl _HIRCCR
                                    251 	.globl _CLKDIV
                                    252 	.globl _DMA_SPI_CFG2
                                    253 	.globl _DMA_SPI_RXAL
                                    254 	.globl _DMA_SPI_RXAH
                                    255 	.globl _DMA_SPI_TXAL
                                    256 	.globl _DMA_SPI_TXAH
                                    257 	.globl _DMA_SPI_DONE
                                    258 	.globl _DMA_SPI_AMT
                                    259 	.globl _DMA_SPI_STA
                                    260 	.globl _DMA_SPI_CR
                                    261 	.globl _DMA_SPI_CFG
                                    262 	.globl _SSEC
                                    263 	.globl _SEC
                                    264 	.globl _MIN
                                    265 	.globl _HOUR
                                    266 	.globl _DAY
                                    267 	.globl _MONTH
                                    268 	.globl _YEAR
                                    269 	.globl _INISSEC
                                    270 	.globl _INISEC
                                    271 	.globl _INIMIN
                                    272 	.globl _INIHOUR
                                    273 	.globl _INIDAY
                                    274 	.globl _INIMONTH
                                    275 	.globl _INIYEAR
                                    276 	.globl _ALASSEC
                                    277 	.globl _ALASEC
                                    278 	.globl _ALAMIN
                                    279 	.globl _ALAHOUR
                                    280 	.globl _RTCIF
                                    281 	.globl _RTCIEN
                                    282 	.globl _RTCCFG
                                    283 	.globl _RTCCR
                                    284 	.globl _PWMB_OISR
                                    285 	.globl _PWMB_DTR
                                    286 	.globl _PWMB_BKR
                                    287 	.globl _PWMB_CCR4L
                                    288 	.globl _PWMB_CCR4H
                                    289 	.globl _PWMB_CCR3L
                                    290 	.globl _PWMB_CCR3H
                                    291 	.globl _PWMB_CCR2L
                                    292 	.globl _PWMB_CCR2H
                                    293 	.globl _PWMB_CCR1L
                                    294 	.globl _PWMB_CCR1H
                                    295 	.globl _PWMB_RCR
                                    296 	.globl _PWMB_ARRL
                                    297 	.globl _PWMB_ARRH
                                    298 	.globl _PWMB_PSCRL
                                    299 	.globl _PWMB_PSCRH
                                    300 	.globl _PWMB_CNTRL
                                    301 	.globl _PWMB_CNTRH
                                    302 	.globl _PWMB_CCER2
                                    303 	.globl _PWMB_CCER1
                                    304 	.globl _PWMB_CCMR4
                                    305 	.globl _PWMB_CCMR3
                                    306 	.globl _PWMB_CCMR2
                                    307 	.globl _PWMB_CCMR1
                                    308 	.globl _PWMB_EGR
                                    309 	.globl _PWMB_SR2
                                    310 	.globl _PWMB_SR1
                                    311 	.globl _PWMB_IER
                                    312 	.globl _PWMB_ETR
                                    313 	.globl _PWMB_SMCR
                                    314 	.globl _PWMB_CR2
                                    315 	.globl _PWMB_CR1
                                    316 	.globl _PWMA_OISR
                                    317 	.globl _PWMA_DTR
                                    318 	.globl _PWMA_BKR
                                    319 	.globl _PWMA_CCR4L
                                    320 	.globl _PWMA_CCR4H
                                    321 	.globl _PWMA_CCR3L
                                    322 	.globl _PWMA_CCR3H
                                    323 	.globl _PWMA_CCR2L
                                    324 	.globl _PWMA_CCR2H
                                    325 	.globl _PWMA_CCR1L
                                    326 	.globl _PWMA_CCR1H
                                    327 	.globl _PWMA_RCR
                                    328 	.globl _PWMA_ARRL
                                    329 	.globl _PWMA_ARRH
                                    330 	.globl _PWMA_PSCRL
                                    331 	.globl _PWMA_PSCRH
                                    332 	.globl _PWMA_CNTRL
                                    333 	.globl _PWMA_CNTRH
                                    334 	.globl _PWMA_CCER2
                                    335 	.globl _PWMA_CCER1
                                    336 	.globl _PWMA_CCMR4
                                    337 	.globl _PWMA_CCMR3
                                    338 	.globl _PWMA_CCMR2
                                    339 	.globl _PWMA_CCMR1
                                    340 	.globl _PWMA_EGR
                                    341 	.globl _PWMA_SR2
                                    342 	.globl _PWMA_SR1
                                    343 	.globl _PWMA_IER
                                    344 	.globl _PWMA_ETR
                                    345 	.globl _PWMA_SMCR
                                    346 	.globl _PWMA_CR2
                                    347 	.globl _PWMA_CR1
                                    348 	.globl _PWMB_IOAUX
                                    349 	.globl _PWMB_PS
                                    350 	.globl _PWMB_ENO
                                    351 	.globl _PWMB_ETRPS
                                    352 	.globl _PWMA_IOAUX
                                    353 	.globl _PWMA_PS
                                    354 	.globl _PWMA_ENO
                                    355 	.globl _PWMA_ETRPS
                                    356 	.globl _RSTFLAG
                                    357 	.globl _SPFUNC
                                    358 	.globl _OPCON
                                    359 	.globl _ARCON
                                    360 	.globl _MD4
                                    361 	.globl _MD5
                                    362 	.globl _MD0
                                    363 	.globl _MD1
                                    364 	.globl _MD2
                                    365 	.globl _MD3
                                    366 	.globl _DMA_LCM_RXAL
                                    367 	.globl _DMA_LCM_RXAH
                                    368 	.globl _DMA_LCM_TXAL
                                    369 	.globl _DMA_LCM_TXAH
                                    370 	.globl _DMA_LCM_DONE
                                    371 	.globl _DMA_LCM_AMT
                                    372 	.globl _DMA_LCM_STA
                                    373 	.globl _DMA_LCM_CR
                                    374 	.globl _DMA_LCM_CFG
                                    375 	.globl _LCMIDDAT
                                    376 	.globl _LCMIDDATH
                                    377 	.globl _LCMIDDATL
                                    378 	.globl _LCMSTA
                                    379 	.globl _LCMCR
                                    380 	.globl _LCMCFG2
                                    381 	.globl _LCMCFG
                                    382 	.globl _I2CMSAUX
                                    383 	.globl _I2CRXD
                                    384 	.globl _I2CTXD
                                    385 	.globl _I2CSLADR
                                    386 	.globl _I2CSLST
                                    387 	.globl _I2CSLCR
                                    388 	.globl _I2CMSST
                                    389 	.globl _I2CMSCR
                                    390 	.globl _I2CCFG
                                    391 	.globl _PINIPH
                                    392 	.globl _PINIPL
                                    393 	.globl _P5IE
                                    394 	.globl _P5DR
                                    395 	.globl _P5SR
                                    396 	.globl _P5NCS
                                    397 	.globl _P5PU
                                    398 	.globl _P5WKUE
                                    399 	.globl _P5IM1
                                    400 	.globl _P5IM0
                                    401 	.globl _P5INTF
                                    402 	.globl _P5INTE
                                    403 	.globl _P3IE
                                    404 	.globl _P3DR
                                    405 	.globl _P3SR
                                    406 	.globl _P3NCS
                                    407 	.globl _P3PU
                                    408 	.globl _P3WKUE
                                    409 	.globl _P3IM1
                                    410 	.globl _P3IM0
                                    411 	.globl _P3INTF
                                    412 	.globl _P3INTE
                                    413 	.globl _P2IE
                                    414 	.globl _P2DR
                                    415 	.globl _P2SR
                                    416 	.globl _P2NCS
                                    417 	.globl _P2PU
                                    418 	.globl _P2WKUE
                                    419 	.globl _P2IM1
                                    420 	.globl _P2IM0
                                    421 	.globl _P2INTF
                                    422 	.globl _P2INTE
                                    423 	.globl _P1IE
                                    424 	.globl _P1DR
                                    425 	.globl _P1SR
                                    426 	.globl _P1NCS
                                    427 	.globl _P1PU
                                    428 	.globl _P1WKUE
                                    429 	.globl _P1IM1
                                    430 	.globl _P1IM0
                                    431 	.globl _P1INTF
                                    432 	.globl _P1INTE
                                    433 	.globl _DMA_M2M_RXAL
                                    434 	.globl _DMA_M2M_RXAH
                                    435 	.globl _DMA_M2M_TXAL
                                    436 	.globl _DMA_M2M_TXAH
                                    437 	.globl _DMA_M2M_DONE
                                    438 	.globl _DMA_M2M_AMT
                                    439 	.globl _DMA_M2M_STA
                                    440 	.globl _DMA_M2M_CR
                                    441 	.globl _DMA_M2M_CFG
                                    442 	.globl _CMPEXCFG
                                    443 	.globl _DMA_ADC_CHSW1
                                    444 	.globl _DMA_ADC_CHSW0
                                    445 	.globl _DMA_ADC_CFG2
                                    446 	.globl _DMA_ADC_RXAL
                                    447 	.globl _DMA_ADC_RXAH
                                    448 	.globl _DMA_ADC_STA
                                    449 	.globl _DMA_ADC_CR
                                    450 	.globl _DMA_ADC_CFG
                                    451 	.globl _ADCEXCFG
                                    452 	.globl _ADCTIM
                                    453 	.globl _delay_function
                                    454 	.globl _SPI_Initializer
                                    455 	.globl _pinout_Initializer
                                    456 	.globl _nrf24_SPI
                                    457 	.globl _SPI_send_command
                                    458 	.globl _nrf24_CE
                                    459 	.globl _nrf24_dynamic_ack
                                    460 	.globl _nrf24_transmit
                                    461 	.globl _nrf24_send_payload
                                    462 	.globl _nrf24_transmit_status
                                    463 	.globl _nrf24_receive
                                    464 	.globl _nrf24_flush
                                    465 	.globl _nrf24_reset
                                    466 	.globl _nrf24_device
                                    467 	.globl _nrf24_automatic_retransmit_setup
                                    468 	.globl _nrf24_auto_acknowledgment_setup
                                    469 	.globl _nrf24_dynamic_payload
                                    470 	.globl _nrf24_datapipe_ptx
                                    471 	.globl _nrf24_datapipe_address_configuration
                                    472 	.globl _nrf24_prx_static_payload_width
                                    473 	.globl _nrf24_datapipe_enable
                                    474 	.globl _nrf24_address_width
                                    475 	.globl _nrf24_rf_datarate
                                    476 	.globl _nrf24_rf_power
                                    477 	.globl _nrf24_rf_channel
                                    478 	.globl _nrf24_interrupt_mask
                                    479 	.globl _nrf24_crc_configuration
                                    480 	.globl _nrf24_mode
                                    481 	.globl _nrf24_read
                                    482 	.globl _nrf24_write
                                    483 ;--------------------------------------------------------
                                    484 ; special function registers
                                    485 ;--------------------------------------------------------
                                    486 	.area RSEG    (ABS,DATA)
      000000                        487 	.org 0x0000
                           0000BC   488 _ADC_CONTR	=	0x00bc
                           0000BD   489 _ADC_RESH	=	0x00bd
                           0000BE   490 _ADC_RESL	=	0x00be
                           00BDBE   491 _ADC_RES	=	0xbdbe
                           0000DE   492 _ADCCFG	=	0x00de
                           0000FA   493 _DMA_ADC_AMT	=	0x00fa
                           0000E6   494 _CMPCR1	=	0x00e6
                           0000E7   495 _CMPCR2	=	0x00e7
                           000082   496 _DPL	=	0x0082
                           000083   497 _DPH	=	0x0083
                           008382   498 _DP	=	0x8382
                           0000E3   499 _DPS	=	0x00e3
                           0000E4   500 _DPL1	=	0x00e4
                           0000E5   501 _DPH1	=	0x00e5
                           0000AE   502 _TA	=	0x00ae
                           000090   503 _P1	=	0x0090
                           000091   504 _P1M1	=	0x0091
                           000092   505 _P1M0	=	0x0092
                           0000A0   506 _P2	=	0x00a0
                           000095   507 _P2M1	=	0x0095
                           000096   508 _P2M0	=	0x0096
                           0000B0   509 _P3	=	0x00b0
                           0000B1   510 _P3M1	=	0x00b1
                           0000B2   511 _P3M0	=	0x00b2
                           0000C8   512 _P5	=	0x00c8
                           0000C9   513 _P5M1	=	0x00c9
                           0000CA   514 _P5M0	=	0x00ca
                           0000C2   515 _IAP_DATA	=	0x00c2
                           0000C3   516 _IAP_ADDRH	=	0x00c3
                           0000C4   517 _IAP_ADDRL	=	0x00c4
                           00C3C4   518 _IAP_ADDR	=	0xc3c4
                           0000C5   519 _IAP_CMD	=	0x00c5
                           0000C6   520 _IAP_TRIG	=	0x00c6
                           0000C7   521 _IAP_CONTR	=	0x00c7
                           0000F5   522 _IAP_TPS	=	0x00f5
                           00008F   523 _INT_CLKO	=	0x008f
                           0000A8   524 _IE1	=	0x00a8
                           0000B8   525 _IP1L	=	0x00b8
                           0000B7   526 _IP1H	=	0x00b7
                           0000AF   527 _IE2	=	0x00af
                           0000B5   528 _IP2L	=	0x00b5
                           0000B6   529 _IP2H	=	0x00b6
                           0000DF   530 _IP3L	=	0x00df
                           0000EE   531 _IP3H	=	0x00ee
                           000081   532 _SP	=	0x0081
                           0000D0   533 _PSW	=	0x00d0
                           0000E0   534 _ACC	=	0x00e0
                           0000F0   535 _B	=	0x00f0
                           000087   536 _PCON	=	0x0087
                           0000FF   537 _RSTCFG	=	0x00ff
                           0000A2   538 _P_SW1	=	0x00a2
                           0000BA   539 _P_SW2	=	0x00ba
                           0000A1   540 _BUS_SPEED	=	0x00a1
                           0000AA   541 _WKTCL	=	0x00aa
                           0000AB   542 _WKTCH	=	0x00ab
                           00ABAA   543 _WKTC	=	0xabaa
                           0000CD   544 _SPSTAT	=	0x00cd
                           0000CE   545 _SPCTL	=	0x00ce
                           0000CF   546 _SPDAT	=	0x00cf
                           00009D   547 _IRCBAND	=	0x009d
                           00009E   548 _LIRTRIM	=	0x009e
                           00009F   549 _IRTRIM	=	0x009f
                           000088   550 _TCON	=	0x0088
                           000089   551 _TMOD	=	0x0089
                           00008A   552 _T0L	=	0x008a
                           00008C   553 _T0H	=	0x008c
                           008C8A   554 _T0	=	0x8c8a
                           00008B   555 _T1L	=	0x008b
                           00008D   556 _T1H	=	0x008d
                           008D8B   557 _T1	=	0x8d8b
                           0000D7   558 _T2L	=	0x00d7
                           0000D6   559 _T2H	=	0x00d6
                           00D6D7   560 _T2	=	0xd6d7
                           00008E   561 _AUXR	=	0x008e
                           0000C1   562 _WDT_CONTR	=	0x00c1
                           0000D1   563 _T4T3M	=	0x00d1
                           0000D2   564 _T4H	=	0x00d2
                           0000D3   565 _T4L	=	0x00d3
                           00D2D3   566 _T4	=	0xd2d3
                           0000D4   567 _T3H	=	0x00d4
                           0000D5   568 _T3L	=	0x00d5
                           00D4D5   569 _T3	=	0xd4d5
                           0000EF   570 _AUXINTIF	=	0x00ef
                           0000A9   571 _SADDR	=	0x00a9
                           0000B9   572 _SADEN	=	0x00b9
                           000098   573 _S1CON	=	0x0098
                           000099   574 _S1BUF	=	0x0099
                           00009A   575 _S2CON	=	0x009a
                           00009B   576 _S2BUF	=	0x009b
                           0000AC   577 _S3CON	=	0x00ac
                           0000AD   578 _S3BUF	=	0x00ad
                           000084   579 _S4CON	=	0x0084
                           000085   580 _S4BUF	=	0x0085
                           0000DC   581 _USBCLK	=	0x00dc
                           0000EC   582 _USBDAT	=	0x00ec
                           0000F4   583 _USBCON	=	0x00f4
                           0000FC   584 _USBADR	=	0x00fc
                                    585 ;--------------------------------------------------------
                                    586 ; special function bits
                                    587 ;--------------------------------------------------------
                                    588 	.area RSEG    (ABS,DATA)
      000000                        589 	.org 0x0000
                           000090   590 _P1_0	=	0x0090
                           000091   591 _P1_1	=	0x0091
                           000092   592 _P1_2	=	0x0092
                           000093   593 _P1_3	=	0x0093
                           000094   594 _P1_4	=	0x0094
                           000095   595 _P1_5	=	0x0095
                           000096   596 _P1_6	=	0x0096
                           000097   597 _P1_7	=	0x0097
                           0000A0   598 _P2_0	=	0x00a0
                           0000A1   599 _P2_1	=	0x00a1
                           0000A2   600 _P2_2	=	0x00a2
                           0000A3   601 _P2_3	=	0x00a3
                           0000A4   602 _P2_4	=	0x00a4
                           0000A5   603 _P2_5	=	0x00a5
                           0000A6   604 _P2_6	=	0x00a6
                           0000A7   605 _P2_7	=	0x00a7
                           0000B0   606 _P3_0	=	0x00b0
                           0000B1   607 _P3_1	=	0x00b1
                           0000B2   608 _P3_2	=	0x00b2
                           0000B3   609 _P3_3	=	0x00b3
                           0000B4   610 _P3_4	=	0x00b4
                           0000B5   611 _P3_5	=	0x00b5
                           0000B6   612 _P3_6	=	0x00b6
                           0000B7   613 _P3_7	=	0x00b7
                           0000C8   614 _P5_0	=	0x00c8
                           0000C9   615 _P5_1	=	0x00c9
                           0000CA   616 _P5_2	=	0x00ca
                           0000CB   617 _P5_3	=	0x00cb
                           0000CC   618 _P5_4	=	0x00cc
                           0000CD   619 _P5_5	=	0x00cd
                           000088   620 _INT0TR	=	0x0088
                           00008A   621 _INT1TR	=	0x008a
                           0000A8   622 _INT0IE	=	0x00a8
                           0000AA   623 _INT1IE	=	0x00aa
                           0000AF   624 _EA	=	0x00af
                           0000D0   625 _P	=	0x00d0
                           0000D1   626 _F1	=	0x00d1
                           0000D2   627 _OV	=	0x00d2
                           0000D3   628 _RS0	=	0x00d3
                           0000D4   629 _RS1	=	0x00d4
                           0000D5   630 _F0	=	0x00d5
                           0000D6   631 _AC	=	0x00d6
                           0000D7   632 _CY	=	0x00d7
                           00008C   633 _T0RUN	=	0x008c
                           00008E   634 _T1RUN	=	0x008e
                           0000A9   635 _T0IE	=	0x00a9
                           0000AB   636 _T1IE	=	0x00ab
                           00009F   637 _S1SM0_FE	=	0x009f
                                    638 ;--------------------------------------------------------
                                    639 ; overlayable register banks
                                    640 ;--------------------------------------------------------
                                    641 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        642 	.ds 8
                                    643 ;--------------------------------------------------------
                                    644 ; internal ram data
                                    645 ;--------------------------------------------------------
                                    646 	.area DSEG    (DATA)
                                    647 ;--------------------------------------------------------
                                    648 ; overlayable items in internal ram
                                    649 ;--------------------------------------------------------
                                    650 ;--------------------------------------------------------
                                    651 ; indirectly addressable internal ram data
                                    652 ;--------------------------------------------------------
                                    653 	.area ISEG    (DATA)
                                    654 ;--------------------------------------------------------
                                    655 ; absolute internal ram data
                                    656 ;--------------------------------------------------------
                                    657 	.area IABS    (ABS,DATA)
                                    658 	.area IABS    (ABS,DATA)
                                    659 ;--------------------------------------------------------
                                    660 ; bit data
                                    661 ;--------------------------------------------------------
                                    662 	.area BSEG    (BIT)
                                    663 ;--------------------------------------------------------
                                    664 ; paged external ram data
                                    665 ;--------------------------------------------------------
                                    666 	.area PSEG    (PAG,XDATA)
                                    667 ;--------------------------------------------------------
                                    668 ; uninitialized external ram data
                                    669 ;--------------------------------------------------------
                                    670 	.area XSEG    (XDATA)
                           00FEA8   671 _ADCTIM	=	0xfea8
                           00FEAD   672 _ADCEXCFG	=	0xfead
                           00FA10   673 _DMA_ADC_CFG	=	0xfa10
                           00FA11   674 _DMA_ADC_CR	=	0xfa11
                           00FA12   675 _DMA_ADC_STA	=	0xfa12
                           00FA17   676 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   677 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   678 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   679 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   680 _DMA_ADC_CHSW1	=	0xfa1b
                           00FEAE   681 _CMPEXCFG	=	0xfeae
                           00FA00   682 _DMA_M2M_CFG	=	0xfa00
                           00FA01   683 _DMA_M2M_CR	=	0xfa01
                           00FA02   684 _DMA_M2M_STA	=	0xfa02
                           00FA03   685 _DMA_M2M_AMT	=	0xfa03
                           00FA04   686 _DMA_M2M_DONE	=	0xfa04
                           00FA05   687 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   688 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   689 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   690 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   691 _P1INTE	=	0xfd01
                           00FD11   692 _P1INTF	=	0xfd11
                           00FD21   693 _P1IM0	=	0xfd21
                           00FD31   694 _P1IM1	=	0xfd31
                           00FD41   695 _P1WKUE	=	0xfd41
                           00FE11   696 _P1PU	=	0xfe11
                           00FE19   697 _P1NCS	=	0xfe19
                           00FE21   698 _P1SR	=	0xfe21
                           00FE29   699 _P1DR	=	0xfe29
                           00FE31   700 _P1IE	=	0xfe31
                           00FD02   701 _P2INTE	=	0xfd02
                           00FD12   702 _P2INTF	=	0xfd12
                           00FD22   703 _P2IM0	=	0xfd22
                           00FD32   704 _P2IM1	=	0xfd32
                           00FD42   705 _P2WKUE	=	0xfd42
                           00FE12   706 _P2PU	=	0xfe12
                           00FE1A   707 _P2NCS	=	0xfe1a
                           00FE22   708 _P2SR	=	0xfe22
                           00FE2A   709 _P2DR	=	0xfe2a
                           00FE32   710 _P2IE	=	0xfe32
                           00FD03   711 _P3INTE	=	0xfd03
                           00FD13   712 _P3INTF	=	0xfd13
                           00FD23   713 _P3IM0	=	0xfd23
                           00FD33   714 _P3IM1	=	0xfd33
                           00FD43   715 _P3WKUE	=	0xfd43
                           00FE13   716 _P3PU	=	0xfe13
                           00FE1B   717 _P3NCS	=	0xfe1b
                           00FE23   718 _P3SR	=	0xfe23
                           00FE2B   719 _P3DR	=	0xfe2b
                           00FE33   720 _P3IE	=	0xfe33
                           00FD05   721 _P5INTE	=	0xfd05
                           00FD15   722 _P5INTF	=	0xfd15
                           00FD25   723 _P5IM0	=	0xfd25
                           00FD35   724 _P5IM1	=	0xfd35
                           00FD45   725 _P5WKUE	=	0xfd45
                           00FE15   726 _P5PU	=	0xfe15
                           00FE1D   727 _P5NCS	=	0xfe1d
                           00FE25   728 _P5SR	=	0xfe25
                           00FE2D   729 _P5DR	=	0xfe2d
                           00FE35   730 _P5IE	=	0xfe35
                           00FD60   731 _PINIPL	=	0xfd60
                           00FD61   732 _PINIPH	=	0xfd61
                           00FE80   733 _I2CCFG	=	0xfe80
                           00FE81   734 _I2CMSCR	=	0xfe81
                           00FE82   735 _I2CMSST	=	0xfe82
                           00FE83   736 _I2CSLCR	=	0xfe83
                           00FE84   737 _I2CSLST	=	0xfe84
                           00FE85   738 _I2CSLADR	=	0xfe85
                           00FE86   739 _I2CTXD	=	0xfe86
                           00FE87   740 _I2CRXD	=	0xfe87
                           00FE88   741 _I2CMSAUX	=	0xfe88
                           00FE50   742 _LCMCFG	=	0xfe50
                           00FE51   743 _LCMCFG2	=	0xfe51
                           00FE52   744 _LCMCR	=	0xfe52
                           00FE53   745 _LCMSTA	=	0xfe53
                           00FE54   746 _LCMIDDATL	=	0xfe54
                           00FE55   747 _LCMIDDATH	=	0xfe55
                           00FE54   748 _LCMIDDAT	=	0xfe54
                           00FA70   749 _DMA_LCM_CFG	=	0xfa70
                           00FA71   750 _DMA_LCM_CR	=	0xfa71
                           00FA72   751 _DMA_LCM_STA	=	0xfa72
                           00FA73   752 _DMA_LCM_AMT	=	0xfa73
                           00FA74   753 _DMA_LCM_DONE	=	0xfa74
                           00FA75   754 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   755 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   756 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   757 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   758 _MD3	=	0xfcf0
                           00FCF1   759 _MD2	=	0xfcf1
                           00FCF2   760 _MD1	=	0xfcf2
                           00FCF3   761 _MD0	=	0xfcf3
                           00FCF4   762 _MD5	=	0xfcf4
                           00FCF5   763 _MD4	=	0xfcf5
                           00FCF6   764 _ARCON	=	0xfcf6
                           00FCF7   765 _OPCON	=	0xfcf7
                           00FE08   766 _SPFUNC	=	0xfe08
                           00FE09   767 _RSTFLAG	=	0xfe09
                           00FEB0   768 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   769 _PWMA_ENO	=	0xfeb1
                           00FEB2   770 _PWMA_PS	=	0xfeb2
                           00FEB3   771 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   772 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   773 _PWMB_ENO	=	0xfeb5
                           00FEB6   774 _PWMB_PS	=	0xfeb6
                           00FEB7   775 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   776 _PWMA_CR1	=	0xfec0
                           00FEC1   777 _PWMA_CR2	=	0xfec1
                           00FEC2   778 _PWMA_SMCR	=	0xfec2
                           00FEC3   779 _PWMA_ETR	=	0xfec3
                           00FEC4   780 _PWMA_IER	=	0xfec4
                           00FEC5   781 _PWMA_SR1	=	0xfec5
                           00FEC6   782 _PWMA_SR2	=	0xfec6
                           00FEC7   783 _PWMA_EGR	=	0xfec7
                           00FEC8   784 _PWMA_CCMR1	=	0xfec8
                           00FEC9   785 _PWMA_CCMR2	=	0xfec9
                           00FECA   786 _PWMA_CCMR3	=	0xfeca
                           00FECB   787 _PWMA_CCMR4	=	0xfecb
                           00FECC   788 _PWMA_CCER1	=	0xfecc
                           00FECD   789 _PWMA_CCER2	=	0xfecd
                           00FECE   790 _PWMA_CNTRH	=	0xfece
                           00FECF   791 _PWMA_CNTRL	=	0xfecf
                           00FED0   792 _PWMA_PSCRH	=	0xfed0
                           00FED1   793 _PWMA_PSCRL	=	0xfed1
                           00FED2   794 _PWMA_ARRH	=	0xfed2
                           00FED3   795 _PWMA_ARRL	=	0xfed3
                           00FED4   796 _PWMA_RCR	=	0xfed4
                           00FED5   797 _PWMA_CCR1H	=	0xfed5
                           00FED6   798 _PWMA_CCR1L	=	0xfed6
                           00FED7   799 _PWMA_CCR2H	=	0xfed7
                           00FED8   800 _PWMA_CCR2L	=	0xfed8
                           00FED9   801 _PWMA_CCR3H	=	0xfed9
                           00FEDA   802 _PWMA_CCR3L	=	0xfeda
                           00FEDB   803 _PWMA_CCR4H	=	0xfedb
                           00FEDC   804 _PWMA_CCR4L	=	0xfedc
                           00FEDD   805 _PWMA_BKR	=	0xfedd
                           00FEDE   806 _PWMA_DTR	=	0xfede
                           00FEDF   807 _PWMA_OISR	=	0xfedf
                           00FEE0   808 _PWMB_CR1	=	0xfee0
                           00FEE1   809 _PWMB_CR2	=	0xfee1
                           00FEE2   810 _PWMB_SMCR	=	0xfee2
                           00FEE3   811 _PWMB_ETR	=	0xfee3
                           00FEE4   812 _PWMB_IER	=	0xfee4
                           00FEE5   813 _PWMB_SR1	=	0xfee5
                           00FEE6   814 _PWMB_SR2	=	0xfee6
                           00FEE7   815 _PWMB_EGR	=	0xfee7
                           00FEE8   816 _PWMB_CCMR1	=	0xfee8
                           00FEE9   817 _PWMB_CCMR2	=	0xfee9
                           00FEEA   818 _PWMB_CCMR3	=	0xfeea
                           00FEEB   819 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   820 _PWMB_CCER1	=	0xfeec
                           00FEED   821 _PWMB_CCER2	=	0xfeed
                           00FEEE   822 _PWMB_CNTRH	=	0xfeee
                           00FEEF   823 _PWMB_CNTRL	=	0xfeef
                           00FEF0   824 _PWMB_PSCRH	=	0xfef0
                           00FEF1   825 _PWMB_PSCRL	=	0xfef1
                           00FEF2   826 _PWMB_ARRH	=	0xfef2
                           00FEF3   827 _PWMB_ARRL	=	0xfef3
                           00FEF4   828 _PWMB_RCR	=	0xfef4
                           00FEF5   829 _PWMB_CCR1H	=	0xfef5
                           00FEF6   830 _PWMB_CCR1L	=	0xfef6
                           00FEF7   831 _PWMB_CCR2H	=	0xfef7
                           00FEF8   832 _PWMB_CCR2L	=	0xfef8
                           00FEF9   833 _PWMB_CCR3H	=	0xfef9
                           00FEFA   834 _PWMB_CCR3L	=	0xfefa
                           00FEFB   835 _PWMB_CCR4H	=	0xfefb
                           00FEFC   836 _PWMB_CCR4L	=	0xfefc
                           00FEFD   837 _PWMB_BKR	=	0xfefd
                           00FEFE   838 _PWMB_DTR	=	0xfefe
                           00FEFF   839 _PWMB_OISR	=	0xfeff
                           00FE60   840 _RTCCR	=	0xfe60
                           00FE61   841 _RTCCFG	=	0xfe61
                           00FE62   842 _RTCIEN	=	0xfe62
                           00FE63   843 _RTCIF	=	0xfe63
                           00FE64   844 _ALAHOUR	=	0xfe64
                           00FE65   845 _ALAMIN	=	0xfe65
                           00FE66   846 _ALASEC	=	0xfe66
                           00FE67   847 _ALASSEC	=	0xfe67
                           00FE68   848 _INIYEAR	=	0xfe68
                           00FE69   849 _INIMONTH	=	0xfe69
                           00FE6A   850 _INIDAY	=	0xfe6a
                           00FE6B   851 _INIHOUR	=	0xfe6b
                           00FE6C   852 _INIMIN	=	0xfe6c
                           00FE6D   853 _INISEC	=	0xfe6d
                           00FE6E   854 _INISSEC	=	0xfe6e
                           00FE70   855 _YEAR	=	0xfe70
                           00FE71   856 _MONTH	=	0xfe71
                           00FE72   857 _DAY	=	0xfe72
                           00FE73   858 _HOUR	=	0xfe73
                           00FE74   859 _MIN	=	0xfe74
                           00FE75   860 _SEC	=	0xfe75
                           00FE76   861 _SSEC	=	0xfe76
                           00FA20   862 _DMA_SPI_CFG	=	0xfa20
                           00FA21   863 _DMA_SPI_CR	=	0xfa21
                           00FA22   864 _DMA_SPI_STA	=	0xfa22
                           00FA23   865 _DMA_SPI_AMT	=	0xfa23
                           00FA24   866 _DMA_SPI_DONE	=	0xfa24
                           00FA25   867 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   868 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   869 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   870 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   871 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   872 _CLKDIV	=	0xfe01
                           00FE02   873 _HIRCCR	=	0xfe02
                           00FE03   874 _XOSCCR	=	0xfe03
                           00FE04   875 _IRC32KCR	=	0xfe04
                           00FE00   876 _CKSEL	=	0xfe00
                           00FE05   877 _MCLKOCR	=	0xfe05
                           00FE06   878 _IRCDB	=	0xfe06
                           00FE07   879 _IRC48MCR	=	0xfe07
                           00FEA2   880 _TM2PS	=	0xfea2
                           00FEA3   881 _TM3PS	=	0xfea3
                           00FEA4   882 _TM4PS	=	0xfea4
                           00FA30   883 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   884 _DMA_UR1T_CR	=	0xfa31
                           00FA32   885 _DMA_UR1T_STA	=	0xfa32
                           00FA33   886 _DMA_URTX_AMT	=	0xfa33
                           00FA34   887 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   888 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   889 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   890 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   891 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   892 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   893 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   894 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   895 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   896 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   897 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   898 _DMA_UR2T_CR	=	0xfa31
                           00FA32   899 _DMA_UR2T_STA	=	0xfa32
                           00FA33   900 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   901 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   902 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   903 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   904 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   905 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   906 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   907 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   908 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   909 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   910 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   911 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   912 _DMA_UR3T_CR	=	0xfa31
                           00FA32   913 _DMA_UR3T_STA	=	0xfa32
                           00FA33   914 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   915 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   916 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   917 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   918 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   919 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   920 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   921 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   922 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   923 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   924 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   925 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   926 _DMA_UR4T_CR	=	0xfa31
                           00FA32   927 _DMA_UR4T_STA	=	0xfa32
                           00FA33   928 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   929 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   930 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   931 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   932 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   933 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   934 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   935 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   936 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   937 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   938 _DMA_UR4R_TXAL	=	0xfa3e
      000000                        939 _uartGetCharacter_result_10000_75:
      000000                        940 	.ds 1
      000001                        941 _SPI_command:
      000001                        942 	.ds 1
      000002                        943 _register_current_value:
      000002                        944 	.ds 1
      000003                        945 _register_new_value:
      000003                        946 	.ds 1
      000004                        947 _write_pointer:
      000004                        948 	.ds 1
      000005                        949 _current_address_width:
      000005                        950 	.ds 1
      000006                        951 _current_payload_width:
      000006                        952 	.ds 1
      000007                        953 _delay_function_duration_ms_10000_114:
      000007                        954 	.ds 4
      00000B                        955 _nrf24_SPI_input_10000_120:
      00000B                        956 	.ds 1
      00000C                        957 _SPI_send_command_command_10000_122:
      00000C                        958 	.ds 1
      00000D                        959 _SPI_send_command_spi_byte_10000_123:
      00000D                        960 	.ds 1
      00000E                        961 _nrf24_CE_input_10000_124:
      00000E                        962 	.ds 1
      00000F                        963 _nrf24_dynamic_ack_state_10000_126:
      00000F                        964 	.ds 1
      000010                        965 _nrf24_transmit_PARM_2:
      000010                        966 	.ds 1
      000011                        967 _nrf24_transmit_PARM_3:
      000011                        968 	.ds 1
      000012                        969 _nrf24_transmit_payload_10000_130:
      000012                        970 	.ds 3
      000015                        971 _nrf24_send_payload_PARM_2:
      000015                        972 	.ds 1
      000016                        973 _nrf24_send_payload_payload_10000_134:
      000016                        974 	.ds 3
      000019                        975 _nrf24_receive_PARM_2:
      000019                        976 	.ds 1
      00001A                        977 _nrf24_receive_payload_10000_142:
      00001A                        978 	.ds 3
      00001D                        979 _nrf24_flush_fifo_select_10000_150:
      00001D                        980 	.ds 1
      00001E                        981 _nrf24_device_PARM_2:
      00001E                        982 	.ds 1
      00001F                        983 _nrf24_device_device_mode_10000_157:
      00001F                        984 	.ds 1
      000020                        985 _nrf24_device_hardwareCheckPassed_10001_159:
      000020                        986 	.ds 1
      000021                        987 _nrf24_device_new_value_10001_159:
      000021                        988 	.ds 1
      000022                        989 _nrf24_automatic_retransmit_setup_PARM_2:
      000022                        990 	.ds 1
      000023                        991 _nrf24_automatic_retransmit_setup_delay_time_10000_165:
      000023                        992 	.ds 2
      000025                        993 _nrf24_auto_acknowledgment_setup_datapipe_10000_168:
      000025                        994 	.ds 1
      000026                        995 _nrf24_dynamic_payload_PARM_2:
      000026                        996 	.ds 1
      000027                        997 _nrf24_dynamic_payload_state_10000_170:
      000027                        998 	.ds 1
      000028                        999 _nrf24_datapipe_ptx_datapipe_number_10000_174:
      000028                       1000 	.ds 1
      000029                       1001 _nrf24_prx_static_payload_width_PARM_2:
      000029                       1002 	.ds 1
      00002A                       1003 _nrf24_prx_static_payload_width_static_payload_width_10000_180:
      00002A                       1004 	.ds 1
      00002B                       1005 _nrf24_datapipe_enable_number_of_datapipes_10000_184:
      00002B                       1006 	.ds 1
      00002C                       1007 _nrf24_address_width_address_width_10000_186:
      00002C                       1008 	.ds 1
      00002D                       1009 _nrf24_rf_datarate_rf_datarate_10000_190:
      00002D                       1010 	.ds 2
      00002F                       1011 _nrf24_rf_power_rf_power_10000_193:
      00002F                       1012 	.ds 1
      000030                       1013 _nrf24_rf_channel_rf_channel_10000_196:
      000030                       1014 	.ds 1
      000031                       1015 _nrf24_rf_channel_write_pointer_20000_198:
      000031                       1016 	.ds 1
      000032                       1017 _nrf24_rf_channel_write_pointer_20000_199:
      000032                       1018 	.ds 1
      000033                       1019 _nrf24_interrupt_mask_PARM_2:
      000033                       1020 	.ds 1
      000034                       1021 _nrf24_interrupt_mask_PARM_3:
      000034                       1022 	.ds 1
      000035                       1023 _nrf24_interrupt_mask_rx_mask_10000_200:
      000035                       1024 	.ds 1
      000036                       1025 _nrf24_crc_configuration_PARM_2:
      000036                       1026 	.ds 1
      000037                       1027 _nrf24_crc_configuration_crc_enable_10000_202:
      000037                       1028 	.ds 1
      000038                       1029 _nrf24_mode_mode_10000_204:
      000038                       1030 	.ds 1
      000039                       1031 _nrf24_read_PARM_2:
      000039                       1032 	.ds 3
      00003C                       1033 _nrf24_read_PARM_3:
      00003C                       1034 	.ds 1
      00003D                       1035 _nrf24_read_PARM_4:
      00003D                       1036 	.ds 1
      00003E                       1037 _nrf24_read_address_10000_207:
      00003E                       1038 	.ds 1
      00003F                       1039 _nrf24_write_PARM_2:
      00003F                       1040 	.ds 3
      000042                       1041 _nrf24_write_PARM_3:
      000042                       1042 	.ds 1
      000043                       1043 _nrf24_write_PARM_4:
      000043                       1044 	.ds 1
      000044                       1045 _nrf24_write_address_10000_211:
      000044                       1046 	.ds 1
                                   1047 ;--------------------------------------------------------
                                   1048 ; absolute external ram data
                                   1049 ;--------------------------------------------------------
                                   1050 	.area XABS    (ABS,XDATA)
                                   1051 ;--------------------------------------------------------
                                   1052 ; initialized external ram data
                                   1053 ;--------------------------------------------------------
                                   1054 	.area XISEG   (XDATA)
      000000                       1055 _dataReady::
      000000                       1056 	.ds 1
      000001                       1057 _CSN_pin::
      000001                       1058 	.ds 13
      00000E                       1059 _CE_pin::
      00000E                       1060 	.ds 13
      00001B                       1061 _reset_flag:
      00001B                       1062 	.ds 1
      00001C                       1063 _current_mode:
      00001C                       1064 	.ds 1
      00001D                       1065 _current_acknowledgement_state:
      00001D                       1066 	.ds 1
      00001E                       1067 _dynamic_payload:
      00001E                       1068 	.ds 1
      00001F                       1069 _datapipe_address::
      00001F                       1070 	.ds 30
                                   1071 	.area HOME    (CODE)
                                   1072 	.area GSINIT0 (CODE)
                                   1073 	.area GSINIT1 (CODE)
                                   1074 	.area GSINIT2 (CODE)
                                   1075 	.area GSINIT3 (CODE)
                                   1076 	.area GSINIT4 (CODE)
                                   1077 	.area GSINIT5 (CODE)
                                   1078 	.area GSINIT  (CODE)
                                   1079 	.area GSFINAL (CODE)
                                   1080 	.area CSEG    (CODE)
                                   1081 ;--------------------------------------------------------
                                   1082 ; global & static initialisations
                                   1083 ;--------------------------------------------------------
                                   1084 	.area HOME    (CODE)
                                   1085 	.area GSINIT  (CODE)
                                   1086 	.area GSFINAL (CODE)
                                   1087 	.area GSINIT  (CODE)
                                   1088 ;--------------------------------------------------------
                                   1089 ; Home
                                   1090 ;--------------------------------------------------------
                                   1091 	.area HOME    (CODE)
                                   1092 	.area HOME    (CODE)
                                   1093 ;--------------------------------------------------------
                                   1094 ; code
                                   1095 ;--------------------------------------------------------
                                   1096 	.area CSEG    (CODE)
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'delay_function'
                                   1099 ;------------------------------------------------------------
                                   1100 ;duration_ms               Allocated with name '_delay_function_duration_ms_10000_114'
                                   1101 ;------------------------------------------------------------
                                   1102 ;	nrf24l01.c:66: void delay_function(uint32_t duration_ms)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function delay_function
                                   1105 ;	-----------------------------------------
      000000                       1106 _delay_function:
                           000007  1107 	ar7 = 0x07
                           000006  1108 	ar6 = 0x06
                           000005  1109 	ar5 = 0x05
                           000004  1110 	ar4 = 0x04
                           000003  1111 	ar3 = 0x03
                           000002  1112 	ar2 = 0x02
                           000001  1113 	ar1 = 0x01
                           000000  1114 	ar0 = 0x00
      000000 AF 82            [24] 1115 	mov	r7,dpl
      000002 AE 83            [24] 1116 	mov	r6,dph
      000004 AD F0            [24] 1117 	mov	r5,b
      000006 FC               [12] 1118 	mov	r4,a
      000007 90r00r07         [24] 1119 	mov	dptr,#_delay_function_duration_ms_10000_114
      00000A EF               [12] 1120 	mov	a,r7
      00000B F0               [24] 1121 	movx	@dptr,a
      00000C EE               [12] 1122 	mov	a,r6
      00000D A3               [24] 1123 	inc	dptr
      00000E F0               [24] 1124 	movx	@dptr,a
      00000F ED               [12] 1125 	mov	a,r5
      000010 A3               [24] 1126 	inc	dptr
      000011 F0               [24] 1127 	movx	@dptr,a
      000012 EC               [12] 1128 	mov	a,r4
      000013 A3               [24] 1129 	inc	dptr
      000014 F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	nrf24l01.c:68: delay1ms(duration_ms);
      000015 90r00r07         [24] 1132 	mov	dptr,#_delay_function_duration_ms_10000_114
      000018 E0               [24] 1133 	movx	a,@dptr
      000019 FC               [12] 1134 	mov	r4,a
      00001A A3               [24] 1135 	inc	dptr
      00001B E0               [24] 1136 	movx	a,@dptr
      00001C FD               [12] 1137 	mov	r5,a
      00001D A3               [24] 1138 	inc	dptr
      00001E E0               [24] 1139 	movx	a,@dptr
      00001F A3               [24] 1140 	inc	dptr
      000020 E0               [24] 1141 	movx	a,@dptr
      000021 8C 82            [24] 1142 	mov	dpl, r4
      000023 8D 83            [24] 1143 	mov	dph, r5
                                   1144 ;	nrf24l01.c:69: }
      000025 02r00r00         [24] 1145 	ljmp	_delay1ms
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'SPI_Initializer'
                                   1148 ;------------------------------------------------------------
                                   1149 ;	nrf24l01.c:73: void SPI_Initializer(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function SPI_Initializer
                                   1152 ;	-----------------------------------------
      000028                       1153 _SPI_Initializer:
                                   1154 ;	nrf24l01.c:79: spiSelectSpeed(SPI_SPEED), 
      000028 90 09 00         [24] 1155 	mov	dptr,#0x0900
      00002B 75 F0 3D         [24] 1156 	mov	b, #0x3d
      00002E E4               [12] 1157 	clr	a
      00002F 12r00r00         [24] 1158 	lcall	_spiSelectSpeed
      000032 AF 82            [24] 1159 	mov	r7, dpl
                                   1160 ;	nrf24l01.c:81: GPIO_BIDIRECTIONAL_MODE
      000034 90r00r00         [24] 1161 	mov	dptr,#_spiConfigure_PARM_2
      000037 E4               [12] 1162 	clr	a
      000038 F0               [24] 1163 	movx	@dptr,a
      000039 90r00r00         [24] 1164 	mov	dptr,#_spiConfigure_PARM_3
      00003C EF               [12] 1165 	mov	a,r7
      00003D F0               [24] 1166 	movx	@dptr,a
      00003E 90r00r00         [24] 1167 	mov	dptr,#_spiConfigure_PARM_4
      000041 E4               [12] 1168 	clr	a
      000042 F0               [24] 1169 	movx	@dptr,a
      000043 90r00r00         [24] 1170 	mov	dptr,#_spiConfigure_PARM_5
      000046 F0               [24] 1171 	movx	@dptr,a
      000047 75 82 20         [24] 1172 	mov	dpl, #0x20
                                   1173 ;	nrf24l01.c:84: }
      00004A 02r00r00         [24] 1174 	ljmp	_spiConfigure
                                   1175 ;------------------------------------------------------------
                                   1176 ;Allocation info for local variables in function 'pinout_Initializer'
                                   1177 ;------------------------------------------------------------
                                   1178 ;	nrf24l01.c:87: void pinout_Initializer(void)
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function pinout_Initializer
                                   1181 ;	-----------------------------------------
      00004D                       1182 _pinout_Initializer:
                                   1183 ;	nrf24l01.c:90: gpioConfigure(&CSN_pin);
      00004D 90r00r01         [24] 1184 	mov	dptr,#_CSN_pin
      000050 75 F0 00         [24] 1185 	mov	b, #0x00
      000053 12r00r00         [24] 1186 	lcall	_gpioConfigure
                                   1187 ;	nrf24l01.c:91: gpioConfigure(&CE_pin);
      000056 90r00r0E         [24] 1188 	mov	dptr,#_CE_pin
      000059 75 F0 00         [24] 1189 	mov	b, #0x00
      00005C 12r00r00         [24] 1190 	lcall	_gpioConfigure
                                   1191 ;	nrf24l01.c:93: gpioWrite(&CSN_pin, 0);
      00005F 90r00r00         [24] 1192 	mov	dptr,#_gpioWrite_PARM_2
      000062 E4               [12] 1193 	clr	a
      000063 F0               [24] 1194 	movx	@dptr,a
      000064 90r00r01         [24] 1195 	mov	dptr,#_CSN_pin
      000067 F5 F0            [12] 1196 	mov	b,a
      000069 12r00r00         [24] 1197 	lcall	_gpioWrite
                                   1198 ;	nrf24l01.c:94: gpioWrite(&CE_pin, 1);
      00006C 90r00r00         [24] 1199 	mov	dptr,#_gpioWrite_PARM_2
      00006F 74 01            [12] 1200 	mov	a,#0x01
      000071 F0               [24] 1201 	movx	@dptr,a
      000072 90r00r0E         [24] 1202 	mov	dptr,#_CE_pin
      000075 75 F0 00         [24] 1203 	mov	b, #0x00
                                   1204 ;	nrf24l01.c:96: }
      000078 02r00r00         [24] 1205 	ljmp	_gpioWrite
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'nrf24_SPI'
                                   1208 ;------------------------------------------------------------
                                   1209 ;input                     Allocated with name '_nrf24_SPI_input_10000_120'
                                   1210 ;------------------------------------------------------------
                                   1211 ;	nrf24l01.c:99: void nrf24_SPI(uint8_t input)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function nrf24_SPI
                                   1214 ;	-----------------------------------------
      00007B                       1215 _nrf24_SPI:
      00007B E5 82            [12] 1216 	mov	a,dpl
      00007D 90r00r0B         [24] 1217 	mov	dptr,#_nrf24_SPI_input_10000_120
      000080 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	nrf24l01.c:101: gpioWrite(&CSN_pin, input);
      000081 E0               [24] 1220 	movx	a,@dptr
      000082 90r00r00         [24] 1221 	mov	dptr,#_gpioWrite_PARM_2
      000085 F0               [24] 1222 	movx	@dptr,a
      000086 90r00r01         [24] 1223 	mov	dptr,#_CSN_pin
      000089 75 F0 00         [24] 1224 	mov	b, #0x00
                                   1225 ;	nrf24l01.c:102: }
      00008C 02r00r00         [24] 1226 	ljmp	_gpioWrite
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'SPI_send_command'
                                   1229 ;------------------------------------------------------------
                                   1230 ;command                   Allocated with name '_SPI_send_command_command_10000_122'
                                   1231 ;spi_byte                  Allocated with name '_SPI_send_command_spi_byte_10000_123'
                                   1232 ;------------------------------------------------------------
                                   1233 ;	nrf24l01.c:105: uint8_t SPI_send_command(uint8_t command)
                                   1234 ;	-----------------------------------------
                                   1235 ;	 function SPI_send_command
                                   1236 ;	-----------------------------------------
      00008F                       1237 _SPI_send_command:
      00008F E5 82            [12] 1238 	mov	a,dpl
      000091 90r00r0C         [24] 1239 	mov	dptr,#_SPI_send_command_command_10000_122
      000094 F0               [24] 1240 	movx	@dptr,a
                                   1241 ;	nrf24l01.c:107: uint8_t spi_byte = bitReverseTable256[command];
      000095 E0               [24] 1242 	movx	a,@dptr
      000096 90r00r00         [24] 1243 	mov	dptr,#_bitReverseTable256
      000099 93               [24] 1244 	movc	a,@a+dptr
      00009A 90r00r0D         [24] 1245 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      00009D F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	nrf24l01.c:109: spiSend(&spi_byte, 1, &dataReady);
      00009E 90r00r00         [24] 1248 	mov	dptr,#_spiSend_PARM_2
      0000A1 74 01            [12] 1249 	mov	a,#0x01
      0000A3 F0               [24] 1250 	movx	@dptr,a
      0000A4 E4               [12] 1251 	clr	a
      0000A5 A3               [24] 1252 	inc	dptr
      0000A6 F0               [24] 1253 	movx	@dptr,a
      0000A7 90r00r00         [24] 1254 	mov	dptr,#_spiSend_PARM_3
      0000AA 74r00            [12] 1255 	mov	a,#_dataReady
      0000AC F0               [24] 1256 	movx	@dptr,a
      0000AD 74s00            [12] 1257 	mov	a,#(_dataReady >> 8)
      0000AF A3               [24] 1258 	inc	dptr
      0000B0 F0               [24] 1259 	movx	@dptr,a
      0000B1 E4               [12] 1260 	clr	a
      0000B2 A3               [24] 1261 	inc	dptr
      0000B3 F0               [24] 1262 	movx	@dptr,a
      0000B4 90r00r0D         [24] 1263 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      0000B7 F5 F0            [12] 1264 	mov	b,a
      0000B9 12r00r00         [24] 1265 	lcall	_spiSend
                                   1266 ;	nrf24l01.c:112: while(!dataReady);
      0000BC                       1267 00101$:
      0000BC 90r00r00         [24] 1268 	mov	dptr,#_dataReady
      0000BF E0               [24] 1269 	movx	a,@dptr
      0000C0 60 FA            [24] 1270 	jz	00101$
                                   1271 ;	nrf24l01.c:114: return bitReverseTable256[spi_byte];
      0000C2 90r00r0D         [24] 1272 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      0000C5 E0               [24] 1273 	movx	a,@dptr
      0000C6 90r00r00         [24] 1274 	mov	dptr,#_bitReverseTable256
      0000C9 93               [24] 1275 	movc	a,@a+dptr
                                   1276 ;	nrf24l01.c:116: }
      0000CA F5 82            [12] 1277 	mov	dpl,a
      0000CC 22               [24] 1278 	ret
                                   1279 ;------------------------------------------------------------
                                   1280 ;Allocation info for local variables in function 'nrf24_CE'
                                   1281 ;------------------------------------------------------------
                                   1282 ;input                     Allocated with name '_nrf24_CE_input_10000_124'
                                   1283 ;------------------------------------------------------------
                                   1284 ;	nrf24l01.c:119: void nrf24_CE(uint8_t input)
                                   1285 ;	-----------------------------------------
                                   1286 ;	 function nrf24_CE
                                   1287 ;	-----------------------------------------
      0000CD                       1288 _nrf24_CE:
      0000CD E5 82            [12] 1289 	mov	a,dpl
      0000CF 90r00r0E         [24] 1290 	mov	dptr,#_nrf24_CE_input_10000_124
      0000D2 F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	nrf24l01.c:121: gpioWrite(&CE_pin, input);
      0000D3 E0               [24] 1293 	movx	a,@dptr
      0000D4 90r00r00         [24] 1294 	mov	dptr,#_gpioWrite_PARM_2
      0000D7 F0               [24] 1295 	movx	@dptr,a
      0000D8 90r00r0E         [24] 1296 	mov	dptr,#_CE_pin
      0000DB 75 F0 00         [24] 1297 	mov	b, #0x00
                                   1298 ;	nrf24l01.c:122: }
      0000DE 02r00r00         [24] 1299 	ljmp	_gpioWrite
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'nrf24_dynamic_ack'
                                   1302 ;------------------------------------------------------------
                                   1303 ;state                     Allocated with name '_nrf24_dynamic_ack_state_10000_126'
                                   1304 ;------------------------------------------------------------
                                   1305 ;	nrf24l01.c:128: void nrf24_dynamic_ack(uint8_t state)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function nrf24_dynamic_ack
                                   1308 ;	-----------------------------------------
      0000E1                       1309 _nrf24_dynamic_ack:
      0000E1 E5 82            [12] 1310 	mov	a,dpl
      0000E3 90r00r0F         [24] 1311 	mov	dptr,#_nrf24_dynamic_ack_state_10000_126
      0000E6 F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	nrf24l01.c:130: if (state == ENABLE)
      0000E7 E0               [24] 1314 	movx	a,@dptr
      0000E8 FF               [12] 1315 	mov	r7,a
      0000E9 BF 01 44         [24] 1316 	cjne	r7,#0x01,00102$
                                   1317 ;	nrf24l01.c:132: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0000EC 90r00r39         [24] 1318 	mov	dptr,#_nrf24_read_PARM_2
      0000EF 74r02            [12] 1319 	mov	a,#_register_current_value
      0000F1 F0               [24] 1320 	movx	@dptr,a
      0000F2 74s00            [12] 1321 	mov	a,#(_register_current_value >> 8)
      0000F4 A3               [24] 1322 	inc	dptr
      0000F5 F0               [24] 1323 	movx	@dptr,a
      0000F6 E4               [12] 1324 	clr	a
      0000F7 A3               [24] 1325 	inc	dptr
      0000F8 F0               [24] 1326 	movx	@dptr,a
      0000F9 90r00r3C         [24] 1327 	mov	dptr,#_nrf24_read_PARM_3
      0000FC 04               [12] 1328 	inc	a
      0000FD F0               [24] 1329 	movx	@dptr,a
      0000FE 90r00r3D         [24] 1330 	mov	dptr,#_nrf24_read_PARM_4
      000101 E4               [12] 1331 	clr	a
      000102 F0               [24] 1332 	movx	@dptr,a
      000103 75 82 1D         [24] 1333 	mov	dpl, #0x1d
      000106 12r0Fr10         [24] 1334 	lcall	_nrf24_read
                                   1335 ;	nrf24l01.c:133: register_new_value = register_current_value | (1 << EN_DYN_ACK);
      000109 90r00r02         [24] 1336 	mov	dptr,#_register_current_value
      00010C E0               [24] 1337 	movx	a,@dptr
      00010D 90r00r03         [24] 1338 	mov	dptr,#_register_new_value
      000110 44 01            [12] 1339 	orl	a,#0x01
      000112 F0               [24] 1340 	movx	@dptr,a
                                   1341 ;	nrf24l01.c:134: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000113 90r00r3F         [24] 1342 	mov	dptr,#_nrf24_write_PARM_2
      000116 74r03            [12] 1343 	mov	a,#_register_new_value
      000118 F0               [24] 1344 	movx	@dptr,a
      000119 74s00            [12] 1345 	mov	a,#(_register_new_value >> 8)
      00011B A3               [24] 1346 	inc	dptr
      00011C F0               [24] 1347 	movx	@dptr,a
      00011D E4               [12] 1348 	clr	a
      00011E A3               [24] 1349 	inc	dptr
      00011F F0               [24] 1350 	movx	@dptr,a
      000120 90r00r42         [24] 1351 	mov	dptr,#_nrf24_write_PARM_3
      000123 04               [12] 1352 	inc	a
      000124 F0               [24] 1353 	movx	@dptr,a
      000125 90r00r43         [24] 1354 	mov	dptr,#_nrf24_write_PARM_4
      000128 E4               [12] 1355 	clr	a
      000129 F0               [24] 1356 	movx	@dptr,a
      00012A 75 82 1D         [24] 1357 	mov	dpl, #0x1d
      00012D 02r0Fr7C         [24] 1358 	ljmp	_nrf24_write
      000130                       1359 00102$:
                                   1360 ;	nrf24l01.c:138: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      000130 90r00r39         [24] 1361 	mov	dptr,#_nrf24_read_PARM_2
      000133 74r02            [12] 1362 	mov	a,#_register_current_value
      000135 F0               [24] 1363 	movx	@dptr,a
      000136 74s00            [12] 1364 	mov	a,#(_register_current_value >> 8)
      000138 A3               [24] 1365 	inc	dptr
      000139 F0               [24] 1366 	movx	@dptr,a
      00013A E4               [12] 1367 	clr	a
      00013B A3               [24] 1368 	inc	dptr
      00013C F0               [24] 1369 	movx	@dptr,a
      00013D 90r00r3C         [24] 1370 	mov	dptr,#_nrf24_read_PARM_3
      000140 04               [12] 1371 	inc	a
      000141 F0               [24] 1372 	movx	@dptr,a
      000142 90r00r3D         [24] 1373 	mov	dptr,#_nrf24_read_PARM_4
      000145 E4               [12] 1374 	clr	a
      000146 F0               [24] 1375 	movx	@dptr,a
      000147 75 82 1D         [24] 1376 	mov	dpl, #0x1d
      00014A 12r0Fr10         [24] 1377 	lcall	_nrf24_read
                                   1378 ;	nrf24l01.c:139: register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
      00014D 90r00r02         [24] 1379 	mov	dptr,#_register_current_value
      000150 E0               [24] 1380 	movx	a,@dptr
      000151 90r00r03         [24] 1381 	mov	dptr,#_register_new_value
      000154 54 FE            [12] 1382 	anl	a,#0xfe
      000156 F0               [24] 1383 	movx	@dptr,a
                                   1384 ;	nrf24l01.c:140: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000157 90r00r3F         [24] 1385 	mov	dptr,#_nrf24_write_PARM_2
      00015A 74r03            [12] 1386 	mov	a,#_register_new_value
      00015C F0               [24] 1387 	movx	@dptr,a
      00015D 74s00            [12] 1388 	mov	a,#(_register_new_value >> 8)
      00015F A3               [24] 1389 	inc	dptr
      000160 F0               [24] 1390 	movx	@dptr,a
      000161 E4               [12] 1391 	clr	a
      000162 A3               [24] 1392 	inc	dptr
      000163 F0               [24] 1393 	movx	@dptr,a
      000164 90r00r42         [24] 1394 	mov	dptr,#_nrf24_write_PARM_3
      000167 04               [12] 1395 	inc	a
      000168 F0               [24] 1396 	movx	@dptr,a
      000169 90r00r43         [24] 1397 	mov	dptr,#_nrf24_write_PARM_4
      00016C E4               [12] 1398 	clr	a
      00016D F0               [24] 1399 	movx	@dptr,a
      00016E 75 82 1D         [24] 1400 	mov	dpl, #0x1d
                                   1401 ;	nrf24l01.c:142: }
      000171 02r0Fr7C         [24] 1402 	ljmp	_nrf24_write
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'nrf24_transmit'
                                   1405 ;------------------------------------------------------------
                                   1406 ;payload_width             Allocated with name '_nrf24_transmit_PARM_2'
                                   1407 ;acknowledgement_state     Allocated with name '_nrf24_transmit_PARM_3'
                                   1408 ;payload                   Allocated with name '_nrf24_transmit_payload_10000_130'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	nrf24l01.c:146: uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function nrf24_transmit
                                   1413 ;	-----------------------------------------
      000174                       1414 _nrf24_transmit:
      000174 AF F0            [24] 1415 	mov	r7,b
      000176 AE 83            [24] 1416 	mov	r6,dph
      000178 E5 82            [12] 1417 	mov	a,dpl
      00017A 90r00r12         [24] 1418 	mov	dptr,#_nrf24_transmit_payload_10000_130
      00017D F0               [24] 1419 	movx	@dptr,a
      00017E EE               [12] 1420 	mov	a,r6
      00017F A3               [24] 1421 	inc	dptr
      000180 F0               [24] 1422 	movx	@dptr,a
      000181 EF               [12] 1423 	mov	a,r7
      000182 A3               [24] 1424 	inc	dptr
      000183 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	nrf24l01.c:148: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
      000184 90r00r39         [24] 1427 	mov	dptr,#_nrf24_read_PARM_2
      000187 74r02            [12] 1428 	mov	a,#_register_current_value
      000189 F0               [24] 1429 	movx	@dptr,a
      00018A 74s00            [12] 1430 	mov	a,#(_register_current_value >> 8)
      00018C A3               [24] 1431 	inc	dptr
      00018D F0               [24] 1432 	movx	@dptr,a
      00018E E4               [12] 1433 	clr	a
      00018F A3               [24] 1434 	inc	dptr
      000190 F0               [24] 1435 	movx	@dptr,a
      000191 90r00r3C         [24] 1436 	mov	dptr,#_nrf24_read_PARM_3
      000194 04               [12] 1437 	inc	a
      000195 F0               [24] 1438 	movx	@dptr,a
      000196 90r00r3D         [24] 1439 	mov	dptr,#_nrf24_read_PARM_4
      000199 E4               [12] 1440 	clr	a
      00019A F0               [24] 1441 	movx	@dptr,a
      00019B 75 82 07         [24] 1442 	mov	dpl, #0x07
      00019E 12r0Fr10         [24] 1443 	lcall	_nrf24_read
                                   1444 ;	nrf24l01.c:149: if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
      0001A1 90r00r02         [24] 1445 	mov	dptr,#_register_current_value
      0001A4 E0               [24] 1446 	movx	a,@dptr
      0001A5 20 E5 40         [24] 1447 	jb	acc.5,00104$
      0001A8 90r00r1C         [24] 1448 	mov	dptr,#_current_mode
      0001AB E0               [24] 1449 	movx	a,@dptr
      0001AC FF               [12] 1450 	mov	r7,a
      0001AD BF 03 38         [24] 1451 	cjne	r7,#0x03,00104$
                                   1452 ;	nrf24l01.c:151: current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
      0001B0 90r00r11         [24] 1453 	mov	dptr,#_nrf24_transmit_PARM_3
      0001B3 E0               [24] 1454 	movx	a,@dptr
      0001B4 90r00r1D         [24] 1455 	mov	dptr,#_current_acknowledgement_state
      0001B7 F0               [24] 1456 	movx	@dptr,a
                                   1457 ;	nrf24l01.c:152: if (dynamic_payload == ENABLE)
      0001B8 90r00r1E         [24] 1458 	mov	dptr,#_dynamic_payload
      0001BB E0               [24] 1459 	movx	a,@dptr
      0001BC FF               [12] 1460 	mov	r7,a
      0001BD BF 01 08         [24] 1461 	cjne	r7,#0x01,00102$
                                   1462 ;	nrf24l01.c:153: payload_width = current_payload_width;
      0001C0 90r00r06         [24] 1463 	mov	dptr,#_current_payload_width
      0001C3 E0               [24] 1464 	movx	a,@dptr
      0001C4 90r00r10         [24] 1465 	mov	dptr,#_nrf24_transmit_PARM_2
      0001C7 F0               [24] 1466 	movx	@dptr,a
      0001C8                       1467 00102$:
                                   1468 ;	nrf24l01.c:154: nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
      0001C8 90r00r12         [24] 1469 	mov	dptr,#_nrf24_transmit_payload_10000_130
      0001CB E0               [24] 1470 	movx	a,@dptr
      0001CC FD               [12] 1471 	mov	r5,a
      0001CD A3               [24] 1472 	inc	dptr
      0001CE E0               [24] 1473 	movx	a,@dptr
      0001CF FE               [12] 1474 	mov	r6,a
      0001D0 A3               [24] 1475 	inc	dptr
      0001D1 E0               [24] 1476 	movx	a,@dptr
      0001D2 FF               [12] 1477 	mov	r7,a
      0001D3 90r00r10         [24] 1478 	mov	dptr,#_nrf24_transmit_PARM_2
      0001D6 E0               [24] 1479 	movx	a,@dptr
      0001D7 90r00r15         [24] 1480 	mov	dptr,#_nrf24_send_payload_PARM_2
      0001DA F0               [24] 1481 	movx	@dptr,a
      0001DB 8D 82            [24] 1482 	mov	dpl, r5
      0001DD 8E 83            [24] 1483 	mov	dph, r6
      0001DF 8F F0            [24] 1484 	mov	b, r7
      0001E1 12r01rEC         [24] 1485 	lcall	_nrf24_send_payload
                                   1486 ;	nrf24l01.c:155: return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
      0001E4 75 82 01         [24] 1487 	mov	dpl, #0x01
      0001E7 22               [24] 1488 	ret
      0001E8                       1489 00104$:
                                   1490 ;	nrf24l01.c:159: return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
      0001E8 75 82 00         [24] 1491 	mov	dpl, #0x00
                                   1492 ;	nrf24l01.c:161: }
      0001EB 22               [24] 1493 	ret
                                   1494 ;------------------------------------------------------------
                                   1495 ;Allocation info for local variables in function 'nrf24_send_payload'
                                   1496 ;------------------------------------------------------------
                                   1497 ;payload_width             Allocated with name '_nrf24_send_payload_PARM_2'
                                   1498 ;payload                   Allocated with name '_nrf24_send_payload_payload_10000_134'
                                   1499 ;------------------------------------------------------------
                                   1500 ;	nrf24l01.c:164: void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
                                   1501 ;	-----------------------------------------
                                   1502 ;	 function nrf24_send_payload
                                   1503 ;	-----------------------------------------
      0001EC                       1504 _nrf24_send_payload:
      0001EC AF F0            [24] 1505 	mov	r7,b
      0001EE AE 83            [24] 1506 	mov	r6,dph
      0001F0 E5 82            [12] 1507 	mov	a,dpl
      0001F2 90r00r16         [24] 1508 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      0001F5 F0               [24] 1509 	movx	@dptr,a
      0001F6 EE               [12] 1510 	mov	a,r6
      0001F7 A3               [24] 1511 	inc	dptr
      0001F8 F0               [24] 1512 	movx	@dptr,a
      0001F9 EF               [12] 1513 	mov	a,r7
      0001FA A3               [24] 1514 	inc	dptr
      0001FB F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	nrf24l01.c:166: nrf24_SPI(SPI_ON);
      0001FC 75 82 00         [24] 1517 	mov	dpl, #0x00
      0001FF 12r00r7B         [24] 1518 	lcall	_nrf24_SPI
                                   1519 ;	nrf24l01.c:167: if (current_acknowledgement_state == NO_ACK_MODE)
      000202 90r00r1D         [24] 1520 	mov	dptr,#_current_acknowledgement_state
      000205 E0               [24] 1521 	movx	a,@dptr
      000206 FF               [12] 1522 	mov	r7,a
      000207 BF 01 08         [24] 1523 	cjne	r7,#0x01,00102$
                                   1524 ;	nrf24l01.c:168: SPI_command = W_TX_PAYLOAD_NOACK;
      00020A 90r00r01         [24] 1525 	mov	dptr,#_SPI_command
      00020D 74 B0            [12] 1526 	mov	a,#0xb0
      00020F F0               [24] 1527 	movx	@dptr,a
      000210 80 06            [24] 1528 	sjmp	00103$
      000212                       1529 00102$:
                                   1530 ;	nrf24l01.c:170: SPI_command = W_TX_PAYLOAD;
      000212 90r00r01         [24] 1531 	mov	dptr,#_SPI_command
      000215 74 A0            [12] 1532 	mov	a,#0xa0
      000217 F0               [24] 1533 	movx	@dptr,a
      000218                       1534 00103$:
                                   1535 ;	nrf24l01.c:171: SPI_send_command(SPI_command);
      000218 90r00r01         [24] 1536 	mov	dptr,#_SPI_command
      00021B E0               [24] 1537 	movx	a,@dptr
      00021C F5 82            [12] 1538 	mov	dpl,a
      00021E 12r00r8F         [24] 1539 	lcall	_SPI_send_command
      000221 90r00r16         [24] 1540 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      000224 E0               [24] 1541 	movx	a,@dptr
      000225 FD               [12] 1542 	mov	r5,a
      000226 A3               [24] 1543 	inc	dptr
      000227 E0               [24] 1544 	movx	a,@dptr
      000228 FE               [12] 1545 	mov	r6,a
      000229 A3               [24] 1546 	inc	dptr
      00022A E0               [24] 1547 	movx	a,@dptr
      00022B FF               [12] 1548 	mov	r7,a
      00022C 90r00r15         [24] 1549 	mov	dptr,#_nrf24_send_payload_PARM_2
      00022F E0               [24] 1550 	movx	a,@dptr
      000230 FC               [12] 1551 	mov	r4,a
      000231                       1552 00106$:
                                   1553 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      000231 EC               [12] 1554 	mov	a,r4
      000232 60 37            [24] 1555 	jz	00113$
                                   1556 ;	nrf24l01.c:174: SPI_command = *payload;
      000234 8D 82            [24] 1557 	mov	dpl,r5
      000236 8E 83            [24] 1558 	mov	dph,r6
      000238 8F F0            [24] 1559 	mov	b,r7
      00023A 12r00r00         [24] 1560 	lcall	__gptrget
      00023D FB               [12] 1561 	mov	r3,a
      00023E A3               [24] 1562 	inc	dptr
      00023F AD 82            [24] 1563 	mov	r5,dpl
      000241 AE 83            [24] 1564 	mov	r6,dph
      000243 90r00r01         [24] 1565 	mov	dptr,#_SPI_command
      000246 EB               [12] 1566 	mov	a,r3
      000247 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	nrf24l01.c:175: SPI_send_command(SPI_command);
      000248 8B 82            [24] 1569 	mov	dpl, r3
      00024A C0 07            [24] 1570 	push	ar7
      00024C C0 06            [24] 1571 	push	ar6
      00024E C0 05            [24] 1572 	push	ar5
      000250 C0 04            [24] 1573 	push	ar4
      000252 12r00r8F         [24] 1574 	lcall	_SPI_send_command
      000255 D0 04            [24] 1575 	pop	ar4
      000257 D0 05            [24] 1576 	pop	ar5
      000259 D0 06            [24] 1577 	pop	ar6
      00025B D0 07            [24] 1578 	pop	ar7
                                   1579 ;	nrf24l01.c:176: payload++;
      00025D 90r00r16         [24] 1580 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      000260 ED               [12] 1581 	mov	a,r5
      000261 F0               [24] 1582 	movx	@dptr,a
      000262 EE               [12] 1583 	mov	a,r6
      000263 A3               [24] 1584 	inc	dptr
      000264 F0               [24] 1585 	movx	@dptr,a
      000265 EF               [12] 1586 	mov	a,r7
      000266 A3               [24] 1587 	inc	dptr
      000267 F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      000268 1C               [12] 1590 	dec	r4
      000269 80 C6            [24] 1591 	sjmp	00106$
      00026B                       1592 00113$:
      00026B 90r00r16         [24] 1593 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      00026E ED               [12] 1594 	mov	a,r5
      00026F F0               [24] 1595 	movx	@dptr,a
      000270 EE               [12] 1596 	mov	a,r6
      000271 A3               [24] 1597 	inc	dptr
      000272 F0               [24] 1598 	movx	@dptr,a
      000273 EF               [12] 1599 	mov	a,r7
      000274 A3               [24] 1600 	inc	dptr
      000275 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	nrf24l01.c:178: nrf24_SPI(SPI_OFF);
      000276 75 82 01         [24] 1603 	mov	dpl, #0x01
                                   1604 ;	nrf24l01.c:179: }
      000279 02r00r7B         [24] 1605 	ljmp	_nrf24_SPI
                                   1606 ;------------------------------------------------------------
                                   1607 ;Allocation info for local variables in function 'nrf24_transmit_status'
                                   1608 ;------------------------------------------------------------
                                   1609 ;	nrf24l01.c:183: uint8_t nrf24_transmit_status(void)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function nrf24_transmit_status
                                   1612 ;	-----------------------------------------
      00027C                       1613 _nrf24_transmit_status:
                                   1614 ;	nrf24l01.c:185: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
      00027C 90r00r39         [24] 1615 	mov	dptr,#_nrf24_read_PARM_2
      00027F 74r02            [12] 1616 	mov	a,#_register_current_value
      000281 F0               [24] 1617 	movx	@dptr,a
      000282 74s00            [12] 1618 	mov	a,#(_register_current_value >> 8)
      000284 A3               [24] 1619 	inc	dptr
      000285 F0               [24] 1620 	movx	@dptr,a
      000286 E4               [12] 1621 	clr	a
      000287 A3               [24] 1622 	inc	dptr
      000288 F0               [24] 1623 	movx	@dptr,a
      000289 90r00r3C         [24] 1624 	mov	dptr,#_nrf24_read_PARM_3
      00028C 04               [12] 1625 	inc	a
      00028D F0               [24] 1626 	movx	@dptr,a
      00028E 90r00r3D         [24] 1627 	mov	dptr,#_nrf24_read_PARM_4
      000291 E4               [12] 1628 	clr	a
      000292 F0               [24] 1629 	movx	@dptr,a
      000293 75 82 07         [24] 1630 	mov	dpl, #0x07
      000296 12r0Fr10         [24] 1631 	lcall	_nrf24_read
                                   1632 ;	nrf24l01.c:186: if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
      000299 90r00r02         [24] 1633 	mov	dptr,#_register_current_value
      00029C E0               [24] 1634 	movx	a,@dptr
      00029D FF               [12] 1635 	mov	r7,a
      00029E 30 E5 21         [24] 1636 	jnb	acc.5,00105$
                                   1637 ;	nrf24l01.c:188: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      0002A1 90r00r3F         [24] 1638 	mov	dptr,#_nrf24_write_PARM_2
      0002A4 74r02            [12] 1639 	mov	a,#_register_current_value
      0002A6 F0               [24] 1640 	movx	@dptr,a
      0002A7 74s00            [12] 1641 	mov	a,#(_register_current_value >> 8)
      0002A9 A3               [24] 1642 	inc	dptr
      0002AA F0               [24] 1643 	movx	@dptr,a
      0002AB E4               [12] 1644 	clr	a
      0002AC A3               [24] 1645 	inc	dptr
      0002AD F0               [24] 1646 	movx	@dptr,a
      0002AE 90r00r42         [24] 1647 	mov	dptr,#_nrf24_write_PARM_3
      0002B1 04               [12] 1648 	inc	a
      0002B2 F0               [24] 1649 	movx	@dptr,a
      0002B3 90r00r43         [24] 1650 	mov	dptr,#_nrf24_write_PARM_4
      0002B6 E4               [12] 1651 	clr	a
      0002B7 F0               [24] 1652 	movx	@dptr,a
      0002B8 75 82 07         [24] 1653 	mov	dpl, #0x07
      0002BB 12r0Fr7C         [24] 1654 	lcall	_nrf24_write
                                   1655 ;	nrf24l01.c:189: return TRANSMIT_DONE;
      0002BE 75 82 01         [24] 1656 	mov	dpl, #0x01
      0002C1 22               [24] 1657 	ret
      0002C2                       1658 00105$:
                                   1659 ;	nrf24l01.c:191: else if (register_current_value & (1 << MAX_RT))
      0002C2 EF               [12] 1660 	mov	a,r7
      0002C3 30 E4 21         [24] 1661 	jnb	acc.4,00102$
                                   1662 ;	nrf24l01.c:193: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      0002C6 90r00r3F         [24] 1663 	mov	dptr,#_nrf24_write_PARM_2
      0002C9 74r02            [12] 1664 	mov	a,#_register_current_value
      0002CB F0               [24] 1665 	movx	@dptr,a
      0002CC 74s00            [12] 1666 	mov	a,#(_register_current_value >> 8)
      0002CE A3               [24] 1667 	inc	dptr
      0002CF F0               [24] 1668 	movx	@dptr,a
      0002D0 E4               [12] 1669 	clr	a
      0002D1 A3               [24] 1670 	inc	dptr
      0002D2 F0               [24] 1671 	movx	@dptr,a
      0002D3 90r00r42         [24] 1672 	mov	dptr,#_nrf24_write_PARM_3
      0002D6 04               [12] 1673 	inc	a
      0002D7 F0               [24] 1674 	movx	@dptr,a
      0002D8 90r00r43         [24] 1675 	mov	dptr,#_nrf24_write_PARM_4
      0002DB E4               [12] 1676 	clr	a
      0002DC F0               [24] 1677 	movx	@dptr,a
      0002DD 75 82 07         [24] 1678 	mov	dpl, #0x07
      0002E0 12r0Fr7C         [24] 1679 	lcall	_nrf24_write
                                   1680 ;	nrf24l01.c:194: return TRANSMIT_FAILED;
      0002E3 75 82 FF         [24] 1681 	mov	dpl, #0xff
      0002E6 22               [24] 1682 	ret
      0002E7                       1683 00102$:
                                   1684 ;	nrf24l01.c:197: return TRANSMIT_IN_PROGRESS;
      0002E7 75 82 00         [24] 1685 	mov	dpl, #0x00
                                   1686 ;	nrf24l01.c:198: }
      0002EA 22               [24] 1687 	ret
                                   1688 ;------------------------------------------------------------
                                   1689 ;Allocation info for local variables in function 'nrf24_receive'
                                   1690 ;------------------------------------------------------------
                                   1691 ;payload_width             Allocated with name '_nrf24_receive_PARM_2'
                                   1692 ;payload                   Allocated with name '_nrf24_receive_payload_10000_142'
                                   1693 ;------------------------------------------------------------
                                   1694 ;	nrf24l01.c:202: uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
                                   1695 ;	-----------------------------------------
                                   1696 ;	 function nrf24_receive
                                   1697 ;	-----------------------------------------
      0002EB                       1698 _nrf24_receive:
      0002EB AF F0            [24] 1699 	mov	r7,b
      0002ED AE 83            [24] 1700 	mov	r6,dph
      0002EF E5 82            [12] 1701 	mov	a,dpl
      0002F1 90r00r1A         [24] 1702 	mov	dptr,#_nrf24_receive_payload_10000_142
      0002F4 F0               [24] 1703 	movx	@dptr,a
      0002F5 EE               [12] 1704 	mov	a,r6
      0002F6 A3               [24] 1705 	inc	dptr
      0002F7 F0               [24] 1706 	movx	@dptr,a
      0002F8 EF               [12] 1707 	mov	a,r7
      0002F9 A3               [24] 1708 	inc	dptr
      0002FA F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	nrf24l01.c:204: if (current_mode == PRX)
      0002FB 90r00r1C         [24] 1711 	mov	dptr,#_current_mode
      0002FE E0               [24] 1712 	movx	a,@dptr
      0002FF FF               [12] 1713 	mov	r7,a
      000300 BF 04 02         [24] 1714 	cjne	r7,#0x04,00154$
      000303 80 03            [24] 1715 	sjmp	00155$
      000305                       1716 00154$:
      000305 02r04r22         [24] 1717 	ljmp	00110$
      000308                       1718 00155$:
                                   1719 ;	nrf24l01.c:206: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      000308 90r00r39         [24] 1720 	mov	dptr,#_nrf24_read_PARM_2
      00030B 74r02            [12] 1721 	mov	a,#_register_current_value
      00030D F0               [24] 1722 	movx	@dptr,a
      00030E 74s00            [12] 1723 	mov	a,#(_register_current_value >> 8)
      000310 A3               [24] 1724 	inc	dptr
      000311 F0               [24] 1725 	movx	@dptr,a
      000312 E4               [12] 1726 	clr	a
      000313 A3               [24] 1727 	inc	dptr
      000314 F0               [24] 1728 	movx	@dptr,a
      000315 90r00r3C         [24] 1729 	mov	dptr,#_nrf24_read_PARM_3
      000318 04               [12] 1730 	inc	a
      000319 F0               [24] 1731 	movx	@dptr,a
      00031A 90r00r3D         [24] 1732 	mov	dptr,#_nrf24_read_PARM_4
      00031D E4               [12] 1733 	clr	a
      00031E F0               [24] 1734 	movx	@dptr,a
      00031F 75 82 07         [24] 1735 	mov	dpl, #0x07
      000322 12r0Fr10         [24] 1736 	lcall	_nrf24_read
                                   1737 ;	nrf24l01.c:207: if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
      000325 90r00r02         [24] 1738 	mov	dptr,#_register_current_value
      000328 E0               [24] 1739 	movx	a,@dptr
      000329 20 E6 03         [24] 1740 	jb	acc.6,00156$
      00032C 02r04r1E         [24] 1741 	ljmp	00107$
      00032F                       1742 00156$:
                                   1743 ;	nrf24l01.c:209: if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
      00032F 90r00r1E         [24] 1744 	mov	dptr,#_dynamic_payload
      000332 E0               [24] 1745 	movx	a,@dptr
      000333 70 08            [24] 1746 	jnz	00102$
                                   1747 ;	nrf24l01.c:210: payload_width = current_payload_width;
      000335 90r00r06         [24] 1748 	mov	dptr,#_current_payload_width
      000338 E0               [24] 1749 	movx	a,@dptr
      000339 90r00r19         [24] 1750 	mov	dptr,#_nrf24_receive_PARM_2
      00033C F0               [24] 1751 	movx	@dptr,a
      00033D                       1752 00102$:
                                   1753 ;	nrf24l01.c:212: nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/                          
      00033D 75 82 00         [24] 1754 	mov	dpl, #0x00
      000340 12r00r7B         [24] 1755 	lcall	_nrf24_SPI
                                   1756 ;	nrf24l01.c:213: SPI_command = R_RX_PAYLOAD;
      000343 90r00r01         [24] 1757 	mov	dptr,#_SPI_command
      000346 74 61            [12] 1758 	mov	a,#0x61
      000348 F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	nrf24l01.c:214: SPI_send_command(SPI_command);
      000349 75 82 61         [24] 1761 	mov	dpl, #0x61
      00034C 12r00r8F         [24] 1762 	lcall	_SPI_send_command
      00034F 90r00r1A         [24] 1763 	mov	dptr,#_nrf24_receive_payload_10000_142
      000352 E0               [24] 1764 	movx	a,@dptr
      000353 FD               [12] 1765 	mov	r5,a
      000354 A3               [24] 1766 	inc	dptr
      000355 E0               [24] 1767 	movx	a,@dptr
      000356 FE               [12] 1768 	mov	r6,a
      000357 A3               [24] 1769 	inc	dptr
      000358 E0               [24] 1770 	movx	a,@dptr
      000359 FF               [12] 1771 	mov	r7,a
      00035A 90r00r19         [24] 1772 	mov	dptr,#_nrf24_receive_PARM_2
      00035D E0               [24] 1773 	movx	a,@dptr
      00035E FC               [12] 1774 	mov	r4,a
      00035F                       1775 00113$:
                                   1776 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      00035F EC               [12] 1777 	mov	a,r4
      000360 60 3F            [24] 1778 	jz	00123$
                                   1779 ;	nrf24l01.c:218: SPI_command = NOP_CMD;
      000362 90r00r01         [24] 1780 	mov	dptr,#_SPI_command
      000365 74 FF            [12] 1781 	mov	a,#0xff
      000367 F0               [24] 1782 	movx	@dptr,a
                                   1783 ;	nrf24l01.c:219: *payload = bitReverseTable256[SPI_send_command(SPI_command)]; // newly added
      000368 75 82 FF         [24] 1784 	mov	dpl, #0xff
      00036B C0 07            [24] 1785 	push	ar7
      00036D C0 06            [24] 1786 	push	ar6
      00036F C0 05            [24] 1787 	push	ar5
      000371 C0 04            [24] 1788 	push	ar4
      000373 12r00r8F         [24] 1789 	lcall	_SPI_send_command
      000376 AB 82            [24] 1790 	mov	r3, dpl
      000378 D0 04            [24] 1791 	pop	ar4
      00037A D0 05            [24] 1792 	pop	ar5
      00037C D0 06            [24] 1793 	pop	ar6
      00037E D0 07            [24] 1794 	pop	ar7
      000380 EB               [12] 1795 	mov	a,r3
      000381 90r00r00         [24] 1796 	mov	dptr,#_bitReverseTable256
      000384 93               [24] 1797 	movc	a,@a+dptr
      000385 8D 82            [24] 1798 	mov	dpl,r5
      000387 8E 83            [24] 1799 	mov	dph,r6
      000389 8F F0            [24] 1800 	mov	b,r7
      00038B 12r00r00         [24] 1801 	lcall	__gptrput
      00038E A3               [24] 1802 	inc	dptr
      00038F AD 82            [24] 1803 	mov	r5,dpl
      000391 AE 83            [24] 1804 	mov	r6,dph
                                   1805 ;	nrf24l01.c:220: payload++;
      000393 90r00r1A         [24] 1806 	mov	dptr,#_nrf24_receive_payload_10000_142
      000396 ED               [12] 1807 	mov	a,r5
      000397 F0               [24] 1808 	movx	@dptr,a
      000398 EE               [12] 1809 	mov	a,r6
      000399 A3               [24] 1810 	inc	dptr
      00039A F0               [24] 1811 	movx	@dptr,a
      00039B EF               [12] 1812 	mov	a,r7
      00039C A3               [24] 1813 	inc	dptr
      00039D F0               [24] 1814 	movx	@dptr,a
                                   1815 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      00039E 1C               [12] 1816 	dec	r4
      00039F 80 BE            [24] 1817 	sjmp	00113$
      0003A1                       1818 00123$:
      0003A1 90r00r1A         [24] 1819 	mov	dptr,#_nrf24_receive_payload_10000_142
      0003A4 ED               [12] 1820 	mov	a,r5
      0003A5 F0               [24] 1821 	movx	@dptr,a
      0003A6 EE               [12] 1822 	mov	a,r6
      0003A7 A3               [24] 1823 	inc	dptr
      0003A8 F0               [24] 1824 	movx	@dptr,a
      0003A9 EF               [12] 1825 	mov	a,r7
      0003AA A3               [24] 1826 	inc	dptr
      0003AB F0               [24] 1827 	movx	@dptr,a
                                   1828 ;	nrf24l01.c:222: nrf24_SPI(SPI_OFF); 
      0003AC 75 82 01         [24] 1829 	mov	dpl, #0x01
      0003AF 12r00r7B         [24] 1830 	lcall	_nrf24_SPI
                                   1831 ;	nrf24l01.c:223: nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
      0003B2 90r00r39         [24] 1832 	mov	dptr,#_nrf24_read_PARM_2
      0003B5 74r02            [12] 1833 	mov	a,#_register_current_value
      0003B7 F0               [24] 1834 	movx	@dptr,a
      0003B8 74s00            [12] 1835 	mov	a,#(_register_current_value >> 8)
      0003BA A3               [24] 1836 	inc	dptr
      0003BB F0               [24] 1837 	movx	@dptr,a
      0003BC E4               [12] 1838 	clr	a
      0003BD A3               [24] 1839 	inc	dptr
      0003BE F0               [24] 1840 	movx	@dptr,a
      0003BF 90r00r3C         [24] 1841 	mov	dptr,#_nrf24_read_PARM_3
      0003C2 04               [12] 1842 	inc	a
      0003C3 F0               [24] 1843 	movx	@dptr,a
      0003C4 90r00r3D         [24] 1844 	mov	dptr,#_nrf24_read_PARM_4
      0003C7 E4               [12] 1845 	clr	a
      0003C8 F0               [24] 1846 	movx	@dptr,a
      0003C9 75 82 17         [24] 1847 	mov	dpl, #0x17
      0003CC 12r0Fr10         [24] 1848 	lcall	_nrf24_read
                                   1849 ;	nrf24l01.c:224: if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
      0003CF 90r00r02         [24] 1850 	mov	dptr,#_register_current_value
      0003D2 E0               [24] 1851 	movx	a,@dptr
      0003D3 30 E0 44         [24] 1852 	jnb	acc.0,00105$
                                   1853 ;	nrf24l01.c:226: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0003D6 90r00r39         [24] 1854 	mov	dptr,#_nrf24_read_PARM_2
      0003D9 74r02            [12] 1855 	mov	a,#_register_current_value
      0003DB F0               [24] 1856 	movx	@dptr,a
      0003DC 74s00            [12] 1857 	mov	a,#(_register_current_value >> 8)
      0003DE A3               [24] 1858 	inc	dptr
      0003DF F0               [24] 1859 	movx	@dptr,a
      0003E0 E4               [12] 1860 	clr	a
      0003E1 A3               [24] 1861 	inc	dptr
      0003E2 F0               [24] 1862 	movx	@dptr,a
      0003E3 90r00r3C         [24] 1863 	mov	dptr,#_nrf24_read_PARM_3
      0003E6 04               [12] 1864 	inc	a
      0003E7 F0               [24] 1865 	movx	@dptr,a
      0003E8 90r00r3D         [24] 1866 	mov	dptr,#_nrf24_read_PARM_4
      0003EB E4               [12] 1867 	clr	a
      0003EC F0               [24] 1868 	movx	@dptr,a
      0003ED 75 82 07         [24] 1869 	mov	dpl, #0x07
      0003F0 12r0Fr10         [24] 1870 	lcall	_nrf24_read
                                   1871 ;	nrf24l01.c:227: register_new_value = register_current_value | (1 << RX_DR);
      0003F3 90r00r02         [24] 1872 	mov	dptr,#_register_current_value
      0003F6 E0               [24] 1873 	movx	a,@dptr
      0003F7 90r00r03         [24] 1874 	mov	dptr,#_register_new_value
      0003FA 44 40            [12] 1875 	orl	a,#0x40
      0003FC F0               [24] 1876 	movx	@dptr,a
                                   1877 ;	nrf24l01.c:228: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE); 
      0003FD 90r00r3F         [24] 1878 	mov	dptr,#_nrf24_write_PARM_2
      000400 74r03            [12] 1879 	mov	a,#_register_new_value
      000402 F0               [24] 1880 	movx	@dptr,a
      000403 74s00            [12] 1881 	mov	a,#(_register_new_value >> 8)
      000405 A3               [24] 1882 	inc	dptr
      000406 F0               [24] 1883 	movx	@dptr,a
      000407 E4               [12] 1884 	clr	a
      000408 A3               [24] 1885 	inc	dptr
      000409 F0               [24] 1886 	movx	@dptr,a
      00040A 90r00r42         [24] 1887 	mov	dptr,#_nrf24_write_PARM_3
      00040D 04               [12] 1888 	inc	a
      00040E F0               [24] 1889 	movx	@dptr,a
      00040F 90r00r43         [24] 1890 	mov	dptr,#_nrf24_write_PARM_4
      000412 E4               [12] 1891 	clr	a
      000413 F0               [24] 1892 	movx	@dptr,a
      000414 75 82 07         [24] 1893 	mov	dpl, #0x07
      000417 12r0Fr7C         [24] 1894 	lcall	_nrf24_write
      00041A                       1895 00105$:
                                   1896 ;	nrf24l01.c:230: return OPERATION_DONE;
      00041A 75 82 01         [24] 1897 	mov	dpl, #0x01
      00041D 22               [24] 1898 	ret
      00041E                       1899 00107$:
                                   1900 ;	nrf24l01.c:234: return RECEIVE_FIFO_EMPTY;
      00041E 75 82 02         [24] 1901 	mov	dpl, #0x02
      000421 22               [24] 1902 	ret
      000422                       1903 00110$:
                                   1904 ;	nrf24l01.c:238: return OPERATION_ERROR;
      000422 75 82 00         [24] 1905 	mov	dpl, #0x00
                                   1906 ;	nrf24l01.c:239: }
      000425 22               [24] 1907 	ret
                                   1908 ;------------------------------------------------------------
                                   1909 ;Allocation info for local variables in function 'nrf24_flush'
                                   1910 ;------------------------------------------------------------
                                   1911 ;fifo_select               Allocated with name '_nrf24_flush_fifo_select_10000_150'
                                   1912 ;------------------------------------------------------------
                                   1913 ;	nrf24l01.c:243: uint8_t nrf24_flush(uint8_t fifo_select)
                                   1914 ;	-----------------------------------------
                                   1915 ;	 function nrf24_flush
                                   1916 ;	-----------------------------------------
      000426                       1917 _nrf24_flush:
      000426 E5 82            [12] 1918 	mov	a,dpl
      000428 90r00r1D         [24] 1919 	mov	dptr,#_nrf24_flush_fifo_select_10000_150
      00042B F0               [24] 1920 	movx	@dptr,a
                                   1921 ;	nrf24l01.c:245: switch (fifo_select)
      00042C E0               [24] 1922 	movx	a,@dptr
      00042D FF               [12] 1923 	mov	r7,a
      00042E 60 2B            [24] 1924 	jz	00105$
      000430 BF 01 50         [24] 1925 	cjne	r7,#0x01,00109$
                                   1926 ;	nrf24l01.c:248: if (current_mode == PTX)
      000433 90r00r1C         [24] 1927 	mov	dptr,#_current_mode
      000436 E0               [24] 1928 	movx	a,@dptr
      000437 FF               [12] 1929 	mov	r7,a
      000438 BF 03 1C         [24] 1930 	cjne	r7,#0x03,00103$
                                   1931 ;	nrf24l01.c:250: nrf24_SPI(SPI_ON);
      00043B 75 82 00         [24] 1932 	mov	dpl, #0x00
      00043E 12r00r7B         [24] 1933 	lcall	_nrf24_SPI
                                   1934 ;	nrf24l01.c:251: SPI_command = FLUSH_TX;
      000441 90r00r01         [24] 1935 	mov	dptr,#_SPI_command
      000444 74 E1            [12] 1936 	mov	a,#0xe1
      000446 F0               [24] 1937 	movx	@dptr,a
                                   1938 ;	nrf24l01.c:252: SPI_send_command(SPI_command);
      000447 75 82 E1         [24] 1939 	mov	dpl, #0xe1
      00044A 12r00r8F         [24] 1940 	lcall	_SPI_send_command
                                   1941 ;	nrf24l01.c:253: nrf24_SPI(SPI_OFF);
      00044D 75 82 01         [24] 1942 	mov	dpl, #0x01
      000450 12r00r7B         [24] 1943 	lcall	_nrf24_SPI
                                   1944 ;	nrf24l01.c:254: return OPERATION_DONE;
      000453 75 82 01         [24] 1945 	mov	dpl, #0x01
      000456 22               [24] 1946 	ret
      000457                       1947 00103$:
                                   1948 ;	nrf24l01.c:257: return OPERATION_ERROR;
      000457 75 82 00         [24] 1949 	mov	dpl, #0x00
                                   1950 ;	nrf24l01.c:258: case RX_BUFFER:
      00045A 22               [24] 1951 	ret
      00045B                       1952 00105$:
                                   1953 ;	nrf24l01.c:259: if (current_mode == PRX)
      00045B 90r00r1C         [24] 1954 	mov	dptr,#_current_mode
      00045E E0               [24] 1955 	movx	a,@dptr
      00045F FF               [12] 1956 	mov	r7,a
      000460 BF 04 1C         [24] 1957 	cjne	r7,#0x04,00107$
                                   1958 ;	nrf24l01.c:261: nrf24_SPI(SPI_ON);
      000463 75 82 00         [24] 1959 	mov	dpl, #0x00
      000466 12r00r7B         [24] 1960 	lcall	_nrf24_SPI
                                   1961 ;	nrf24l01.c:262: SPI_command = FLUSH_RX;
      000469 90r00r01         [24] 1962 	mov	dptr,#_SPI_command
      00046C 74 E2            [12] 1963 	mov	a,#0xe2
      00046E F0               [24] 1964 	movx	@dptr,a
                                   1965 ;	nrf24l01.c:263: SPI_send_command(SPI_command);
      00046F 75 82 E2         [24] 1966 	mov	dpl, #0xe2
      000472 12r00r8F         [24] 1967 	lcall	_SPI_send_command
                                   1968 ;	nrf24l01.c:264: nrf24_SPI(SPI_OFF);
      000475 75 82 01         [24] 1969 	mov	dpl, #0x01
      000478 12r00r7B         [24] 1970 	lcall	_nrf24_SPI
                                   1971 ;	nrf24l01.c:265: return OPERATION_DONE;
      00047B 75 82 01         [24] 1972 	mov	dpl, #0x01
      00047E 22               [24] 1973 	ret
      00047F                       1974 00107$:
                                   1975 ;	nrf24l01.c:268: return OPERATION_ERROR;
      00047F 75 82 00         [24] 1976 	mov	dpl, #0x00
                                   1977 ;	nrf24l01.c:269: default:
      000482 22               [24] 1978 	ret
      000483                       1979 00109$:
                                   1980 ;	nrf24l01.c:270: return OPERATION_ERROR;
      000483 75 82 00         [24] 1981 	mov	dpl, #0x00
                                   1982 ;	nrf24l01.c:271: }
                                   1983 ;	nrf24l01.c:272: }
      000486 22               [24] 1984 	ret
                                   1985 ;------------------------------------------------------------
                                   1986 ;Allocation info for local variables in function 'nrf24_reset'
                                   1987 ;------------------------------------------------------------
                                   1988 ;	nrf24l01.c:275: void nrf24_reset(void)
                                   1989 ;	-----------------------------------------
                                   1990 ;	 function nrf24_reset
                                   1991 ;	-----------------------------------------
      000487                       1992 _nrf24_reset:
                                   1993 ;	nrf24l01.c:277: reset_flag = 1;
      000487 90r00r1B         [24] 1994 	mov	dptr,#_reset_flag
      00048A 74 01            [12] 1995 	mov	a,#0x01
      00048C F0               [24] 1996 	movx	@dptr,a
                                   1997 ;	nrf24l01.c:278: nrf24_CE(CE_OFF);
      00048D 75 82 00         [24] 1998 	mov	dpl, #0x00
      000490 12r00rCD         [24] 1999 	lcall	_nrf24_CE
                                   2000 ;	nrf24l01.c:279: register_new_value = CONFIG_REGISTER_DEFAULT;
      000493 90r00r03         [24] 2001 	mov	dptr,#_register_new_value
      000496 74 08            [12] 2002 	mov	a,#0x08
      000498 F0               [24] 2003 	movx	@dptr,a
                                   2004 ;	nrf24l01.c:280: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000499 90r00r3F         [24] 2005 	mov	dptr,#_nrf24_write_PARM_2
      00049C 74r03            [12] 2006 	mov	a,#_register_new_value
      00049E F0               [24] 2007 	movx	@dptr,a
      00049F 74s00            [12] 2008 	mov	a,#(_register_new_value >> 8)
      0004A1 A3               [24] 2009 	inc	dptr
      0004A2 F0               [24] 2010 	movx	@dptr,a
      0004A3 E4               [12] 2011 	clr	a
      0004A4 A3               [24] 2012 	inc	dptr
      0004A5 F0               [24] 2013 	movx	@dptr,a
      0004A6 90r00r42         [24] 2014 	mov	dptr,#_nrf24_write_PARM_3
      0004A9 04               [12] 2015 	inc	a
      0004AA F0               [24] 2016 	movx	@dptr,a
      0004AB 90r00r43         [24] 2017 	mov	dptr,#_nrf24_write_PARM_4
      0004AE E4               [12] 2018 	clr	a
      0004AF F0               [24] 2019 	movx	@dptr,a
      0004B0 75 82 00         [24] 2020 	mov	dpl, #0x00
      0004B3 12r0Fr7C         [24] 2021 	lcall	_nrf24_write
                                   2022 ;	nrf24l01.c:281: register_new_value = EN_AA_REGISTER_DEFAULT;
      0004B6 90r00r03         [24] 2023 	mov	dptr,#_register_new_value
      0004B9 74 3F            [12] 2024 	mov	a,#0x3f
      0004BB F0               [24] 2025 	movx	@dptr,a
                                   2026 ;	nrf24l01.c:282: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0004BC 90r00r3F         [24] 2027 	mov	dptr,#_nrf24_write_PARM_2
      0004BF 74r03            [12] 2028 	mov	a,#_register_new_value
      0004C1 F0               [24] 2029 	movx	@dptr,a
      0004C2 74s00            [12] 2030 	mov	a,#(_register_new_value >> 8)
      0004C4 A3               [24] 2031 	inc	dptr
      0004C5 F0               [24] 2032 	movx	@dptr,a
      0004C6 E4               [12] 2033 	clr	a
      0004C7 A3               [24] 2034 	inc	dptr
      0004C8 F0               [24] 2035 	movx	@dptr,a
      0004C9 90r00r42         [24] 2036 	mov	dptr,#_nrf24_write_PARM_3
      0004CC 04               [12] 2037 	inc	a
      0004CD F0               [24] 2038 	movx	@dptr,a
      0004CE 90r00r43         [24] 2039 	mov	dptr,#_nrf24_write_PARM_4
      0004D1 E4               [12] 2040 	clr	a
      0004D2 F0               [24] 2041 	movx	@dptr,a
      0004D3 75 82 01         [24] 2042 	mov	dpl, #0x01
      0004D6 12r0Fr7C         [24] 2043 	lcall	_nrf24_write
                                   2044 ;	nrf24l01.c:283: register_new_value = EN_RXADDR_REGISTER_DEFAULT;
      0004D9 90r00r03         [24] 2045 	mov	dptr,#_register_new_value
      0004DC E4               [12] 2046 	clr	a
      0004DD F0               [24] 2047 	movx	@dptr,a
                                   2048 ;	nrf24l01.c:284: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0004DE 90r00r3F         [24] 2049 	mov	dptr,#_nrf24_write_PARM_2
      0004E1 74r03            [12] 2050 	mov	a,#_register_new_value
      0004E3 F0               [24] 2051 	movx	@dptr,a
      0004E4 74s00            [12] 2052 	mov	a,#(_register_new_value >> 8)
      0004E6 A3               [24] 2053 	inc	dptr
      0004E7 F0               [24] 2054 	movx	@dptr,a
      0004E8 E4               [12] 2055 	clr	a
      0004E9 A3               [24] 2056 	inc	dptr
      0004EA F0               [24] 2057 	movx	@dptr,a
      0004EB 90r00r42         [24] 2058 	mov	dptr,#_nrf24_write_PARM_3
      0004EE 04               [12] 2059 	inc	a
      0004EF F0               [24] 2060 	movx	@dptr,a
      0004F0 90r00r43         [24] 2061 	mov	dptr,#_nrf24_write_PARM_4
      0004F3 E4               [12] 2062 	clr	a
      0004F4 F0               [24] 2063 	movx	@dptr,a
      0004F5 75 82 02         [24] 2064 	mov	dpl, #0x02
      0004F8 12r0Fr7C         [24] 2065 	lcall	_nrf24_write
                                   2066 ;	nrf24l01.c:285: register_new_value = SETUP_AW_REGISTER_DEFAULT;
      0004FB 90r00r03         [24] 2067 	mov	dptr,#_register_new_value
      0004FE 74 03            [12] 2068 	mov	a,#0x03
      000500 F0               [24] 2069 	movx	@dptr,a
                                   2070 ;	nrf24l01.c:286: nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
      000501 90r00r3F         [24] 2071 	mov	dptr,#_nrf24_write_PARM_2
      000504 74r03            [12] 2072 	mov	a,#_register_new_value
      000506 F0               [24] 2073 	movx	@dptr,a
      000507 74s00            [12] 2074 	mov	a,#(_register_new_value >> 8)
      000509 A3               [24] 2075 	inc	dptr
      00050A F0               [24] 2076 	movx	@dptr,a
      00050B E4               [12] 2077 	clr	a
      00050C A3               [24] 2078 	inc	dptr
      00050D F0               [24] 2079 	movx	@dptr,a
      00050E 90r00r42         [24] 2080 	mov	dptr,#_nrf24_write_PARM_3
      000511 04               [12] 2081 	inc	a
      000512 F0               [24] 2082 	movx	@dptr,a
      000513 90r00r43         [24] 2083 	mov	dptr,#_nrf24_write_PARM_4
      000516 E4               [12] 2084 	clr	a
      000517 F0               [24] 2085 	movx	@dptr,a
      000518 75 82 03         [24] 2086 	mov	dpl, #0x03
      00051B 12r0Fr7C         [24] 2087 	lcall	_nrf24_write
                                   2088 ;	nrf24l01.c:287: register_new_value = RF_CH_REGISTER_DEFAULT;
      00051E 90r00r03         [24] 2089 	mov	dptr,#_register_new_value
      000521 74 02            [12] 2090 	mov	a,#0x02
      000523 F0               [24] 2091 	movx	@dptr,a
                                   2092 ;	nrf24l01.c:288: nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
      000524 90r00r3F         [24] 2093 	mov	dptr,#_nrf24_write_PARM_2
      000527 74r03            [12] 2094 	mov	a,#_register_new_value
      000529 F0               [24] 2095 	movx	@dptr,a
      00052A 74s00            [12] 2096 	mov	a,#(_register_new_value >> 8)
      00052C A3               [24] 2097 	inc	dptr
      00052D F0               [24] 2098 	movx	@dptr,a
      00052E E4               [12] 2099 	clr	a
      00052F A3               [24] 2100 	inc	dptr
      000530 F0               [24] 2101 	movx	@dptr,a
      000531 90r00r42         [24] 2102 	mov	dptr,#_nrf24_write_PARM_3
      000534 04               [12] 2103 	inc	a
      000535 F0               [24] 2104 	movx	@dptr,a
      000536 90r00r43         [24] 2105 	mov	dptr,#_nrf24_write_PARM_4
      000539 E4               [12] 2106 	clr	a
      00053A F0               [24] 2107 	movx	@dptr,a
      00053B 75 82 05         [24] 2108 	mov	dpl, #0x05
      00053E 12r0Fr7C         [24] 2109 	lcall	_nrf24_write
                                   2110 ;	nrf24l01.c:289: register_new_value = RF_SETUP_REGISTER_DEFAULT;
      000541 90r00r03         [24] 2111 	mov	dptr,#_register_new_value
      000544 74 27            [12] 2112 	mov	a,#0x27
      000546 F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	nrf24l01.c:290: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000547 90r00r3F         [24] 2115 	mov	dptr,#_nrf24_write_PARM_2
      00054A 74r03            [12] 2116 	mov	a,#_register_new_value
      00054C F0               [24] 2117 	movx	@dptr,a
      00054D 74s00            [12] 2118 	mov	a,#(_register_new_value >> 8)
      00054F A3               [24] 2119 	inc	dptr
      000550 F0               [24] 2120 	movx	@dptr,a
      000551 E4               [12] 2121 	clr	a
      000552 A3               [24] 2122 	inc	dptr
      000553 F0               [24] 2123 	movx	@dptr,a
      000554 90r00r42         [24] 2124 	mov	dptr,#_nrf24_write_PARM_3
      000557 04               [12] 2125 	inc	a
      000558 F0               [24] 2126 	movx	@dptr,a
      000559 90r00r43         [24] 2127 	mov	dptr,#_nrf24_write_PARM_4
      00055C E4               [12] 2128 	clr	a
      00055D F0               [24] 2129 	movx	@dptr,a
      00055E 75 82 06         [24] 2130 	mov	dpl, #0x06
      000561 12r0Fr7C         [24] 2131 	lcall	_nrf24_write
                                   2132 ;	nrf24l01.c:291: register_new_value = STATUS_REGISTER_DEFAULT;
      000564 90r00r03         [24] 2133 	mov	dptr,#_register_new_value
      000567 74 0E            [12] 2134 	mov	a,#0x0e
      000569 F0               [24] 2135 	movx	@dptr,a
                                   2136 ;	nrf24l01.c:292: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      00056A 90r00r3F         [24] 2137 	mov	dptr,#_nrf24_write_PARM_2
      00056D 74r03            [12] 2138 	mov	a,#_register_new_value
      00056F F0               [24] 2139 	movx	@dptr,a
      000570 74s00            [12] 2140 	mov	a,#(_register_new_value >> 8)
      000572 A3               [24] 2141 	inc	dptr
      000573 F0               [24] 2142 	movx	@dptr,a
      000574 E4               [12] 2143 	clr	a
      000575 A3               [24] 2144 	inc	dptr
      000576 F0               [24] 2145 	movx	@dptr,a
      000577 90r00r42         [24] 2146 	mov	dptr,#_nrf24_write_PARM_3
      00057A 04               [12] 2147 	inc	a
      00057B F0               [24] 2148 	movx	@dptr,a
      00057C 90r00r43         [24] 2149 	mov	dptr,#_nrf24_write_PARM_4
      00057F E4               [12] 2150 	clr	a
      000580 F0               [24] 2151 	movx	@dptr,a
      000581 75 82 07         [24] 2152 	mov	dpl, #0x07
      000584 12r0Fr7C         [24] 2153 	lcall	_nrf24_write
                                   2154 ;	nrf24l01.c:299: nrf24_mode(PTX);
      000587 75 82 03         [24] 2155 	mov	dpl, #0x03
      00058A 12r0DrE6         [24] 2156 	lcall	_nrf24_mode
                                   2157 ;	nrf24l01.c:300: nrf24_flush(TX_BUFFER);
      00058D 75 82 01         [24] 2158 	mov	dpl, #0x01
      000590 12r04r26         [24] 2159 	lcall	_nrf24_flush
                                   2160 ;	nrf24l01.c:301: nrf24_mode(PRX);
      000593 75 82 04         [24] 2161 	mov	dpl, #0x04
      000596 12r0DrE6         [24] 2162 	lcall	_nrf24_mode
                                   2163 ;	nrf24l01.c:302: nrf24_flush(RX_BUFFER);
      000599 75 82 00         [24] 2164 	mov	dpl, #0x00
      00059C 12r04r26         [24] 2165 	lcall	_nrf24_flush
                                   2166 ;	nrf24l01.c:304: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      00059F 90r00r39         [24] 2167 	mov	dptr,#_nrf24_read_PARM_2
      0005A2 74r02            [12] 2168 	mov	a,#_register_current_value
      0005A4 F0               [24] 2169 	movx	@dptr,a
      0005A5 74s00            [12] 2170 	mov	a,#(_register_current_value >> 8)
      0005A7 A3               [24] 2171 	inc	dptr
      0005A8 F0               [24] 2172 	movx	@dptr,a
      0005A9 E4               [12] 2173 	clr	a
      0005AA A3               [24] 2174 	inc	dptr
      0005AB F0               [24] 2175 	movx	@dptr,a
      0005AC 90r00r3C         [24] 2176 	mov	dptr,#_nrf24_read_PARM_3
      0005AF 04               [12] 2177 	inc	a
      0005B0 F0               [24] 2178 	movx	@dptr,a
      0005B1 90r00r3D         [24] 2179 	mov	dptr,#_nrf24_read_PARM_4
      0005B4 E4               [12] 2180 	clr	a
      0005B5 F0               [24] 2181 	movx	@dptr,a
      0005B6 75 82 07         [24] 2182 	mov	dpl, #0x07
      0005B9 12r0Fr10         [24] 2183 	lcall	_nrf24_read
                                   2184 ;	nrf24l01.c:305: register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
      0005BC 90r00r02         [24] 2185 	mov	dptr,#_register_current_value
      0005BF E0               [24] 2186 	movx	a,@dptr
      0005C0 90r00r03         [24] 2187 	mov	dptr,#_register_new_value
      0005C3 44 70            [12] 2188 	orl	a,#0x70
      0005C5 F0               [24] 2189 	movx	@dptr,a
                                   2190 ;	nrf24l01.c:306: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      0005C6 90r00r3F         [24] 2191 	mov	dptr,#_nrf24_write_PARM_2
      0005C9 74r03            [12] 2192 	mov	a,#_register_new_value
      0005CB F0               [24] 2193 	movx	@dptr,a
      0005CC 74s00            [12] 2194 	mov	a,#(_register_new_value >> 8)
      0005CE A3               [24] 2195 	inc	dptr
      0005CF F0               [24] 2196 	movx	@dptr,a
      0005D0 E4               [12] 2197 	clr	a
      0005D1 A3               [24] 2198 	inc	dptr
      0005D2 F0               [24] 2199 	movx	@dptr,a
      0005D3 90r00r42         [24] 2200 	mov	dptr,#_nrf24_write_PARM_3
      0005D6 04               [12] 2201 	inc	a
      0005D7 F0               [24] 2202 	movx	@dptr,a
      0005D8 90r00r43         [24] 2203 	mov	dptr,#_nrf24_write_PARM_4
      0005DB E4               [12] 2204 	clr	a
      0005DC F0               [24] 2205 	movx	@dptr,a
      0005DD 75 82 07         [24] 2206 	mov	dpl, #0x07
      0005E0 12r0Fr7C         [24] 2207 	lcall	_nrf24_write
                                   2208 ;	nrf24l01.c:308: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      0005E3 90r00r33         [24] 2209 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      0005E6 74 01            [12] 2210 	mov	a,#0x01
      0005E8 F0               [24] 2211 	movx	@dptr,a
      0005E9 90r00r34         [24] 2212 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      0005EC F0               [24] 2213 	movx	@dptr,a
      0005ED 75 82 01         [24] 2214 	mov	dpl, #0x01
      0005F0 12r0CrE8         [24] 2215 	lcall	_nrf24_interrupt_mask
                                   2216 ;	nrf24l01.c:309: nrf24_crc_configuration(ENABLE, 2);
      0005F3 90r00r36         [24] 2217 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      0005F6 74 02            [12] 2218 	mov	a,#0x02
      0005F8 F0               [24] 2219 	movx	@dptr,a
      0005F9 75 82 01         [24] 2220 	mov	dpl, #0x01
      0005FC 12r0Dr72         [24] 2221 	lcall	_nrf24_crc_configuration
                                   2222 ;	nrf24l01.c:310: nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
      0005FF 75 82 05         [24] 2223 	mov	dpl, #0x05
      000602 12r0Br21         [24] 2224 	lcall	_nrf24_address_width
                                   2225 ;	nrf24l01.c:313: nrf24_rf_channel(RF_CHANNEL_DEFAULT);
      000605 75 82 2E         [24] 2226 	mov	dpl, #0x2e
      000608 12r0Cr92         [24] 2227 	lcall	_nrf24_rf_channel
                                   2228 ;	nrf24l01.c:314: nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
      00060B 75 82 02         [24] 2229 	mov	dpl, #0x02
      00060E 12r0ArEA         [24] 2230 	lcall	_nrf24_datapipe_enable
                                   2231 ;	nrf24l01.c:315: nrf24_datapipe_address_configuration();  // I uncommented it
      000611 12r0Ar65         [24] 2232 	lcall	_nrf24_datapipe_address_configuration
                                   2233 ;	nrf24l01.c:316: nrf24_datapipe_ptx(1);  // I uncommented it
      000614 75 82 01         [24] 2234 	mov	dpl, #0x01
      000617 12r0Ar17         [24] 2235 	lcall	_nrf24_datapipe_ptx
                                   2236 ;	nrf24l01.c:317: nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
      00061A 90r00r29         [24] 2237 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      00061D 74 02            [12] 2238 	mov	a,#0x02
      00061F F0               [24] 2239 	movx	@dptr,a
      000620 75 82 10         [24] 2240 	mov	dpl, #0x10
      000623 12r0ArA9         [24] 2241 	lcall	_nrf24_prx_static_payload_width
                                   2242 ;	nrf24l01.c:318: nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
      000626 90r00r22         [24] 2243 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      000629 74 08            [12] 2244 	mov	a,#0x08
      00062B F0               [24] 2245 	movx	@dptr,a
      00062C 90 06 D6         [24] 2246 	mov	dptr,#0x06d6
      00062F 12r08r96         [24] 2247 	lcall	_nrf24_automatic_retransmit_setup
                                   2248 ;	nrf24l01.c:319: nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
      000632 75 82 02         [24] 2249 	mov	dpl, #0x02
      000635 12r09r0F         [24] 2250 	lcall	_nrf24_auto_acknowledgment_setup
                                   2251 ;	nrf24l01.c:320: nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
      000638 90r00r26         [24] 2252 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      00063B 74 02            [12] 2253 	mov	a,#0x02
      00063D F0               [24] 2254 	movx	@dptr,a
      00063E 75 82 00         [24] 2255 	mov	dpl, #0x00
      000641 12r09r4B         [24] 2256 	lcall	_nrf24_dynamic_payload
                                   2257 ;	nrf24l01.c:321: nrf24_dynamic_ack(ENABLE);
      000644 75 82 01         [24] 2258 	mov	dpl, #0x01
                                   2259 ;	nrf24l01.c:323: }
      000647 02r00rE1         [24] 2260 	ljmp	_nrf24_dynamic_ack
                                   2261 ;------------------------------------------------------------
                                   2262 ;Allocation info for local variables in function 'nrf24_device'
                                   2263 ;------------------------------------------------------------
                                   2264 ;reset_state               Allocated with name '_nrf24_device_PARM_2'
                                   2265 ;device_mode               Allocated with name '_nrf24_device_device_mode_10000_157'
                                   2266 ;register_to_write_to      Allocated with name '_nrf24_device_register_to_write_to_10001_159'
                                   2267 ;hardwareCheckPassed       Allocated with name '_nrf24_device_hardwareCheckPassed_10001_159'
                                   2268 ;new_value                 Allocated with name '_nrf24_device_new_value_10001_159'
                                   2269 ;------------------------------------------------------------
                                   2270 ;	nrf24l01.c:328: void nrf24_device(uint8_t device_mode, uint8_t reset_state)
                                   2271 ;	-----------------------------------------
                                   2272 ;	 function nrf24_device
                                   2273 ;	-----------------------------------------
      00064A                       2274 _nrf24_device:
      00064A E5 82            [12] 2275 	mov	a,dpl
      00064C 90r00r1F         [24] 2276 	mov	dptr,#_nrf24_device_device_mode_10000_157
      00064F F0               [24] 2277 	movx	@dptr,a
                                   2278 ;	nrf24l01.c:330: SPI_Initializer();
      000650 12r00r28         [24] 2279 	lcall	_SPI_Initializer
                                   2280 ;	nrf24l01.c:331: pinout_Initializer();
      000653 12r00r4D         [24] 2281 	lcall	_pinout_Initializer
                                   2282 ;	nrf24l01.c:332: delay_function(STARTUP_DELAY);
      000656 90 00 96         [24] 2283 	mov	dptr,#0x0096
      000659 E4               [12] 2284 	clr	a
      00065A F5 F0            [12] 2285 	mov	b,a
      00065C 12r00r00         [24] 2286 	lcall	_delay_function
                                   2287 ;	nrf24l01.c:333: nrf24_CE(CE_OFF);
      00065F 75 82 00         [24] 2288 	mov	dpl, #0x00
      000662 12r00rCD         [24] 2289 	lcall	_nrf24_CE
                                   2290 ;	nrf24l01.c:337: nrf24_read(0x00, &register_current_value, 1, CLOSE);
      000665 90r00r39         [24] 2291 	mov	dptr,#_nrf24_read_PARM_2
      000668 74r02            [12] 2292 	mov	a,#_register_current_value
      00066A F0               [24] 2293 	movx	@dptr,a
      00066B 74s00            [12] 2294 	mov	a,#(_register_current_value >> 8)
      00066D A3               [24] 2295 	inc	dptr
      00066E F0               [24] 2296 	movx	@dptr,a
      00066F E4               [12] 2297 	clr	a
      000670 A3               [24] 2298 	inc	dptr
      000671 F0               [24] 2299 	movx	@dptr,a
      000672 90r00r3C         [24] 2300 	mov	dptr,#_nrf24_read_PARM_3
      000675 04               [12] 2301 	inc	a
      000676 F0               [24] 2302 	movx	@dptr,a
      000677 90r00r3D         [24] 2303 	mov	dptr,#_nrf24_read_PARM_4
      00067A E4               [12] 2304 	clr	a
      00067B F0               [24] 2305 	movx	@dptr,a
      00067C 75 82 00         [24] 2306 	mov	dpl, #0x00
      00067F 12r0Fr10         [24] 2307 	lcall	_nrf24_read
                                   2308 ;	nrf24l01.c:341: bool hardwareCheckPassed = false;
      000682 90r00r20         [24] 2309 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      000685 E4               [12] 2310 	clr	a
      000686 F0               [24] 2311 	movx	@dptr,a
                                   2312 ;	nrf24l01.c:343: while (!hardwareCheckPassed) {
      000687                       2313 00104$:
      000687 90r00r20         [24] 2314 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      00068A E0               [24] 2315 	movx	a,@dptr
      00068B 60 03            [24] 2316 	jz	00148$
      00068D 02r07rCC         [24] 2317 	ljmp	00106$
      000690                       2318 00148$:
                                   2319 ;	nrf24l01.c:345: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      000690 90r00r39         [24] 2320 	mov	dptr,#_nrf24_read_PARM_2
      000693 74r02            [12] 2321 	mov	a,#_register_current_value
      000695 F0               [24] 2322 	movx	@dptr,a
      000696 74s00            [12] 2323 	mov	a,#(_register_current_value >> 8)
      000698 A3               [24] 2324 	inc	dptr
      000699 F0               [24] 2325 	movx	@dptr,a
      00069A E4               [12] 2326 	clr	a
      00069B A3               [24] 2327 	inc	dptr
      00069C F0               [24] 2328 	movx	@dptr,a
      00069D 90r00r3C         [24] 2329 	mov	dptr,#_nrf24_read_PARM_3
      0006A0 04               [12] 2330 	inc	a
      0006A1 F0               [24] 2331 	movx	@dptr,a
      0006A2 90r00r3D         [24] 2332 	mov	dptr,#_nrf24_read_PARM_4
      0006A5 E4               [12] 2333 	clr	a
      0006A6 F0               [24] 2334 	movx	@dptr,a
      0006A7 75 82 00         [24] 2335 	mov	dpl, #0x00
      0006AA 12r0Fr10         [24] 2336 	lcall	_nrf24_read
                                   2337 ;	nrf24l01.c:346: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      0006AD 90r00r02         [24] 2338 	mov	dptr,#_register_current_value
      0006B0 E0               [24] 2339 	movx	a,@dptr
      0006B1 FF               [12] 2340 	mov	r7,a
      0006B2 7E 00            [12] 2341 	mov	r6,#0x00
      0006B4 C0 07            [24] 2342 	push	ar7
      0006B6 C0 06            [24] 2343 	push	ar6
      0006B8 E4               [12] 2344 	clr	a
      0006B9 C0 E0            [24] 2345 	push	acc
      0006BB C0 E0            [24] 2346 	push	acc
      0006BD 74r00            [12] 2347 	mov	a,#___str_0
      0006BF C0 E0            [24] 2348 	push	acc
      0006C1 74s01            [12] 2349 	mov	a,#(___str_0 >> 8)
      0006C3 C0 E0            [24] 2350 	push	acc
      0006C5 74 80            [12] 2351 	mov	a,#0x80
      0006C7 C0 E0            [24] 2352 	push	acc
      0006C9 12r00r00         [24] 2353 	lcall	_printf
      0006CC E5 81            [12] 2354 	mov	a,sp
      0006CE 24 F9            [12] 2355 	add	a,#0xf9
      0006D0 F5 81            [12] 2356 	mov	sp,a
                                   2357 ;	nrf24l01.c:349: new_value = register_current_value + 3;
      0006D2 90r00r02         [24] 2358 	mov	dptr,#_register_current_value
      0006D5 E0               [24] 2359 	movx	a,@dptr
      0006D6 FF               [12] 2360 	mov	r7,a
      0006D7 0F               [12] 2361 	inc	r7
      0006D8 0F               [12] 2362 	inc	r7
      0006D9 0F               [12] 2363 	inc	r7
      0006DA 90r00r21         [24] 2364 	mov	dptr,#_nrf24_device_new_value_10001_159
      0006DD EF               [12] 2365 	mov	a,r7
      0006DE F0               [24] 2366 	movx	@dptr,a
                                   2367 ;	nrf24l01.c:350: register_new_value = new_value;
      0006DF 90r00r03         [24] 2368 	mov	dptr,#_register_new_value
      0006E2 EF               [12] 2369 	mov	a,r7
      0006E3 F0               [24] 2370 	movx	@dptr,a
                                   2371 ;	nrf24l01.c:351: nrf24_write(register_to_write_to, &register_new_value, 1, CLOSE); // restarts the nrf?!?!? where is requires two read calls to return 8 again
      0006E4 90r00r3F         [24] 2372 	mov	dptr,#_nrf24_write_PARM_2
      0006E7 74r03            [12] 2373 	mov	a,#_register_new_value
      0006E9 F0               [24] 2374 	movx	@dptr,a
      0006EA 74s00            [12] 2375 	mov	a,#(_register_new_value >> 8)
      0006EC A3               [24] 2376 	inc	dptr
      0006ED F0               [24] 2377 	movx	@dptr,a
      0006EE E4               [12] 2378 	clr	a
      0006EF A3               [24] 2379 	inc	dptr
      0006F0 F0               [24] 2380 	movx	@dptr,a
      0006F1 90r00r42         [24] 2381 	mov	dptr,#_nrf24_write_PARM_3
      0006F4 04               [12] 2382 	inc	a
      0006F5 F0               [24] 2383 	movx	@dptr,a
      0006F6 90r00r43         [24] 2384 	mov	dptr,#_nrf24_write_PARM_4
      0006F9 E4               [12] 2385 	clr	a
      0006FA F0               [24] 2386 	movx	@dptr,a
      0006FB 75 82 00         [24] 2387 	mov	dpl, #0x00
      0006FE 12r0Fr7C         [24] 2388 	lcall	_nrf24_write
                                   2389 ;	nrf24l01.c:352: printf("Sending to %d: %d\n", register_to_write_to, register_new_value);
      000701 90r00r03         [24] 2390 	mov	dptr,#_register_new_value
      000704 E0               [24] 2391 	movx	a,@dptr
      000705 FF               [12] 2392 	mov	r7,a
      000706 7E 00            [12] 2393 	mov	r6,#0x00
      000708 C0 07            [24] 2394 	push	ar7
      00070A C0 06            [24] 2395 	push	ar6
      00070C E4               [12] 2396 	clr	a
      00070D C0 E0            [24] 2397 	push	acc
      00070F C0 E0            [24] 2398 	push	acc
      000711 74r13            [12] 2399 	mov	a,#___str_1
      000713 C0 E0            [24] 2400 	push	acc
      000715 74s01            [12] 2401 	mov	a,#(___str_1 >> 8)
      000717 C0 E0            [24] 2402 	push	acc
      000719 74 80            [12] 2403 	mov	a,#0x80
      00071B C0 E0            [24] 2404 	push	acc
      00071D 12r00r00         [24] 2405 	lcall	_printf
      000720 E5 81            [12] 2406 	mov	a,sp
      000722 24 F9            [12] 2407 	add	a,#0xf9
      000724 F5 81            [12] 2408 	mov	sp,a
                                   2409 ;	nrf24l01.c:355: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      000726 90r00r39         [24] 2410 	mov	dptr,#_nrf24_read_PARM_2
      000729 74r02            [12] 2411 	mov	a,#_register_current_value
      00072B F0               [24] 2412 	movx	@dptr,a
      00072C 74s00            [12] 2413 	mov	a,#(_register_current_value >> 8)
      00072E A3               [24] 2414 	inc	dptr
      00072F F0               [24] 2415 	movx	@dptr,a
      000730 E4               [12] 2416 	clr	a
      000731 A3               [24] 2417 	inc	dptr
      000732 F0               [24] 2418 	movx	@dptr,a
      000733 90r00r3C         [24] 2419 	mov	dptr,#_nrf24_read_PARM_3
      000736 04               [12] 2420 	inc	a
      000737 F0               [24] 2421 	movx	@dptr,a
      000738 90r00r3D         [24] 2422 	mov	dptr,#_nrf24_read_PARM_4
      00073B E4               [12] 2423 	clr	a
      00073C F0               [24] 2424 	movx	@dptr,a
      00073D 75 82 00         [24] 2425 	mov	dpl, #0x00
      000740 12r0Fr10         [24] 2426 	lcall	_nrf24_read
                                   2427 ;	nrf24l01.c:356: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      000743 90r00r02         [24] 2428 	mov	dptr,#_register_current_value
      000746 E0               [24] 2429 	movx	a,@dptr
      000747 FF               [12] 2430 	mov	r7,a
      000748 7E 00            [12] 2431 	mov	r6,#0x00
      00074A C0 07            [24] 2432 	push	ar7
      00074C C0 06            [24] 2433 	push	ar6
      00074E E4               [12] 2434 	clr	a
      00074F C0 E0            [24] 2435 	push	acc
      000751 C0 E0            [24] 2436 	push	acc
      000753 74r00            [12] 2437 	mov	a,#___str_0
      000755 C0 E0            [24] 2438 	push	acc
      000757 74s01            [12] 2439 	mov	a,#(___str_0 >> 8)
      000759 C0 E0            [24] 2440 	push	acc
      00075B 74 80            [12] 2441 	mov	a,#0x80
      00075D C0 E0            [24] 2442 	push	acc
      00075F 12r00r00         [24] 2443 	lcall	_printf
      000762 E5 81            [12] 2444 	mov	a,sp
      000764 24 F9            [12] 2445 	add	a,#0xf9
      000766 F5 81            [12] 2446 	mov	sp,a
                                   2447 ;	nrf24l01.c:358: if (register_current_value == new_value) {
      000768 90r00r02         [24] 2448 	mov	dptr,#_register_current_value
      00076B E0               [24] 2449 	movx	a,@dptr
      00076C FF               [12] 2450 	mov	r7,a
      00076D 90r00r21         [24] 2451 	mov	dptr,#_nrf24_device_new_value_10001_159
      000770 E0               [24] 2452 	movx	a,@dptr
      000771 FE               [12] 2453 	mov	r6,a
      000772 EF               [12] 2454 	mov	a,r7
      000773 B5 06 1E         [24] 2455 	cjne	a,ar6,00102$
                                   2456 ;	nrf24l01.c:359: printf("\rRead value matches the newly written value :D\n");
      000776 74r26            [12] 2457 	mov	a,#___str_2
      000778 C0 E0            [24] 2458 	push	acc
      00077A 74s01            [12] 2459 	mov	a,#(___str_2 >> 8)
      00077C C0 E0            [24] 2460 	push	acc
      00077E 74 80            [12] 2461 	mov	a,#0x80
      000780 C0 E0            [24] 2462 	push	acc
      000782 12r00r00         [24] 2463 	lcall	_printf
      000785 15 81            [12] 2464 	dec	sp
      000787 15 81            [12] 2465 	dec	sp
      000789 15 81            [12] 2466 	dec	sp
                                   2467 ;	nrf24l01.c:360: hardwareCheckPassed = true;
      00078B 90r00r20         [24] 2468 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      00078E 74 01            [12] 2469 	mov	a,#0x01
      000790 F0               [24] 2470 	movx	@dptr,a
      000791 02r06r87         [24] 2471 	ljmp	00104$
      000794                       2472 00102$:
                                   2473 ;	nrf24l01.c:362: printf("\rRead value doesn't match the newly written value ;(\n");
      000794 74r56            [12] 2474 	mov	a,#___str_3
      000796 C0 E0            [24] 2475 	push	acc
      000798 74s01            [12] 2476 	mov	a,#(___str_3 >> 8)
      00079A C0 E0            [24] 2477 	push	acc
      00079C 74 80            [12] 2478 	mov	a,#0x80
      00079E C0 E0            [24] 2479 	push	acc
      0007A0 12r00r00         [24] 2480 	lcall	_printf
      0007A3 15 81            [12] 2481 	dec	sp
      0007A5 15 81            [12] 2482 	dec	sp
      0007A7 15 81            [12] 2483 	dec	sp
                                   2484 ;	nrf24l01.c:363: printf("\rRead: %d\n", register_current_value);
      0007A9 90r00r02         [24] 2485 	mov	dptr,#_register_current_value
      0007AC E0               [24] 2486 	movx	a,@dptr
      0007AD FF               [12] 2487 	mov	r7,a
      0007AE 7E 00            [12] 2488 	mov	r6,#0x00
      0007B0 C0 07            [24] 2489 	push	ar7
      0007B2 C0 06            [24] 2490 	push	ar6
      0007B4 74r8C            [12] 2491 	mov	a,#___str_4
      0007B6 C0 E0            [24] 2492 	push	acc
      0007B8 74s01            [12] 2493 	mov	a,#(___str_4 >> 8)
      0007BA C0 E0            [24] 2494 	push	acc
      0007BC 74 80            [12] 2495 	mov	a,#0x80
      0007BE C0 E0            [24] 2496 	push	acc
      0007C0 12r00r00         [24] 2497 	lcall	_printf
      0007C3 E5 81            [12] 2498 	mov	a,sp
      0007C5 24 FB            [12] 2499 	add	a,#0xfb
      0007C7 F5 81            [12] 2500 	mov	sp,a
      0007C9 02r06r87         [24] 2501 	ljmp	00104$
      0007CC                       2502 00106$:
                                   2503 ;	nrf24l01.c:367: printf("\rHardware Detected!\n");
      0007CC 74r97            [12] 2504 	mov	a,#___str_5
      0007CE C0 E0            [24] 2505 	push	acc
      0007D0 74s01            [12] 2506 	mov	a,#(___str_5 >> 8)
      0007D2 C0 E0            [24] 2507 	push	acc
      0007D4 74 80            [12] 2508 	mov	a,#0x80
      0007D6 C0 E0            [24] 2509 	push	acc
      0007D8 12r00r00         [24] 2510 	lcall	_printf
      0007DB 15 81            [12] 2511 	dec	sp
      0007DD 15 81            [12] 2512 	dec	sp
      0007DF 15 81            [12] 2513 	dec	sp
                                   2514 ;	nrf24l01.c:369: if ((reset_state == RESET) || (reset_flag == 0))
      0007E1 90r00r1E         [24] 2515 	mov	dptr,#_nrf24_device_PARM_2
      0007E4 E0               [24] 2516 	movx	a,@dptr
      0007E5 FF               [12] 2517 	mov	r7,a
      0007E6 BF 01 02         [24] 2518 	cjne	r7,#0x01,00151$
      0007E9 80 06            [24] 2519 	sjmp	00107$
      0007EB                       2520 00151$:
      0007EB 90r00r1B         [24] 2521 	mov	dptr,#_reset_flag
      0007EE E0               [24] 2522 	movx	a,@dptr
      0007EF 70 03            [24] 2523 	jnz	00108$
      0007F1                       2524 00107$:
                                   2525 ;	nrf24l01.c:371: nrf24_reset();
      0007F1 12r04r87         [24] 2526 	lcall	_nrf24_reset
      0007F4                       2527 00108$:
                                   2528 ;	nrf24l01.c:374: switch (device_mode)
      0007F4 90r00r1F         [24] 2529 	mov	dptr,#_nrf24_device_device_mode_10000_157
      0007F7 E0               [24] 2530 	movx	a,@dptr
      0007F8 FF               [12] 2531 	mov  r7,a
      0007F9 24 FC            [12] 2532 	add	a,#0xff - 0x03
      0007FB 50 03            [24] 2533 	jnc	00153$
      0007FD 02r08r80         [24] 2534 	ljmp	00114$
      000800                       2535 00153$:
      000800 EF               [12] 2536 	mov	a,r7
      000801 2F               [12] 2537 	add	a,r7
                                   2538 ;	nrf24l01.c:376: case TRANSMITTER:
      000802 90r08r06         [24] 2539 	mov	dptr,#00154$
      000805 73               [24] 2540 	jmp	@a+dptr
      000806                       2541 00154$:
      000806 80 06            [24] 2542 	sjmp	00110$
      000808 80 1F            [24] 2543 	sjmp	00111$
      00080A 80 42            [24] 2544 	sjmp	00112$
      00080C 80 5C            [24] 2545 	sjmp	00113$
      00080E                       2546 00110$:
                                   2547 ;	nrf24l01.c:377: nrf24_mode(POWER_DOWN);
      00080E 75 82 00         [24] 2548 	mov	dpl, #0x00
      000811 12r0DrE6         [24] 2549 	lcall	_nrf24_mode
                                   2550 ;	nrf24l01.c:378: nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
      000814 90r00r33         [24] 2551 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000817 E4               [12] 2552 	clr	a
      000818 F0               [24] 2553 	movx	@dptr,a
      000819 90r00r34         [24] 2554 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00081C F0               [24] 2555 	movx	@dptr,a
      00081D 75 82 01         [24] 2556 	mov	dpl, #0x01
      000820 12r0CrE8         [24] 2557 	lcall	_nrf24_interrupt_mask
                                   2558 ;	nrf24l01.c:379: nrf24_mode(PTX);
      000823 75 82 03         [24] 2559 	mov	dpl, #0x03
                                   2560 ;	nrf24l01.c:380: break;
                                   2561 ;	nrf24l01.c:381: case RECEIVER:
      000826 02r0DrE6         [24] 2562 	ljmp	_nrf24_mode
      000829                       2563 00111$:
                                   2564 ;	nrf24l01.c:382: nrf24_mode(POWER_DOWN);
      000829 75 82 00         [24] 2565 	mov	dpl, #0x00
      00082C 12r0DrE6         [24] 2566 	lcall	_nrf24_mode
                                   2567 ;	nrf24l01.c:383: nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
      00082F 90r00r33         [24] 2568 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000832 74 01            [12] 2569 	mov	a,#0x01
      000834 F0               [24] 2570 	movx	@dptr,a
      000835 90r00r34         [24] 2571 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000838 F0               [24] 2572 	movx	@dptr,a
      000839 75 82 00         [24] 2573 	mov	dpl, #0x00
      00083C 12r0CrE8         [24] 2574 	lcall	_nrf24_interrupt_mask
                                   2575 ;	nrf24l01.c:384: nrf24_mode(PRX);
      00083F 75 82 04         [24] 2576 	mov	dpl, #0x04
      000842 12r0DrE6         [24] 2577 	lcall	_nrf24_mode
                                   2578 ;	nrf24l01.c:385: delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
      000845 90 00 64         [24] 2579 	mov	dptr,#0x0064
      000848 E4               [12] 2580 	clr	a
      000849 F5 F0            [12] 2581 	mov	b,a
                                   2582 ;	nrf24l01.c:386: break;
                                   2583 ;	nrf24l01.c:387: case POWER_SAVING:
      00084B 02r00r00         [24] 2584 	ljmp	_delay_function
      00084E                       2585 00112$:
                                   2586 ;	nrf24l01.c:388: nrf24_mode(POWER_DOWN);
      00084E 75 82 00         [24] 2587 	mov	dpl, #0x00
      000851 12r0DrE6         [24] 2588 	lcall	_nrf24_mode
                                   2589 ;	nrf24l01.c:389: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      000854 90r00r33         [24] 2590 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000857 74 01            [12] 2591 	mov	a,#0x01
      000859 F0               [24] 2592 	movx	@dptr,a
      00085A 90r00r34         [24] 2593 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00085D F0               [24] 2594 	movx	@dptr,a
      00085E 75 82 01         [24] 2595 	mov	dpl, #0x01
      000861 12r0CrE8         [24] 2596 	lcall	_nrf24_interrupt_mask
                                   2597 ;	nrf24l01.c:390: nrf24_mode(STANDBYI);
      000864 75 82 01         [24] 2598 	mov	dpl, #0x01
                                   2599 ;	nrf24l01.c:391: break;
                                   2600 ;	nrf24l01.c:392: case TURN_OFF:
      000867 02r0DrE6         [24] 2601 	ljmp	_nrf24_mode
      00086A                       2602 00113$:
                                   2603 ;	nrf24l01.c:393: nrf24_mode(POWER_DOWN);
      00086A 75 82 00         [24] 2604 	mov	dpl, #0x00
      00086D 12r0DrE6         [24] 2605 	lcall	_nrf24_mode
                                   2606 ;	nrf24l01.c:394: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      000870 90r00r33         [24] 2607 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000873 74 01            [12] 2608 	mov	a,#0x01
      000875 F0               [24] 2609 	movx	@dptr,a
      000876 90r00r34         [24] 2610 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000879 F0               [24] 2611 	movx	@dptr,a
      00087A 75 82 01         [24] 2612 	mov	dpl, #0x01
                                   2613 ;	nrf24l01.c:395: break;
                                   2614 ;	nrf24l01.c:396: default:
      00087D 02r0CrE8         [24] 2615 	ljmp	_nrf24_interrupt_mask
      000880                       2616 00114$:
                                   2617 ;	nrf24l01.c:397: nrf24_mode(POWER_DOWN);
      000880 75 82 00         [24] 2618 	mov	dpl, #0x00
      000883 12r0DrE6         [24] 2619 	lcall	_nrf24_mode
                                   2620 ;	nrf24l01.c:398: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      000886 90r00r33         [24] 2621 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000889 74 01            [12] 2622 	mov	a,#0x01
      00088B F0               [24] 2623 	movx	@dptr,a
      00088C 90r00r34         [24] 2624 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00088F F0               [24] 2625 	movx	@dptr,a
      000890 75 82 01         [24] 2626 	mov	dpl, #0x01
                                   2627 ;	nrf24l01.c:400: }
                                   2628 ;	nrf24l01.c:401: }
      000893 02r0CrE8         [24] 2629 	ljmp	_nrf24_interrupt_mask
                                   2630 ;------------------------------------------------------------
                                   2631 ;Allocation info for local variables in function 'nrf24_automatic_retransmit_setup'
                                   2632 ;------------------------------------------------------------
                                   2633 ;retransmit_count          Allocated with name '_nrf24_automatic_retransmit_setup_PARM_2'
                                   2634 ;delay_time                Allocated with name '_nrf24_automatic_retransmit_setup_delay_time_10000_165'
                                   2635 ;------------------------------------------------------------
                                   2636 ;	nrf24l01.c:404: void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
                                   2637 ;	-----------------------------------------
                                   2638 ;	 function nrf24_automatic_retransmit_setup
                                   2639 ;	-----------------------------------------
      000896                       2640 _nrf24_automatic_retransmit_setup:
      000896 AF 83            [24] 2641 	mov	r7,dph
      000898 E5 82            [12] 2642 	mov	a,dpl
      00089A 90r00r23         [24] 2643 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      00089D F0               [24] 2644 	movx	@dptr,a
      00089E EF               [12] 2645 	mov	a,r7
      00089F A3               [24] 2646 	inc	dptr
      0008A0 F0               [24] 2647 	movx	@dptr,a
                                   2648 ;	nrf24l01.c:406: register_new_value = 0x00;
      0008A1 90r00r03         [24] 2649 	mov	dptr,#_register_new_value
      0008A4 E4               [12] 2650 	clr	a
      0008A5 F0               [24] 2651 	movx	@dptr,a
      0008A6                       2652 00108$:
                                   2653 ;	nrf24l01.c:407: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      0008A6 90r00r23         [24] 2654 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      0008A9 E0               [24] 2655 	movx	a,@dptr
      0008AA FE               [12] 2656 	mov	r6,a
      0008AB A3               [24] 2657 	inc	dptr
      0008AC E0               [24] 2658 	movx	a,@dptr
      0008AD FF               [12] 2659 	mov	r7,a
      0008AE C3               [12] 2660 	clr	c
      0008AF 74 FA            [12] 2661 	mov	a,#0xfa
      0008B1 9E               [12] 2662 	subb	a,r6
      0008B2 E4               [12] 2663 	clr	a
      0008B3 9F               [12] 2664 	subb	a,r7
      0008B4 50 22            [24] 2665 	jnc	00101$
      0008B6 90r00r03         [24] 2666 	mov	dptr,#_register_new_value
      0008B9 E0               [24] 2667 	movx	a,@dptr
      0008BA FD               [12] 2668 	mov	r5,a
      0008BB BD 0F 00         [24] 2669 	cjne	r5,#0x0f,00143$
      0008BE                       2670 00143$:
      0008BE 50 18            [24] 2671 	jnc	00101$
                                   2672 ;	nrf24l01.c:408: register_new_value++;
      0008C0 90r00r03         [24] 2673 	mov	dptr,#_register_new_value
      0008C3 ED               [12] 2674 	mov	a,r5
      0008C4 04               [12] 2675 	inc	a
      0008C5 F0               [24] 2676 	movx	@dptr,a
                                   2677 ;	nrf24l01.c:407: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      0008C6 EE               [12] 2678 	mov	a,r6
      0008C7 24 06            [12] 2679 	add	a,#0x06
      0008C9 FE               [12] 2680 	mov	r6,a
      0008CA EF               [12] 2681 	mov	a,r7
      0008CB 34 FF            [12] 2682 	addc	a,#0xff
      0008CD FF               [12] 2683 	mov	r7,a
      0008CE 90r00r23         [24] 2684 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      0008D1 EE               [12] 2685 	mov	a,r6
      0008D2 F0               [24] 2686 	movx	@dptr,a
      0008D3 EF               [12] 2687 	mov	a,r7
      0008D4 A3               [24] 2688 	inc	dptr
      0008D5 F0               [24] 2689 	movx	@dptr,a
      0008D6 80 CE            [24] 2690 	sjmp	00108$
      0008D8                       2691 00101$:
                                   2692 ;	nrf24l01.c:409: register_new_value <<= ARD_0;
      0008D8 90r00r03         [24] 2693 	mov	dptr,#_register_new_value
      0008DB E0               [24] 2694 	movx	a,@dptr
      0008DC C4               [12] 2695 	swap	a
      0008DD 54 F0            [12] 2696 	anl	a,#0xf0
      0008DF F0               [24] 2697 	movx	@dptr,a
                                   2698 ;	nrf24l01.c:410: if ((retransmit_count > 0) && (retransmit_count < 16))
      0008E0 90r00r22         [24] 2699 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      0008E3 E0               [24] 2700 	movx	a,@dptr
      0008E4 FF               [12] 2701 	mov	r7,a
      0008E5 60 0B            [24] 2702 	jz	00103$
      0008E7 BF 10 00         [24] 2703 	cjne	r7,#0x10,00146$
      0008EA                       2704 00146$:
      0008EA 50 06            [24] 2705 	jnc	00103$
                                   2706 ;	nrf24l01.c:411: register_new_value |= retransmit_count;
      0008EC 90r00r03         [24] 2707 	mov	dptr,#_register_new_value
      0008EF E0               [24] 2708 	movx	a,@dptr
      0008F0 4F               [12] 2709 	orl	a,r7
      0008F1 F0               [24] 2710 	movx	@dptr,a
                                   2711 ;	nrf24l01.c:413: register_new_value |= 0;
      0008F2                       2712 00103$:
                                   2713 ;	nrf24l01.c:414: nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
      0008F2 90r00r3F         [24] 2714 	mov	dptr,#_nrf24_write_PARM_2
      0008F5 74r03            [12] 2715 	mov	a,#_register_new_value
      0008F7 F0               [24] 2716 	movx	@dptr,a
      0008F8 74s00            [12] 2717 	mov	a,#(_register_new_value >> 8)
      0008FA A3               [24] 2718 	inc	dptr
      0008FB F0               [24] 2719 	movx	@dptr,a
      0008FC E4               [12] 2720 	clr	a
      0008FD A3               [24] 2721 	inc	dptr
      0008FE F0               [24] 2722 	movx	@dptr,a
      0008FF 90r00r42         [24] 2723 	mov	dptr,#_nrf24_write_PARM_3
      000902 04               [12] 2724 	inc	a
      000903 F0               [24] 2725 	movx	@dptr,a
      000904 90r00r43         [24] 2726 	mov	dptr,#_nrf24_write_PARM_4
      000907 E4               [12] 2727 	clr	a
      000908 F0               [24] 2728 	movx	@dptr,a
      000909 75 82 04         [24] 2729 	mov	dpl, #0x04
                                   2730 ;	nrf24l01.c:415: }
      00090C 02r0Fr7C         [24] 2731 	ljmp	_nrf24_write
                                   2732 ;------------------------------------------------------------
                                   2733 ;Allocation info for local variables in function 'nrf24_auto_acknowledgment_setup'
                                   2734 ;------------------------------------------------------------
                                   2735 ;datapipe                  Allocated with name '_nrf24_auto_acknowledgment_setup_datapipe_10000_168'
                                   2736 ;------------------------------------------------------------
                                   2737 ;	nrf24l01.c:418: void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
                                   2738 ;	-----------------------------------------
                                   2739 ;	 function nrf24_auto_acknowledgment_setup
                                   2740 ;	-----------------------------------------
      00090F                       2741 _nrf24_auto_acknowledgment_setup:
      00090F E5 82            [12] 2742 	mov	a,dpl
      000911 90r00r25         [24] 2743 	mov	dptr,#_nrf24_auto_acknowledgment_setup_datapipe_10000_168
      000914 F0               [24] 2744 	movx	@dptr,a
                                   2745 ;	nrf24l01.c:420: if (datapipe < 7)
      000915 E0               [24] 2746 	movx	a,@dptr
      000916 FF               [12] 2747 	mov	r7,a
      000917 BF 07 00         [24] 2748 	cjne	r7,#0x07,00111$
      00091A                       2749 00111$:
      00091A 50 12            [24] 2750 	jnc	00102$
                                   2751 ;	nrf24l01.c:421: register_new_value = (1 << datapipe) - 1;
      00091C 8F F0            [24] 2752 	mov	b,r7
      00091E 05 F0            [12] 2753 	inc	b
      000920 74 01            [12] 2754 	mov	a,#0x01
      000922 80 02            [24] 2755 	sjmp	00114$
      000924                       2756 00113$:
      000924 25 E0            [12] 2757 	add	a,acc
      000926                       2758 00114$:
      000926 D5 F0 FB         [24] 2759 	djnz	b,00113$
      000929 14               [12] 2760 	dec	a
      00092A 90r00r03         [24] 2761 	mov	dptr,#_register_new_value
      00092D F0               [24] 2762 	movx	@dptr,a
      00092E                       2763 00102$:
                                   2764 ;	nrf24l01.c:422: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      00092E 90r00r3F         [24] 2765 	mov	dptr,#_nrf24_write_PARM_2
      000931 74r03            [12] 2766 	mov	a,#_register_new_value
      000933 F0               [24] 2767 	movx	@dptr,a
      000934 74s00            [12] 2768 	mov	a,#(_register_new_value >> 8)
      000936 A3               [24] 2769 	inc	dptr
      000937 F0               [24] 2770 	movx	@dptr,a
      000938 E4               [12] 2771 	clr	a
      000939 A3               [24] 2772 	inc	dptr
      00093A F0               [24] 2773 	movx	@dptr,a
      00093B 90r00r42         [24] 2774 	mov	dptr,#_nrf24_write_PARM_3
      00093E 04               [12] 2775 	inc	a
      00093F F0               [24] 2776 	movx	@dptr,a
      000940 90r00r43         [24] 2777 	mov	dptr,#_nrf24_write_PARM_4
      000943 E4               [12] 2778 	clr	a
      000944 F0               [24] 2779 	movx	@dptr,a
      000945 75 82 01         [24] 2780 	mov	dpl, #0x01
                                   2781 ;	nrf24l01.c:423: }
      000948 02r0Fr7C         [24] 2782 	ljmp	_nrf24_write
                                   2783 ;------------------------------------------------------------
                                   2784 ;Allocation info for local variables in function 'nrf24_dynamic_payload'
                                   2785 ;------------------------------------------------------------
                                   2786 ;datapipe                  Allocated with name '_nrf24_dynamic_payload_PARM_2'
                                   2787 ;state                     Allocated with name '_nrf24_dynamic_payload_state_10000_170'
                                   2788 ;------------------------------------------------------------
                                   2789 ;	nrf24l01.c:426: void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
                                   2790 ;	-----------------------------------------
                                   2791 ;	 function nrf24_dynamic_payload
                                   2792 ;	-----------------------------------------
      00094B                       2793 _nrf24_dynamic_payload:
      00094B E5 82            [12] 2794 	mov	a,dpl
      00094D 90r00r27         [24] 2795 	mov	dptr,#_nrf24_dynamic_payload_state_10000_170
      000950 F0               [24] 2796 	movx	@dptr,a
                                   2797 ;	nrf24l01.c:428: nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
      000951 90r00r26         [24] 2798 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      000954 E0               [24] 2799 	movx	a,@dptr
      000955 FF               [12] 2800 	mov	r7,a
      000956 F5 82            [12] 2801 	mov	dpl,a
      000958 C0 07            [24] 2802 	push	ar7
      00095A 12r09r0F         [24] 2803 	lcall	_nrf24_auto_acknowledgment_setup
                                   2804 ;	nrf24l01.c:429: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      00095D 90r00r39         [24] 2805 	mov	dptr,#_nrf24_read_PARM_2
      000960 74r02            [12] 2806 	mov	a,#_register_current_value
      000962 F0               [24] 2807 	movx	@dptr,a
      000963 74s00            [12] 2808 	mov	a,#(_register_current_value >> 8)
      000965 A3               [24] 2809 	inc	dptr
      000966 F0               [24] 2810 	movx	@dptr,a
      000967 E4               [12] 2811 	clr	a
      000968 A3               [24] 2812 	inc	dptr
      000969 F0               [24] 2813 	movx	@dptr,a
      00096A 90r00r3C         [24] 2814 	mov	dptr,#_nrf24_read_PARM_3
      00096D 04               [12] 2815 	inc	a
      00096E F0               [24] 2816 	movx	@dptr,a
      00096F 90r00r3D         [24] 2817 	mov	dptr,#_nrf24_read_PARM_4
      000972 E4               [12] 2818 	clr	a
      000973 F0               [24] 2819 	movx	@dptr,a
      000974 75 82 1D         [24] 2820 	mov	dpl, #0x1d
      000977 12r0Fr10         [24] 2821 	lcall	_nrf24_read
      00097A D0 07            [24] 2822 	pop	ar7
                                   2823 ;	nrf24l01.c:430: if (state == ENABLE)
      00097C 90r00r27         [24] 2824 	mov	dptr,#_nrf24_dynamic_payload_state_10000_170
      00097F E0               [24] 2825 	movx	a,@dptr
      000980 FE               [12] 2826 	mov	r6,a
      000981 BE 01 66         [24] 2827 	cjne	r6,#0x01,00104$
                                   2828 ;	nrf24l01.c:432: register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
      000984 90r00r02         [24] 2829 	mov	dptr,#_register_current_value
      000987 E0               [24] 2830 	movx	a,@dptr
      000988 90r00r03         [24] 2831 	mov	dptr,#_register_new_value
      00098B 44 04            [12] 2832 	orl	a,#0x04
      00098D F0               [24] 2833 	movx	@dptr,a
                                   2834 ;	nrf24l01.c:433: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      00098E 90r00r3F         [24] 2835 	mov	dptr,#_nrf24_write_PARM_2
      000991 74r03            [12] 2836 	mov	a,#_register_new_value
      000993 F0               [24] 2837 	movx	@dptr,a
      000994 74s00            [12] 2838 	mov	a,#(_register_new_value >> 8)
      000996 A3               [24] 2839 	inc	dptr
      000997 F0               [24] 2840 	movx	@dptr,a
      000998 E4               [12] 2841 	clr	a
      000999 A3               [24] 2842 	inc	dptr
      00099A F0               [24] 2843 	movx	@dptr,a
      00099B 90r00r42         [24] 2844 	mov	dptr,#_nrf24_write_PARM_3
      00099E 04               [12] 2845 	inc	a
      00099F F0               [24] 2846 	movx	@dptr,a
      0009A0 90r00r43         [24] 2847 	mov	dptr,#_nrf24_write_PARM_4
      0009A3 E4               [12] 2848 	clr	a
      0009A4 F0               [24] 2849 	movx	@dptr,a
      0009A5 75 82 1D         [24] 2850 	mov	dpl, #0x1d
      0009A8 C0 07            [24] 2851 	push	ar7
      0009AA 12r0Fr7C         [24] 2852 	lcall	_nrf24_write
      0009AD D0 07            [24] 2853 	pop	ar7
                                   2854 ;	nrf24l01.c:434: if (datapipe < 7)
      0009AF BF 07 00         [24] 2855 	cjne	r7,#0x07,00122$
      0009B2                       2856 00122$:
      0009B2 50 12            [24] 2857 	jnc	00102$
                                   2858 ;	nrf24l01.c:435: register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
      0009B4 8F F0            [24] 2859 	mov	b,r7
      0009B6 05 F0            [12] 2860 	inc	b
      0009B8 74 01            [12] 2861 	mov	a,#0x01
      0009BA 80 02            [24] 2862 	sjmp	00125$
      0009BC                       2863 00124$:
      0009BC 25 E0            [12] 2864 	add	a,acc
      0009BE                       2865 00125$:
      0009BE D5 F0 FB         [24] 2866 	djnz	b,00124$
      0009C1 14               [12] 2867 	dec	a
      0009C2 90r00r03         [24] 2868 	mov	dptr,#_register_new_value
      0009C5 F0               [24] 2869 	movx	@dptr,a
      0009C6                       2870 00102$:
                                   2871 ;	nrf24l01.c:436: nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
      0009C6 90r00r3F         [24] 2872 	mov	dptr,#_nrf24_write_PARM_2
      0009C9 74r03            [12] 2873 	mov	a,#_register_new_value
      0009CB F0               [24] 2874 	movx	@dptr,a
      0009CC 74s00            [12] 2875 	mov	a,#(_register_new_value >> 8)
      0009CE A3               [24] 2876 	inc	dptr
      0009CF F0               [24] 2877 	movx	@dptr,a
      0009D0 E4               [12] 2878 	clr	a
      0009D1 A3               [24] 2879 	inc	dptr
      0009D2 F0               [24] 2880 	movx	@dptr,a
      0009D3 90r00r42         [24] 2881 	mov	dptr,#_nrf24_write_PARM_3
      0009D6 04               [12] 2882 	inc	a
      0009D7 F0               [24] 2883 	movx	@dptr,a
      0009D8 90r00r43         [24] 2884 	mov	dptr,#_nrf24_write_PARM_4
      0009DB E4               [12] 2885 	clr	a
      0009DC F0               [24] 2886 	movx	@dptr,a
      0009DD 75 82 1C         [24] 2887 	mov	dpl, #0x1c
      0009E0 12r0Fr7C         [24] 2888 	lcall	_nrf24_write
                                   2889 ;	nrf24l01.c:437: dynamic_payload = ENABLE;
      0009E3 90r00r1E         [24] 2890 	mov	dptr,#_dynamic_payload
      0009E6 74 01            [12] 2891 	mov	a,#0x01
      0009E8 F0               [24] 2892 	movx	@dptr,a
      0009E9 22               [24] 2893 	ret
      0009EA                       2894 00104$:
                                   2895 ;	nrf24l01.c:441: register_new_value = register_current_value & (~(1 << EN_DPL));
      0009EA 90r00r02         [24] 2896 	mov	dptr,#_register_current_value
      0009ED E0               [24] 2897 	movx	a,@dptr
      0009EE 90r00r03         [24] 2898 	mov	dptr,#_register_new_value
      0009F1 54 FB            [12] 2899 	anl	a,#0xfb
      0009F3 F0               [24] 2900 	movx	@dptr,a
                                   2901 ;	nrf24l01.c:442: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      0009F4 90r00r3F         [24] 2902 	mov	dptr,#_nrf24_write_PARM_2
      0009F7 74r03            [12] 2903 	mov	a,#_register_new_value
      0009F9 F0               [24] 2904 	movx	@dptr,a
      0009FA 74s00            [12] 2905 	mov	a,#(_register_new_value >> 8)
      0009FC A3               [24] 2906 	inc	dptr
      0009FD F0               [24] 2907 	movx	@dptr,a
      0009FE E4               [12] 2908 	clr	a
      0009FF A3               [24] 2909 	inc	dptr
      000A00 F0               [24] 2910 	movx	@dptr,a
      000A01 90r00r42         [24] 2911 	mov	dptr,#_nrf24_write_PARM_3
      000A04 04               [12] 2912 	inc	a
      000A05 F0               [24] 2913 	movx	@dptr,a
      000A06 90r00r43         [24] 2914 	mov	dptr,#_nrf24_write_PARM_4
      000A09 E4               [12] 2915 	clr	a
      000A0A F0               [24] 2916 	movx	@dptr,a
      000A0B 75 82 1D         [24] 2917 	mov	dpl, #0x1d
      000A0E 12r0Fr7C         [24] 2918 	lcall	_nrf24_write
                                   2919 ;	nrf24l01.c:443: dynamic_payload = DISABLE;
      000A11 90r00r1E         [24] 2920 	mov	dptr,#_dynamic_payload
      000A14 E4               [12] 2921 	clr	a
      000A15 F0               [24] 2922 	movx	@dptr,a
                                   2923 ;	nrf24l01.c:445: }
      000A16 22               [24] 2924 	ret
                                   2925 ;------------------------------------------------------------
                                   2926 ;Allocation info for local variables in function 'nrf24_datapipe_ptx'
                                   2927 ;------------------------------------------------------------
                                   2928 ;datapipe_number           Allocated with name '_nrf24_datapipe_ptx_datapipe_number_10000_174'
                                   2929 ;------------------------------------------------------------
                                   2930 ;	nrf24l01.c:448: void nrf24_datapipe_ptx(uint8_t datapipe_number)
                                   2931 ;	-----------------------------------------
                                   2932 ;	 function nrf24_datapipe_ptx
                                   2933 ;	-----------------------------------------
      000A17                       2934 _nrf24_datapipe_ptx:
      000A17 E5 82            [12] 2935 	mov	a,dpl
      000A19 90r00r28         [24] 2936 	mov	dptr,#_nrf24_datapipe_ptx_datapipe_number_10000_174
      000A1C F0               [24] 2937 	movx	@dptr,a
                                   2938 ;	nrf24l01.c:450: nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
      000A1D E0               [24] 2939 	movx	a,@dptr
      000A1E FF               [12] 2940 	mov	r7,a
      000A1F 1F               [12] 2941 	dec	r7
      000A20 C2 D5            [12] 2942 	clr	F0
      000A22 75 F0 05         [24] 2943 	mov	b,#0x05
      000A25 EF               [12] 2944 	mov	a,r7
      000A26 30 E7 04         [24] 2945 	jnb	acc.7,00103$
      000A29 B2 D5            [12] 2946 	cpl	F0
      000A2B F4               [12] 2947 	cpl	a
      000A2C 04               [12] 2948 	inc	a
      000A2D                       2949 00103$:
      000A2D A4               [48] 2950 	mul	ab
      000A2E 30 D5 0A         [24] 2951 	jnb	F0,00104$
      000A31 F4               [12] 2952 	cpl	a
      000A32 24 01            [12] 2953 	add	a,#0x01
      000A34 C5 F0            [12] 2954 	xch	a,b
      000A36 F4               [12] 2955 	cpl	a
      000A37 34 00            [12] 2956 	addc	a,#0x00
      000A39 C5 F0            [12] 2957 	xch	a,b
      000A3B                       2958 00104$:
      000A3B 24r1F            [12] 2959 	add	a, #_datapipe_address
      000A3D FE               [12] 2960 	mov	r6,a
      000A3E 74s00            [12] 2961 	mov	a,#(_datapipe_address >> 8)
      000A40 35 F0            [12] 2962 	addc	a, b
      000A42 FF               [12] 2963 	mov	r7,a
      000A43 7D 00            [12] 2964 	mov	r5,#0x00
      000A45 90r00r05         [24] 2965 	mov	dptr,#_current_address_width
      000A48 E0               [24] 2966 	movx	a,@dptr
      000A49 FC               [12] 2967 	mov	r4,a
      000A4A 90r00r3F         [24] 2968 	mov	dptr,#_nrf24_write_PARM_2
      000A4D EE               [12] 2969 	mov	a,r6
      000A4E F0               [24] 2970 	movx	@dptr,a
      000A4F EF               [12] 2971 	mov	a,r7
      000A50 A3               [24] 2972 	inc	dptr
      000A51 F0               [24] 2973 	movx	@dptr,a
      000A52 ED               [12] 2974 	mov	a,r5
      000A53 A3               [24] 2975 	inc	dptr
      000A54 F0               [24] 2976 	movx	@dptr,a
      000A55 90r00r42         [24] 2977 	mov	dptr,#_nrf24_write_PARM_3
      000A58 EC               [12] 2978 	mov	a,r4
      000A59 F0               [24] 2979 	movx	@dptr,a
      000A5A 90r00r43         [24] 2980 	mov	dptr,#_nrf24_write_PARM_4
      000A5D E4               [12] 2981 	clr	a
      000A5E F0               [24] 2982 	movx	@dptr,a
      000A5F 75 82 10         [24] 2983 	mov	dpl, #0x10
                                   2984 ;	nrf24l01.c:451: }
      000A62 02r0Fr7C         [24] 2985 	ljmp	_nrf24_write
                                   2986 ;------------------------------------------------------------
                                   2987 ;Allocation info for local variables in function 'nrf24_datapipe_address_configuration'
                                   2988 ;------------------------------------------------------------
                                   2989 ;address                   Allocated with name '_nrf24_datapipe_address_configuration_address_10000_177'
                                   2990 ;counter                   Allocated with name '_nrf24_datapipe_address_configuration_counter_20000_178'
                                   2991 ;------------------------------------------------------------
                                   2992 ;	nrf24l01.c:454: void nrf24_datapipe_address_configuration(void)
                                   2993 ;	-----------------------------------------
                                   2994 ;	 function nrf24_datapipe_address_configuration
                                   2995 ;	-----------------------------------------
      000A65                       2996 _nrf24_datapipe_address_configuration:
                                   2997 ;	nrf24l01.c:458: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000A65 7F 0A            [12] 2998 	mov	r7,#0x0a
      000A67 7E 00            [12] 2999 	mov	r6,#0x00
      000A69                       3000 00103$:
      000A69 BE 02 00         [24] 3001 	cjne	r6,#0x02,00120$
      000A6C                       3002 00120$:
      000A6C 50 3A            [24] 3003 	jnc	00105$
                                   3004 ;	nrf24l01.c:460: nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
      000A6E EE               [12] 3005 	mov	a,r6
      000A6F 75 F0 05         [24] 3006 	mov	b,#0x05
      000A72 A4               [48] 3007 	mul	ab
      000A73 24r1F            [12] 3008 	add	a, #_datapipe_address
      000A75 FC               [12] 3009 	mov	r4,a
      000A76 74s00            [12] 3010 	mov	a,#(_datapipe_address >> 8)
      000A78 35 F0            [12] 3011 	addc	a, b
      000A7A FD               [12] 3012 	mov	r5,a
      000A7B 7B 00            [12] 3013 	mov	r3,#0x00
      000A7D 90r00r05         [24] 3014 	mov	dptr,#_current_address_width
      000A80 E0               [24] 3015 	movx	a,@dptr
      000A81 FA               [12] 3016 	mov	r2,a
      000A82 90r00r3F         [24] 3017 	mov	dptr,#_nrf24_write_PARM_2
      000A85 EC               [12] 3018 	mov	a,r4
      000A86 F0               [24] 3019 	movx	@dptr,a
      000A87 ED               [12] 3020 	mov	a,r5
      000A88 A3               [24] 3021 	inc	dptr
      000A89 F0               [24] 3022 	movx	@dptr,a
      000A8A EB               [12] 3023 	mov	a,r3
      000A8B A3               [24] 3024 	inc	dptr
      000A8C F0               [24] 3025 	movx	@dptr,a
      000A8D 90r00r42         [24] 3026 	mov	dptr,#_nrf24_write_PARM_3
      000A90 EA               [12] 3027 	mov	a,r2
      000A91 F0               [24] 3028 	movx	@dptr,a
      000A92 90r00r43         [24] 3029 	mov	dptr,#_nrf24_write_PARM_4
      000A95 E4               [12] 3030 	clr	a
      000A96 F0               [24] 3031 	movx	@dptr,a
      000A97 8F 82            [24] 3032 	mov	dpl, r7
      000A99 C0 07            [24] 3033 	push	ar7
      000A9B C0 06            [24] 3034 	push	ar6
      000A9D 12r0Fr7C         [24] 3035 	lcall	_nrf24_write
      000AA0 D0 06            [24] 3036 	pop	ar6
      000AA2 D0 07            [24] 3037 	pop	ar7
                                   3038 ;	nrf24l01.c:461: address++;
      000AA4 0F               [12] 3039 	inc	r7
                                   3040 ;	nrf24l01.c:458: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000AA5 0E               [12] 3041 	inc	r6
      000AA6 80 C1            [24] 3042 	sjmp	00103$
      000AA8                       3043 00105$:
                                   3044 ;	nrf24l01.c:463: }
      000AA8 22               [24] 3045 	ret
                                   3046 ;------------------------------------------------------------
                                   3047 ;Allocation info for local variables in function 'nrf24_prx_static_payload_width'
                                   3048 ;------------------------------------------------------------
                                   3049 ;number_of_datapipes       Allocated with name '_nrf24_prx_static_payload_width_PARM_2'
                                   3050 ;static_payload_width      Allocated with name '_nrf24_prx_static_payload_width_static_payload_width_10000_180'
                                   3051 ;address                   Allocated with name '_nrf24_prx_static_payload_width_address_20000_182'
                                   3052 ;------------------------------------------------------------
                                   3053 ;	nrf24l01.c:466: void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
                                   3054 ;	-----------------------------------------
                                   3055 ;	 function nrf24_prx_static_payload_width
                                   3056 ;	-----------------------------------------
      000AA9                       3057 _nrf24_prx_static_payload_width:
      000AA9 E5 82            [12] 3058 	mov	a,dpl
      000AAB 90r00r2A         [24] 3059 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      000AAE F0               [24] 3060 	movx	@dptr,a
                                   3061 ;	nrf24l01.c:468: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000AAF 7F 11            [12] 3062 	mov	r7,#0x11
      000AB1 90r00r29         [24] 3063 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      000AB4 E0               [24] 3064 	movx	a,@dptr
      000AB5 FE               [12] 3065 	mov	r6,a
      000AB6                       3066 00103$:
      000AB6 EE               [12] 3067 	mov	a,r6
      000AB7 60 28            [24] 3068 	jz	00101$
                                   3069 ;	nrf24l01.c:470: nrf24_write(address, &static_payload_width, 1, CLOSE);
      000AB9 90r00r3F         [24] 3070 	mov	dptr,#_nrf24_write_PARM_2
      000ABC 74r2A            [12] 3071 	mov	a,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      000ABE F0               [24] 3072 	movx	@dptr,a
      000ABF 74s00            [12] 3073 	mov	a,#(_nrf24_prx_static_payload_width_static_payload_width_10000_180 >> 8)
      000AC1 A3               [24] 3074 	inc	dptr
      000AC2 F0               [24] 3075 	movx	@dptr,a
      000AC3 E4               [12] 3076 	clr	a
      000AC4 A3               [24] 3077 	inc	dptr
      000AC5 F0               [24] 3078 	movx	@dptr,a
      000AC6 90r00r42         [24] 3079 	mov	dptr,#_nrf24_write_PARM_3
      000AC9 04               [12] 3080 	inc	a
      000ACA F0               [24] 3081 	movx	@dptr,a
      000ACB 90r00r43         [24] 3082 	mov	dptr,#_nrf24_write_PARM_4
      000ACE E4               [12] 3083 	clr	a
      000ACF F0               [24] 3084 	movx	@dptr,a
      000AD0 8F 82            [24] 3085 	mov	dpl, r7
      000AD2 C0 07            [24] 3086 	push	ar7
      000AD4 C0 06            [24] 3087 	push	ar6
      000AD6 12r0Fr7C         [24] 3088 	lcall	_nrf24_write
      000AD9 D0 06            [24] 3089 	pop	ar6
      000ADB D0 07            [24] 3090 	pop	ar7
                                   3091 ;	nrf24l01.c:471: address++;
      000ADD 0F               [12] 3092 	inc	r7
                                   3093 ;	nrf24l01.c:468: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000ADE 1E               [12] 3094 	dec	r6
      000ADF 80 D5            [24] 3095 	sjmp	00103$
      000AE1                       3096 00101$:
                                   3097 ;	nrf24l01.c:473: current_payload_width = static_payload_width;
      000AE1 90r00r2A         [24] 3098 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      000AE4 E0               [24] 3099 	movx	a,@dptr
      000AE5 90r00r06         [24] 3100 	mov	dptr,#_current_payload_width
      000AE8 F0               [24] 3101 	movx	@dptr,a
                                   3102 ;	nrf24l01.c:474: }
      000AE9 22               [24] 3103 	ret
                                   3104 ;------------------------------------------------------------
                                   3105 ;Allocation info for local variables in function 'nrf24_datapipe_enable'
                                   3106 ;------------------------------------------------------------
                                   3107 ;number_of_datapipes       Allocated with name '_nrf24_datapipe_enable_number_of_datapipes_10000_184'
                                   3108 ;------------------------------------------------------------
                                   3109 ;	nrf24l01.c:477: void nrf24_datapipe_enable(uint8_t number_of_datapipes)
                                   3110 ;	-----------------------------------------
                                   3111 ;	 function nrf24_datapipe_enable
                                   3112 ;	-----------------------------------------
      000AEA                       3113 _nrf24_datapipe_enable:
      000AEA E5 82            [12] 3114 	mov	a,dpl
      000AEC 90r00r2B         [24] 3115 	mov	dptr,#_nrf24_datapipe_enable_number_of_datapipes_10000_184
      000AEF F0               [24] 3116 	movx	@dptr,a
                                   3117 ;	nrf24l01.c:479: register_new_value = (1 << number_of_datapipes) - 1;
      000AF0 E0               [24] 3118 	movx	a,@dptr
      000AF1 FF               [12] 3119 	mov	r7,a
      000AF2 8F F0            [24] 3120 	mov	b,r7
      000AF4 05 F0            [12] 3121 	inc	b
      000AF6 74 01            [12] 3122 	mov	a,#0x01
      000AF8 80 02            [24] 3123 	sjmp	00104$
      000AFA                       3124 00103$:
      000AFA 25 E0            [12] 3125 	add	a,acc
      000AFC                       3126 00104$:
      000AFC D5 F0 FB         [24] 3127 	djnz	b,00103$
      000AFF 14               [12] 3128 	dec	a
      000B00 90r00r03         [24] 3129 	mov	dptr,#_register_new_value
      000B03 F0               [24] 3130 	movx	@dptr,a
                                   3131 ;	nrf24l01.c:480: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      000B04 90r00r3F         [24] 3132 	mov	dptr,#_nrf24_write_PARM_2
      000B07 74r03            [12] 3133 	mov	a,#_register_new_value
      000B09 F0               [24] 3134 	movx	@dptr,a
      000B0A 74s00            [12] 3135 	mov	a,#(_register_new_value >> 8)
      000B0C A3               [24] 3136 	inc	dptr
      000B0D F0               [24] 3137 	movx	@dptr,a
      000B0E E4               [12] 3138 	clr	a
      000B0F A3               [24] 3139 	inc	dptr
      000B10 F0               [24] 3140 	movx	@dptr,a
      000B11 90r00r42         [24] 3141 	mov	dptr,#_nrf24_write_PARM_3
      000B14 04               [12] 3142 	inc	a
      000B15 F0               [24] 3143 	movx	@dptr,a
      000B16 90r00r43         [24] 3144 	mov	dptr,#_nrf24_write_PARM_4
      000B19 E4               [12] 3145 	clr	a
      000B1A F0               [24] 3146 	movx	@dptr,a
      000B1B 75 82 02         [24] 3147 	mov	dpl, #0x02
                                   3148 ;	nrf24l01.c:481: }
      000B1E 02r0Fr7C         [24] 3149 	ljmp	_nrf24_write
                                   3150 ;------------------------------------------------------------
                                   3151 ;Allocation info for local variables in function 'nrf24_address_width'
                                   3152 ;------------------------------------------------------------
                                   3153 ;address_width             Allocated with name '_nrf24_address_width_address_width_10000_186'
                                   3154 ;------------------------------------------------------------
                                   3155 ;	nrf24l01.c:484: void nrf24_address_width(uint8_t address_width)
                                   3156 ;	-----------------------------------------
                                   3157 ;	 function nrf24_address_width
                                   3158 ;	-----------------------------------------
      000B21                       3159 _nrf24_address_width:
      000B21 E5 82            [12] 3160 	mov	a,dpl
      000B23 90r00r2C         [24] 3161 	mov	dptr,#_nrf24_address_width_address_width_10000_186
      000B26 F0               [24] 3162 	movx	@dptr,a
                                   3163 ;	nrf24l01.c:486: if ((address_width <= 5) && (address_width >= 3))
      000B27 E0               [24] 3164 	movx	a,@dptr
      000B28 FF               [12] 3165 	mov  r7,a
      000B29 24 FA            [12] 3166 	add	a,#0xff - 0x05
      000B2B 40 0E            [24] 3167 	jc	00102$
      000B2D BF 03 00         [24] 3168 	cjne	r7,#0x03,00120$
      000B30                       3169 00120$:
      000B30 40 09            [24] 3170 	jc	00102$
                                   3171 ;	nrf24l01.c:488: write_pointer = address_width - 2;
      000B32 EF               [12] 3172 	mov	a,r7
      000B33 24 FE            [12] 3173 	add	a,#0xfe
      000B35 90r00r04         [24] 3174 	mov	dptr,#_write_pointer
      000B38 F0               [24] 3175 	movx	@dptr,a
      000B39 80 06            [24] 3176 	sjmp	00103$
      000B3B                       3177 00102$:
                                   3178 ;	nrf24l01.c:492: write_pointer = 3;
      000B3B 90r00r04         [24] 3179 	mov	dptr,#_write_pointer
      000B3E 74 03            [12] 3180 	mov	a,#0x03
      000B40 F0               [24] 3181 	movx	@dptr,a
      000B41                       3182 00103$:
                                   3183 ;	nrf24l01.c:494: nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
      000B41 90r00r3F         [24] 3184 	mov	dptr,#_nrf24_write_PARM_2
      000B44 74r04            [12] 3185 	mov	a,#_write_pointer
      000B46 F0               [24] 3186 	movx	@dptr,a
      000B47 74s00            [12] 3187 	mov	a,#(_write_pointer >> 8)
      000B49 A3               [24] 3188 	inc	dptr
      000B4A F0               [24] 3189 	movx	@dptr,a
      000B4B E4               [12] 3190 	clr	a
      000B4C A3               [24] 3191 	inc	dptr
      000B4D F0               [24] 3192 	movx	@dptr,a
      000B4E 90r00r42         [24] 3193 	mov	dptr,#_nrf24_write_PARM_3
      000B51 04               [12] 3194 	inc	a
      000B52 F0               [24] 3195 	movx	@dptr,a
      000B53 90r00r43         [24] 3196 	mov	dptr,#_nrf24_write_PARM_4
      000B56 E4               [12] 3197 	clr	a
      000B57 F0               [24] 3198 	movx	@dptr,a
      000B58 75 82 03         [24] 3199 	mov	dpl, #0x03
      000B5B 12r0Fr7C         [24] 3200 	lcall	_nrf24_write
                                   3201 ;	nrf24l01.c:495: current_address_width = address_width;
      000B5E 90r00r2C         [24] 3202 	mov	dptr,#_nrf24_address_width_address_width_10000_186
      000B61 E0               [24] 3203 	movx	a,@dptr
      000B62 90r00r05         [24] 3204 	mov	dptr,#_current_address_width
      000B65 F0               [24] 3205 	movx	@dptr,a
                                   3206 ;	nrf24l01.c:496: }
      000B66 22               [24] 3207 	ret
                                   3208 ;------------------------------------------------------------
                                   3209 ;Allocation info for local variables in function 'nrf24_rf_datarate'
                                   3210 ;------------------------------------------------------------
                                   3211 ;rf_datarate               Allocated with name '_nrf24_rf_datarate_rf_datarate_10000_190'
                                   3212 ;------------------------------------------------------------
                                   3213 ;	nrf24l01.c:499: void nrf24_rf_datarate(uint16_t rf_datarate)
                                   3214 ;	-----------------------------------------
                                   3215 ;	 function nrf24_rf_datarate
                                   3216 ;	-----------------------------------------
      000B67                       3217 _nrf24_rf_datarate:
      000B67 AF 83            [24] 3218 	mov	r7,dph
      000B69 E5 82            [12] 3219 	mov	a,dpl
      000B6B 90r00r2D         [24] 3220 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_10000_190
      000B6E F0               [24] 3221 	movx	@dptr,a
      000B6F EF               [12] 3222 	mov	a,r7
      000B70 A3               [24] 3223 	inc	dptr
      000B71 F0               [24] 3224 	movx	@dptr,a
                                   3225 ;	nrf24l01.c:501: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000B72 90r00r39         [24] 3226 	mov	dptr,#_nrf24_read_PARM_2
      000B75 74r02            [12] 3227 	mov	a,#_register_current_value
      000B77 F0               [24] 3228 	movx	@dptr,a
      000B78 74s00            [12] 3229 	mov	a,#(_register_current_value >> 8)
      000B7A A3               [24] 3230 	inc	dptr
      000B7B F0               [24] 3231 	movx	@dptr,a
      000B7C E4               [12] 3232 	clr	a
      000B7D A3               [24] 3233 	inc	dptr
      000B7E F0               [24] 3234 	movx	@dptr,a
      000B7F 90r00r3C         [24] 3235 	mov	dptr,#_nrf24_read_PARM_3
      000B82 04               [12] 3236 	inc	a
      000B83 F0               [24] 3237 	movx	@dptr,a
      000B84 90r00r3D         [24] 3238 	mov	dptr,#_nrf24_read_PARM_4
      000B87 E4               [12] 3239 	clr	a
      000B88 F0               [24] 3240 	movx	@dptr,a
      000B89 75 82 06         [24] 3241 	mov	dpl, #0x06
      000B8C 12r0Fr10         [24] 3242 	lcall	_nrf24_read
                                   3243 ;	nrf24l01.c:502: register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
      000B8F 90r00r02         [24] 3244 	mov	dptr,#_register_current_value
      000B92 E0               [24] 3245 	movx	a,@dptr
      000B93 53 E0 D7         [24] 3246 	anl	acc,#0xd7
      000B96 F0               [24] 3247 	movx	@dptr,a
                                   3248 ;	nrf24l01.c:503: switch (rf_datarate)
      000B97 90r00r2D         [24] 3249 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_10000_190
      000B9A E0               [24] 3250 	movx	a,@dptr
      000B9B FE               [12] 3251 	mov	r6,a
      000B9C A3               [24] 3252 	inc	dptr
      000B9D E0               [24] 3253 	movx	a,@dptr
      000B9E FF               [12] 3254 	mov	r7,a
      000B9F BE FA 05         [24] 3255 	cjne	r6,#0xfa,00126$
      000BA2 BF 00 02         [24] 3256 	cjne	r7,#0x00,00126$
      000BA5 80 24            [24] 3257 	sjmp	00103$
      000BA7                       3258 00126$:
      000BA7 BE E8 05         [24] 3259 	cjne	r6,#0xe8,00127$
      000BAA BF 03 02         [24] 3260 	cjne	r7,#0x03,00127$
      000BAD 80 12            [24] 3261 	sjmp	00102$
      000BAF                       3262 00127$:
      000BAF BE D0 25         [24] 3263 	cjne	r6,#0xd0,00104$
      000BB2 BF 07 22         [24] 3264 	cjne	r7,#0x07,00104$
                                   3265 ;	nrf24l01.c:506: register_new_value = register_current_value | (1 << RF_DR_HIGH);
      000BB5 90r00r02         [24] 3266 	mov	dptr,#_register_current_value
      000BB8 E0               [24] 3267 	movx	a,@dptr
      000BB9 90r00r03         [24] 3268 	mov	dptr,#_register_new_value
      000BBC 44 08            [12] 3269 	orl	a,#0x08
      000BBE F0               [24] 3270 	movx	@dptr,a
                                   3271 ;	nrf24l01.c:507: break;
                                   3272 ;	nrf24l01.c:508: case 1000:
      000BBF 80 1E            [24] 3273 	sjmp	00105$
      000BC1                       3274 00102$:
                                   3275 ;	nrf24l01.c:509: register_new_value = register_current_value;
      000BC1 90r00r02         [24] 3276 	mov	dptr,#_register_current_value
      000BC4 E0               [24] 3277 	movx	a,@dptr
      000BC5 90r00r03         [24] 3278 	mov	dptr,#_register_new_value
      000BC8 F0               [24] 3279 	movx	@dptr,a
                                   3280 ;	nrf24l01.c:510: break;
                                   3281 ;	nrf24l01.c:511: case 250:
      000BC9 80 14            [24] 3282 	sjmp	00105$
      000BCB                       3283 00103$:
                                   3284 ;	nrf24l01.c:512: register_new_value = register_current_value | (1 << RF_DR_LOW);
      000BCB 90r00r02         [24] 3285 	mov	dptr,#_register_current_value
      000BCE E0               [24] 3286 	movx	a,@dptr
      000BCF 90r00r03         [24] 3287 	mov	dptr,#_register_new_value
      000BD2 44 20            [12] 3288 	orl	a,#0x20
      000BD4 F0               [24] 3289 	movx	@dptr,a
                                   3290 ;	nrf24l01.c:513: break;
                                   3291 ;	nrf24l01.c:514: default:
      000BD5 80 08            [24] 3292 	sjmp	00105$
      000BD7                       3293 00104$:
                                   3294 ;	nrf24l01.c:515: register_new_value = register_current_value;
      000BD7 90r00r02         [24] 3295 	mov	dptr,#_register_current_value
      000BDA E0               [24] 3296 	movx	a,@dptr
      000BDB 90r00r03         [24] 3297 	mov	dptr,#_register_new_value
      000BDE F0               [24] 3298 	movx	@dptr,a
                                   3299 ;	nrf24l01.c:517: }
      000BDF                       3300 00105$:
                                   3301 ;	nrf24l01.c:518: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000BDF 90r00r3F         [24] 3302 	mov	dptr,#_nrf24_write_PARM_2
      000BE2 74r03            [12] 3303 	mov	a,#_register_new_value
      000BE4 F0               [24] 3304 	movx	@dptr,a
      000BE5 74s00            [12] 3305 	mov	a,#(_register_new_value >> 8)
      000BE7 A3               [24] 3306 	inc	dptr
      000BE8 F0               [24] 3307 	movx	@dptr,a
      000BE9 E4               [12] 3308 	clr	a
      000BEA A3               [24] 3309 	inc	dptr
      000BEB F0               [24] 3310 	movx	@dptr,a
      000BEC 90r00r42         [24] 3311 	mov	dptr,#_nrf24_write_PARM_3
      000BEF 04               [12] 3312 	inc	a
      000BF0 F0               [24] 3313 	movx	@dptr,a
      000BF1 90r00r43         [24] 3314 	mov	dptr,#_nrf24_write_PARM_4
      000BF4 E4               [12] 3315 	clr	a
      000BF5 F0               [24] 3316 	movx	@dptr,a
      000BF6 75 82 06         [24] 3317 	mov	dpl, #0x06
                                   3318 ;	nrf24l01.c:519: }
      000BF9 02r0Fr7C         [24] 3319 	ljmp	_nrf24_write
                                   3320 ;------------------------------------------------------------
                                   3321 ;Allocation info for local variables in function 'nrf24_rf_power'
                                   3322 ;------------------------------------------------------------
                                   3323 ;rf_power                  Allocated with name '_nrf24_rf_power_rf_power_10000_193'
                                   3324 ;------------------------------------------------------------
                                   3325 ;	nrf24l01.c:522: void nrf24_rf_power(uint8_t rf_power)
                                   3326 ;	-----------------------------------------
                                   3327 ;	 function nrf24_rf_power
                                   3328 ;	-----------------------------------------
      000BFC                       3329 _nrf24_rf_power:
      000BFC E5 82            [12] 3330 	mov	a,dpl
      000BFE 90r00r2F         [24] 3331 	mov	dptr,#_nrf24_rf_power_rf_power_10000_193
      000C01 F0               [24] 3332 	movx	@dptr,a
                                   3333 ;	nrf24l01.c:524: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000C02 90r00r39         [24] 3334 	mov	dptr,#_nrf24_read_PARM_2
      000C05 74r02            [12] 3335 	mov	a,#_register_current_value
      000C07 F0               [24] 3336 	movx	@dptr,a
      000C08 74s00            [12] 3337 	mov	a,#(_register_current_value >> 8)
      000C0A A3               [24] 3338 	inc	dptr
      000C0B F0               [24] 3339 	movx	@dptr,a
      000C0C E4               [12] 3340 	clr	a
      000C0D A3               [24] 3341 	inc	dptr
      000C0E F0               [24] 3342 	movx	@dptr,a
      000C0F 90r00r3C         [24] 3343 	mov	dptr,#_nrf24_read_PARM_3
      000C12 04               [12] 3344 	inc	a
      000C13 F0               [24] 3345 	movx	@dptr,a
      000C14 90r00r3D         [24] 3346 	mov	dptr,#_nrf24_read_PARM_4
      000C17 E4               [12] 3347 	clr	a
      000C18 F0               [24] 3348 	movx	@dptr,a
      000C19 75 82 06         [24] 3349 	mov	dpl, #0x06
      000C1C 12r0Fr10         [24] 3350 	lcall	_nrf24_read
                                   3351 ;	nrf24l01.c:525: register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000C1F 90r00r02         [24] 3352 	mov	dptr,#_register_current_value
      000C22 E0               [24] 3353 	movx	a,@dptr
      000C23 53 E0 F9         [24] 3354 	anl	acc,#0xf9
      000C26 F0               [24] 3355 	movx	@dptr,a
                                   3356 ;	nrf24l01.c:526: switch (rf_power)
      000C27 90r00r2F         [24] 3357 	mov	dptr,#_nrf24_rf_power_rf_power_10000_193
      000C2A E0               [24] 3358 	movx	a,@dptr
      000C2B FF               [12] 3359 	mov	r7,a
      000C2C 60 0F            [24] 3360 	jz	00101$
      000C2E BF 06 02         [24] 3361 	cjne	r7,#0x06,00134$
      000C31 80 16            [24] 3362 	sjmp	00102$
      000C33                       3363 00134$:
      000C33 BF 0C 02         [24] 3364 	cjne	r7,#0x0c,00135$
      000C36 80 1D            [24] 3365 	sjmp	00103$
      000C38                       3366 00135$:
                                   3367 ;	nrf24l01.c:528: case 0:
      000C38 BF 12 30         [24] 3368 	cjne	r7,#0x12,00105$
      000C3B 80 24            [24] 3369 	sjmp	00104$
      000C3D                       3370 00101$:
                                   3371 ;	nrf24l01.c:529: register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000C3D 90r00r02         [24] 3372 	mov	dptr,#_register_current_value
      000C40 E0               [24] 3373 	movx	a,@dptr
      000C41 90r00r03         [24] 3374 	mov	dptr,#_register_new_value
      000C44 44 06            [12] 3375 	orl	a,#0x06
      000C46 F0               [24] 3376 	movx	@dptr,a
                                   3377 ;	nrf24l01.c:530: break;
                                   3378 ;	nrf24l01.c:531: case 6:
      000C47 80 2C            [24] 3379 	sjmp	00106$
      000C49                       3380 00102$:
                                   3381 ;	nrf24l01.c:532: register_new_value = register_current_value | (1 << RF_PWR_1);
      000C49 90r00r02         [24] 3382 	mov	dptr,#_register_current_value
      000C4C E0               [24] 3383 	movx	a,@dptr
      000C4D 90r00r03         [24] 3384 	mov	dptr,#_register_new_value
      000C50 44 04            [12] 3385 	orl	a,#0x04
      000C52 F0               [24] 3386 	movx	@dptr,a
                                   3387 ;	nrf24l01.c:533: break;
                                   3388 ;	nrf24l01.c:534: case 12:
      000C53 80 20            [24] 3389 	sjmp	00106$
      000C55                       3390 00103$:
                                   3391 ;	nrf24l01.c:535: register_new_value = register_current_value | (1 << RF_PWR_0);
      000C55 90r00r02         [24] 3392 	mov	dptr,#_register_current_value
      000C58 E0               [24] 3393 	movx	a,@dptr
      000C59 90r00r03         [24] 3394 	mov	dptr,#_register_new_value
      000C5C 44 02            [12] 3395 	orl	a,#0x02
      000C5E F0               [24] 3396 	movx	@dptr,a
                                   3397 ;	nrf24l01.c:536: break;
                                   3398 ;	nrf24l01.c:537: case 18:
      000C5F 80 14            [24] 3399 	sjmp	00106$
      000C61                       3400 00104$:
                                   3401 ;	nrf24l01.c:538: register_new_value = register_current_value;
      000C61 90r00r02         [24] 3402 	mov	dptr,#_register_current_value
      000C64 E0               [24] 3403 	movx	a,@dptr
      000C65 90r00r03         [24] 3404 	mov	dptr,#_register_new_value
      000C68 F0               [24] 3405 	movx	@dptr,a
                                   3406 ;	nrf24l01.c:539: break;
                                   3407 ;	nrf24l01.c:540: default:
      000C69 80 0A            [24] 3408 	sjmp	00106$
      000C6B                       3409 00105$:
                                   3410 ;	nrf24l01.c:541: register_new_value = register_current_value | (1 << RF_PWR_1);
      000C6B 90r00r02         [24] 3411 	mov	dptr,#_register_current_value
      000C6E E0               [24] 3412 	movx	a,@dptr
      000C6F 90r00r03         [24] 3413 	mov	dptr,#_register_new_value
      000C72 44 04            [12] 3414 	orl	a,#0x04
      000C74 F0               [24] 3415 	movx	@dptr,a
                                   3416 ;	nrf24l01.c:543: }
      000C75                       3417 00106$:
                                   3418 ;	nrf24l01.c:544: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000C75 90r00r3F         [24] 3419 	mov	dptr,#_nrf24_write_PARM_2
      000C78 74r03            [12] 3420 	mov	a,#_register_new_value
      000C7A F0               [24] 3421 	movx	@dptr,a
      000C7B 74s00            [12] 3422 	mov	a,#(_register_new_value >> 8)
      000C7D A3               [24] 3423 	inc	dptr
      000C7E F0               [24] 3424 	movx	@dptr,a
      000C7F E4               [12] 3425 	clr	a
      000C80 A3               [24] 3426 	inc	dptr
      000C81 F0               [24] 3427 	movx	@dptr,a
      000C82 90r00r42         [24] 3428 	mov	dptr,#_nrf24_write_PARM_3
      000C85 04               [12] 3429 	inc	a
      000C86 F0               [24] 3430 	movx	@dptr,a
      000C87 90r00r43         [24] 3431 	mov	dptr,#_nrf24_write_PARM_4
      000C8A E4               [12] 3432 	clr	a
      000C8B F0               [24] 3433 	movx	@dptr,a
      000C8C 75 82 06         [24] 3434 	mov	dpl, #0x06
                                   3435 ;	nrf24l01.c:545: }
      000C8F 02r0Fr7C         [24] 3436 	ljmp	_nrf24_write
                                   3437 ;------------------------------------------------------------
                                   3438 ;Allocation info for local variables in function 'nrf24_rf_channel'
                                   3439 ;------------------------------------------------------------
                                   3440 ;rf_channel                Allocated with name '_nrf24_rf_channel_rf_channel_10000_196'
                                   3441 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_20000_198'
                                   3442 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_20000_199'
                                   3443 ;------------------------------------------------------------
                                   3444 ;	nrf24l01.c:548: void nrf24_rf_channel(uint8_t rf_channel)
                                   3445 ;	-----------------------------------------
                                   3446 ;	 function nrf24_rf_channel
                                   3447 ;	-----------------------------------------
      000C92                       3448 _nrf24_rf_channel:
      000C92 E5 82            [12] 3449 	mov	a,dpl
      000C94 90r00r30         [24] 3450 	mov	dptr,#_nrf24_rf_channel_rf_channel_10000_196
      000C97 F0               [24] 3451 	movx	@dptr,a
                                   3452 ;	nrf24l01.c:550: if ((rf_channel <= 125) && (rf_channel >= 1))
      000C98 E0               [24] 3453 	movx	a,@dptr
      000C99 FF               [12] 3454 	mov  r7,a
      000C9A 24 82            [12] 3455 	add	a,#0xff - 0x7d
      000C9C 40 27            [24] 3456 	jc	00102$
      000C9E BF 01 00         [24] 3457 	cjne	r7,#0x01,00120$
      000CA1                       3458 00120$:
      000CA1 40 22            [24] 3459 	jc	00102$
                                   3460 ;	nrf24l01.c:552: uint8_t write_pointer = rf_channel;
      000CA3 90r00r31         [24] 3461 	mov	dptr,#_nrf24_rf_channel_write_pointer_20000_198
      000CA6 EF               [12] 3462 	mov	a,r7
      000CA7 F0               [24] 3463 	movx	@dptr,a
                                   3464 ;	nrf24l01.c:553: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000CA8 90r00r3F         [24] 3465 	mov	dptr,#_nrf24_write_PARM_2
      000CAB 74r31            [12] 3466 	mov	a,#_nrf24_rf_channel_write_pointer_20000_198
      000CAD F0               [24] 3467 	movx	@dptr,a
      000CAE 74s00            [12] 3468 	mov	a,#(_nrf24_rf_channel_write_pointer_20000_198 >> 8)
      000CB0 A3               [24] 3469 	inc	dptr
      000CB1 F0               [24] 3470 	movx	@dptr,a
      000CB2 E4               [12] 3471 	clr	a
      000CB3 A3               [24] 3472 	inc	dptr
      000CB4 F0               [24] 3473 	movx	@dptr,a
      000CB5 90r00r42         [24] 3474 	mov	dptr,#_nrf24_write_PARM_3
      000CB8 04               [12] 3475 	inc	a
      000CB9 F0               [24] 3476 	movx	@dptr,a
      000CBA 90r00r43         [24] 3477 	mov	dptr,#_nrf24_write_PARM_4
      000CBD E4               [12] 3478 	clr	a
      000CBE F0               [24] 3479 	movx	@dptr,a
      000CBF 75 82 05         [24] 3480 	mov	dpl, #0x05
      000CC2 02r0Fr7C         [24] 3481 	ljmp	_nrf24_write
      000CC5                       3482 00102$:
                                   3483 ;	nrf24l01.c:557: uint8_t write_pointer = 1;
      000CC5 90r00r32         [24] 3484 	mov	dptr,#_nrf24_rf_channel_write_pointer_20000_199
      000CC8 74 01            [12] 3485 	mov	a,#0x01
      000CCA F0               [24] 3486 	movx	@dptr,a
                                   3487 ;	nrf24l01.c:558: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000CCB 90r00r3F         [24] 3488 	mov	dptr,#_nrf24_write_PARM_2
      000CCE 74r32            [12] 3489 	mov	a,#_nrf24_rf_channel_write_pointer_20000_199
      000CD0 F0               [24] 3490 	movx	@dptr,a
      000CD1 74s00            [12] 3491 	mov	a,#(_nrf24_rf_channel_write_pointer_20000_199 >> 8)
      000CD3 A3               [24] 3492 	inc	dptr
      000CD4 F0               [24] 3493 	movx	@dptr,a
      000CD5 E4               [12] 3494 	clr	a
      000CD6 A3               [24] 3495 	inc	dptr
      000CD7 F0               [24] 3496 	movx	@dptr,a
      000CD8 90r00r42         [24] 3497 	mov	dptr,#_nrf24_write_PARM_3
      000CDB 04               [12] 3498 	inc	a
      000CDC F0               [24] 3499 	movx	@dptr,a
      000CDD 90r00r43         [24] 3500 	mov	dptr,#_nrf24_write_PARM_4
      000CE0 E4               [12] 3501 	clr	a
      000CE1 F0               [24] 3502 	movx	@dptr,a
      000CE2 75 82 05         [24] 3503 	mov	dpl, #0x05
                                   3504 ;	nrf24l01.c:560: }
      000CE5 02r0Fr7C         [24] 3505 	ljmp	_nrf24_write
                                   3506 ;------------------------------------------------------------
                                   3507 ;Allocation info for local variables in function 'nrf24_interrupt_mask'
                                   3508 ;------------------------------------------------------------
                                   3509 ;tx_mask                   Allocated with name '_nrf24_interrupt_mask_PARM_2'
                                   3510 ;max_rt_mask               Allocated with name '_nrf24_interrupt_mask_PARM_3'
                                   3511 ;rx_mask                   Allocated with name '_nrf24_interrupt_mask_rx_mask_10000_200'
                                   3512 ;------------------------------------------------------------
                                   3513 ;	nrf24l01.c:563: void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
                                   3514 ;	-----------------------------------------
                                   3515 ;	 function nrf24_interrupt_mask
                                   3516 ;	-----------------------------------------
      000CE8                       3517 _nrf24_interrupt_mask:
      000CE8 E5 82            [12] 3518 	mov	a,dpl
      000CEA 90r00r35         [24] 3519 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_10000_200
      000CED F0               [24] 3520 	movx	@dptr,a
                                   3521 ;	nrf24l01.c:565: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000CEE 90r00r39         [24] 3522 	mov	dptr,#_nrf24_read_PARM_2
      000CF1 74r02            [12] 3523 	mov	a,#_register_current_value
      000CF3 F0               [24] 3524 	movx	@dptr,a
      000CF4 74s00            [12] 3525 	mov	a,#(_register_current_value >> 8)
      000CF6 A3               [24] 3526 	inc	dptr
      000CF7 F0               [24] 3527 	movx	@dptr,a
      000CF8 E4               [12] 3528 	clr	a
      000CF9 A3               [24] 3529 	inc	dptr
      000CFA F0               [24] 3530 	movx	@dptr,a
      000CFB 90r00r3C         [24] 3531 	mov	dptr,#_nrf24_read_PARM_3
      000CFE 04               [12] 3532 	inc	a
      000CFF F0               [24] 3533 	movx	@dptr,a
      000D00 90r00r3D         [24] 3534 	mov	dptr,#_nrf24_read_PARM_4
      000D03 E4               [12] 3535 	clr	a
      000D04 F0               [24] 3536 	movx	@dptr,a
      000D05 75 82 00         [24] 3537 	mov	dpl, #0x00
      000D08 12r0Fr10         [24] 3538 	lcall	_nrf24_read
                                   3539 ;	nrf24l01.c:566: if (rx_mask)
      000D0B 90r00r35         [24] 3540 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_10000_200
      000D0E E0               [24] 3541 	movx	a,@dptr
      000D0F 60 0C            [24] 3542 	jz	00102$
                                   3543 ;	nrf24l01.c:567: register_new_value = (register_current_value) | (1 << MASK_RX_DR);
      000D11 90r00r02         [24] 3544 	mov	dptr,#_register_current_value
      000D14 E0               [24] 3545 	movx	a,@dptr
      000D15 90r00r03         [24] 3546 	mov	dptr,#_register_new_value
      000D18 44 40            [12] 3547 	orl	a,#0x40
      000D1A F0               [24] 3548 	movx	@dptr,a
      000D1B 80 08            [24] 3549 	sjmp	00103$
      000D1D                       3550 00102$:
                                   3551 ;	nrf24l01.c:569: register_new_value &= (~(1 << MASK_RX_DR));
      000D1D 90r00r03         [24] 3552 	mov	dptr,#_register_new_value
      000D20 E0               [24] 3553 	movx	a,@dptr
      000D21 53 E0 BF         [24] 3554 	anl	acc,#0xbf
      000D24 F0               [24] 3555 	movx	@dptr,a
      000D25                       3556 00103$:
                                   3557 ;	nrf24l01.c:570: if (tx_mask)
      000D25 90r00r33         [24] 3558 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000D28 E0               [24] 3559 	movx	a,@dptr
      000D29 60 0A            [24] 3560 	jz	00105$
                                   3561 ;	nrf24l01.c:571: register_new_value |= (1 << MASK_TX_DS);
      000D2B 90r00r03         [24] 3562 	mov	dptr,#_register_new_value
      000D2E E0               [24] 3563 	movx	a,@dptr
      000D2F 43 E0 20         [24] 3564 	orl	acc,#0x20
      000D32 F0               [24] 3565 	movx	@dptr,a
      000D33 80 08            [24] 3566 	sjmp	00106$
      000D35                       3567 00105$:
                                   3568 ;	nrf24l01.c:573: register_new_value &= (~(1 << MASK_TX_DS));
      000D35 90r00r03         [24] 3569 	mov	dptr,#_register_new_value
      000D38 E0               [24] 3570 	movx	a,@dptr
      000D39 53 E0 DF         [24] 3571 	anl	acc,#0xdf
      000D3C F0               [24] 3572 	movx	@dptr,a
      000D3D                       3573 00106$:
                                   3574 ;	nrf24l01.c:574: if (max_rt_mask)
      000D3D 90r00r34         [24] 3575 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000D40 E0               [24] 3576 	movx	a,@dptr
      000D41 60 0A            [24] 3577 	jz	00108$
                                   3578 ;	nrf24l01.c:575: register_new_value |= (1 << MASK_MAX_RT);
      000D43 90r00r03         [24] 3579 	mov	dptr,#_register_new_value
      000D46 E0               [24] 3580 	movx	a,@dptr
      000D47 43 E0 10         [24] 3581 	orl	acc,#0x10
      000D4A F0               [24] 3582 	movx	@dptr,a
      000D4B 80 08            [24] 3583 	sjmp	00109$
      000D4D                       3584 00108$:
                                   3585 ;	nrf24l01.c:577: register_new_value &= (~(1 << MASK_MAX_RT));
      000D4D 90r00r03         [24] 3586 	mov	dptr,#_register_new_value
      000D50 E0               [24] 3587 	movx	a,@dptr
      000D51 53 E0 EF         [24] 3588 	anl	acc,#0xef
      000D54 F0               [24] 3589 	movx	@dptr,a
      000D55                       3590 00109$:
                                   3591 ;	nrf24l01.c:579: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000D55 90r00r3F         [24] 3592 	mov	dptr,#_nrf24_write_PARM_2
      000D58 74r03            [12] 3593 	mov	a,#_register_new_value
      000D5A F0               [24] 3594 	movx	@dptr,a
      000D5B 74s00            [12] 3595 	mov	a,#(_register_new_value >> 8)
      000D5D A3               [24] 3596 	inc	dptr
      000D5E F0               [24] 3597 	movx	@dptr,a
      000D5F E4               [12] 3598 	clr	a
      000D60 A3               [24] 3599 	inc	dptr
      000D61 F0               [24] 3600 	movx	@dptr,a
      000D62 90r00r42         [24] 3601 	mov	dptr,#_nrf24_write_PARM_3
      000D65 04               [12] 3602 	inc	a
      000D66 F0               [24] 3603 	movx	@dptr,a
      000D67 90r00r43         [24] 3604 	mov	dptr,#_nrf24_write_PARM_4
      000D6A E4               [12] 3605 	clr	a
      000D6B F0               [24] 3606 	movx	@dptr,a
      000D6C 75 82 00         [24] 3607 	mov	dpl, #0x00
                                   3608 ;	nrf24l01.c:580: }
      000D6F 02r0Fr7C         [24] 3609 	ljmp	_nrf24_write
                                   3610 ;------------------------------------------------------------
                                   3611 ;Allocation info for local variables in function 'nrf24_crc_configuration'
                                   3612 ;------------------------------------------------------------
                                   3613 ;crc_encoding_scheme       Allocated with name '_nrf24_crc_configuration_PARM_2'
                                   3614 ;crc_enable                Allocated with name '_nrf24_crc_configuration_crc_enable_10000_202'
                                   3615 ;------------------------------------------------------------
                                   3616 ;	nrf24l01.c:583: void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
                                   3617 ;	-----------------------------------------
                                   3618 ;	 function nrf24_crc_configuration
                                   3619 ;	-----------------------------------------
      000D72                       3620 _nrf24_crc_configuration:
      000D72 E5 82            [12] 3621 	mov	a,dpl
      000D74 90r00r37         [24] 3622 	mov	dptr,#_nrf24_crc_configuration_crc_enable_10000_202
      000D77 F0               [24] 3623 	movx	@dptr,a
                                   3624 ;	nrf24l01.c:585: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000D78 90r00r39         [24] 3625 	mov	dptr,#_nrf24_read_PARM_2
      000D7B 74r02            [12] 3626 	mov	a,#_register_current_value
      000D7D F0               [24] 3627 	movx	@dptr,a
      000D7E 74s00            [12] 3628 	mov	a,#(_register_current_value >> 8)
      000D80 A3               [24] 3629 	inc	dptr
      000D81 F0               [24] 3630 	movx	@dptr,a
      000D82 E4               [12] 3631 	clr	a
      000D83 A3               [24] 3632 	inc	dptr
      000D84 F0               [24] 3633 	movx	@dptr,a
      000D85 90r00r3C         [24] 3634 	mov	dptr,#_nrf24_read_PARM_3
      000D88 04               [12] 3635 	inc	a
      000D89 F0               [24] 3636 	movx	@dptr,a
      000D8A 90r00r3D         [24] 3637 	mov	dptr,#_nrf24_read_PARM_4
      000D8D E4               [12] 3638 	clr	a
      000D8E F0               [24] 3639 	movx	@dptr,a
      000D8F 75 82 00         [24] 3640 	mov	dpl, #0x00
      000D92 12r0Fr10         [24] 3641 	lcall	_nrf24_read
                                   3642 ;	nrf24l01.c:586: if (crc_enable)
      000D95 90r00r37         [24] 3643 	mov	dptr,#_nrf24_crc_configuration_crc_enable_10000_202
      000D98 E0               [24] 3644 	movx	a,@dptr
      000D99 60 0C            [24] 3645 	jz	00102$
                                   3646 ;	nrf24l01.c:587: register_new_value = (register_current_value) | (1 << EN_CRC);
      000D9B 90r00r02         [24] 3647 	mov	dptr,#_register_current_value
      000D9E E0               [24] 3648 	movx	a,@dptr
      000D9F 90r00r03         [24] 3649 	mov	dptr,#_register_new_value
      000DA2 44 08            [12] 3650 	orl	a,#0x08
      000DA4 F0               [24] 3651 	movx	@dptr,a
      000DA5 80 08            [24] 3652 	sjmp	00103$
      000DA7                       3653 00102$:
                                   3654 ;	nrf24l01.c:589: register_new_value &= (~(1 << EN_CRC));
      000DA7 90r00r03         [24] 3655 	mov	dptr,#_register_new_value
      000DAA E0               [24] 3656 	movx	a,@dptr
      000DAB 53 E0 F7         [24] 3657 	anl	acc,#0xf7
      000DAE F0               [24] 3658 	movx	@dptr,a
      000DAF                       3659 00103$:
                                   3660 ;	nrf24l01.c:590: if (crc_encoding_scheme == 2)
      000DAF 90r00r36         [24] 3661 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      000DB2 E0               [24] 3662 	movx	a,@dptr
      000DB3 FF               [12] 3663 	mov	r7,a
      000DB4 BF 02 0A         [24] 3664 	cjne	r7,#0x02,00105$
                                   3665 ;	nrf24l01.c:591: register_new_value |= (1 << CRCO);
      000DB7 90r00r03         [24] 3666 	mov	dptr,#_register_new_value
      000DBA E0               [24] 3667 	movx	a,@dptr
      000DBB 43 E0 04         [24] 3668 	orl	acc,#0x04
      000DBE F0               [24] 3669 	movx	@dptr,a
      000DBF 80 08            [24] 3670 	sjmp	00106$
      000DC1                       3671 00105$:
                                   3672 ;	nrf24l01.c:593: register_new_value &= (~(1 << CRCO));
      000DC1 90r00r03         [24] 3673 	mov	dptr,#_register_new_value
      000DC4 E0               [24] 3674 	movx	a,@dptr
      000DC5 53 E0 FB         [24] 3675 	anl	acc,#0xfb
      000DC8 F0               [24] 3676 	movx	@dptr,a
      000DC9                       3677 00106$:
                                   3678 ;	nrf24l01.c:595: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000DC9 90r00r3F         [24] 3679 	mov	dptr,#_nrf24_write_PARM_2
      000DCC 74r03            [12] 3680 	mov	a,#_register_new_value
      000DCE F0               [24] 3681 	movx	@dptr,a
      000DCF 74s00            [12] 3682 	mov	a,#(_register_new_value >> 8)
      000DD1 A3               [24] 3683 	inc	dptr
      000DD2 F0               [24] 3684 	movx	@dptr,a
      000DD3 E4               [12] 3685 	clr	a
      000DD4 A3               [24] 3686 	inc	dptr
      000DD5 F0               [24] 3687 	movx	@dptr,a
      000DD6 90r00r42         [24] 3688 	mov	dptr,#_nrf24_write_PARM_3
      000DD9 04               [12] 3689 	inc	a
      000DDA F0               [24] 3690 	movx	@dptr,a
      000DDB 90r00r43         [24] 3691 	mov	dptr,#_nrf24_write_PARM_4
      000DDE E4               [12] 3692 	clr	a
      000DDF F0               [24] 3693 	movx	@dptr,a
      000DE0 75 82 00         [24] 3694 	mov	dpl, #0x00
                                   3695 ;	nrf24l01.c:596: }
      000DE3 02r0Fr7C         [24] 3696 	ljmp	_nrf24_write
                                   3697 ;------------------------------------------------------------
                                   3698 ;Allocation info for local variables in function 'nrf24_mode'
                                   3699 ;------------------------------------------------------------
                                   3700 ;mode                      Allocated with name '_nrf24_mode_mode_10000_204'
                                   3701 ;------------------------------------------------------------
                                   3702 ;	nrf24l01.c:599: void nrf24_mode(uint8_t mode)
                                   3703 ;	-----------------------------------------
                                   3704 ;	 function nrf24_mode
                                   3705 ;	-----------------------------------------
      000DE6                       3706 _nrf24_mode:
      000DE6 E5 82            [12] 3707 	mov	a,dpl
      000DE8 90r00r38         [24] 3708 	mov	dptr,#_nrf24_mode_mode_10000_204
      000DEB F0               [24] 3709 	movx	@dptr,a
                                   3710 ;	nrf24l01.c:601: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000DEC 90r00r39         [24] 3711 	mov	dptr,#_nrf24_read_PARM_2
      000DEF 74r02            [12] 3712 	mov	a,#_register_current_value
      000DF1 F0               [24] 3713 	movx	@dptr,a
      000DF2 74s00            [12] 3714 	mov	a,#(_register_current_value >> 8)
      000DF4 A3               [24] 3715 	inc	dptr
      000DF5 F0               [24] 3716 	movx	@dptr,a
      000DF6 E4               [12] 3717 	clr	a
      000DF7 A3               [24] 3718 	inc	dptr
      000DF8 F0               [24] 3719 	movx	@dptr,a
      000DF9 90r00r3C         [24] 3720 	mov	dptr,#_nrf24_read_PARM_3
      000DFC 04               [12] 3721 	inc	a
      000DFD F0               [24] 3722 	movx	@dptr,a
      000DFE 90r00r3D         [24] 3723 	mov	dptr,#_nrf24_read_PARM_4
      000E01 E4               [12] 3724 	clr	a
      000E02 F0               [24] 3725 	movx	@dptr,a
      000E03 75 82 00         [24] 3726 	mov	dpl, #0x00
      000E06 12r0Fr10         [24] 3727 	lcall	_nrf24_read
                                   3728 ;	nrf24l01.c:602: switch (mode)
      000E09 90r00r38         [24] 3729 	mov	dptr,#_nrf24_mode_mode_10000_204
      000E0C E0               [24] 3730 	movx	a,@dptr
      000E0D FF               [12] 3731 	mov  r7,a
      000E0E 24 FB            [12] 3732 	add	a,#0xff - 0x04
      000E10 50 03            [24] 3733 	jnc	00116$
      000E12 02r0ErCC         [24] 3734 	ljmp	00106$
      000E15                       3735 00116$:
      000E15 EF               [12] 3736 	mov	a,r7
      000E16 2F               [12] 3737 	add	a,r7
      000E17 2F               [12] 3738 	add	a,r7
      000E18 90r0Er1C         [24] 3739 	mov	dptr,#00117$
      000E1B 73               [24] 3740 	jmp	@a+dptr
      000E1C                       3741 00117$:
      000E1C 02r0Er2B         [24] 3742 	ljmp	00101$
      000E1F 02r0Er4B         [24] 3743 	ljmp	00102$
      000E22 02r0Er6B         [24] 3744 	ljmp	00103$
      000E25 02r0Er8C         [24] 3745 	ljmp	00104$
      000E28 02r0ErAD         [24] 3746 	ljmp	00105$
                                   3747 ;	nrf24l01.c:604: case POWER_DOWN:
      000E2B                       3748 00101$:
                                   3749 ;	nrf24l01.c:605: nrf24_CE(CE_OFF);
      000E2B 75 82 00         [24] 3750 	mov	dpl, #0x00
      000E2E C0 07            [24] 3751 	push	ar7
      000E30 12r00rCD         [24] 3752 	lcall	_nrf24_CE
                                   3753 ;	nrf24l01.c:606: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000E33 90r00r02         [24] 3754 	mov	dptr,#_register_current_value
      000E36 E0               [24] 3755 	movx	a,@dptr
      000E37 90r00r03         [24] 3756 	mov	dptr,#_register_new_value
      000E3A 54 FD            [12] 3757 	anl	a,#0xfd
      000E3C F0               [24] 3758 	movx	@dptr,a
                                   3759 ;	nrf24l01.c:607: delay_function(POWER_DOWN_DELAY);
      000E3D 90 00 02         [24] 3760 	mov	dptr,#0x0002
      000E40 E4               [12] 3761 	clr	a
      000E41 F5 F0            [12] 3762 	mov	b,a
      000E43 12r00r00         [24] 3763 	lcall	_delay_function
      000E46 D0 07            [24] 3764 	pop	ar7
                                   3765 ;	nrf24l01.c:608: break;
      000E48 02r0ErE9         [24] 3766 	ljmp	00107$
                                   3767 ;	nrf24l01.c:609: case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
      000E4B                       3768 00102$:
                                   3769 ;	nrf24l01.c:610: nrf24_CE(CE_OFF);
      000E4B 75 82 00         [24] 3770 	mov	dpl, #0x00
      000E4E C0 07            [24] 3771 	push	ar7
      000E50 12r00rCD         [24] 3772 	lcall	_nrf24_CE
                                   3773 ;	nrf24l01.c:611: register_new_value = (register_current_value) | (1 << PWR_UP);
      000E53 90r00r02         [24] 3774 	mov	dptr,#_register_current_value
      000E56 E0               [24] 3775 	movx	a,@dptr
      000E57 90r00r03         [24] 3776 	mov	dptr,#_register_new_value
      000E5A 44 02            [12] 3777 	orl	a,#0x02
      000E5C F0               [24] 3778 	movx	@dptr,a
                                   3779 ;	nrf24l01.c:612: delay_function(STANDBYI_DELAY);
      000E5D 90 00 02         [24] 3780 	mov	dptr,#0x0002
      000E60 E4               [12] 3781 	clr	a
      000E61 F5 F0            [12] 3782 	mov	b,a
      000E63 12r00r00         [24] 3783 	lcall	_delay_function
      000E66 D0 07            [24] 3784 	pop	ar7
                                   3785 ;	nrf24l01.c:613: break;
      000E68 02r0ErE9         [24] 3786 	ljmp	00107$
                                   3787 ;	nrf24l01.c:614: case STANDBYII:                                 /*standby ii is related to a ptx device*/
      000E6B                       3788 00103$:
                                   3789 ;	nrf24l01.c:615: nrf24_CE(CE_ON);
      000E6B 75 82 01         [24] 3790 	mov	dpl, #0x01
      000E6E C0 07            [24] 3791 	push	ar7
      000E70 12r00rCD         [24] 3792 	lcall	_nrf24_CE
                                   3793 ;	nrf24l01.c:616: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000E73 90r00r02         [24] 3794 	mov	dptr,#_register_current_value
      000E76 E0               [24] 3795 	movx	a,@dptr
      000E77 44 02            [12] 3796 	orl	a,#0x02
      000E79 90r00r03         [24] 3797 	mov	dptr,#_register_new_value
      000E7C 54 FE            [12] 3798 	anl	a,#0xfe
      000E7E F0               [24] 3799 	movx	@dptr,a
                                   3800 ;	nrf24l01.c:617: delay_function(STANDBYI_DELAY);
      000E7F 90 00 02         [24] 3801 	mov	dptr,#0x0002
      000E82 E4               [12] 3802 	clr	a
      000E83 F5 F0            [12] 3803 	mov	b,a
      000E85 12r00r00         [24] 3804 	lcall	_delay_function
      000E88 D0 07            [24] 3805 	pop	ar7
                                   3806 ;	nrf24l01.c:618: break;
                                   3807 ;	nrf24l01.c:619: case PTX:
      000E8A 80 5D            [24] 3808 	sjmp	00107$
      000E8C                       3809 00104$:
                                   3810 ;	nrf24l01.c:620: nrf24_CE(CE_ON);
      000E8C 75 82 01         [24] 3811 	mov	dpl, #0x01
      000E8F C0 07            [24] 3812 	push	ar7
      000E91 12r00rCD         [24] 3813 	lcall	_nrf24_CE
                                   3814 ;	nrf24l01.c:621: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000E94 90r00r02         [24] 3815 	mov	dptr,#_register_current_value
      000E97 E0               [24] 3816 	movx	a,@dptr
      000E98 44 02            [12] 3817 	orl	a,#0x02
      000E9A 90r00r03         [24] 3818 	mov	dptr,#_register_new_value
      000E9D 54 FE            [12] 3819 	anl	a,#0xfe
      000E9F F0               [24] 3820 	movx	@dptr,a
                                   3821 ;	nrf24l01.c:622: delay_function(STANDBYI_DELAY);
      000EA0 90 00 02         [24] 3822 	mov	dptr,#0x0002
      000EA3 E4               [12] 3823 	clr	a
      000EA4 F5 F0            [12] 3824 	mov	b,a
      000EA6 12r00r00         [24] 3825 	lcall	_delay_function
      000EA9 D0 07            [24] 3826 	pop	ar7
                                   3827 ;	nrf24l01.c:623: break;
                                   3828 ;	nrf24l01.c:624: case PRX:
      000EAB 80 3C            [24] 3829 	sjmp	00107$
      000EAD                       3830 00105$:
                                   3831 ;	nrf24l01.c:625: nrf24_CE(CE_ON);
      000EAD 75 82 01         [24] 3832 	mov	dpl, #0x01
      000EB0 C0 07            [24] 3833 	push	ar7
      000EB2 12r00rCD         [24] 3834 	lcall	_nrf24_CE
                                   3835 ;	nrf24l01.c:626: register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
      000EB5 90r00r02         [24] 3836 	mov	dptr,#_register_current_value
      000EB8 E0               [24] 3837 	movx	a,@dptr
      000EB9 90r00r03         [24] 3838 	mov	dptr,#_register_new_value
      000EBC 44 03            [12] 3839 	orl	a,#0x03
      000EBE F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	nrf24l01.c:627: delay_function(STANDBYI_DELAY);
      000EBF 90 00 02         [24] 3842 	mov	dptr,#0x0002
      000EC2 E4               [12] 3843 	clr	a
      000EC3 F5 F0            [12] 3844 	mov	b,a
      000EC5 12r00r00         [24] 3845 	lcall	_delay_function
      000EC8 D0 07            [24] 3846 	pop	ar7
                                   3847 ;	nrf24l01.c:628: break;
                                   3848 ;	nrf24l01.c:629: default:
      000ECA 80 1D            [24] 3849 	sjmp	00107$
      000ECC                       3850 00106$:
                                   3851 ;	nrf24l01.c:630: nrf24_CE(CE_OFF);
      000ECC 75 82 00         [24] 3852 	mov	dpl, #0x00
      000ECF C0 07            [24] 3853 	push	ar7
      000ED1 12r00rCD         [24] 3854 	lcall	_nrf24_CE
                                   3855 ;	nrf24l01.c:631: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000ED4 90r00r02         [24] 3856 	mov	dptr,#_register_current_value
      000ED7 E0               [24] 3857 	movx	a,@dptr
      000ED8 90r00r03         [24] 3858 	mov	dptr,#_register_new_value
      000EDB 54 FD            [12] 3859 	anl	a,#0xfd
      000EDD F0               [24] 3860 	movx	@dptr,a
                                   3861 ;	nrf24l01.c:632: delay_function(POWER_DOWN_DELAY);
      000EDE 90 00 02         [24] 3862 	mov	dptr,#0x0002
      000EE1 E4               [12] 3863 	clr	a
      000EE2 F5 F0            [12] 3864 	mov	b,a
      000EE4 12r00r00         [24] 3865 	lcall	_delay_function
      000EE7 D0 07            [24] 3866 	pop	ar7
                                   3867 ;	nrf24l01.c:634: }
      000EE9                       3868 00107$:
                                   3869 ;	nrf24l01.c:635: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000EE9 90r00r3F         [24] 3870 	mov	dptr,#_nrf24_write_PARM_2
      000EEC 74r03            [12] 3871 	mov	a,#_register_new_value
      000EEE F0               [24] 3872 	movx	@dptr,a
      000EEF 74s00            [12] 3873 	mov	a,#(_register_new_value >> 8)
      000EF1 A3               [24] 3874 	inc	dptr
      000EF2 F0               [24] 3875 	movx	@dptr,a
      000EF3 E4               [12] 3876 	clr	a
      000EF4 A3               [24] 3877 	inc	dptr
      000EF5 F0               [24] 3878 	movx	@dptr,a
      000EF6 90r00r42         [24] 3879 	mov	dptr,#_nrf24_write_PARM_3
      000EF9 04               [12] 3880 	inc	a
      000EFA F0               [24] 3881 	movx	@dptr,a
      000EFB 90r00r43         [24] 3882 	mov	dptr,#_nrf24_write_PARM_4
      000EFE E4               [12] 3883 	clr	a
      000EFF F0               [24] 3884 	movx	@dptr,a
      000F00 75 82 00         [24] 3885 	mov	dpl, #0x00
      000F03 C0 07            [24] 3886 	push	ar7
      000F05 12r0Fr7C         [24] 3887 	lcall	_nrf24_write
      000F08 D0 07            [24] 3888 	pop	ar7
                                   3889 ;	nrf24l01.c:636: current_mode = mode;
      000F0A 90r00r1C         [24] 3890 	mov	dptr,#_current_mode
      000F0D EF               [12] 3891 	mov	a,r7
      000F0E F0               [24] 3892 	movx	@dptr,a
                                   3893 ;	nrf24l01.c:637: }
      000F0F 22               [24] 3894 	ret
                                   3895 ;------------------------------------------------------------
                                   3896 ;Allocation info for local variables in function 'nrf24_read'
                                   3897 ;------------------------------------------------------------
                                   3898 ;value                     Allocated with name '_nrf24_read_PARM_2'
                                   3899 ;data_length               Allocated with name '_nrf24_read_PARM_3'
                                   3900 ;spi_state                 Allocated with name '_nrf24_read_PARM_4'
                                   3901 ;address                   Allocated with name '_nrf24_read_address_10000_207'
                                   3902 ;------------------------------------------------------------
                                   3903 ;	nrf24l01.c:641: void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3904 ;	-----------------------------------------
                                   3905 ;	 function nrf24_read
                                   3906 ;	-----------------------------------------
      000F10                       3907 _nrf24_read:
      000F10 E5 82            [12] 3908 	mov	a,dpl
      000F12 90r00r3E         [24] 3909 	mov	dptr,#_nrf24_read_address_10000_207
      000F15 F0               [24] 3910 	movx	@dptr,a
                                   3911 ;	nrf24l01.c:643: nrf24_SPI(SPI_ON);
      000F16 75 82 00         [24] 3912 	mov	dpl, #0x00
      000F19 12r00r7B         [24] 3913 	lcall	_nrf24_SPI
                                   3914 ;	nrf24l01.c:646: SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      000F1C 90r00r3E         [24] 3915 	mov	dptr,#_nrf24_read_address_10000_207
      000F1F E0               [24] 3916 	movx	a,@dptr
      000F20 FF               [12] 3917 	mov	r7,a
      000F21 90r00r01         [24] 3918 	mov	dptr,#_SPI_command
      000F24 F0               [24] 3919 	movx	@dptr,a
                                   3920 ;	nrf24l01.c:647: SPI_send_command(SPI_command);
      000F25 8F 82            [24] 3921 	mov	dpl, r7
      000F27 12r00r8F         [24] 3922 	lcall	_SPI_send_command
                                   3923 ;	nrf24l01.c:649: SPI_command = 0;
      000F2A 90r00r01         [24] 3924 	mov	dptr,#_SPI_command
      000F2D E4               [12] 3925 	clr	a
      000F2E F0               [24] 3926 	movx	@dptr,a
      000F2F 90r00r39         [24] 3927 	mov	dptr,#_nrf24_read_PARM_2
      000F32 E0               [24] 3928 	movx	a,@dptr
      000F33 FD               [12] 3929 	mov	r5,a
      000F34 A3               [24] 3930 	inc	dptr
      000F35 E0               [24] 3931 	movx	a,@dptr
      000F36 FE               [12] 3932 	mov	r6,a
      000F37 A3               [24] 3933 	inc	dptr
      000F38 E0               [24] 3934 	movx	a,@dptr
      000F39 FF               [12] 3935 	mov	r7,a
      000F3A 90r00r3C         [24] 3936 	mov	dptr,#_nrf24_read_PARM_3
      000F3D E0               [24] 3937 	movx	a,@dptr
      000F3E FC               [12] 3938 	mov	r4,a
      000F3F                       3939 00105$:
                                   3940 ;	nrf24l01.c:650: for (; data_length ; data_length--)
      000F3F EC               [12] 3941 	mov	a,r4
      000F40 60 2D            [24] 3942 	jz	00101$
                                   3943 ;	nrf24l01.c:652: *value = SPI_send_command(SPI_command);
      000F42 90r00r01         [24] 3944 	mov	dptr,#_SPI_command
      000F45 E0               [24] 3945 	movx	a,@dptr
      000F46 F5 82            [12] 3946 	mov	dpl,a
      000F48 C0 07            [24] 3947 	push	ar7
      000F4A C0 06            [24] 3948 	push	ar6
      000F4C C0 05            [24] 3949 	push	ar5
      000F4E C0 04            [24] 3950 	push	ar4
      000F50 12r00r8F         [24] 3951 	lcall	_SPI_send_command
      000F53 AB 82            [24] 3952 	mov	r3, dpl
      000F55 D0 04            [24] 3953 	pop	ar4
      000F57 D0 05            [24] 3954 	pop	ar5
      000F59 D0 06            [24] 3955 	pop	ar6
      000F5B D0 07            [24] 3956 	pop	ar7
      000F5D 8D 82            [24] 3957 	mov	dpl,r5
      000F5F 8E 83            [24] 3958 	mov	dph,r6
      000F61 8F F0            [24] 3959 	mov	b,r7
      000F63 EB               [12] 3960 	mov	a,r3
      000F64 12r00r00         [24] 3961 	lcall	__gptrput
      000F67 A3               [24] 3962 	inc	dptr
      000F68 AD 82            [24] 3963 	mov	r5,dpl
      000F6A AE 83            [24] 3964 	mov	r6,dph
                                   3965 ;	nrf24l01.c:653: value++;
                                   3966 ;	nrf24l01.c:650: for (; data_length ; data_length--)
      000F6C 1C               [12] 3967 	dec	r4
      000F6D 80 D0            [24] 3968 	sjmp	00105$
      000F6F                       3969 00101$:
                                   3970 ;	nrf24l01.c:655: if (spi_state == CLOSE)
      000F6F 90r00r3D         [24] 3971 	mov	dptr,#_nrf24_read_PARM_4
      000F72 E0               [24] 3972 	movx	a,@dptr
      000F73 70 06            [24] 3973 	jnz	00107$
                                   3974 ;	nrf24l01.c:656: nrf24_SPI(SPI_OFF);
      000F75 75 82 01         [24] 3975 	mov	dpl, #0x01
                                   3976 ;	nrf24l01.c:657: }
      000F78 02r00r7B         [24] 3977 	ljmp	_nrf24_SPI
      000F7B                       3978 00107$:
      000F7B 22               [24] 3979 	ret
                                   3980 ;------------------------------------------------------------
                                   3981 ;Allocation info for local variables in function 'nrf24_write'
                                   3982 ;------------------------------------------------------------
                                   3983 ;value                     Allocated with name '_nrf24_write_PARM_2'
                                   3984 ;data_length               Allocated with name '_nrf24_write_PARM_3'
                                   3985 ;spi_state                 Allocated with name '_nrf24_write_PARM_4'
                                   3986 ;address                   Allocated with name '_nrf24_write_address_10000_211'
                                   3987 ;------------------------------------------------------------
                                   3988 ;	nrf24l01.c:661: void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3989 ;	-----------------------------------------
                                   3990 ;	 function nrf24_write
                                   3991 ;	-----------------------------------------
      000F7C                       3992 _nrf24_write:
      000F7C E5 82            [12] 3993 	mov	a,dpl
      000F7E 90r00r44         [24] 3994 	mov	dptr,#_nrf24_write_address_10000_211
      000F81 F0               [24] 3995 	movx	@dptr,a
                                   3996 ;	nrf24l01.c:663: nrf24_SPI(SPI_ON);
      000F82 75 82 00         [24] 3997 	mov	dpl, #0x00
      000F85 12r00r7B         [24] 3998 	lcall	_nrf24_SPI
                                   3999 ;	nrf24l01.c:664: SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      000F88 90r00r44         [24] 4000 	mov	dptr,#_nrf24_write_address_10000_211
      000F8B E0               [24] 4001 	movx	a,@dptr
      000F8C 44 20            [12] 4002 	orl	a,#0x20
      000F8E FF               [12] 4003 	mov	r7,a
      000F8F 90r00r01         [24] 4004 	mov	dptr,#_SPI_command
      000F92 F0               [24] 4005 	movx	@dptr,a
                                   4006 ;	nrf24l01.c:665: SPI_send_command(SPI_command);
      000F93 8F 82            [24] 4007 	mov	dpl, r7
      000F95 12r00r8F         [24] 4008 	lcall	_SPI_send_command
      000F98 90r00r3F         [24] 4009 	mov	dptr,#_nrf24_write_PARM_2
      000F9B E0               [24] 4010 	movx	a,@dptr
      000F9C FD               [12] 4011 	mov	r5,a
      000F9D A3               [24] 4012 	inc	dptr
      000F9E E0               [24] 4013 	movx	a,@dptr
      000F9F FE               [12] 4014 	mov	r6,a
      000FA0 A3               [24] 4015 	inc	dptr
      000FA1 E0               [24] 4016 	movx	a,@dptr
      000FA2 FF               [12] 4017 	mov	r7,a
      000FA3 90r00r42         [24] 4018 	mov	dptr,#_nrf24_write_PARM_3
      000FA6 E0               [24] 4019 	movx	a,@dptr
      000FA7 FC               [12] 4020 	mov	r4,a
      000FA8                       4021 00105$:
                                   4022 ;	nrf24l01.c:666: for (; data_length ; data_length--)
      000FA8 EC               [12] 4023 	mov	a,r4
      000FA9 60 2D            [24] 4024 	jz	00101$
                                   4025 ;	nrf24l01.c:668: SPI_command = *value;
      000FAB 8D 82            [24] 4026 	mov	dpl,r5
      000FAD 8E 83            [24] 4027 	mov	dph,r6
      000FAF 8F F0            [24] 4028 	mov	b,r7
      000FB1 12r00r00         [24] 4029 	lcall	__gptrget
      000FB4 FB               [12] 4030 	mov	r3,a
      000FB5 A3               [24] 4031 	inc	dptr
      000FB6 AD 82            [24] 4032 	mov	r5,dpl
      000FB8 AE 83            [24] 4033 	mov	r6,dph
      000FBA 90r00r01         [24] 4034 	mov	dptr,#_SPI_command
      000FBD EB               [12] 4035 	mov	a,r3
      000FBE F0               [24] 4036 	movx	@dptr,a
                                   4037 ;	nrf24l01.c:669: value++;
                                   4038 ;	nrf24l01.c:670: SPI_send_command(SPI_command);
      000FBF E0               [24] 4039 	movx	a,@dptr
      000FC0 F5 82            [12] 4040 	mov	dpl,a
      000FC2 C0 07            [24] 4041 	push	ar7
      000FC4 C0 06            [24] 4042 	push	ar6
      000FC6 C0 05            [24] 4043 	push	ar5
      000FC8 C0 04            [24] 4044 	push	ar4
      000FCA 12r00r8F         [24] 4045 	lcall	_SPI_send_command
      000FCD D0 04            [24] 4046 	pop	ar4
      000FCF D0 05            [24] 4047 	pop	ar5
      000FD1 D0 06            [24] 4048 	pop	ar6
      000FD3 D0 07            [24] 4049 	pop	ar7
                                   4050 ;	nrf24l01.c:666: for (; data_length ; data_length--)
      000FD5 1C               [12] 4051 	dec	r4
      000FD6 80 D0            [24] 4052 	sjmp	00105$
      000FD8                       4053 00101$:
                                   4054 ;	nrf24l01.c:672: if (spi_state == CLOSE)
      000FD8 90r00r43         [24] 4055 	mov	dptr,#_nrf24_write_PARM_4
      000FDB E0               [24] 4056 	movx	a,@dptr
      000FDC 70 06            [24] 4057 	jnz	00107$
                                   4058 ;	nrf24l01.c:673: nrf24_SPI(SPI_OFF);
      000FDE 75 82 01         [24] 4059 	mov	dpl, #0x01
                                   4060 ;	nrf24l01.c:674: }
      000FE1 02r00r7B         [24] 4061 	ljmp	_nrf24_SPI
      000FE4                       4062 00107$:
      000FE4 22               [24] 4063 	ret
                                   4064 	.area CSEG    (CODE)
                                   4065 	.area CONST   (CODE)
      000000                       4066 _bitReverseTable256:
      000000 00                    4067 	.db #0x00	; 0
      000001 80                    4068 	.db #0x80	; 128
      000002 40                    4069 	.db #0x40	; 64
      000003 C0                    4070 	.db #0xc0	; 192
      000004 20                    4071 	.db #0x20	; 32
      000005 A0                    4072 	.db #0xa0	; 160
      000006 60                    4073 	.db #0x60	; 96
      000007 E0                    4074 	.db #0xe0	; 224
      000008 10                    4075 	.db #0x10	; 16
      000009 90                    4076 	.db #0x90	; 144
      00000A 50                    4077 	.db #0x50	; 80	'P'
      00000B D0                    4078 	.db #0xd0	; 208
      00000C 30                    4079 	.db #0x30	; 48	'0'
      00000D B0                    4080 	.db #0xb0	; 176
      00000E 70                    4081 	.db #0x70	; 112	'p'
      00000F F0                    4082 	.db #0xf0	; 240
      000010 08                    4083 	.db #0x08	; 8
      000011 88                    4084 	.db #0x88	; 136
      000012 48                    4085 	.db #0x48	; 72	'H'
      000013 C8                    4086 	.db #0xc8	; 200
      000014 28                    4087 	.db #0x28	; 40
      000015 A8                    4088 	.db #0xa8	; 168
      000016 68                    4089 	.db #0x68	; 104	'h'
      000017 E8                    4090 	.db #0xe8	; 232
      000018 18                    4091 	.db #0x18	; 24
      000019 98                    4092 	.db #0x98	; 152
      00001A 58                    4093 	.db #0x58	; 88	'X'
      00001B D8                    4094 	.db #0xd8	; 216
      00001C 38                    4095 	.db #0x38	; 56	'8'
      00001D B8                    4096 	.db #0xb8	; 184
      00001E 78                    4097 	.db #0x78	; 120	'x'
      00001F F8                    4098 	.db #0xf8	; 248
      000020 04                    4099 	.db #0x04	; 4
      000021 84                    4100 	.db #0x84	; 132
      000022 44                    4101 	.db #0x44	; 68	'D'
      000023 C4                    4102 	.db #0xc4	; 196
      000024 24                    4103 	.db #0x24	; 36
      000025 A4                    4104 	.db #0xa4	; 164
      000026 64                    4105 	.db #0x64	; 100	'd'
      000027 E4                    4106 	.db #0xe4	; 228
      000028 14                    4107 	.db #0x14	; 20
      000029 94                    4108 	.db #0x94	; 148
      00002A 54                    4109 	.db #0x54	; 84	'T'
      00002B D4                    4110 	.db #0xd4	; 212
      00002C 34                    4111 	.db #0x34	; 52	'4'
      00002D B4                    4112 	.db #0xb4	; 180
      00002E 74                    4113 	.db #0x74	; 116	't'
      00002F F4                    4114 	.db #0xf4	; 244
      000030 0C                    4115 	.db #0x0c	; 12
      000031 8C                    4116 	.db #0x8c	; 140
      000032 4C                    4117 	.db #0x4c	; 76	'L'
      000033 CC                    4118 	.db #0xcc	; 204
      000034 2C                    4119 	.db #0x2c	; 44
      000035 AC                    4120 	.db #0xac	; 172
      000036 6C                    4121 	.db #0x6c	; 108	'l'
      000037 EC                    4122 	.db #0xec	; 236
      000038 1C                    4123 	.db #0x1c	; 28
      000039 9C                    4124 	.db #0x9c	; 156
      00003A 5C                    4125 	.db #0x5c	; 92
      00003B DC                    4126 	.db #0xdc	; 220
      00003C 3C                    4127 	.db #0x3c	; 60
      00003D BC                    4128 	.db #0xbc	; 188
      00003E 7C                    4129 	.db #0x7c	; 124
      00003F FC                    4130 	.db #0xfc	; 252
      000040 02                    4131 	.db #0x02	; 2
      000041 82                    4132 	.db #0x82	; 130
      000042 42                    4133 	.db #0x42	; 66	'B'
      000043 C2                    4134 	.db #0xc2	; 194
      000044 22                    4135 	.db #0x22	; 34
      000045 A2                    4136 	.db #0xa2	; 162
      000046 62                    4137 	.db #0x62	; 98	'b'
      000047 E2                    4138 	.db #0xe2	; 226
      000048 12                    4139 	.db #0x12	; 18
      000049 92                    4140 	.db #0x92	; 146
      00004A 52                    4141 	.db #0x52	; 82	'R'
      00004B D2                    4142 	.db #0xd2	; 210
      00004C 32                    4143 	.db #0x32	; 50	'2'
      00004D B2                    4144 	.db #0xb2	; 178
      00004E 72                    4145 	.db #0x72	; 114	'r'
      00004F F2                    4146 	.db #0xf2	; 242
      000050 0A                    4147 	.db #0x0a	; 10
      000051 8A                    4148 	.db #0x8a	; 138
      000052 4A                    4149 	.db #0x4a	; 74	'J'
      000053 CA                    4150 	.db #0xca	; 202
      000054 2A                    4151 	.db #0x2a	; 42
      000055 AA                    4152 	.db #0xaa	; 170
      000056 6A                    4153 	.db #0x6a	; 106	'j'
      000057 EA                    4154 	.db #0xea	; 234
      000058 1A                    4155 	.db #0x1a	; 26
      000059 9A                    4156 	.db #0x9a	; 154
      00005A 5A                    4157 	.db #0x5a	; 90	'Z'
      00005B DA                    4158 	.db #0xda	; 218
      00005C 3A                    4159 	.db #0x3a	; 58
      00005D BA                    4160 	.db #0xba	; 186
      00005E 7A                    4161 	.db #0x7a	; 122	'z'
      00005F FA                    4162 	.db #0xfa	; 250
      000060 06                    4163 	.db #0x06	; 6
      000061 86                    4164 	.db #0x86	; 134
      000062 46                    4165 	.db #0x46	; 70	'F'
      000063 C6                    4166 	.db #0xc6	; 198
      000064 26                    4167 	.db #0x26	; 38
      000065 A6                    4168 	.db #0xa6	; 166
      000066 66                    4169 	.db #0x66	; 102	'f'
      000067 E6                    4170 	.db #0xe6	; 230
      000068 16                    4171 	.db #0x16	; 22
      000069 96                    4172 	.db #0x96	; 150
      00006A 56                    4173 	.db #0x56	; 86	'V'
      00006B D6                    4174 	.db #0xd6	; 214
      00006C 36                    4175 	.db #0x36	; 54	'6'
      00006D B6                    4176 	.db #0xb6	; 182
      00006E 76                    4177 	.db #0x76	; 118	'v'
      00006F F6                    4178 	.db #0xf6	; 246
      000070 0E                    4179 	.db #0x0e	; 14
      000071 8E                    4180 	.db #0x8e	; 142
      000072 4E                    4181 	.db #0x4e	; 78	'N'
      000073 CE                    4182 	.db #0xce	; 206
      000074 2E                    4183 	.db #0x2e	; 46
      000075 AE                    4184 	.db #0xae	; 174
      000076 6E                    4185 	.db #0x6e	; 110	'n'
      000077 EE                    4186 	.db #0xee	; 238
      000078 1E                    4187 	.db #0x1e	; 30
      000079 9E                    4188 	.db #0x9e	; 158
      00007A 5E                    4189 	.db #0x5e	; 94
      00007B DE                    4190 	.db #0xde	; 222
      00007C 3E                    4191 	.db #0x3e	; 62
      00007D BE                    4192 	.db #0xbe	; 190
      00007E 7E                    4193 	.db #0x7e	; 126
      00007F FE                    4194 	.db #0xfe	; 254
      000080 01                    4195 	.db #0x01	; 1
      000081 81                    4196 	.db #0x81	; 129
      000082 41                    4197 	.db #0x41	; 65	'A'
      000083 C1                    4198 	.db #0xc1	; 193
      000084 21                    4199 	.db #0x21	; 33
      000085 A1                    4200 	.db #0xa1	; 161
      000086 61                    4201 	.db #0x61	; 97	'a'
      000087 E1                    4202 	.db #0xe1	; 225
      000088 11                    4203 	.db #0x11	; 17
      000089 91                    4204 	.db #0x91	; 145
      00008A 51                    4205 	.db #0x51	; 81	'Q'
      00008B D1                    4206 	.db #0xd1	; 209
      00008C 31                    4207 	.db #0x31	; 49	'1'
      00008D B1                    4208 	.db #0xb1	; 177
      00008E 71                    4209 	.db #0x71	; 113	'q'
      00008F F1                    4210 	.db #0xf1	; 241
      000090 09                    4211 	.db #0x09	; 9
      000091 89                    4212 	.db #0x89	; 137
      000092 49                    4213 	.db #0x49	; 73	'I'
      000093 C9                    4214 	.db #0xc9	; 201
      000094 29                    4215 	.db #0x29	; 41
      000095 A9                    4216 	.db #0xa9	; 169
      000096 69                    4217 	.db #0x69	; 105	'i'
      000097 E9                    4218 	.db #0xe9	; 233
      000098 19                    4219 	.db #0x19	; 25
      000099 99                    4220 	.db #0x99	; 153
      00009A 59                    4221 	.db #0x59	; 89	'Y'
      00009B D9                    4222 	.db #0xd9	; 217
      00009C 39                    4223 	.db #0x39	; 57	'9'
      00009D B9                    4224 	.db #0xb9	; 185
      00009E 79                    4225 	.db #0x79	; 121	'y'
      00009F F9                    4226 	.db #0xf9	; 249
      0000A0 05                    4227 	.db #0x05	; 5
      0000A1 85                    4228 	.db #0x85	; 133
      0000A2 45                    4229 	.db #0x45	; 69	'E'
      0000A3 C5                    4230 	.db #0xc5	; 197
      0000A4 25                    4231 	.db #0x25	; 37
      0000A5 A5                    4232 	.db #0xa5	; 165
      0000A6 65                    4233 	.db #0x65	; 101	'e'
      0000A7 E5                    4234 	.db #0xe5	; 229
      0000A8 15                    4235 	.db #0x15	; 21
      0000A9 95                    4236 	.db #0x95	; 149
      0000AA 55                    4237 	.db #0x55	; 85	'U'
      0000AB D5                    4238 	.db #0xd5	; 213
      0000AC 35                    4239 	.db #0x35	; 53	'5'
      0000AD B5                    4240 	.db #0xb5	; 181
      0000AE 75                    4241 	.db #0x75	; 117	'u'
      0000AF F5                    4242 	.db #0xf5	; 245
      0000B0 0D                    4243 	.db #0x0d	; 13
      0000B1 8D                    4244 	.db #0x8d	; 141
      0000B2 4D                    4245 	.db #0x4d	; 77	'M'
      0000B3 CD                    4246 	.db #0xcd	; 205
      0000B4 2D                    4247 	.db #0x2d	; 45
      0000B5 AD                    4248 	.db #0xad	; 173
      0000B6 6D                    4249 	.db #0x6d	; 109	'm'
      0000B7 ED                    4250 	.db #0xed	; 237
      0000B8 1D                    4251 	.db #0x1d	; 29
      0000B9 9D                    4252 	.db #0x9d	; 157
      0000BA 5D                    4253 	.db #0x5d	; 93
      0000BB DD                    4254 	.db #0xdd	; 221
      0000BC 3D                    4255 	.db #0x3d	; 61
      0000BD BD                    4256 	.db #0xbd	; 189
      0000BE 7D                    4257 	.db #0x7d	; 125
      0000BF FD                    4258 	.db #0xfd	; 253
      0000C0 03                    4259 	.db #0x03	; 3
      0000C1 83                    4260 	.db #0x83	; 131
      0000C2 43                    4261 	.db #0x43	; 67	'C'
      0000C3 C3                    4262 	.db #0xc3	; 195
      0000C4 23                    4263 	.db #0x23	; 35
      0000C5 A3                    4264 	.db #0xa3	; 163
      0000C6 63                    4265 	.db #0x63	; 99	'c'
      0000C7 E3                    4266 	.db #0xe3	; 227
      0000C8 13                    4267 	.db #0x13	; 19
      0000C9 93                    4268 	.db #0x93	; 147
      0000CA 53                    4269 	.db #0x53	; 83	'S'
      0000CB D3                    4270 	.db #0xd3	; 211
      0000CC 33                    4271 	.db #0x33	; 51	'3'
      0000CD B3                    4272 	.db #0xb3	; 179
      0000CE 73                    4273 	.db #0x73	; 115	's'
      0000CF F3                    4274 	.db #0xf3	; 243
      0000D0 0B                    4275 	.db #0x0b	; 11
      0000D1 8B                    4276 	.db #0x8b	; 139
      0000D2 4B                    4277 	.db #0x4b	; 75	'K'
      0000D3 CB                    4278 	.db #0xcb	; 203
      0000D4 2B                    4279 	.db #0x2b	; 43
      0000D5 AB                    4280 	.db #0xab	; 171
      0000D6 6B                    4281 	.db #0x6b	; 107	'k'
      0000D7 EB                    4282 	.db #0xeb	; 235
      0000D8 1B                    4283 	.db #0x1b	; 27
      0000D9 9B                    4284 	.db #0x9b	; 155
      0000DA 5B                    4285 	.db #0x5b	; 91
      0000DB DB                    4286 	.db #0xdb	; 219
      0000DC 3B                    4287 	.db #0x3b	; 59
      0000DD BB                    4288 	.db #0xbb	; 187
      0000DE 7B                    4289 	.db #0x7b	; 123
      0000DF FB                    4290 	.db #0xfb	; 251
      0000E0 07                    4291 	.db #0x07	; 7
      0000E1 87                    4292 	.db #0x87	; 135
      0000E2 47                    4293 	.db #0x47	; 71	'G'
      0000E3 C7                    4294 	.db #0xc7	; 199
      0000E4 27                    4295 	.db #0x27	; 39
      0000E5 A7                    4296 	.db #0xa7	; 167
      0000E6 67                    4297 	.db #0x67	; 103	'g'
      0000E7 E7                    4298 	.db #0xe7	; 231
      0000E8 17                    4299 	.db #0x17	; 23
      0000E9 97                    4300 	.db #0x97	; 151
      0000EA 57                    4301 	.db #0x57	; 87	'W'
      0000EB D7                    4302 	.db #0xd7	; 215
      0000EC 37                    4303 	.db #0x37	; 55	'7'
      0000ED B7                    4304 	.db #0xb7	; 183
      0000EE 77                    4305 	.db #0x77	; 119	'w'
      0000EF F7                    4306 	.db #0xf7	; 247
      0000F0 0F                    4307 	.db #0x0f	; 15
      0000F1 8F                    4308 	.db #0x8f	; 143
      0000F2 4F                    4309 	.db #0x4f	; 79	'O'
      0000F3 CF                    4310 	.db #0xcf	; 207
      0000F4 2F                    4311 	.db #0x2f	; 47
      0000F5 AF                    4312 	.db #0xaf	; 175
      0000F6 6F                    4313 	.db #0x6f	; 111	'o'
      0000F7 EF                    4314 	.db #0xef	; 239
      0000F8 1F                    4315 	.db #0x1f	; 31
      0000F9 9F                    4316 	.db #0x9f	; 159
      0000FA 5F                    4317 	.db #0x5f	; 95
      0000FB DF                    4318 	.db #0xdf	; 223
      0000FC 3F                    4319 	.db #0x3f	; 63
      0000FD BF                    4320 	.db #0xbf	; 191
      0000FE 7F                    4321 	.db #0x7f	; 127
      0000FF FF                    4322 	.db #0xff	; 255
                                   4323 	.area CONST   (CODE)
      000100                       4324 ___str_0:
      000100 0D                    4325 	.db 0x0d
      000101 52 65 61 64 20 66 72  4326 	.ascii "Read from %d: %d"
             6F 6D 20 25 64 3A 20
             25 64
      000111 0A                    4327 	.db 0x0a
      000112 00                    4328 	.db 0x00
                                   4329 	.area CSEG    (CODE)
                                   4330 	.area CONST   (CODE)
      000113                       4331 ___str_1:
      000113 53 65 6E 64 69 6E 67  4332 	.ascii "Sending to %d: %d"
             20 74 6F 20 25 64 3A
             20 25 64
      000124 0A                    4333 	.db 0x0a
      000125 00                    4334 	.db 0x00
                                   4335 	.area CSEG    (CODE)
                                   4336 	.area CONST   (CODE)
      000126                       4337 ___str_2:
      000126 0D                    4338 	.db 0x0d
      000127 52 65 61 64 20 76 61  4339 	.ascii "Read value matches the newly written value :D"
             6C 75 65 20 6D 61 74
             63 68 65 73 20 74 68
             65 20 6E 65 77 6C 79
             20 77 72 69 74 74 65
             6E 20 76 61 6C 75 65
             20 3A 44
      000154 0A                    4340 	.db 0x0a
      000155 00                    4341 	.db 0x00
                                   4342 	.area CSEG    (CODE)
                                   4343 	.area CONST   (CODE)
      000156                       4344 ___str_3:
      000156 0D                    4345 	.db 0x0d
      000157 52 65 61 64 20 76 61  4346 	.ascii "Read value doesn't match the newly written value ;("
             6C 75 65 20 64 6F 65
             73 6E 27 74 20 6D 61
             74 63 68 20 74 68 65
             20 6E 65 77 6C 79 20
             77 72 69 74 74 65 6E
             20 76 61 6C 75 65 20
             3B 28
      00018A 0A                    4347 	.db 0x0a
      00018B 00                    4348 	.db 0x00
                                   4349 	.area CSEG    (CODE)
                                   4350 	.area CONST   (CODE)
      00018C                       4351 ___str_4:
      00018C 0D                    4352 	.db 0x0d
      00018D 52 65 61 64 3A 20 25  4353 	.ascii "Read: %d"
             64
      000195 0A                    4354 	.db 0x0a
      000196 00                    4355 	.db 0x00
                                   4356 	.area CSEG    (CODE)
                                   4357 	.area CONST   (CODE)
      000197                       4358 ___str_5:
      000197 0D                    4359 	.db 0x0d
      000198 48 61 72 64 77 61 72  4360 	.ascii "Hardware Detected!"
             65 20 44 65 74 65 63
             74 65 64 21
      0001AA 0A                    4361 	.db 0x0a
      0001AB 00                    4362 	.db 0x00
                                   4363 	.area CSEG    (CODE)
                                   4364 	.area XINIT   (CODE)
      000000                       4365 __xinit__dataReady:
      000000 00                    4366 	.db #0x00	;  0
      000001                       4367 __xinit__CSN_pin:
      000001 02                    4368 	.db #0x02	; 2
      000002 06                    4369 	.db #0x06	; 6
      000003 01                    4370 	.db #0x01	; 1
      000004 00                    4371 	.db #0x00	; 0
      000005 00                    4372 	.db #0x00	;  0
      000006 00                    4373 	.db #0x00	;  0
      000007 03                    4374 	.db #0x03	; 3
      000008 01                    4375 	.db #0x01	;  1
      000009 00                    4376 	.db #0x00	;  0
      00000A 00                    4377 	.db #0x00	; 0
      00000B 00                    4378 	.db #0x00	;  0
      00000C 00                    4379 	.db #0x00	; 0
      00000D 00                    4380 	.db #0x00	; 0
      00000E                       4381 __xinit__CE_pin:
      00000E 02                    4382 	.db #0x02	; 2
      00000F 07                    4383 	.db #0x07	; 7
      000010 01                    4384 	.db #0x01	; 1
      000011 00                    4385 	.db #0x00	; 0
      000012 00                    4386 	.db #0x00	;  0
      000013 00                    4387 	.db #0x00	;  0
      000014 03                    4388 	.db #0x03	; 3
      000015 01                    4389 	.db #0x01	;  1
      000016 00                    4390 	.db #0x00	;  0
      000017 00                    4391 	.db #0x00	; 0
      000018 00                    4392 	.db #0x00	;  0
      000019 00                    4393 	.db #0x00	; 0
      00001A 00                    4394 	.db #0x00	; 0
      00001B                       4395 __xinit__reset_flag:
      00001B 00                    4396 	.db #0x00	; 0
      00001C                       4397 __xinit__current_mode:
      00001C 05                    4398 	.db #0x05	; 5
      00001D                       4399 __xinit__current_acknowledgement_state:
      00001D 01                    4400 	.db #0x01	; 1
      00001E                       4401 __xinit__dynamic_payload:
      00001E 00                    4402 	.db #0x00	; 0
      00001F                       4403 __xinit__datapipe_address:
      00001F D2                    4404 	.db #0xd2	; 210
      000020 F0                    4405 	.db #0xf0	; 240
      000021 F0                    4406 	.db #0xf0	; 240
      000022 F0                    4407 	.db #0xf0	; 240
      000023 F0                    4408 	.db #0xf0	; 240
      000024 E1                    4409 	.db #0xe1	; 225
      000025 F0                    4410 	.db #0xf0	; 240
      000026 F0                    4411 	.db #0xf0	; 240
      000027 F0                    4412 	.db #0xf0	; 240
      000028 F0                    4413 	.db #0xf0	; 240
      000029 F0                    4414 	.db #0xf0	; 240
      00002A F0                    4415 	.db #0xf0	; 240
      00002B F0                    4416 	.db #0xf0	; 240
      00002C F0                    4417 	.db #0xf0	; 240
      00002D F0                    4418 	.db #0xf0	; 240
      00002E F0                    4419 	.db #0xf0	; 240
      00002F F0                    4420 	.db #0xf0	; 240
      000030 F0                    4421 	.db #0xf0	; 240
      000031 F0                    4422 	.db #0xf0	; 240
      000032 F0                    4423 	.db #0xf0	; 240
      000033 F0                    4424 	.db #0xf0	; 240
      000034 F0                    4425 	.db #0xf0	; 240
      000035 F0                    4426 	.db #0xf0	; 240
      000036 F0                    4427 	.db #0xf0	; 240
      000037 F0                    4428 	.db #0xf0	; 240
      000038 F0                    4429 	.db #0xf0	; 240
      000039 F0                    4430 	.db #0xf0	; 240
      00003A F0                    4431 	.db #0xf0	; 240
      00003B F0                    4432 	.db #0xf0	; 240
      00003C F0                    4433 	.db #0xf0	; 240
                                   4434 	.area CABS    (ABS,CODE)
