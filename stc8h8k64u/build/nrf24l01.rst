                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module nrf24l01
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bitReverseTable256
                                     12 	.globl _spiSend
                                     13 	.globl _spiConfigure
                                     14 	.globl _spiSelectSpeed
                                     15 	.globl _gpioWrite
                                     16 	.globl _gpioConfigure
                                     17 	.globl _delay1ms
                                     18 	.globl _printf
                                     19 	.globl _S1SM0_FE
                                     20 	.globl _T1IE
                                     21 	.globl _T0IE
                                     22 	.globl _T1RUN
                                     23 	.globl _T0RUN
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _EA
                                     33 	.globl _INT1IE
                                     34 	.globl _INT0IE
                                     35 	.globl _INT1TR
                                     36 	.globl _INT0TR
                                     37 	.globl _P5_5
                                     38 	.globl _P5_4
                                     39 	.globl _P5_3
                                     40 	.globl _P5_2
                                     41 	.globl _P5_1
                                     42 	.globl _P5_0
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _P1_7
                                     60 	.globl _P1_6
                                     61 	.globl _P1_5
                                     62 	.globl _P1_4
                                     63 	.globl _P1_3
                                     64 	.globl _P1_2
                                     65 	.globl _P1_1
                                     66 	.globl _P1_0
                                     67 	.globl _USBADR
                                     68 	.globl _USBCON
                                     69 	.globl _USBDAT
                                     70 	.globl _USBCLK
                                     71 	.globl _S4BUF
                                     72 	.globl _S4CON
                                     73 	.globl _S3BUF
                                     74 	.globl _S3CON
                                     75 	.globl _S2BUF
                                     76 	.globl _S2CON
                                     77 	.globl _S1BUF
                                     78 	.globl _S1CON
                                     79 	.globl _SADEN
                                     80 	.globl _SADDR
                                     81 	.globl _AUXINTIF
                                     82 	.globl _T3
                                     83 	.globl _T3L
                                     84 	.globl _T3H
                                     85 	.globl _T4
                                     86 	.globl _T4L
                                     87 	.globl _T4H
                                     88 	.globl _T4T3M
                                     89 	.globl _WDT_CONTR
                                     90 	.globl _AUXR
                                     91 	.globl _T2
                                     92 	.globl _T2H
                                     93 	.globl _T2L
                                     94 	.globl _T1
                                     95 	.globl _T1H
                                     96 	.globl _T1L
                                     97 	.globl _T0
                                     98 	.globl _T0H
                                     99 	.globl _T0L
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _IRTRIM
                                    103 	.globl _LIRTRIM
                                    104 	.globl _IRCBAND
                                    105 	.globl _SPDAT
                                    106 	.globl _SPCTL
                                    107 	.globl _SPSTAT
                                    108 	.globl _WKTC
                                    109 	.globl _WKTCH
                                    110 	.globl _WKTCL
                                    111 	.globl _BUS_SPEED
                                    112 	.globl _P_SW2
                                    113 	.globl _P_SW1
                                    114 	.globl _RSTCFG
                                    115 	.globl _PCON
                                    116 	.globl _B
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _SP
                                    120 	.globl _IP3H
                                    121 	.globl _IP3L
                                    122 	.globl _IP2H
                                    123 	.globl _IP2L
                                    124 	.globl _IE2
                                    125 	.globl _IP1H
                                    126 	.globl _IP1L
                                    127 	.globl _IE1
                                    128 	.globl _INT_CLKO
                                    129 	.globl _IAP_TPS
                                    130 	.globl _IAP_CONTR
                                    131 	.globl _IAP_TRIG
                                    132 	.globl _IAP_CMD
                                    133 	.globl _IAP_ADDR
                                    134 	.globl _IAP_ADDRL
                                    135 	.globl _IAP_ADDRH
                                    136 	.globl _IAP_DATA
                                    137 	.globl _P5M0
                                    138 	.globl _P5M1
                                    139 	.globl _P5
                                    140 	.globl _P3M0
                                    141 	.globl _P3M1
                                    142 	.globl _P3
                                    143 	.globl _P2M0
                                    144 	.globl _P2M1
                                    145 	.globl _P2
                                    146 	.globl _P1M0
                                    147 	.globl _P1M1
                                    148 	.globl _P1
                                    149 	.globl _TA
                                    150 	.globl _DPH1
                                    151 	.globl _DPL1
                                    152 	.globl _DPS
                                    153 	.globl _DP
                                    154 	.globl _DPH
                                    155 	.globl _DPL
                                    156 	.globl _CMPCR2
                                    157 	.globl _CMPCR1
                                    158 	.globl _DMA_ADC_AMT
                                    159 	.globl _ADCCFG
                                    160 	.globl _ADC_RES
                                    161 	.globl _ADC_RESL
                                    162 	.globl _ADC_RESH
                                    163 	.globl _ADC_CONTR
                                    164 	.globl _datapipe_address
                                    165 	.globl _CE_pin
                                    166 	.globl _CSN_pin
                                    167 	.globl _dataReady
                                    168 	.globl _nrf24_write_PARM_4
                                    169 	.globl _nrf24_write_PARM_3
                                    170 	.globl _nrf24_write_PARM_2
                                    171 	.globl _nrf24_read_PARM_4
                                    172 	.globl _nrf24_read_PARM_3
                                    173 	.globl _nrf24_read_PARM_2
                                    174 	.globl _nrf24_crc_configuration_PARM_2
                                    175 	.globl _nrf24_interrupt_mask_PARM_3
                                    176 	.globl _nrf24_interrupt_mask_PARM_2
                                    177 	.globl _nrf24_prx_static_payload_width_PARM_2
                                    178 	.globl _nrf24_dynamic_payload_PARM_2
                                    179 	.globl _nrf24_automatic_retransmit_setup_PARM_2
                                    180 	.globl _nrf24_device_PARM_2
                                    181 	.globl _nrf24_receive_PARM_2
                                    182 	.globl _nrf24_send_payload_PARM_2
                                    183 	.globl _nrf24_transmit_PARM_3
                                    184 	.globl _nrf24_transmit_PARM_2
                                    185 	.globl _DMA_UR4R_TXAL
                                    186 	.globl _DMA_UR4R_TXAH
                                    187 	.globl _DMA_UR4R_DONE
                                    188 	.globl _DMA_UR4R_AMT
                                    189 	.globl _DMA_UR4R_STA
                                    190 	.globl _DMA_UR4R_CR
                                    191 	.globl _DMA_UR4R_CFG
                                    192 	.globl _DMA_UR4T_TXAL
                                    193 	.globl _DMA_UR4T_TXAH
                                    194 	.globl _DMA_UR4T_DONE
                                    195 	.globl _DMA_UR4T_AMT
                                    196 	.globl _DMA_UR4T_STA
                                    197 	.globl _DMA_UR4T_CR
                                    198 	.globl _DMA_UR4T_CFG
                                    199 	.globl _DMA_UR3R_TXAL
                                    200 	.globl _DMA_UR3R_TXAH
                                    201 	.globl _DMA_UR3R_DONE
                                    202 	.globl _DMA_UR3R_AMT
                                    203 	.globl _DMA_UR3R_STA
                                    204 	.globl _DMA_UR3R_CR
                                    205 	.globl _DMA_UR3R_CFG
                                    206 	.globl _DMA_UR3T_TXAL
                                    207 	.globl _DMA_UR3T_TXAH
                                    208 	.globl _DMA_UR3T_DONE
                                    209 	.globl _DMA_UR3T_AMT
                                    210 	.globl _DMA_UR3T_STA
                                    211 	.globl _DMA_UR3T_CR
                                    212 	.globl _DMA_UR3T_CFG
                                    213 	.globl _DMA_UR2R_TXAL
                                    214 	.globl _DMA_UR2R_TXAH
                                    215 	.globl _DMA_UR2R_DONE
                                    216 	.globl _DMA_UR2R_AMT
                                    217 	.globl _DMA_UR2R_STA
                                    218 	.globl _DMA_UR2R_CR
                                    219 	.globl _DMA_UR2R_CFG
                                    220 	.globl _DMA_UR2T_TXAL
                                    221 	.globl _DMA_UR2T_TXAH
                                    222 	.globl _DMA_UR2T_DONE
                                    223 	.globl _DMA_UR2T_AMT
                                    224 	.globl _DMA_UR2T_STA
                                    225 	.globl _DMA_UR2T_CR
                                    226 	.globl _DMA_UR2T_CFG
                                    227 	.globl _DMA_UR1R_TXAL
                                    228 	.globl _DMA_UR1R_TXAH
                                    229 	.globl _DMA_UR1R_DONE
                                    230 	.globl _DMA_UR1R_AMT
                                    231 	.globl _DMA_UR1R_STA
                                    232 	.globl _DMA_UR1R_CR
                                    233 	.globl _DMA_UR1R_CFG
                                    234 	.globl _DMA_UR1T_TXAL
                                    235 	.globl _DMA_UR1T_TXAH
                                    236 	.globl _DMA_UR1T_DONE
                                    237 	.globl _DMA_URTX_AMT
                                    238 	.globl _DMA_UR1T_STA
                                    239 	.globl _DMA_UR1T_CR
                                    240 	.globl _DMA_UR1T_CFG
                                    241 	.globl _TM4PS
                                    242 	.globl _TM3PS
                                    243 	.globl _TM2PS
                                    244 	.globl _IRC48MCR
                                    245 	.globl _IRCDB
                                    246 	.globl _MCLKOCR
                                    247 	.globl _CKSEL
                                    248 	.globl _IRC32KCR
                                    249 	.globl _XOSCCR
                                    250 	.globl _HIRCCR
                                    251 	.globl _CLKDIV
                                    252 	.globl _DMA_SPI_CFG2
                                    253 	.globl _DMA_SPI_RXAL
                                    254 	.globl _DMA_SPI_RXAH
                                    255 	.globl _DMA_SPI_TXAL
                                    256 	.globl _DMA_SPI_TXAH
                                    257 	.globl _DMA_SPI_DONE
                                    258 	.globl _DMA_SPI_AMT
                                    259 	.globl _DMA_SPI_STA
                                    260 	.globl _DMA_SPI_CR
                                    261 	.globl _DMA_SPI_CFG
                                    262 	.globl _SSEC
                                    263 	.globl _SEC
                                    264 	.globl _MIN
                                    265 	.globl _HOUR
                                    266 	.globl _DAY
                                    267 	.globl _MONTH
                                    268 	.globl _YEAR
                                    269 	.globl _INISSEC
                                    270 	.globl _INISEC
                                    271 	.globl _INIMIN
                                    272 	.globl _INIHOUR
                                    273 	.globl _INIDAY
                                    274 	.globl _INIMONTH
                                    275 	.globl _INIYEAR
                                    276 	.globl _ALASSEC
                                    277 	.globl _ALASEC
                                    278 	.globl _ALAMIN
                                    279 	.globl _ALAHOUR
                                    280 	.globl _RTCIF
                                    281 	.globl _RTCIEN
                                    282 	.globl _RTCCFG
                                    283 	.globl _RTCCR
                                    284 	.globl _PWMB_OISR
                                    285 	.globl _PWMB_DTR
                                    286 	.globl _PWMB_BKR
                                    287 	.globl _PWMB_CCR4L
                                    288 	.globl _PWMB_CCR4H
                                    289 	.globl _PWMB_CCR3L
                                    290 	.globl _PWMB_CCR3H
                                    291 	.globl _PWMB_CCR2L
                                    292 	.globl _PWMB_CCR2H
                                    293 	.globl _PWMB_CCR1L
                                    294 	.globl _PWMB_CCR1H
                                    295 	.globl _PWMB_RCR
                                    296 	.globl _PWMB_ARRL
                                    297 	.globl _PWMB_ARRH
                                    298 	.globl _PWMB_PSCRL
                                    299 	.globl _PWMB_PSCRH
                                    300 	.globl _PWMB_CNTRL
                                    301 	.globl _PWMB_CNTRH
                                    302 	.globl _PWMB_CCER2
                                    303 	.globl _PWMB_CCER1
                                    304 	.globl _PWMB_CCMR4
                                    305 	.globl _PWMB_CCMR3
                                    306 	.globl _PWMB_CCMR2
                                    307 	.globl _PWMB_CCMR1
                                    308 	.globl _PWMB_EGR
                                    309 	.globl _PWMB_SR2
                                    310 	.globl _PWMB_SR1
                                    311 	.globl _PWMB_IER
                                    312 	.globl _PWMB_ETR
                                    313 	.globl _PWMB_SMCR
                                    314 	.globl _PWMB_CR2
                                    315 	.globl _PWMB_CR1
                                    316 	.globl _PWMA_OISR
                                    317 	.globl _PWMA_DTR
                                    318 	.globl _PWMA_BKR
                                    319 	.globl _PWMA_CCR4L
                                    320 	.globl _PWMA_CCR4H
                                    321 	.globl _PWMA_CCR3L
                                    322 	.globl _PWMA_CCR3H
                                    323 	.globl _PWMA_CCR2L
                                    324 	.globl _PWMA_CCR2H
                                    325 	.globl _PWMA_CCR1L
                                    326 	.globl _PWMA_CCR1H
                                    327 	.globl _PWMA_RCR
                                    328 	.globl _PWMA_ARRL
                                    329 	.globl _PWMA_ARRH
                                    330 	.globl _PWMA_PSCRL
                                    331 	.globl _PWMA_PSCRH
                                    332 	.globl _PWMA_CNTRL
                                    333 	.globl _PWMA_CNTRH
                                    334 	.globl _PWMA_CCER2
                                    335 	.globl _PWMA_CCER1
                                    336 	.globl _PWMA_CCMR4
                                    337 	.globl _PWMA_CCMR3
                                    338 	.globl _PWMA_CCMR2
                                    339 	.globl _PWMA_CCMR1
                                    340 	.globl _PWMA_EGR
                                    341 	.globl _PWMA_SR2
                                    342 	.globl _PWMA_SR1
                                    343 	.globl _PWMA_IER
                                    344 	.globl _PWMA_ETR
                                    345 	.globl _PWMA_SMCR
                                    346 	.globl _PWMA_CR2
                                    347 	.globl _PWMA_CR1
                                    348 	.globl _PWMB_IOAUX
                                    349 	.globl _PWMB_PS
                                    350 	.globl _PWMB_ENO
                                    351 	.globl _PWMB_ETRPS
                                    352 	.globl _PWMA_IOAUX
                                    353 	.globl _PWMA_PS
                                    354 	.globl _PWMA_ENO
                                    355 	.globl _PWMA_ETRPS
                                    356 	.globl _RSTFLAG
                                    357 	.globl _SPFUNC
                                    358 	.globl _OPCON
                                    359 	.globl _ARCON
                                    360 	.globl _MD4
                                    361 	.globl _MD5
                                    362 	.globl _MD0
                                    363 	.globl _MD1
                                    364 	.globl _MD2
                                    365 	.globl _MD3
                                    366 	.globl _DMA_LCM_RXAL
                                    367 	.globl _DMA_LCM_RXAH
                                    368 	.globl _DMA_LCM_TXAL
                                    369 	.globl _DMA_LCM_TXAH
                                    370 	.globl _DMA_LCM_DONE
                                    371 	.globl _DMA_LCM_AMT
                                    372 	.globl _DMA_LCM_STA
                                    373 	.globl _DMA_LCM_CR
                                    374 	.globl _DMA_LCM_CFG
                                    375 	.globl _LCMIDDAT
                                    376 	.globl _LCMIDDATH
                                    377 	.globl _LCMIDDATL
                                    378 	.globl _LCMSTA
                                    379 	.globl _LCMCR
                                    380 	.globl _LCMCFG2
                                    381 	.globl _LCMCFG
                                    382 	.globl _I2CMSAUX
                                    383 	.globl _I2CRXD
                                    384 	.globl _I2CTXD
                                    385 	.globl _I2CSLADR
                                    386 	.globl _I2CSLST
                                    387 	.globl _I2CSLCR
                                    388 	.globl _I2CMSST
                                    389 	.globl _I2CMSCR
                                    390 	.globl _I2CCFG
                                    391 	.globl _PINIPH
                                    392 	.globl _PINIPL
                                    393 	.globl _P5IE
                                    394 	.globl _P5DR
                                    395 	.globl _P5SR
                                    396 	.globl _P5NCS
                                    397 	.globl _P5PU
                                    398 	.globl _P5WKUE
                                    399 	.globl _P5IM1
                                    400 	.globl _P5IM0
                                    401 	.globl _P5INTF
                                    402 	.globl _P5INTE
                                    403 	.globl _P3IE
                                    404 	.globl _P3DR
                                    405 	.globl _P3SR
                                    406 	.globl _P3NCS
                                    407 	.globl _P3PU
                                    408 	.globl _P3WKUE
                                    409 	.globl _P3IM1
                                    410 	.globl _P3IM0
                                    411 	.globl _P3INTF
                                    412 	.globl _P3INTE
                                    413 	.globl _P2IE
                                    414 	.globl _P2DR
                                    415 	.globl _P2SR
                                    416 	.globl _P2NCS
                                    417 	.globl _P2PU
                                    418 	.globl _P2WKUE
                                    419 	.globl _P2IM1
                                    420 	.globl _P2IM0
                                    421 	.globl _P2INTF
                                    422 	.globl _P2INTE
                                    423 	.globl _P1IE
                                    424 	.globl _P1DR
                                    425 	.globl _P1SR
                                    426 	.globl _P1NCS
                                    427 	.globl _P1PU
                                    428 	.globl _P1WKUE
                                    429 	.globl _P1IM1
                                    430 	.globl _P1IM0
                                    431 	.globl _P1INTF
                                    432 	.globl _P1INTE
                                    433 	.globl _DMA_M2M_RXAL
                                    434 	.globl _DMA_M2M_RXAH
                                    435 	.globl _DMA_M2M_TXAL
                                    436 	.globl _DMA_M2M_TXAH
                                    437 	.globl _DMA_M2M_DONE
                                    438 	.globl _DMA_M2M_AMT
                                    439 	.globl _DMA_M2M_STA
                                    440 	.globl _DMA_M2M_CR
                                    441 	.globl _DMA_M2M_CFG
                                    442 	.globl _CMPEXCFG
                                    443 	.globl _DMA_ADC_CHSW1
                                    444 	.globl _DMA_ADC_CHSW0
                                    445 	.globl _DMA_ADC_CFG2
                                    446 	.globl _DMA_ADC_RXAL
                                    447 	.globl _DMA_ADC_RXAH
                                    448 	.globl _DMA_ADC_STA
                                    449 	.globl _DMA_ADC_CR
                                    450 	.globl _DMA_ADC_CFG
                                    451 	.globl _ADCEXCFG
                                    452 	.globl _ADCTIM
                                    453 	.globl _delay_function
                                    454 	.globl _SPI_Initializer
                                    455 	.globl _pinout_Initializer
                                    456 	.globl _nrf24_SPI
                                    457 	.globl _SPI_send_command
                                    458 	.globl _nrf24_CE
                                    459 	.globl _nrf24_dynamic_ack
                                    460 	.globl _nrf24_transmit
                                    461 	.globl _nrf24_send_payload
                                    462 	.globl _nrf24_transmit_status
                                    463 	.globl _nrf24_receive
                                    464 	.globl _nrf24_flush
                                    465 	.globl _nrf24_reset
                                    466 	.globl _nrf24_device
                                    467 	.globl _nrf24_automatic_retransmit_setup
                                    468 	.globl _nrf24_auto_acknowledgment_setup
                                    469 	.globl _nrf24_dynamic_payload
                                    470 	.globl _nrf24_datapipe_ptx
                                    471 	.globl _nrf24_datapipe_address_configuration
                                    472 	.globl _nrf24_prx_static_payload_width
                                    473 	.globl _nrf24_datapipe_enable
                                    474 	.globl _nrf24_address_width
                                    475 	.globl _nrf24_rf_datarate
                                    476 	.globl _nrf24_rf_power
                                    477 	.globl _nrf24_rf_channel
                                    478 	.globl _nrf24_interrupt_mask
                                    479 	.globl _nrf24_crc_configuration
                                    480 	.globl _nrf24_mode
                                    481 	.globl _nrf24_read
                                    482 	.globl _nrf24_write
                                    483 ;--------------------------------------------------------
                                    484 ; special function registers
                                    485 ;--------------------------------------------------------
                                    486 	.area RSEG    (ABS,DATA)
      000000                        487 	.org 0x0000
                           0000BC   488 _ADC_CONTR	=	0x00bc
                           0000BD   489 _ADC_RESH	=	0x00bd
                           0000BE   490 _ADC_RESL	=	0x00be
                           00BDBE   491 _ADC_RES	=	0xbdbe
                           0000DE   492 _ADCCFG	=	0x00de
                           0000FA   493 _DMA_ADC_AMT	=	0x00fa
                           0000E6   494 _CMPCR1	=	0x00e6
                           0000E7   495 _CMPCR2	=	0x00e7
                           000082   496 _DPL	=	0x0082
                           000083   497 _DPH	=	0x0083
                           008382   498 _DP	=	0x8382
                           0000E3   499 _DPS	=	0x00e3
                           0000E4   500 _DPL1	=	0x00e4
                           0000E5   501 _DPH1	=	0x00e5
                           0000AE   502 _TA	=	0x00ae
                           000090   503 _P1	=	0x0090
                           000091   504 _P1M1	=	0x0091
                           000092   505 _P1M0	=	0x0092
                           0000A0   506 _P2	=	0x00a0
                           000095   507 _P2M1	=	0x0095
                           000096   508 _P2M0	=	0x0096
                           0000B0   509 _P3	=	0x00b0
                           0000B1   510 _P3M1	=	0x00b1
                           0000B2   511 _P3M0	=	0x00b2
                           0000C8   512 _P5	=	0x00c8
                           0000C9   513 _P5M1	=	0x00c9
                           0000CA   514 _P5M0	=	0x00ca
                           0000C2   515 _IAP_DATA	=	0x00c2
                           0000C3   516 _IAP_ADDRH	=	0x00c3
                           0000C4   517 _IAP_ADDRL	=	0x00c4
                           00C3C4   518 _IAP_ADDR	=	0xc3c4
                           0000C5   519 _IAP_CMD	=	0x00c5
                           0000C6   520 _IAP_TRIG	=	0x00c6
                           0000C7   521 _IAP_CONTR	=	0x00c7
                           0000F5   522 _IAP_TPS	=	0x00f5
                           00008F   523 _INT_CLKO	=	0x008f
                           0000A8   524 _IE1	=	0x00a8
                           0000B8   525 _IP1L	=	0x00b8
                           0000B7   526 _IP1H	=	0x00b7
                           0000AF   527 _IE2	=	0x00af
                           0000B5   528 _IP2L	=	0x00b5
                           0000B6   529 _IP2H	=	0x00b6
                           0000DF   530 _IP3L	=	0x00df
                           0000EE   531 _IP3H	=	0x00ee
                           000081   532 _SP	=	0x0081
                           0000D0   533 _PSW	=	0x00d0
                           0000E0   534 _ACC	=	0x00e0
                           0000F0   535 _B	=	0x00f0
                           000087   536 _PCON	=	0x0087
                           0000FF   537 _RSTCFG	=	0x00ff
                           0000A2   538 _P_SW1	=	0x00a2
                           0000BA   539 _P_SW2	=	0x00ba
                           0000A1   540 _BUS_SPEED	=	0x00a1
                           0000AA   541 _WKTCL	=	0x00aa
                           0000AB   542 _WKTCH	=	0x00ab
                           00ABAA   543 _WKTC	=	0xabaa
                           0000CD   544 _SPSTAT	=	0x00cd
                           0000CE   545 _SPCTL	=	0x00ce
                           0000CF   546 _SPDAT	=	0x00cf
                           00009D   547 _IRCBAND	=	0x009d
                           00009E   548 _LIRTRIM	=	0x009e
                           00009F   549 _IRTRIM	=	0x009f
                           000088   550 _TCON	=	0x0088
                           000089   551 _TMOD	=	0x0089
                           00008A   552 _T0L	=	0x008a
                           00008C   553 _T0H	=	0x008c
                           008C8A   554 _T0	=	0x8c8a
                           00008B   555 _T1L	=	0x008b
                           00008D   556 _T1H	=	0x008d
                           008D8B   557 _T1	=	0x8d8b
                           0000D7   558 _T2L	=	0x00d7
                           0000D6   559 _T2H	=	0x00d6
                           00D6D7   560 _T2	=	0xd6d7
                           00008E   561 _AUXR	=	0x008e
                           0000C1   562 _WDT_CONTR	=	0x00c1
                           0000D1   563 _T4T3M	=	0x00d1
                           0000D2   564 _T4H	=	0x00d2
                           0000D3   565 _T4L	=	0x00d3
                           00D2D3   566 _T4	=	0xd2d3
                           0000D4   567 _T3H	=	0x00d4
                           0000D5   568 _T3L	=	0x00d5
                           00D4D5   569 _T3	=	0xd4d5
                           0000EF   570 _AUXINTIF	=	0x00ef
                           0000A9   571 _SADDR	=	0x00a9
                           0000B9   572 _SADEN	=	0x00b9
                           000098   573 _S1CON	=	0x0098
                           000099   574 _S1BUF	=	0x0099
                           00009A   575 _S2CON	=	0x009a
                           00009B   576 _S2BUF	=	0x009b
                           0000AC   577 _S3CON	=	0x00ac
                           0000AD   578 _S3BUF	=	0x00ad
                           000084   579 _S4CON	=	0x0084
                           000085   580 _S4BUF	=	0x0085
                           0000DC   581 _USBCLK	=	0x00dc
                           0000EC   582 _USBDAT	=	0x00ec
                           0000F4   583 _USBCON	=	0x00f4
                           0000FC   584 _USBADR	=	0x00fc
                                    585 ;--------------------------------------------------------
                                    586 ; special function bits
                                    587 ;--------------------------------------------------------
                                    588 	.area RSEG    (ABS,DATA)
      000000                        589 	.org 0x0000
                           000090   590 _P1_0	=	0x0090
                           000091   591 _P1_1	=	0x0091
                           000092   592 _P1_2	=	0x0092
                           000093   593 _P1_3	=	0x0093
                           000094   594 _P1_4	=	0x0094
                           000095   595 _P1_5	=	0x0095
                           000096   596 _P1_6	=	0x0096
                           000097   597 _P1_7	=	0x0097
                           0000A0   598 _P2_0	=	0x00a0
                           0000A1   599 _P2_1	=	0x00a1
                           0000A2   600 _P2_2	=	0x00a2
                           0000A3   601 _P2_3	=	0x00a3
                           0000A4   602 _P2_4	=	0x00a4
                           0000A5   603 _P2_5	=	0x00a5
                           0000A6   604 _P2_6	=	0x00a6
                           0000A7   605 _P2_7	=	0x00a7
                           0000B0   606 _P3_0	=	0x00b0
                           0000B1   607 _P3_1	=	0x00b1
                           0000B2   608 _P3_2	=	0x00b2
                           0000B3   609 _P3_3	=	0x00b3
                           0000B4   610 _P3_4	=	0x00b4
                           0000B5   611 _P3_5	=	0x00b5
                           0000B6   612 _P3_6	=	0x00b6
                           0000B7   613 _P3_7	=	0x00b7
                           0000C8   614 _P5_0	=	0x00c8
                           0000C9   615 _P5_1	=	0x00c9
                           0000CA   616 _P5_2	=	0x00ca
                           0000CB   617 _P5_3	=	0x00cb
                           0000CC   618 _P5_4	=	0x00cc
                           0000CD   619 _P5_5	=	0x00cd
                           000088   620 _INT0TR	=	0x0088
                           00008A   621 _INT1TR	=	0x008a
                           0000A8   622 _INT0IE	=	0x00a8
                           0000AA   623 _INT1IE	=	0x00aa
                           0000AF   624 _EA	=	0x00af
                           0000D0   625 _P	=	0x00d0
                           0000D1   626 _F1	=	0x00d1
                           0000D2   627 _OV	=	0x00d2
                           0000D3   628 _RS0	=	0x00d3
                           0000D4   629 _RS1	=	0x00d4
                           0000D5   630 _F0	=	0x00d5
                           0000D6   631 _AC	=	0x00d6
                           0000D7   632 _CY	=	0x00d7
                           00008C   633 _T0RUN	=	0x008c
                           00008E   634 _T1RUN	=	0x008e
                           0000A9   635 _T0IE	=	0x00a9
                           0000AB   636 _T1IE	=	0x00ab
                           00009F   637 _S1SM0_FE	=	0x009f
                                    638 ;--------------------------------------------------------
                                    639 ; overlayable register banks
                                    640 ;--------------------------------------------------------
                                    641 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        642 	.ds 8
                                    643 ;--------------------------------------------------------
                                    644 ; internal ram data
                                    645 ;--------------------------------------------------------
                                    646 	.area DSEG    (DATA)
                                    647 ;--------------------------------------------------------
                                    648 ; overlayable items in internal ram
                                    649 ;--------------------------------------------------------
                                    650 ;--------------------------------------------------------
                                    651 ; indirectly addressable internal ram data
                                    652 ;--------------------------------------------------------
                                    653 	.area ISEG    (DATA)
                                    654 ;--------------------------------------------------------
                                    655 ; absolute internal ram data
                                    656 ;--------------------------------------------------------
                                    657 	.area IABS    (ABS,DATA)
                                    658 	.area IABS    (ABS,DATA)
                                    659 ;--------------------------------------------------------
                                    660 ; bit data
                                    661 ;--------------------------------------------------------
                                    662 	.area BSEG    (BIT)
                                    663 ;--------------------------------------------------------
                                    664 ; paged external ram data
                                    665 ;--------------------------------------------------------
                                    666 	.area PSEG    (PAG,XDATA)
                                    667 ;--------------------------------------------------------
                                    668 ; uninitialized external ram data
                                    669 ;--------------------------------------------------------
                                    670 	.area XSEG    (XDATA)
                           00FEA8   671 _ADCTIM	=	0xfea8
                           00FEAD   672 _ADCEXCFG	=	0xfead
                           00FA10   673 _DMA_ADC_CFG	=	0xfa10
                           00FA11   674 _DMA_ADC_CR	=	0xfa11
                           00FA12   675 _DMA_ADC_STA	=	0xfa12
                           00FA17   676 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   677 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   678 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   679 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   680 _DMA_ADC_CHSW1	=	0xfa1b
                           00FEAE   681 _CMPEXCFG	=	0xfeae
                           00FA00   682 _DMA_M2M_CFG	=	0xfa00
                           00FA01   683 _DMA_M2M_CR	=	0xfa01
                           00FA02   684 _DMA_M2M_STA	=	0xfa02
                           00FA03   685 _DMA_M2M_AMT	=	0xfa03
                           00FA04   686 _DMA_M2M_DONE	=	0xfa04
                           00FA05   687 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   688 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   689 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   690 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   691 _P1INTE	=	0xfd01
                           00FD11   692 _P1INTF	=	0xfd11
                           00FD21   693 _P1IM0	=	0xfd21
                           00FD31   694 _P1IM1	=	0xfd31
                           00FD41   695 _P1WKUE	=	0xfd41
                           00FE11   696 _P1PU	=	0xfe11
                           00FE19   697 _P1NCS	=	0xfe19
                           00FE21   698 _P1SR	=	0xfe21
                           00FE29   699 _P1DR	=	0xfe29
                           00FE31   700 _P1IE	=	0xfe31
                           00FD02   701 _P2INTE	=	0xfd02
                           00FD12   702 _P2INTF	=	0xfd12
                           00FD22   703 _P2IM0	=	0xfd22
                           00FD32   704 _P2IM1	=	0xfd32
                           00FD42   705 _P2WKUE	=	0xfd42
                           00FE12   706 _P2PU	=	0xfe12
                           00FE1A   707 _P2NCS	=	0xfe1a
                           00FE22   708 _P2SR	=	0xfe22
                           00FE2A   709 _P2DR	=	0xfe2a
                           00FE32   710 _P2IE	=	0xfe32
                           00FD03   711 _P3INTE	=	0xfd03
                           00FD13   712 _P3INTF	=	0xfd13
                           00FD23   713 _P3IM0	=	0xfd23
                           00FD33   714 _P3IM1	=	0xfd33
                           00FD43   715 _P3WKUE	=	0xfd43
                           00FE13   716 _P3PU	=	0xfe13
                           00FE1B   717 _P3NCS	=	0xfe1b
                           00FE23   718 _P3SR	=	0xfe23
                           00FE2B   719 _P3DR	=	0xfe2b
                           00FE33   720 _P3IE	=	0xfe33
                           00FD05   721 _P5INTE	=	0xfd05
                           00FD15   722 _P5INTF	=	0xfd15
                           00FD25   723 _P5IM0	=	0xfd25
                           00FD35   724 _P5IM1	=	0xfd35
                           00FD45   725 _P5WKUE	=	0xfd45
                           00FE15   726 _P5PU	=	0xfe15
                           00FE1D   727 _P5NCS	=	0xfe1d
                           00FE25   728 _P5SR	=	0xfe25
                           00FE2D   729 _P5DR	=	0xfe2d
                           00FE35   730 _P5IE	=	0xfe35
                           00FD60   731 _PINIPL	=	0xfd60
                           00FD61   732 _PINIPH	=	0xfd61
                           00FE80   733 _I2CCFG	=	0xfe80
                           00FE81   734 _I2CMSCR	=	0xfe81
                           00FE82   735 _I2CMSST	=	0xfe82
                           00FE83   736 _I2CSLCR	=	0xfe83
                           00FE84   737 _I2CSLST	=	0xfe84
                           00FE85   738 _I2CSLADR	=	0xfe85
                           00FE86   739 _I2CTXD	=	0xfe86
                           00FE87   740 _I2CRXD	=	0xfe87
                           00FE88   741 _I2CMSAUX	=	0xfe88
                           00FE50   742 _LCMCFG	=	0xfe50
                           00FE51   743 _LCMCFG2	=	0xfe51
                           00FE52   744 _LCMCR	=	0xfe52
                           00FE53   745 _LCMSTA	=	0xfe53
                           00FE54   746 _LCMIDDATL	=	0xfe54
                           00FE55   747 _LCMIDDATH	=	0xfe55
                           00FE54   748 _LCMIDDAT	=	0xfe54
                           00FA70   749 _DMA_LCM_CFG	=	0xfa70
                           00FA71   750 _DMA_LCM_CR	=	0xfa71
                           00FA72   751 _DMA_LCM_STA	=	0xfa72
                           00FA73   752 _DMA_LCM_AMT	=	0xfa73
                           00FA74   753 _DMA_LCM_DONE	=	0xfa74
                           00FA75   754 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   755 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   756 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   757 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   758 _MD3	=	0xfcf0
                           00FCF1   759 _MD2	=	0xfcf1
                           00FCF2   760 _MD1	=	0xfcf2
                           00FCF3   761 _MD0	=	0xfcf3
                           00FCF4   762 _MD5	=	0xfcf4
                           00FCF5   763 _MD4	=	0xfcf5
                           00FCF6   764 _ARCON	=	0xfcf6
                           00FCF7   765 _OPCON	=	0xfcf7
                           00FE08   766 _SPFUNC	=	0xfe08
                           00FE09   767 _RSTFLAG	=	0xfe09
                           00FEB0   768 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   769 _PWMA_ENO	=	0xfeb1
                           00FEB2   770 _PWMA_PS	=	0xfeb2
                           00FEB3   771 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   772 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   773 _PWMB_ENO	=	0xfeb5
                           00FEB6   774 _PWMB_PS	=	0xfeb6
                           00FEB7   775 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   776 _PWMA_CR1	=	0xfec0
                           00FEC1   777 _PWMA_CR2	=	0xfec1
                           00FEC2   778 _PWMA_SMCR	=	0xfec2
                           00FEC3   779 _PWMA_ETR	=	0xfec3
                           00FEC4   780 _PWMA_IER	=	0xfec4
                           00FEC5   781 _PWMA_SR1	=	0xfec5
                           00FEC6   782 _PWMA_SR2	=	0xfec6
                           00FEC7   783 _PWMA_EGR	=	0xfec7
                           00FEC8   784 _PWMA_CCMR1	=	0xfec8
                           00FEC9   785 _PWMA_CCMR2	=	0xfec9
                           00FECA   786 _PWMA_CCMR3	=	0xfeca
                           00FECB   787 _PWMA_CCMR4	=	0xfecb
                           00FECC   788 _PWMA_CCER1	=	0xfecc
                           00FECD   789 _PWMA_CCER2	=	0xfecd
                           00FECE   790 _PWMA_CNTRH	=	0xfece
                           00FECF   791 _PWMA_CNTRL	=	0xfecf
                           00FED0   792 _PWMA_PSCRH	=	0xfed0
                           00FED1   793 _PWMA_PSCRL	=	0xfed1
                           00FED2   794 _PWMA_ARRH	=	0xfed2
                           00FED3   795 _PWMA_ARRL	=	0xfed3
                           00FED4   796 _PWMA_RCR	=	0xfed4
                           00FED5   797 _PWMA_CCR1H	=	0xfed5
                           00FED6   798 _PWMA_CCR1L	=	0xfed6
                           00FED7   799 _PWMA_CCR2H	=	0xfed7
                           00FED8   800 _PWMA_CCR2L	=	0xfed8
                           00FED9   801 _PWMA_CCR3H	=	0xfed9
                           00FEDA   802 _PWMA_CCR3L	=	0xfeda
                           00FEDB   803 _PWMA_CCR4H	=	0xfedb
                           00FEDC   804 _PWMA_CCR4L	=	0xfedc
                           00FEDD   805 _PWMA_BKR	=	0xfedd
                           00FEDE   806 _PWMA_DTR	=	0xfede
                           00FEDF   807 _PWMA_OISR	=	0xfedf
                           00FEE0   808 _PWMB_CR1	=	0xfee0
                           00FEE1   809 _PWMB_CR2	=	0xfee1
                           00FEE2   810 _PWMB_SMCR	=	0xfee2
                           00FEE3   811 _PWMB_ETR	=	0xfee3
                           00FEE4   812 _PWMB_IER	=	0xfee4
                           00FEE5   813 _PWMB_SR1	=	0xfee5
                           00FEE6   814 _PWMB_SR2	=	0xfee6
                           00FEE7   815 _PWMB_EGR	=	0xfee7
                           00FEE8   816 _PWMB_CCMR1	=	0xfee8
                           00FEE9   817 _PWMB_CCMR2	=	0xfee9
                           00FEEA   818 _PWMB_CCMR3	=	0xfeea
                           00FEEB   819 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   820 _PWMB_CCER1	=	0xfeec
                           00FEED   821 _PWMB_CCER2	=	0xfeed
                           00FEEE   822 _PWMB_CNTRH	=	0xfeee
                           00FEEF   823 _PWMB_CNTRL	=	0xfeef
                           00FEF0   824 _PWMB_PSCRH	=	0xfef0
                           00FEF1   825 _PWMB_PSCRL	=	0xfef1
                           00FEF2   826 _PWMB_ARRH	=	0xfef2
                           00FEF3   827 _PWMB_ARRL	=	0xfef3
                           00FEF4   828 _PWMB_RCR	=	0xfef4
                           00FEF5   829 _PWMB_CCR1H	=	0xfef5
                           00FEF6   830 _PWMB_CCR1L	=	0xfef6
                           00FEF7   831 _PWMB_CCR2H	=	0xfef7
                           00FEF8   832 _PWMB_CCR2L	=	0xfef8
                           00FEF9   833 _PWMB_CCR3H	=	0xfef9
                           00FEFA   834 _PWMB_CCR3L	=	0xfefa
                           00FEFB   835 _PWMB_CCR4H	=	0xfefb
                           00FEFC   836 _PWMB_CCR4L	=	0xfefc
                           00FEFD   837 _PWMB_BKR	=	0xfefd
                           00FEFE   838 _PWMB_DTR	=	0xfefe
                           00FEFF   839 _PWMB_OISR	=	0xfeff
                           00FE60   840 _RTCCR	=	0xfe60
                           00FE61   841 _RTCCFG	=	0xfe61
                           00FE62   842 _RTCIEN	=	0xfe62
                           00FE63   843 _RTCIF	=	0xfe63
                           00FE64   844 _ALAHOUR	=	0xfe64
                           00FE65   845 _ALAMIN	=	0xfe65
                           00FE66   846 _ALASEC	=	0xfe66
                           00FE67   847 _ALASSEC	=	0xfe67
                           00FE68   848 _INIYEAR	=	0xfe68
                           00FE69   849 _INIMONTH	=	0xfe69
                           00FE6A   850 _INIDAY	=	0xfe6a
                           00FE6B   851 _INIHOUR	=	0xfe6b
                           00FE6C   852 _INIMIN	=	0xfe6c
                           00FE6D   853 _INISEC	=	0xfe6d
                           00FE6E   854 _INISSEC	=	0xfe6e
                           00FE70   855 _YEAR	=	0xfe70
                           00FE71   856 _MONTH	=	0xfe71
                           00FE72   857 _DAY	=	0xfe72
                           00FE73   858 _HOUR	=	0xfe73
                           00FE74   859 _MIN	=	0xfe74
                           00FE75   860 _SEC	=	0xfe75
                           00FE76   861 _SSEC	=	0xfe76
                           00FA20   862 _DMA_SPI_CFG	=	0xfa20
                           00FA21   863 _DMA_SPI_CR	=	0xfa21
                           00FA22   864 _DMA_SPI_STA	=	0xfa22
                           00FA23   865 _DMA_SPI_AMT	=	0xfa23
                           00FA24   866 _DMA_SPI_DONE	=	0xfa24
                           00FA25   867 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   868 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   869 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   870 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   871 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   872 _CLKDIV	=	0xfe01
                           00FE02   873 _HIRCCR	=	0xfe02
                           00FE03   874 _XOSCCR	=	0xfe03
                           00FE04   875 _IRC32KCR	=	0xfe04
                           00FE00   876 _CKSEL	=	0xfe00
                           00FE05   877 _MCLKOCR	=	0xfe05
                           00FE06   878 _IRCDB	=	0xfe06
                           00FE07   879 _IRC48MCR	=	0xfe07
                           00FEA2   880 _TM2PS	=	0xfea2
                           00FEA3   881 _TM3PS	=	0xfea3
                           00FEA4   882 _TM4PS	=	0xfea4
                           00FA30   883 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   884 _DMA_UR1T_CR	=	0xfa31
                           00FA32   885 _DMA_UR1T_STA	=	0xfa32
                           00FA33   886 _DMA_URTX_AMT	=	0xfa33
                           00FA34   887 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   888 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   889 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   890 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   891 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   892 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   893 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   894 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   895 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   896 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   897 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   898 _DMA_UR2T_CR	=	0xfa31
                           00FA32   899 _DMA_UR2T_STA	=	0xfa32
                           00FA33   900 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   901 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   902 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   903 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   904 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   905 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   906 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   907 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   908 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   909 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   910 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   911 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   912 _DMA_UR3T_CR	=	0xfa31
                           00FA32   913 _DMA_UR3T_STA	=	0xfa32
                           00FA33   914 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   915 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   916 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   917 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   918 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   919 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   920 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   921 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   922 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   923 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   924 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   925 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   926 _DMA_UR4T_CR	=	0xfa31
                           00FA32   927 _DMA_UR4T_STA	=	0xfa32
                           00FA33   928 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   929 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   930 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   931 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   932 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   933 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   934 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   935 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   936 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   937 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   938 _DMA_UR4R_TXAL	=	0xfa3e
      0000A6                        939 _uartGetCharacter_result_10000_75:
      0000A6                        940 	.ds 1
      0000A7                        941 _SPI_command:
      0000A7                        942 	.ds 1
      0000A8                        943 _register_current_value:
      0000A8                        944 	.ds 1
      0000A9                        945 _register_new_value:
      0000A9                        946 	.ds 1
      0000AA                        947 _write_pointer:
      0000AA                        948 	.ds 1
      0000AB                        949 _current_address_width:
      0000AB                        950 	.ds 1
      0000AC                        951 _current_payload_width:
      0000AC                        952 	.ds 1
      0000AD                        953 _delay_function_duration_ms_10000_114:
      0000AD                        954 	.ds 4
      0000B1                        955 _nrf24_SPI_input_10000_120:
      0000B1                        956 	.ds 1
      0000B2                        957 _SPI_send_command_command_10000_122:
      0000B2                        958 	.ds 1
      0000B3                        959 _SPI_send_command_spi_byte_10000_123:
      0000B3                        960 	.ds 1
      0000B4                        961 _nrf24_CE_input_10000_124:
      0000B4                        962 	.ds 1
      0000B5                        963 _nrf24_dynamic_ack_state_10000_126:
      0000B5                        964 	.ds 1
      0000B6                        965 _nrf24_transmit_PARM_2:
      0000B6                        966 	.ds 1
      0000B7                        967 _nrf24_transmit_PARM_3:
      0000B7                        968 	.ds 1
      0000B8                        969 _nrf24_transmit_payload_10000_130:
      0000B8                        970 	.ds 3
      0000BB                        971 _nrf24_send_payload_PARM_2:
      0000BB                        972 	.ds 1
      0000BC                        973 _nrf24_send_payload_payload_10000_134:
      0000BC                        974 	.ds 3
      0000BF                        975 _nrf24_receive_PARM_2:
      0000BF                        976 	.ds 1
      0000C0                        977 _nrf24_receive_payload_10000_142:
      0000C0                        978 	.ds 3
      0000C3                        979 _nrf24_flush_fifo_select_10000_150:
      0000C3                        980 	.ds 1
      0000C4                        981 _nrf24_device_PARM_2:
      0000C4                        982 	.ds 1
      0000C5                        983 _nrf24_device_device_mode_10000_157:
      0000C5                        984 	.ds 1
      0000C6                        985 _nrf24_device_hardwareCheckPassed_10001_159:
      0000C6                        986 	.ds 1
      0000C7                        987 _nrf24_device_new_value_10001_159:
      0000C7                        988 	.ds 1
      0000C8                        989 _nrf24_automatic_retransmit_setup_PARM_2:
      0000C8                        990 	.ds 1
      0000C9                        991 _nrf24_automatic_retransmit_setup_delay_time_10000_165:
      0000C9                        992 	.ds 2
      0000CB                        993 _nrf24_auto_acknowledgment_setup_datapipe_10000_168:
      0000CB                        994 	.ds 1
      0000CC                        995 _nrf24_dynamic_payload_PARM_2:
      0000CC                        996 	.ds 1
      0000CD                        997 _nrf24_dynamic_payload_state_10000_170:
      0000CD                        998 	.ds 1
      0000CE                        999 _nrf24_datapipe_ptx_datapipe_number_10000_174:
      0000CE                       1000 	.ds 1
      0000CF                       1001 _nrf24_prx_static_payload_width_PARM_2:
      0000CF                       1002 	.ds 1
      0000D0                       1003 _nrf24_prx_static_payload_width_static_payload_width_10000_180:
      0000D0                       1004 	.ds 1
      0000D1                       1005 _nrf24_datapipe_enable_number_of_datapipes_10000_184:
      0000D1                       1006 	.ds 1
      0000D2                       1007 _nrf24_address_width_address_width_10000_186:
      0000D2                       1008 	.ds 1
      0000D3                       1009 _nrf24_rf_datarate_rf_datarate_10000_190:
      0000D3                       1010 	.ds 2
      0000D5                       1011 _nrf24_rf_power_rf_power_10000_193:
      0000D5                       1012 	.ds 1
      0000D6                       1013 _nrf24_rf_channel_rf_channel_10000_196:
      0000D6                       1014 	.ds 1
      0000D7                       1015 _nrf24_rf_channel_write_pointer_20000_198:
      0000D7                       1016 	.ds 1
      0000D8                       1017 _nrf24_rf_channel_write_pointer_20000_199:
      0000D8                       1018 	.ds 1
      0000D9                       1019 _nrf24_interrupt_mask_PARM_2:
      0000D9                       1020 	.ds 1
      0000DA                       1021 _nrf24_interrupt_mask_PARM_3:
      0000DA                       1022 	.ds 1
      0000DB                       1023 _nrf24_interrupt_mask_rx_mask_10000_200:
      0000DB                       1024 	.ds 1
      0000DC                       1025 _nrf24_crc_configuration_PARM_2:
      0000DC                       1026 	.ds 1
      0000DD                       1027 _nrf24_crc_configuration_crc_enable_10000_202:
      0000DD                       1028 	.ds 1
      0000DE                       1029 _nrf24_mode_mode_10000_204:
      0000DE                       1030 	.ds 1
      0000DF                       1031 _nrf24_read_PARM_2:
      0000DF                       1032 	.ds 3
      0000E2                       1033 _nrf24_read_PARM_3:
      0000E2                       1034 	.ds 1
      0000E3                       1035 _nrf24_read_PARM_4:
      0000E3                       1036 	.ds 1
      0000E4                       1037 _nrf24_read_address_10000_207:
      0000E4                       1038 	.ds 1
      0000E5                       1039 _nrf24_write_PARM_2:
      0000E5                       1040 	.ds 3
      0000E8                       1041 _nrf24_write_PARM_3:
      0000E8                       1042 	.ds 1
      0000E9                       1043 _nrf24_write_PARM_4:
      0000E9                       1044 	.ds 1
      0000EA                       1045 _nrf24_write_address_10000_211:
      0000EA                       1046 	.ds 1
                                   1047 ;--------------------------------------------------------
                                   1048 ; absolute external ram data
                                   1049 ;--------------------------------------------------------
                                   1050 	.area XABS    (ABS,XDATA)
                                   1051 ;--------------------------------------------------------
                                   1052 ; initialized external ram data
                                   1053 ;--------------------------------------------------------
                                   1054 	.area XISEG   (XDATA)
      000157                       1055 _dataReady::
      000157                       1056 	.ds 1
      000158                       1057 _CSN_pin::
      000158                       1058 	.ds 13
      000165                       1059 _CE_pin::
      000165                       1060 	.ds 13
      000172                       1061 _reset_flag:
      000172                       1062 	.ds 1
      000173                       1063 _current_mode:
      000173                       1064 	.ds 1
      000174                       1065 _current_acknowledgement_state:
      000174                       1066 	.ds 1
      000175                       1067 _dynamic_payload:
      000175                       1068 	.ds 1
      000176                       1069 _datapipe_address::
      000176                       1070 	.ds 30
                                   1071 	.area HOME    (CODE)
                                   1072 	.area GSINIT0 (CODE)
                                   1073 	.area GSINIT1 (CODE)
                                   1074 	.area GSINIT2 (CODE)
                                   1075 	.area GSINIT3 (CODE)
                                   1076 	.area GSINIT4 (CODE)
                                   1077 	.area GSINIT5 (CODE)
                                   1078 	.area GSINIT  (CODE)
                                   1079 	.area GSFINAL (CODE)
                                   1080 	.area CSEG    (CODE)
                                   1081 ;--------------------------------------------------------
                                   1082 ; global & static initialisations
                                   1083 ;--------------------------------------------------------
                                   1084 	.area HOME    (CODE)
                                   1085 	.area GSINIT  (CODE)
                                   1086 	.area GSFINAL (CODE)
                                   1087 	.area GSINIT  (CODE)
                                   1088 ;--------------------------------------------------------
                                   1089 ; Home
                                   1090 ;--------------------------------------------------------
                                   1091 	.area HOME    (CODE)
                                   1092 	.area HOME    (CODE)
                                   1093 ;--------------------------------------------------------
                                   1094 ; code
                                   1095 ;--------------------------------------------------------
                                   1096 	.area CSEG    (CODE)
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'delay_function'
                                   1099 ;------------------------------------------------------------
                                   1100 ;duration_ms               Allocated with name '_delay_function_duration_ms_10000_114'
                                   1101 ;------------------------------------------------------------
                                   1102 ;	nrf24l01.c:66: void delay_function(uint32_t duration_ms)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function delay_function
                                   1105 ;	-----------------------------------------
      001BFB                       1106 _delay_function:
                           000007  1107 	ar7 = 0x07
                           000006  1108 	ar6 = 0x06
                           000005  1109 	ar5 = 0x05
                           000004  1110 	ar4 = 0x04
                           000003  1111 	ar3 = 0x03
                           000002  1112 	ar2 = 0x02
                           000001  1113 	ar1 = 0x01
                           000000  1114 	ar0 = 0x00
      001BFB AF 82            [24] 1115 	mov	r7,dpl
      001BFD AE 83            [24] 1116 	mov	r6,dph
      001BFF AD F0            [24] 1117 	mov	r5,b
      001C01 FC               [12] 1118 	mov	r4,a
      001C02 90 00 AD         [24] 1119 	mov	dptr,#_delay_function_duration_ms_10000_114
      001C05 EF               [12] 1120 	mov	a,r7
      001C06 F0               [24] 1121 	movx	@dptr,a
      001C07 EE               [12] 1122 	mov	a,r6
      001C08 A3               [24] 1123 	inc	dptr
      001C09 F0               [24] 1124 	movx	@dptr,a
      001C0A ED               [12] 1125 	mov	a,r5
      001C0B A3               [24] 1126 	inc	dptr
      001C0C F0               [24] 1127 	movx	@dptr,a
      001C0D EC               [12] 1128 	mov	a,r4
      001C0E A3               [24] 1129 	inc	dptr
      001C0F F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	nrf24l01.c:68: delay1ms(duration_ms);
      001C10 90 00 AD         [24] 1132 	mov	dptr,#_delay_function_duration_ms_10000_114
      001C13 E0               [24] 1133 	movx	a,@dptr
      001C14 FC               [12] 1134 	mov	r4,a
      001C15 A3               [24] 1135 	inc	dptr
      001C16 E0               [24] 1136 	movx	a,@dptr
      001C17 FD               [12] 1137 	mov	r5,a
      001C18 A3               [24] 1138 	inc	dptr
      001C19 E0               [24] 1139 	movx	a,@dptr
      001C1A A3               [24] 1140 	inc	dptr
      001C1B E0               [24] 1141 	movx	a,@dptr
      001C1C 8C 82            [24] 1142 	mov	dpl, r4
      001C1E 8D 83            [24] 1143 	mov	dph, r5
                                   1144 ;	nrf24l01.c:69: }
      001C20 02 00 E8         [24] 1145 	ljmp	_delay1ms
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'SPI_Initializer'
                                   1148 ;------------------------------------------------------------
                                   1149 ;	nrf24l01.c:73: void SPI_Initializer(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function SPI_Initializer
                                   1152 ;	-----------------------------------------
      001C23                       1153 _SPI_Initializer:
                                   1154 ;	nrf24l01.c:79: spiSelectSpeed(SPI_SPEED), 
      001C23 90 09 00         [24] 1155 	mov	dptr,#0x0900
      001C26 75 F0 3D         [24] 1156 	mov	b, #0x3d
      001C29 E4               [12] 1157 	clr	a
      001C2A 12 03 4E         [24] 1158 	lcall	_spiSelectSpeed
      001C2D AF 82            [24] 1159 	mov	r7, dpl
                                   1160 ;	nrf24l01.c:81: GPIO_BIDIRECTIONAL_MODE
      001C2F 90 00 2D         [24] 1161 	mov	dptr,#_spiConfigure_PARM_2
      001C32 E4               [12] 1162 	clr	a
      001C33 F0               [24] 1163 	movx	@dptr,a
      001C34 90 00 2E         [24] 1164 	mov	dptr,#_spiConfigure_PARM_3
      001C37 EF               [12] 1165 	mov	a,r7
      001C38 F0               [24] 1166 	movx	@dptr,a
      001C39 90 00 2F         [24] 1167 	mov	dptr,#_spiConfigure_PARM_4
      001C3C E4               [12] 1168 	clr	a
      001C3D F0               [24] 1169 	movx	@dptr,a
      001C3E 90 00 30         [24] 1170 	mov	dptr,#_spiConfigure_PARM_5
      001C41 F0               [24] 1171 	movx	@dptr,a
      001C42 75 82 20         [24] 1172 	mov	dpl, #0x20
                                   1173 ;	nrf24l01.c:84: }
      001C45 02 04 7B         [24] 1174 	ljmp	_spiConfigure
                                   1175 ;------------------------------------------------------------
                                   1176 ;Allocation info for local variables in function 'pinout_Initializer'
                                   1177 ;------------------------------------------------------------
                                   1178 ;	nrf24l01.c:87: void pinout_Initializer(void)
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function pinout_Initializer
                                   1181 ;	-----------------------------------------
      001C48                       1182 _pinout_Initializer:
                                   1183 ;	nrf24l01.c:90: gpioConfigure(&CSN_pin);
      001C48 90 01 58         [24] 1184 	mov	dptr,#_CSN_pin
      001C4B 75 F0 00         [24] 1185 	mov	b, #0x00
      001C4E 12 0F 41         [24] 1186 	lcall	_gpioConfigure
                                   1187 ;	nrf24l01.c:91: gpioConfigure(&CE_pin);
      001C51 90 01 65         [24] 1188 	mov	dptr,#_CE_pin
      001C54 75 F0 00         [24] 1189 	mov	b, #0x00
      001C57 12 0F 41         [24] 1190 	lcall	_gpioConfigure
                                   1191 ;	nrf24l01.c:93: gpioWrite(&CSN_pin, 0);
      001C5A 90 00 97         [24] 1192 	mov	dptr,#_gpioWrite_PARM_2
      001C5D E4               [12] 1193 	clr	a
      001C5E F0               [24] 1194 	movx	@dptr,a
      001C5F 90 01 58         [24] 1195 	mov	dptr,#_CSN_pin
      001C62 F5 F0            [12] 1196 	mov	b,a
      001C64 12 17 3F         [24] 1197 	lcall	_gpioWrite
                                   1198 ;	nrf24l01.c:94: gpioWrite(&CE_pin, 1);
      001C67 90 00 97         [24] 1199 	mov	dptr,#_gpioWrite_PARM_2
      001C6A 74 01            [12] 1200 	mov	a,#0x01
      001C6C F0               [24] 1201 	movx	@dptr,a
      001C6D 90 01 65         [24] 1202 	mov	dptr,#_CE_pin
      001C70 75 F0 00         [24] 1203 	mov	b, #0x00
                                   1204 ;	nrf24l01.c:96: }
      001C73 02 17 3F         [24] 1205 	ljmp	_gpioWrite
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'nrf24_SPI'
                                   1208 ;------------------------------------------------------------
                                   1209 ;input                     Allocated with name '_nrf24_SPI_input_10000_120'
                                   1210 ;------------------------------------------------------------
                                   1211 ;	nrf24l01.c:99: void nrf24_SPI(uint8_t input)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function nrf24_SPI
                                   1214 ;	-----------------------------------------
      001C76                       1215 _nrf24_SPI:
      001C76 E5 82            [12] 1216 	mov	a,dpl
      001C78 90 00 B1         [24] 1217 	mov	dptr,#_nrf24_SPI_input_10000_120
      001C7B F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	nrf24l01.c:101: gpioWrite(&CSN_pin, input);
      001C7C E0               [24] 1220 	movx	a,@dptr
      001C7D 90 00 97         [24] 1221 	mov	dptr,#_gpioWrite_PARM_2
      001C80 F0               [24] 1222 	movx	@dptr,a
      001C81 90 01 58         [24] 1223 	mov	dptr,#_CSN_pin
      001C84 75 F0 00         [24] 1224 	mov	b, #0x00
                                   1225 ;	nrf24l01.c:102: }
      001C87 02 17 3F         [24] 1226 	ljmp	_gpioWrite
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'SPI_send_command'
                                   1229 ;------------------------------------------------------------
                                   1230 ;command                   Allocated with name '_SPI_send_command_command_10000_122'
                                   1231 ;spi_byte                  Allocated with name '_SPI_send_command_spi_byte_10000_123'
                                   1232 ;------------------------------------------------------------
                                   1233 ;	nrf24l01.c:105: uint8_t SPI_send_command(uint8_t command)
                                   1234 ;	-----------------------------------------
                                   1235 ;	 function SPI_send_command
                                   1236 ;	-----------------------------------------
      001C8A                       1237 _SPI_send_command:
      001C8A E5 82            [12] 1238 	mov	a,dpl
      001C8C 90 00 B2         [24] 1239 	mov	dptr,#_SPI_send_command_command_10000_122
      001C8F F0               [24] 1240 	movx	@dptr,a
                                   1241 ;	nrf24l01.c:107: uint8_t spi_byte = bitReverseTable256[command];
      001C90 E0               [24] 1242 	movx	a,@dptr
      001C91 90 3A CF         [24] 1243 	mov	dptr,#_bitReverseTable256
      001C94 93               [24] 1244 	movc	a,@a+dptr
      001C95 90 00 B3         [24] 1245 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      001C98 F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	nrf24l01.c:109: spiSend(&spi_byte, 1, &dataReady);
      001C99 90 00 32         [24] 1248 	mov	dptr,#_spiSend_PARM_2
      001C9C 74 01            [12] 1249 	mov	a,#0x01
      001C9E F0               [24] 1250 	movx	@dptr,a
      001C9F E4               [12] 1251 	clr	a
      001CA0 A3               [24] 1252 	inc	dptr
      001CA1 F0               [24] 1253 	movx	@dptr,a
      001CA2 90 00 34         [24] 1254 	mov	dptr,#_spiSend_PARM_3
      001CA5 74 57            [12] 1255 	mov	a,#_dataReady
      001CA7 F0               [24] 1256 	movx	@dptr,a
      001CA8 74 01            [12] 1257 	mov	a,#(_dataReady >> 8)
      001CAA A3               [24] 1258 	inc	dptr
      001CAB F0               [24] 1259 	movx	@dptr,a
      001CAC E4               [12] 1260 	clr	a
      001CAD A3               [24] 1261 	inc	dptr
      001CAE F0               [24] 1262 	movx	@dptr,a
      001CAF 90 00 B3         [24] 1263 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      001CB2 F5 F0            [12] 1264 	mov	b,a
      001CB4 12 04 AB         [24] 1265 	lcall	_spiSend
                                   1266 ;	nrf24l01.c:112: while(!dataReady);
      001CB7                       1267 00101$:
      001CB7 90 01 57         [24] 1268 	mov	dptr,#_dataReady
      001CBA E0               [24] 1269 	movx	a,@dptr
      001CBB 60 FA            [24] 1270 	jz	00101$
                                   1271 ;	nrf24l01.c:114: return bitReverseTable256[spi_byte];
      001CBD 90 00 B3         [24] 1272 	mov	dptr,#_SPI_send_command_spi_byte_10000_123
      001CC0 E0               [24] 1273 	movx	a,@dptr
      001CC1 90 3A CF         [24] 1274 	mov	dptr,#_bitReverseTable256
      001CC4 93               [24] 1275 	movc	a,@a+dptr
                                   1276 ;	nrf24l01.c:116: }
      001CC5 F5 82            [12] 1277 	mov	dpl,a
      001CC7 22               [24] 1278 	ret
                                   1279 ;------------------------------------------------------------
                                   1280 ;Allocation info for local variables in function 'nrf24_CE'
                                   1281 ;------------------------------------------------------------
                                   1282 ;input                     Allocated with name '_nrf24_CE_input_10000_124'
                                   1283 ;------------------------------------------------------------
                                   1284 ;	nrf24l01.c:119: void nrf24_CE(uint8_t input)
                                   1285 ;	-----------------------------------------
                                   1286 ;	 function nrf24_CE
                                   1287 ;	-----------------------------------------
      001CC8                       1288 _nrf24_CE:
      001CC8 E5 82            [12] 1289 	mov	a,dpl
      001CCA 90 00 B4         [24] 1290 	mov	dptr,#_nrf24_CE_input_10000_124
      001CCD F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	nrf24l01.c:121: gpioWrite(&CE_pin, input);
      001CCE E0               [24] 1293 	movx	a,@dptr
      001CCF 90 00 97         [24] 1294 	mov	dptr,#_gpioWrite_PARM_2
      001CD2 F0               [24] 1295 	movx	@dptr,a
      001CD3 90 01 65         [24] 1296 	mov	dptr,#_CE_pin
      001CD6 75 F0 00         [24] 1297 	mov	b, #0x00
                                   1298 ;	nrf24l01.c:122: }
      001CD9 02 17 3F         [24] 1299 	ljmp	_gpioWrite
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'nrf24_dynamic_ack'
                                   1302 ;------------------------------------------------------------
                                   1303 ;state                     Allocated with name '_nrf24_dynamic_ack_state_10000_126'
                                   1304 ;------------------------------------------------------------
                                   1305 ;	nrf24l01.c:128: void nrf24_dynamic_ack(uint8_t state)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function nrf24_dynamic_ack
                                   1308 ;	-----------------------------------------
      001CDC                       1309 _nrf24_dynamic_ack:
      001CDC E5 82            [12] 1310 	mov	a,dpl
      001CDE 90 00 B5         [24] 1311 	mov	dptr,#_nrf24_dynamic_ack_state_10000_126
      001CE1 F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	nrf24l01.c:130: if (state == ENABLE)
      001CE2 E0               [24] 1314 	movx	a,@dptr
      001CE3 FF               [12] 1315 	mov	r7,a
      001CE4 BF 01 44         [24] 1316 	cjne	r7,#0x01,00102$
                                   1317 ;	nrf24l01.c:132: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      001CE7 90 00 DF         [24] 1318 	mov	dptr,#_nrf24_read_PARM_2
      001CEA 74 A8            [12] 1319 	mov	a,#_register_current_value
      001CEC F0               [24] 1320 	movx	@dptr,a
      001CED 74 00            [12] 1321 	mov	a,#(_register_current_value >> 8)
      001CEF A3               [24] 1322 	inc	dptr
      001CF0 F0               [24] 1323 	movx	@dptr,a
      001CF1 E4               [12] 1324 	clr	a
      001CF2 A3               [24] 1325 	inc	dptr
      001CF3 F0               [24] 1326 	movx	@dptr,a
      001CF4 90 00 E2         [24] 1327 	mov	dptr,#_nrf24_read_PARM_3
      001CF7 04               [12] 1328 	inc	a
      001CF8 F0               [24] 1329 	movx	@dptr,a
      001CF9 90 00 E3         [24] 1330 	mov	dptr,#_nrf24_read_PARM_4
      001CFC E4               [12] 1331 	clr	a
      001CFD F0               [24] 1332 	movx	@dptr,a
      001CFE 75 82 1D         [24] 1333 	mov	dpl, #0x1d
      001D01 12 2B 0B         [24] 1334 	lcall	_nrf24_read
                                   1335 ;	nrf24l01.c:133: register_new_value = register_current_value | (1 << EN_DYN_ACK);
      001D04 90 00 A8         [24] 1336 	mov	dptr,#_register_current_value
      001D07 E0               [24] 1337 	movx	a,@dptr
      001D08 90 00 A9         [24] 1338 	mov	dptr,#_register_new_value
      001D0B 44 01            [12] 1339 	orl	a,#0x01
      001D0D F0               [24] 1340 	movx	@dptr,a
                                   1341 ;	nrf24l01.c:134: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      001D0E 90 00 E5         [24] 1342 	mov	dptr,#_nrf24_write_PARM_2
      001D11 74 A9            [12] 1343 	mov	a,#_register_new_value
      001D13 F0               [24] 1344 	movx	@dptr,a
      001D14 74 00            [12] 1345 	mov	a,#(_register_new_value >> 8)
      001D16 A3               [24] 1346 	inc	dptr
      001D17 F0               [24] 1347 	movx	@dptr,a
      001D18 E4               [12] 1348 	clr	a
      001D19 A3               [24] 1349 	inc	dptr
      001D1A F0               [24] 1350 	movx	@dptr,a
      001D1B 90 00 E8         [24] 1351 	mov	dptr,#_nrf24_write_PARM_3
      001D1E 04               [12] 1352 	inc	a
      001D1F F0               [24] 1353 	movx	@dptr,a
      001D20 90 00 E9         [24] 1354 	mov	dptr,#_nrf24_write_PARM_4
      001D23 E4               [12] 1355 	clr	a
      001D24 F0               [24] 1356 	movx	@dptr,a
      001D25 75 82 1D         [24] 1357 	mov	dpl, #0x1d
      001D28 02 2B 77         [24] 1358 	ljmp	_nrf24_write
      001D2B                       1359 00102$:
                                   1360 ;	nrf24l01.c:138: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      001D2B 90 00 DF         [24] 1361 	mov	dptr,#_nrf24_read_PARM_2
      001D2E 74 A8            [12] 1362 	mov	a,#_register_current_value
      001D30 F0               [24] 1363 	movx	@dptr,a
      001D31 74 00            [12] 1364 	mov	a,#(_register_current_value >> 8)
      001D33 A3               [24] 1365 	inc	dptr
      001D34 F0               [24] 1366 	movx	@dptr,a
      001D35 E4               [12] 1367 	clr	a
      001D36 A3               [24] 1368 	inc	dptr
      001D37 F0               [24] 1369 	movx	@dptr,a
      001D38 90 00 E2         [24] 1370 	mov	dptr,#_nrf24_read_PARM_3
      001D3B 04               [12] 1371 	inc	a
      001D3C F0               [24] 1372 	movx	@dptr,a
      001D3D 90 00 E3         [24] 1373 	mov	dptr,#_nrf24_read_PARM_4
      001D40 E4               [12] 1374 	clr	a
      001D41 F0               [24] 1375 	movx	@dptr,a
      001D42 75 82 1D         [24] 1376 	mov	dpl, #0x1d
      001D45 12 2B 0B         [24] 1377 	lcall	_nrf24_read
                                   1378 ;	nrf24l01.c:139: register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
      001D48 90 00 A8         [24] 1379 	mov	dptr,#_register_current_value
      001D4B E0               [24] 1380 	movx	a,@dptr
      001D4C 90 00 A9         [24] 1381 	mov	dptr,#_register_new_value
      001D4F 54 FE            [12] 1382 	anl	a,#0xfe
      001D51 F0               [24] 1383 	movx	@dptr,a
                                   1384 ;	nrf24l01.c:140: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      001D52 90 00 E5         [24] 1385 	mov	dptr,#_nrf24_write_PARM_2
      001D55 74 A9            [12] 1386 	mov	a,#_register_new_value
      001D57 F0               [24] 1387 	movx	@dptr,a
      001D58 74 00            [12] 1388 	mov	a,#(_register_new_value >> 8)
      001D5A A3               [24] 1389 	inc	dptr
      001D5B F0               [24] 1390 	movx	@dptr,a
      001D5C E4               [12] 1391 	clr	a
      001D5D A3               [24] 1392 	inc	dptr
      001D5E F0               [24] 1393 	movx	@dptr,a
      001D5F 90 00 E8         [24] 1394 	mov	dptr,#_nrf24_write_PARM_3
      001D62 04               [12] 1395 	inc	a
      001D63 F0               [24] 1396 	movx	@dptr,a
      001D64 90 00 E9         [24] 1397 	mov	dptr,#_nrf24_write_PARM_4
      001D67 E4               [12] 1398 	clr	a
      001D68 F0               [24] 1399 	movx	@dptr,a
      001D69 75 82 1D         [24] 1400 	mov	dpl, #0x1d
                                   1401 ;	nrf24l01.c:142: }
      001D6C 02 2B 77         [24] 1402 	ljmp	_nrf24_write
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'nrf24_transmit'
                                   1405 ;------------------------------------------------------------
                                   1406 ;payload_width             Allocated with name '_nrf24_transmit_PARM_2'
                                   1407 ;acknowledgement_state     Allocated with name '_nrf24_transmit_PARM_3'
                                   1408 ;payload                   Allocated with name '_nrf24_transmit_payload_10000_130'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	nrf24l01.c:146: uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function nrf24_transmit
                                   1413 ;	-----------------------------------------
      001D6F                       1414 _nrf24_transmit:
      001D6F AF F0            [24] 1415 	mov	r7,b
      001D71 AE 83            [24] 1416 	mov	r6,dph
      001D73 E5 82            [12] 1417 	mov	a,dpl
      001D75 90 00 B8         [24] 1418 	mov	dptr,#_nrf24_transmit_payload_10000_130
      001D78 F0               [24] 1419 	movx	@dptr,a
      001D79 EE               [12] 1420 	mov	a,r6
      001D7A A3               [24] 1421 	inc	dptr
      001D7B F0               [24] 1422 	movx	@dptr,a
      001D7C EF               [12] 1423 	mov	a,r7
      001D7D A3               [24] 1424 	inc	dptr
      001D7E F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	nrf24l01.c:148: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
      001D7F 90 00 DF         [24] 1427 	mov	dptr,#_nrf24_read_PARM_2
      001D82 74 A8            [12] 1428 	mov	a,#_register_current_value
      001D84 F0               [24] 1429 	movx	@dptr,a
      001D85 74 00            [12] 1430 	mov	a,#(_register_current_value >> 8)
      001D87 A3               [24] 1431 	inc	dptr
      001D88 F0               [24] 1432 	movx	@dptr,a
      001D89 E4               [12] 1433 	clr	a
      001D8A A3               [24] 1434 	inc	dptr
      001D8B F0               [24] 1435 	movx	@dptr,a
      001D8C 90 00 E2         [24] 1436 	mov	dptr,#_nrf24_read_PARM_3
      001D8F 04               [12] 1437 	inc	a
      001D90 F0               [24] 1438 	movx	@dptr,a
      001D91 90 00 E3         [24] 1439 	mov	dptr,#_nrf24_read_PARM_4
      001D94 E4               [12] 1440 	clr	a
      001D95 F0               [24] 1441 	movx	@dptr,a
      001D96 75 82 07         [24] 1442 	mov	dpl, #0x07
      001D99 12 2B 0B         [24] 1443 	lcall	_nrf24_read
                                   1444 ;	nrf24l01.c:149: if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
      001D9C 90 00 A8         [24] 1445 	mov	dptr,#_register_current_value
      001D9F E0               [24] 1446 	movx	a,@dptr
      001DA0 20 E5 40         [24] 1447 	jb	acc.5,00104$
      001DA3 90 01 73         [24] 1448 	mov	dptr,#_current_mode
      001DA6 E0               [24] 1449 	movx	a,@dptr
      001DA7 FF               [12] 1450 	mov	r7,a
      001DA8 BF 03 38         [24] 1451 	cjne	r7,#0x03,00104$
                                   1452 ;	nrf24l01.c:151: current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
      001DAB 90 00 B7         [24] 1453 	mov	dptr,#_nrf24_transmit_PARM_3
      001DAE E0               [24] 1454 	movx	a,@dptr
      001DAF 90 01 74         [24] 1455 	mov	dptr,#_current_acknowledgement_state
      001DB2 F0               [24] 1456 	movx	@dptr,a
                                   1457 ;	nrf24l01.c:152: if (dynamic_payload == ENABLE)
      001DB3 90 01 75         [24] 1458 	mov	dptr,#_dynamic_payload
      001DB6 E0               [24] 1459 	movx	a,@dptr
      001DB7 FF               [12] 1460 	mov	r7,a
      001DB8 BF 01 08         [24] 1461 	cjne	r7,#0x01,00102$
                                   1462 ;	nrf24l01.c:153: payload_width = current_payload_width;
      001DBB 90 00 AC         [24] 1463 	mov	dptr,#_current_payload_width
      001DBE E0               [24] 1464 	movx	a,@dptr
      001DBF 90 00 B6         [24] 1465 	mov	dptr,#_nrf24_transmit_PARM_2
      001DC2 F0               [24] 1466 	movx	@dptr,a
      001DC3                       1467 00102$:
                                   1468 ;	nrf24l01.c:154: nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
      001DC3 90 00 B8         [24] 1469 	mov	dptr,#_nrf24_transmit_payload_10000_130
      001DC6 E0               [24] 1470 	movx	a,@dptr
      001DC7 FD               [12] 1471 	mov	r5,a
      001DC8 A3               [24] 1472 	inc	dptr
      001DC9 E0               [24] 1473 	movx	a,@dptr
      001DCA FE               [12] 1474 	mov	r6,a
      001DCB A3               [24] 1475 	inc	dptr
      001DCC E0               [24] 1476 	movx	a,@dptr
      001DCD FF               [12] 1477 	mov	r7,a
      001DCE 90 00 B6         [24] 1478 	mov	dptr,#_nrf24_transmit_PARM_2
      001DD1 E0               [24] 1479 	movx	a,@dptr
      001DD2 90 00 BB         [24] 1480 	mov	dptr,#_nrf24_send_payload_PARM_2
      001DD5 F0               [24] 1481 	movx	@dptr,a
      001DD6 8D 82            [24] 1482 	mov	dpl, r5
      001DD8 8E 83            [24] 1483 	mov	dph, r6
      001DDA 8F F0            [24] 1484 	mov	b, r7
      001DDC 12 1D E7         [24] 1485 	lcall	_nrf24_send_payload
                                   1486 ;	nrf24l01.c:155: return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
      001DDF 75 82 01         [24] 1487 	mov	dpl, #0x01
      001DE2 22               [24] 1488 	ret
      001DE3                       1489 00104$:
                                   1490 ;	nrf24l01.c:159: return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
      001DE3 75 82 00         [24] 1491 	mov	dpl, #0x00
                                   1492 ;	nrf24l01.c:161: }
      001DE6 22               [24] 1493 	ret
                                   1494 ;------------------------------------------------------------
                                   1495 ;Allocation info for local variables in function 'nrf24_send_payload'
                                   1496 ;------------------------------------------------------------
                                   1497 ;payload_width             Allocated with name '_nrf24_send_payload_PARM_2'
                                   1498 ;payload                   Allocated with name '_nrf24_send_payload_payload_10000_134'
                                   1499 ;------------------------------------------------------------
                                   1500 ;	nrf24l01.c:164: void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
                                   1501 ;	-----------------------------------------
                                   1502 ;	 function nrf24_send_payload
                                   1503 ;	-----------------------------------------
      001DE7                       1504 _nrf24_send_payload:
      001DE7 AF F0            [24] 1505 	mov	r7,b
      001DE9 AE 83            [24] 1506 	mov	r6,dph
      001DEB E5 82            [12] 1507 	mov	a,dpl
      001DED 90 00 BC         [24] 1508 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      001DF0 F0               [24] 1509 	movx	@dptr,a
      001DF1 EE               [12] 1510 	mov	a,r6
      001DF2 A3               [24] 1511 	inc	dptr
      001DF3 F0               [24] 1512 	movx	@dptr,a
      001DF4 EF               [12] 1513 	mov	a,r7
      001DF5 A3               [24] 1514 	inc	dptr
      001DF6 F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	nrf24l01.c:166: nrf24_SPI(SPI_ON);
      001DF7 75 82 00         [24] 1517 	mov	dpl, #0x00
      001DFA 12 1C 76         [24] 1518 	lcall	_nrf24_SPI
                                   1519 ;	nrf24l01.c:167: if (current_acknowledgement_state == NO_ACK_MODE)
      001DFD 90 01 74         [24] 1520 	mov	dptr,#_current_acknowledgement_state
      001E00 E0               [24] 1521 	movx	a,@dptr
      001E01 FF               [12] 1522 	mov	r7,a
      001E02 BF 01 08         [24] 1523 	cjne	r7,#0x01,00102$
                                   1524 ;	nrf24l01.c:168: SPI_command = W_TX_PAYLOAD_NOACK;
      001E05 90 00 A7         [24] 1525 	mov	dptr,#_SPI_command
      001E08 74 B0            [12] 1526 	mov	a,#0xb0
      001E0A F0               [24] 1527 	movx	@dptr,a
      001E0B 80 06            [24] 1528 	sjmp	00103$
      001E0D                       1529 00102$:
                                   1530 ;	nrf24l01.c:170: SPI_command = W_TX_PAYLOAD;
      001E0D 90 00 A7         [24] 1531 	mov	dptr,#_SPI_command
      001E10 74 A0            [12] 1532 	mov	a,#0xa0
      001E12 F0               [24] 1533 	movx	@dptr,a
      001E13                       1534 00103$:
                                   1535 ;	nrf24l01.c:171: SPI_send_command(SPI_command);
      001E13 90 00 A7         [24] 1536 	mov	dptr,#_SPI_command
      001E16 E0               [24] 1537 	movx	a,@dptr
      001E17 F5 82            [12] 1538 	mov	dpl,a
      001E19 12 1C 8A         [24] 1539 	lcall	_SPI_send_command
      001E1C 90 00 BC         [24] 1540 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      001E1F E0               [24] 1541 	movx	a,@dptr
      001E20 FD               [12] 1542 	mov	r5,a
      001E21 A3               [24] 1543 	inc	dptr
      001E22 E0               [24] 1544 	movx	a,@dptr
      001E23 FE               [12] 1545 	mov	r6,a
      001E24 A3               [24] 1546 	inc	dptr
      001E25 E0               [24] 1547 	movx	a,@dptr
      001E26 FF               [12] 1548 	mov	r7,a
      001E27 90 00 BB         [24] 1549 	mov	dptr,#_nrf24_send_payload_PARM_2
      001E2A E0               [24] 1550 	movx	a,@dptr
      001E2B FC               [12] 1551 	mov	r4,a
      001E2C                       1552 00106$:
                                   1553 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      001E2C EC               [12] 1554 	mov	a,r4
      001E2D 60 37            [24] 1555 	jz	00113$
                                   1556 ;	nrf24l01.c:174: SPI_command = *payload;
      001E2F 8D 82            [24] 1557 	mov	dpl,r5
      001E31 8E 83            [24] 1558 	mov	dph,r6
      001E33 8F F0            [24] 1559 	mov	b,r7
      001E35 12 3A A0         [24] 1560 	lcall	__gptrget
      001E38 FB               [12] 1561 	mov	r3,a
      001E39 A3               [24] 1562 	inc	dptr
      001E3A AD 82            [24] 1563 	mov	r5,dpl
      001E3C AE 83            [24] 1564 	mov	r6,dph
      001E3E 90 00 A7         [24] 1565 	mov	dptr,#_SPI_command
      001E41 EB               [12] 1566 	mov	a,r3
      001E42 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	nrf24l01.c:175: SPI_send_command(SPI_command);
      001E43 8B 82            [24] 1569 	mov	dpl, r3
      001E45 C0 07            [24] 1570 	push	ar7
      001E47 C0 06            [24] 1571 	push	ar6
      001E49 C0 05            [24] 1572 	push	ar5
      001E4B C0 04            [24] 1573 	push	ar4
      001E4D 12 1C 8A         [24] 1574 	lcall	_SPI_send_command
      001E50 D0 04            [24] 1575 	pop	ar4
      001E52 D0 05            [24] 1576 	pop	ar5
      001E54 D0 06            [24] 1577 	pop	ar6
      001E56 D0 07            [24] 1578 	pop	ar7
                                   1579 ;	nrf24l01.c:176: payload++;
      001E58 90 00 BC         [24] 1580 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      001E5B ED               [12] 1581 	mov	a,r5
      001E5C F0               [24] 1582 	movx	@dptr,a
      001E5D EE               [12] 1583 	mov	a,r6
      001E5E A3               [24] 1584 	inc	dptr
      001E5F F0               [24] 1585 	movx	@dptr,a
      001E60 EF               [12] 1586 	mov	a,r7
      001E61 A3               [24] 1587 	inc	dptr
      001E62 F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      001E63 1C               [12] 1590 	dec	r4
      001E64 80 C6            [24] 1591 	sjmp	00106$
      001E66                       1592 00113$:
      001E66 90 00 BC         [24] 1593 	mov	dptr,#_nrf24_send_payload_payload_10000_134
      001E69 ED               [12] 1594 	mov	a,r5
      001E6A F0               [24] 1595 	movx	@dptr,a
      001E6B EE               [12] 1596 	mov	a,r6
      001E6C A3               [24] 1597 	inc	dptr
      001E6D F0               [24] 1598 	movx	@dptr,a
      001E6E EF               [12] 1599 	mov	a,r7
      001E6F A3               [24] 1600 	inc	dptr
      001E70 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	nrf24l01.c:178: nrf24_SPI(SPI_OFF);
      001E71 75 82 01         [24] 1603 	mov	dpl, #0x01
                                   1604 ;	nrf24l01.c:179: }
      001E74 02 1C 76         [24] 1605 	ljmp	_nrf24_SPI
                                   1606 ;------------------------------------------------------------
                                   1607 ;Allocation info for local variables in function 'nrf24_transmit_status'
                                   1608 ;------------------------------------------------------------
                                   1609 ;	nrf24l01.c:183: uint8_t nrf24_transmit_status(void)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function nrf24_transmit_status
                                   1612 ;	-----------------------------------------
      001E77                       1613 _nrf24_transmit_status:
                                   1614 ;	nrf24l01.c:185: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
      001E77 90 00 DF         [24] 1615 	mov	dptr,#_nrf24_read_PARM_2
      001E7A 74 A8            [12] 1616 	mov	a,#_register_current_value
      001E7C F0               [24] 1617 	movx	@dptr,a
      001E7D 74 00            [12] 1618 	mov	a,#(_register_current_value >> 8)
      001E7F A3               [24] 1619 	inc	dptr
      001E80 F0               [24] 1620 	movx	@dptr,a
      001E81 E4               [12] 1621 	clr	a
      001E82 A3               [24] 1622 	inc	dptr
      001E83 F0               [24] 1623 	movx	@dptr,a
      001E84 90 00 E2         [24] 1624 	mov	dptr,#_nrf24_read_PARM_3
      001E87 04               [12] 1625 	inc	a
      001E88 F0               [24] 1626 	movx	@dptr,a
      001E89 90 00 E3         [24] 1627 	mov	dptr,#_nrf24_read_PARM_4
      001E8C E4               [12] 1628 	clr	a
      001E8D F0               [24] 1629 	movx	@dptr,a
      001E8E 75 82 07         [24] 1630 	mov	dpl, #0x07
      001E91 12 2B 0B         [24] 1631 	lcall	_nrf24_read
                                   1632 ;	nrf24l01.c:186: if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
      001E94 90 00 A8         [24] 1633 	mov	dptr,#_register_current_value
      001E97 E0               [24] 1634 	movx	a,@dptr
      001E98 FF               [12] 1635 	mov	r7,a
      001E99 30 E5 21         [24] 1636 	jnb	acc.5,00105$
                                   1637 ;	nrf24l01.c:188: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      001E9C 90 00 E5         [24] 1638 	mov	dptr,#_nrf24_write_PARM_2
      001E9F 74 A8            [12] 1639 	mov	a,#_register_current_value
      001EA1 F0               [24] 1640 	movx	@dptr,a
      001EA2 74 00            [12] 1641 	mov	a,#(_register_current_value >> 8)
      001EA4 A3               [24] 1642 	inc	dptr
      001EA5 F0               [24] 1643 	movx	@dptr,a
      001EA6 E4               [12] 1644 	clr	a
      001EA7 A3               [24] 1645 	inc	dptr
      001EA8 F0               [24] 1646 	movx	@dptr,a
      001EA9 90 00 E8         [24] 1647 	mov	dptr,#_nrf24_write_PARM_3
      001EAC 04               [12] 1648 	inc	a
      001EAD F0               [24] 1649 	movx	@dptr,a
      001EAE 90 00 E9         [24] 1650 	mov	dptr,#_nrf24_write_PARM_4
      001EB1 E4               [12] 1651 	clr	a
      001EB2 F0               [24] 1652 	movx	@dptr,a
      001EB3 75 82 07         [24] 1653 	mov	dpl, #0x07
      001EB6 12 2B 77         [24] 1654 	lcall	_nrf24_write
                                   1655 ;	nrf24l01.c:189: return TRANSMIT_DONE;
      001EB9 75 82 01         [24] 1656 	mov	dpl, #0x01
      001EBC 22               [24] 1657 	ret
      001EBD                       1658 00105$:
                                   1659 ;	nrf24l01.c:191: else if (register_current_value & (1 << MAX_RT))
      001EBD EF               [12] 1660 	mov	a,r7
      001EBE 30 E4 21         [24] 1661 	jnb	acc.4,00102$
                                   1662 ;	nrf24l01.c:193: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      001EC1 90 00 E5         [24] 1663 	mov	dptr,#_nrf24_write_PARM_2
      001EC4 74 A8            [12] 1664 	mov	a,#_register_current_value
      001EC6 F0               [24] 1665 	movx	@dptr,a
      001EC7 74 00            [12] 1666 	mov	a,#(_register_current_value >> 8)
      001EC9 A3               [24] 1667 	inc	dptr
      001ECA F0               [24] 1668 	movx	@dptr,a
      001ECB E4               [12] 1669 	clr	a
      001ECC A3               [24] 1670 	inc	dptr
      001ECD F0               [24] 1671 	movx	@dptr,a
      001ECE 90 00 E8         [24] 1672 	mov	dptr,#_nrf24_write_PARM_3
      001ED1 04               [12] 1673 	inc	a
      001ED2 F0               [24] 1674 	movx	@dptr,a
      001ED3 90 00 E9         [24] 1675 	mov	dptr,#_nrf24_write_PARM_4
      001ED6 E4               [12] 1676 	clr	a
      001ED7 F0               [24] 1677 	movx	@dptr,a
      001ED8 75 82 07         [24] 1678 	mov	dpl, #0x07
      001EDB 12 2B 77         [24] 1679 	lcall	_nrf24_write
                                   1680 ;	nrf24l01.c:194: return TRANSMIT_FAILED;
      001EDE 75 82 FF         [24] 1681 	mov	dpl, #0xff
      001EE1 22               [24] 1682 	ret
      001EE2                       1683 00102$:
                                   1684 ;	nrf24l01.c:197: return TRANSMIT_IN_PROGRESS;
      001EE2 75 82 00         [24] 1685 	mov	dpl, #0x00
                                   1686 ;	nrf24l01.c:198: }
      001EE5 22               [24] 1687 	ret
                                   1688 ;------------------------------------------------------------
                                   1689 ;Allocation info for local variables in function 'nrf24_receive'
                                   1690 ;------------------------------------------------------------
                                   1691 ;payload_width             Allocated with name '_nrf24_receive_PARM_2'
                                   1692 ;payload                   Allocated with name '_nrf24_receive_payload_10000_142'
                                   1693 ;------------------------------------------------------------
                                   1694 ;	nrf24l01.c:202: uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
                                   1695 ;	-----------------------------------------
                                   1696 ;	 function nrf24_receive
                                   1697 ;	-----------------------------------------
      001EE6                       1698 _nrf24_receive:
      001EE6 AF F0            [24] 1699 	mov	r7,b
      001EE8 AE 83            [24] 1700 	mov	r6,dph
      001EEA E5 82            [12] 1701 	mov	a,dpl
      001EEC 90 00 C0         [24] 1702 	mov	dptr,#_nrf24_receive_payload_10000_142
      001EEF F0               [24] 1703 	movx	@dptr,a
      001EF0 EE               [12] 1704 	mov	a,r6
      001EF1 A3               [24] 1705 	inc	dptr
      001EF2 F0               [24] 1706 	movx	@dptr,a
      001EF3 EF               [12] 1707 	mov	a,r7
      001EF4 A3               [24] 1708 	inc	dptr
      001EF5 F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	nrf24l01.c:204: if (current_mode == PRX)
      001EF6 90 01 73         [24] 1711 	mov	dptr,#_current_mode
      001EF9 E0               [24] 1712 	movx	a,@dptr
      001EFA FF               [12] 1713 	mov	r7,a
      001EFB BF 04 02         [24] 1714 	cjne	r7,#0x04,00154$
      001EFE 80 03            [24] 1715 	sjmp	00155$
      001F00                       1716 00154$:
      001F00 02 20 1D         [24] 1717 	ljmp	00110$
      001F03                       1718 00155$:
                                   1719 ;	nrf24l01.c:206: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      001F03 90 00 DF         [24] 1720 	mov	dptr,#_nrf24_read_PARM_2
      001F06 74 A8            [12] 1721 	mov	a,#_register_current_value
      001F08 F0               [24] 1722 	movx	@dptr,a
      001F09 74 00            [12] 1723 	mov	a,#(_register_current_value >> 8)
      001F0B A3               [24] 1724 	inc	dptr
      001F0C F0               [24] 1725 	movx	@dptr,a
      001F0D E4               [12] 1726 	clr	a
      001F0E A3               [24] 1727 	inc	dptr
      001F0F F0               [24] 1728 	movx	@dptr,a
      001F10 90 00 E2         [24] 1729 	mov	dptr,#_nrf24_read_PARM_3
      001F13 04               [12] 1730 	inc	a
      001F14 F0               [24] 1731 	movx	@dptr,a
      001F15 90 00 E3         [24] 1732 	mov	dptr,#_nrf24_read_PARM_4
      001F18 E4               [12] 1733 	clr	a
      001F19 F0               [24] 1734 	movx	@dptr,a
      001F1A 75 82 07         [24] 1735 	mov	dpl, #0x07
      001F1D 12 2B 0B         [24] 1736 	lcall	_nrf24_read
                                   1737 ;	nrf24l01.c:207: if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
      001F20 90 00 A8         [24] 1738 	mov	dptr,#_register_current_value
      001F23 E0               [24] 1739 	movx	a,@dptr
      001F24 20 E6 03         [24] 1740 	jb	acc.6,00156$
      001F27 02 20 19         [24] 1741 	ljmp	00107$
      001F2A                       1742 00156$:
                                   1743 ;	nrf24l01.c:209: if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
      001F2A 90 01 75         [24] 1744 	mov	dptr,#_dynamic_payload
      001F2D E0               [24] 1745 	movx	a,@dptr
      001F2E 70 08            [24] 1746 	jnz	00102$
                                   1747 ;	nrf24l01.c:210: payload_width = current_payload_width;
      001F30 90 00 AC         [24] 1748 	mov	dptr,#_current_payload_width
      001F33 E0               [24] 1749 	movx	a,@dptr
      001F34 90 00 BF         [24] 1750 	mov	dptr,#_nrf24_receive_PARM_2
      001F37 F0               [24] 1751 	movx	@dptr,a
      001F38                       1752 00102$:
                                   1753 ;	nrf24l01.c:212: nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/                          
      001F38 75 82 00         [24] 1754 	mov	dpl, #0x00
      001F3B 12 1C 76         [24] 1755 	lcall	_nrf24_SPI
                                   1756 ;	nrf24l01.c:213: SPI_command = R_RX_PAYLOAD;
      001F3E 90 00 A7         [24] 1757 	mov	dptr,#_SPI_command
      001F41 74 61            [12] 1758 	mov	a,#0x61
      001F43 F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	nrf24l01.c:214: SPI_send_command(SPI_command);
      001F44 75 82 61         [24] 1761 	mov	dpl, #0x61
      001F47 12 1C 8A         [24] 1762 	lcall	_SPI_send_command
      001F4A 90 00 C0         [24] 1763 	mov	dptr,#_nrf24_receive_payload_10000_142
      001F4D E0               [24] 1764 	movx	a,@dptr
      001F4E FD               [12] 1765 	mov	r5,a
      001F4F A3               [24] 1766 	inc	dptr
      001F50 E0               [24] 1767 	movx	a,@dptr
      001F51 FE               [12] 1768 	mov	r6,a
      001F52 A3               [24] 1769 	inc	dptr
      001F53 E0               [24] 1770 	movx	a,@dptr
      001F54 FF               [12] 1771 	mov	r7,a
      001F55 90 00 BF         [24] 1772 	mov	dptr,#_nrf24_receive_PARM_2
      001F58 E0               [24] 1773 	movx	a,@dptr
      001F59 FC               [12] 1774 	mov	r4,a
      001F5A                       1775 00113$:
                                   1776 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      001F5A EC               [12] 1777 	mov	a,r4
      001F5B 60 3F            [24] 1778 	jz	00123$
                                   1779 ;	nrf24l01.c:218: SPI_command = NOP_CMD;
      001F5D 90 00 A7         [24] 1780 	mov	dptr,#_SPI_command
      001F60 74 FF            [12] 1781 	mov	a,#0xff
      001F62 F0               [24] 1782 	movx	@dptr,a
                                   1783 ;	nrf24l01.c:219: *payload = bitReverseTable256[SPI_send_command(SPI_command)]; // newly added
      001F63 75 82 FF         [24] 1784 	mov	dpl, #0xff
      001F66 C0 07            [24] 1785 	push	ar7
      001F68 C0 06            [24] 1786 	push	ar6
      001F6A C0 05            [24] 1787 	push	ar5
      001F6C C0 04            [24] 1788 	push	ar4
      001F6E 12 1C 8A         [24] 1789 	lcall	_SPI_send_command
      001F71 AB 82            [24] 1790 	mov	r3, dpl
      001F73 D0 04            [24] 1791 	pop	ar4
      001F75 D0 05            [24] 1792 	pop	ar5
      001F77 D0 06            [24] 1793 	pop	ar6
      001F79 D0 07            [24] 1794 	pop	ar7
      001F7B EB               [12] 1795 	mov	a,r3
      001F7C 90 3A CF         [24] 1796 	mov	dptr,#_bitReverseTable256
      001F7F 93               [24] 1797 	movc	a,@a+dptr
      001F80 8D 82            [24] 1798 	mov	dpl,r5
      001F82 8E 83            [24] 1799 	mov	dph,r6
      001F84 8F F0            [24] 1800 	mov	b,r7
      001F86 12 2F F5         [24] 1801 	lcall	__gptrput
      001F89 A3               [24] 1802 	inc	dptr
      001F8A AD 82            [24] 1803 	mov	r5,dpl
      001F8C AE 83            [24] 1804 	mov	r6,dph
                                   1805 ;	nrf24l01.c:220: payload++;
      001F8E 90 00 C0         [24] 1806 	mov	dptr,#_nrf24_receive_payload_10000_142
      001F91 ED               [12] 1807 	mov	a,r5
      001F92 F0               [24] 1808 	movx	@dptr,a
      001F93 EE               [12] 1809 	mov	a,r6
      001F94 A3               [24] 1810 	inc	dptr
      001F95 F0               [24] 1811 	movx	@dptr,a
      001F96 EF               [12] 1812 	mov	a,r7
      001F97 A3               [24] 1813 	inc	dptr
      001F98 F0               [24] 1814 	movx	@dptr,a
                                   1815 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      001F99 1C               [12] 1816 	dec	r4
      001F9A 80 BE            [24] 1817 	sjmp	00113$
      001F9C                       1818 00123$:
      001F9C 90 00 C0         [24] 1819 	mov	dptr,#_nrf24_receive_payload_10000_142
      001F9F ED               [12] 1820 	mov	a,r5
      001FA0 F0               [24] 1821 	movx	@dptr,a
      001FA1 EE               [12] 1822 	mov	a,r6
      001FA2 A3               [24] 1823 	inc	dptr
      001FA3 F0               [24] 1824 	movx	@dptr,a
      001FA4 EF               [12] 1825 	mov	a,r7
      001FA5 A3               [24] 1826 	inc	dptr
      001FA6 F0               [24] 1827 	movx	@dptr,a
                                   1828 ;	nrf24l01.c:222: nrf24_SPI(SPI_OFF); 
      001FA7 75 82 01         [24] 1829 	mov	dpl, #0x01
      001FAA 12 1C 76         [24] 1830 	lcall	_nrf24_SPI
                                   1831 ;	nrf24l01.c:223: nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
      001FAD 90 00 DF         [24] 1832 	mov	dptr,#_nrf24_read_PARM_2
      001FB0 74 A8            [12] 1833 	mov	a,#_register_current_value
      001FB2 F0               [24] 1834 	movx	@dptr,a
      001FB3 74 00            [12] 1835 	mov	a,#(_register_current_value >> 8)
      001FB5 A3               [24] 1836 	inc	dptr
      001FB6 F0               [24] 1837 	movx	@dptr,a
      001FB7 E4               [12] 1838 	clr	a
      001FB8 A3               [24] 1839 	inc	dptr
      001FB9 F0               [24] 1840 	movx	@dptr,a
      001FBA 90 00 E2         [24] 1841 	mov	dptr,#_nrf24_read_PARM_3
      001FBD 04               [12] 1842 	inc	a
      001FBE F0               [24] 1843 	movx	@dptr,a
      001FBF 90 00 E3         [24] 1844 	mov	dptr,#_nrf24_read_PARM_4
      001FC2 E4               [12] 1845 	clr	a
      001FC3 F0               [24] 1846 	movx	@dptr,a
      001FC4 75 82 17         [24] 1847 	mov	dpl, #0x17
      001FC7 12 2B 0B         [24] 1848 	lcall	_nrf24_read
                                   1849 ;	nrf24l01.c:224: if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
      001FCA 90 00 A8         [24] 1850 	mov	dptr,#_register_current_value
      001FCD E0               [24] 1851 	movx	a,@dptr
      001FCE 30 E0 44         [24] 1852 	jnb	acc.0,00105$
                                   1853 ;	nrf24l01.c:226: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      001FD1 90 00 DF         [24] 1854 	mov	dptr,#_nrf24_read_PARM_2
      001FD4 74 A8            [12] 1855 	mov	a,#_register_current_value
      001FD6 F0               [24] 1856 	movx	@dptr,a
      001FD7 74 00            [12] 1857 	mov	a,#(_register_current_value >> 8)
      001FD9 A3               [24] 1858 	inc	dptr
      001FDA F0               [24] 1859 	movx	@dptr,a
      001FDB E4               [12] 1860 	clr	a
      001FDC A3               [24] 1861 	inc	dptr
      001FDD F0               [24] 1862 	movx	@dptr,a
      001FDE 90 00 E2         [24] 1863 	mov	dptr,#_nrf24_read_PARM_3
      001FE1 04               [12] 1864 	inc	a
      001FE2 F0               [24] 1865 	movx	@dptr,a
      001FE3 90 00 E3         [24] 1866 	mov	dptr,#_nrf24_read_PARM_4
      001FE6 E4               [12] 1867 	clr	a
      001FE7 F0               [24] 1868 	movx	@dptr,a
      001FE8 75 82 07         [24] 1869 	mov	dpl, #0x07
      001FEB 12 2B 0B         [24] 1870 	lcall	_nrf24_read
                                   1871 ;	nrf24l01.c:227: register_new_value = register_current_value | (1 << RX_DR);
      001FEE 90 00 A8         [24] 1872 	mov	dptr,#_register_current_value
      001FF1 E0               [24] 1873 	movx	a,@dptr
      001FF2 90 00 A9         [24] 1874 	mov	dptr,#_register_new_value
      001FF5 44 40            [12] 1875 	orl	a,#0x40
      001FF7 F0               [24] 1876 	movx	@dptr,a
                                   1877 ;	nrf24l01.c:228: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE); 
      001FF8 90 00 E5         [24] 1878 	mov	dptr,#_nrf24_write_PARM_2
      001FFB 74 A9            [12] 1879 	mov	a,#_register_new_value
      001FFD F0               [24] 1880 	movx	@dptr,a
      001FFE 74 00            [12] 1881 	mov	a,#(_register_new_value >> 8)
      002000 A3               [24] 1882 	inc	dptr
      002001 F0               [24] 1883 	movx	@dptr,a
      002002 E4               [12] 1884 	clr	a
      002003 A3               [24] 1885 	inc	dptr
      002004 F0               [24] 1886 	movx	@dptr,a
      002005 90 00 E8         [24] 1887 	mov	dptr,#_nrf24_write_PARM_3
      002008 04               [12] 1888 	inc	a
      002009 F0               [24] 1889 	movx	@dptr,a
      00200A 90 00 E9         [24] 1890 	mov	dptr,#_nrf24_write_PARM_4
      00200D E4               [12] 1891 	clr	a
      00200E F0               [24] 1892 	movx	@dptr,a
      00200F 75 82 07         [24] 1893 	mov	dpl, #0x07
      002012 12 2B 77         [24] 1894 	lcall	_nrf24_write
      002015                       1895 00105$:
                                   1896 ;	nrf24l01.c:230: return OPERATION_DONE;
      002015 75 82 01         [24] 1897 	mov	dpl, #0x01
      002018 22               [24] 1898 	ret
      002019                       1899 00107$:
                                   1900 ;	nrf24l01.c:234: return RECEIVE_FIFO_EMPTY;
      002019 75 82 02         [24] 1901 	mov	dpl, #0x02
      00201C 22               [24] 1902 	ret
      00201D                       1903 00110$:
                                   1904 ;	nrf24l01.c:238: return OPERATION_ERROR;
      00201D 75 82 00         [24] 1905 	mov	dpl, #0x00
                                   1906 ;	nrf24l01.c:239: }
      002020 22               [24] 1907 	ret
                                   1908 ;------------------------------------------------------------
                                   1909 ;Allocation info for local variables in function 'nrf24_flush'
                                   1910 ;------------------------------------------------------------
                                   1911 ;fifo_select               Allocated with name '_nrf24_flush_fifo_select_10000_150'
                                   1912 ;------------------------------------------------------------
                                   1913 ;	nrf24l01.c:243: uint8_t nrf24_flush(uint8_t fifo_select)
                                   1914 ;	-----------------------------------------
                                   1915 ;	 function nrf24_flush
                                   1916 ;	-----------------------------------------
      002021                       1917 _nrf24_flush:
      002021 E5 82            [12] 1918 	mov	a,dpl
      002023 90 00 C3         [24] 1919 	mov	dptr,#_nrf24_flush_fifo_select_10000_150
      002026 F0               [24] 1920 	movx	@dptr,a
                                   1921 ;	nrf24l01.c:245: switch (fifo_select)
      002027 E0               [24] 1922 	movx	a,@dptr
      002028 FF               [12] 1923 	mov	r7,a
      002029 60 2B            [24] 1924 	jz	00105$
      00202B BF 01 50         [24] 1925 	cjne	r7,#0x01,00109$
                                   1926 ;	nrf24l01.c:248: if (current_mode == PTX)
      00202E 90 01 73         [24] 1927 	mov	dptr,#_current_mode
      002031 E0               [24] 1928 	movx	a,@dptr
      002032 FF               [12] 1929 	mov	r7,a
      002033 BF 03 1C         [24] 1930 	cjne	r7,#0x03,00103$
                                   1931 ;	nrf24l01.c:250: nrf24_SPI(SPI_ON);
      002036 75 82 00         [24] 1932 	mov	dpl, #0x00
      002039 12 1C 76         [24] 1933 	lcall	_nrf24_SPI
                                   1934 ;	nrf24l01.c:251: SPI_command = FLUSH_TX;
      00203C 90 00 A7         [24] 1935 	mov	dptr,#_SPI_command
      00203F 74 E1            [12] 1936 	mov	a,#0xe1
      002041 F0               [24] 1937 	movx	@dptr,a
                                   1938 ;	nrf24l01.c:252: SPI_send_command(SPI_command);
      002042 75 82 E1         [24] 1939 	mov	dpl, #0xe1
      002045 12 1C 8A         [24] 1940 	lcall	_SPI_send_command
                                   1941 ;	nrf24l01.c:253: nrf24_SPI(SPI_OFF);
      002048 75 82 01         [24] 1942 	mov	dpl, #0x01
      00204B 12 1C 76         [24] 1943 	lcall	_nrf24_SPI
                                   1944 ;	nrf24l01.c:254: return OPERATION_DONE;
      00204E 75 82 01         [24] 1945 	mov	dpl, #0x01
      002051 22               [24] 1946 	ret
      002052                       1947 00103$:
                                   1948 ;	nrf24l01.c:257: return OPERATION_ERROR;
      002052 75 82 00         [24] 1949 	mov	dpl, #0x00
                                   1950 ;	nrf24l01.c:258: case RX_BUFFER:
      002055 22               [24] 1951 	ret
      002056                       1952 00105$:
                                   1953 ;	nrf24l01.c:259: if (current_mode == PRX)
      002056 90 01 73         [24] 1954 	mov	dptr,#_current_mode
      002059 E0               [24] 1955 	movx	a,@dptr
      00205A FF               [12] 1956 	mov	r7,a
      00205B BF 04 1C         [24] 1957 	cjne	r7,#0x04,00107$
                                   1958 ;	nrf24l01.c:261: nrf24_SPI(SPI_ON);
      00205E 75 82 00         [24] 1959 	mov	dpl, #0x00
      002061 12 1C 76         [24] 1960 	lcall	_nrf24_SPI
                                   1961 ;	nrf24l01.c:262: SPI_command = FLUSH_RX;
      002064 90 00 A7         [24] 1962 	mov	dptr,#_SPI_command
      002067 74 E2            [12] 1963 	mov	a,#0xe2
      002069 F0               [24] 1964 	movx	@dptr,a
                                   1965 ;	nrf24l01.c:263: SPI_send_command(SPI_command);
      00206A 75 82 E2         [24] 1966 	mov	dpl, #0xe2
      00206D 12 1C 8A         [24] 1967 	lcall	_SPI_send_command
                                   1968 ;	nrf24l01.c:264: nrf24_SPI(SPI_OFF);
      002070 75 82 01         [24] 1969 	mov	dpl, #0x01
      002073 12 1C 76         [24] 1970 	lcall	_nrf24_SPI
                                   1971 ;	nrf24l01.c:265: return OPERATION_DONE;
      002076 75 82 01         [24] 1972 	mov	dpl, #0x01
      002079 22               [24] 1973 	ret
      00207A                       1974 00107$:
                                   1975 ;	nrf24l01.c:268: return OPERATION_ERROR;
      00207A 75 82 00         [24] 1976 	mov	dpl, #0x00
                                   1977 ;	nrf24l01.c:269: default:
      00207D 22               [24] 1978 	ret
      00207E                       1979 00109$:
                                   1980 ;	nrf24l01.c:270: return OPERATION_ERROR;
      00207E 75 82 00         [24] 1981 	mov	dpl, #0x00
                                   1982 ;	nrf24l01.c:271: }
                                   1983 ;	nrf24l01.c:272: }
      002081 22               [24] 1984 	ret
                                   1985 ;------------------------------------------------------------
                                   1986 ;Allocation info for local variables in function 'nrf24_reset'
                                   1987 ;------------------------------------------------------------
                                   1988 ;	nrf24l01.c:275: void nrf24_reset(void)
                                   1989 ;	-----------------------------------------
                                   1990 ;	 function nrf24_reset
                                   1991 ;	-----------------------------------------
      002082                       1992 _nrf24_reset:
                                   1993 ;	nrf24l01.c:277: reset_flag = 1;
      002082 90 01 72         [24] 1994 	mov	dptr,#_reset_flag
      002085 74 01            [12] 1995 	mov	a,#0x01
      002087 F0               [24] 1996 	movx	@dptr,a
                                   1997 ;	nrf24l01.c:278: nrf24_CE(CE_OFF);
      002088 75 82 00         [24] 1998 	mov	dpl, #0x00
      00208B 12 1C C8         [24] 1999 	lcall	_nrf24_CE
                                   2000 ;	nrf24l01.c:279: register_new_value = CONFIG_REGISTER_DEFAULT;
      00208E 90 00 A9         [24] 2001 	mov	dptr,#_register_new_value
      002091 74 08            [12] 2002 	mov	a,#0x08
      002093 F0               [24] 2003 	movx	@dptr,a
                                   2004 ;	nrf24l01.c:280: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002094 90 00 E5         [24] 2005 	mov	dptr,#_nrf24_write_PARM_2
      002097 74 A9            [12] 2006 	mov	a,#_register_new_value
      002099 F0               [24] 2007 	movx	@dptr,a
      00209A 74 00            [12] 2008 	mov	a,#(_register_new_value >> 8)
      00209C A3               [24] 2009 	inc	dptr
      00209D F0               [24] 2010 	movx	@dptr,a
      00209E E4               [12] 2011 	clr	a
      00209F A3               [24] 2012 	inc	dptr
      0020A0 F0               [24] 2013 	movx	@dptr,a
      0020A1 90 00 E8         [24] 2014 	mov	dptr,#_nrf24_write_PARM_3
      0020A4 04               [12] 2015 	inc	a
      0020A5 F0               [24] 2016 	movx	@dptr,a
      0020A6 90 00 E9         [24] 2017 	mov	dptr,#_nrf24_write_PARM_4
      0020A9 E4               [12] 2018 	clr	a
      0020AA F0               [24] 2019 	movx	@dptr,a
      0020AB 75 82 00         [24] 2020 	mov	dpl, #0x00
      0020AE 12 2B 77         [24] 2021 	lcall	_nrf24_write
                                   2022 ;	nrf24l01.c:281: register_new_value = EN_AA_REGISTER_DEFAULT;
      0020B1 90 00 A9         [24] 2023 	mov	dptr,#_register_new_value
      0020B4 74 3F            [12] 2024 	mov	a,#0x3f
      0020B6 F0               [24] 2025 	movx	@dptr,a
                                   2026 ;	nrf24l01.c:282: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0020B7 90 00 E5         [24] 2027 	mov	dptr,#_nrf24_write_PARM_2
      0020BA 74 A9            [12] 2028 	mov	a,#_register_new_value
      0020BC F0               [24] 2029 	movx	@dptr,a
      0020BD 74 00            [12] 2030 	mov	a,#(_register_new_value >> 8)
      0020BF A3               [24] 2031 	inc	dptr
      0020C0 F0               [24] 2032 	movx	@dptr,a
      0020C1 E4               [12] 2033 	clr	a
      0020C2 A3               [24] 2034 	inc	dptr
      0020C3 F0               [24] 2035 	movx	@dptr,a
      0020C4 90 00 E8         [24] 2036 	mov	dptr,#_nrf24_write_PARM_3
      0020C7 04               [12] 2037 	inc	a
      0020C8 F0               [24] 2038 	movx	@dptr,a
      0020C9 90 00 E9         [24] 2039 	mov	dptr,#_nrf24_write_PARM_4
      0020CC E4               [12] 2040 	clr	a
      0020CD F0               [24] 2041 	movx	@dptr,a
      0020CE 75 82 01         [24] 2042 	mov	dpl, #0x01
      0020D1 12 2B 77         [24] 2043 	lcall	_nrf24_write
                                   2044 ;	nrf24l01.c:283: register_new_value = EN_RXADDR_REGISTER_DEFAULT;
      0020D4 90 00 A9         [24] 2045 	mov	dptr,#_register_new_value
      0020D7 E4               [12] 2046 	clr	a
      0020D8 F0               [24] 2047 	movx	@dptr,a
                                   2048 ;	nrf24l01.c:284: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0020D9 90 00 E5         [24] 2049 	mov	dptr,#_nrf24_write_PARM_2
      0020DC 74 A9            [12] 2050 	mov	a,#_register_new_value
      0020DE F0               [24] 2051 	movx	@dptr,a
      0020DF 74 00            [12] 2052 	mov	a,#(_register_new_value >> 8)
      0020E1 A3               [24] 2053 	inc	dptr
      0020E2 F0               [24] 2054 	movx	@dptr,a
      0020E3 E4               [12] 2055 	clr	a
      0020E4 A3               [24] 2056 	inc	dptr
      0020E5 F0               [24] 2057 	movx	@dptr,a
      0020E6 90 00 E8         [24] 2058 	mov	dptr,#_nrf24_write_PARM_3
      0020E9 04               [12] 2059 	inc	a
      0020EA F0               [24] 2060 	movx	@dptr,a
      0020EB 90 00 E9         [24] 2061 	mov	dptr,#_nrf24_write_PARM_4
      0020EE E4               [12] 2062 	clr	a
      0020EF F0               [24] 2063 	movx	@dptr,a
      0020F0 75 82 02         [24] 2064 	mov	dpl, #0x02
      0020F3 12 2B 77         [24] 2065 	lcall	_nrf24_write
                                   2066 ;	nrf24l01.c:285: register_new_value = SETUP_AW_REGISTER_DEFAULT;
      0020F6 90 00 A9         [24] 2067 	mov	dptr,#_register_new_value
      0020F9 74 03            [12] 2068 	mov	a,#0x03
      0020FB F0               [24] 2069 	movx	@dptr,a
                                   2070 ;	nrf24l01.c:286: nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
      0020FC 90 00 E5         [24] 2071 	mov	dptr,#_nrf24_write_PARM_2
      0020FF 74 A9            [12] 2072 	mov	a,#_register_new_value
      002101 F0               [24] 2073 	movx	@dptr,a
      002102 74 00            [12] 2074 	mov	a,#(_register_new_value >> 8)
      002104 A3               [24] 2075 	inc	dptr
      002105 F0               [24] 2076 	movx	@dptr,a
      002106 E4               [12] 2077 	clr	a
      002107 A3               [24] 2078 	inc	dptr
      002108 F0               [24] 2079 	movx	@dptr,a
      002109 90 00 E8         [24] 2080 	mov	dptr,#_nrf24_write_PARM_3
      00210C 04               [12] 2081 	inc	a
      00210D F0               [24] 2082 	movx	@dptr,a
      00210E 90 00 E9         [24] 2083 	mov	dptr,#_nrf24_write_PARM_4
      002111 E4               [12] 2084 	clr	a
      002112 F0               [24] 2085 	movx	@dptr,a
      002113 75 82 03         [24] 2086 	mov	dpl, #0x03
      002116 12 2B 77         [24] 2087 	lcall	_nrf24_write
                                   2088 ;	nrf24l01.c:287: register_new_value = RF_CH_REGISTER_DEFAULT;
      002119 90 00 A9         [24] 2089 	mov	dptr,#_register_new_value
      00211C 74 02            [12] 2090 	mov	a,#0x02
      00211E F0               [24] 2091 	movx	@dptr,a
                                   2092 ;	nrf24l01.c:288: nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
      00211F 90 00 E5         [24] 2093 	mov	dptr,#_nrf24_write_PARM_2
      002122 74 A9            [12] 2094 	mov	a,#_register_new_value
      002124 F0               [24] 2095 	movx	@dptr,a
      002125 74 00            [12] 2096 	mov	a,#(_register_new_value >> 8)
      002127 A3               [24] 2097 	inc	dptr
      002128 F0               [24] 2098 	movx	@dptr,a
      002129 E4               [12] 2099 	clr	a
      00212A A3               [24] 2100 	inc	dptr
      00212B F0               [24] 2101 	movx	@dptr,a
      00212C 90 00 E8         [24] 2102 	mov	dptr,#_nrf24_write_PARM_3
      00212F 04               [12] 2103 	inc	a
      002130 F0               [24] 2104 	movx	@dptr,a
      002131 90 00 E9         [24] 2105 	mov	dptr,#_nrf24_write_PARM_4
      002134 E4               [12] 2106 	clr	a
      002135 F0               [24] 2107 	movx	@dptr,a
      002136 75 82 05         [24] 2108 	mov	dpl, #0x05
      002139 12 2B 77         [24] 2109 	lcall	_nrf24_write
                                   2110 ;	nrf24l01.c:289: register_new_value = RF_SETUP_REGISTER_DEFAULT;
      00213C 90 00 A9         [24] 2111 	mov	dptr,#_register_new_value
      00213F 74 27            [12] 2112 	mov	a,#0x27
      002141 F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	nrf24l01.c:290: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      002142 90 00 E5         [24] 2115 	mov	dptr,#_nrf24_write_PARM_2
      002145 74 A9            [12] 2116 	mov	a,#_register_new_value
      002147 F0               [24] 2117 	movx	@dptr,a
      002148 74 00            [12] 2118 	mov	a,#(_register_new_value >> 8)
      00214A A3               [24] 2119 	inc	dptr
      00214B F0               [24] 2120 	movx	@dptr,a
      00214C E4               [12] 2121 	clr	a
      00214D A3               [24] 2122 	inc	dptr
      00214E F0               [24] 2123 	movx	@dptr,a
      00214F 90 00 E8         [24] 2124 	mov	dptr,#_nrf24_write_PARM_3
      002152 04               [12] 2125 	inc	a
      002153 F0               [24] 2126 	movx	@dptr,a
      002154 90 00 E9         [24] 2127 	mov	dptr,#_nrf24_write_PARM_4
      002157 E4               [12] 2128 	clr	a
      002158 F0               [24] 2129 	movx	@dptr,a
      002159 75 82 06         [24] 2130 	mov	dpl, #0x06
      00215C 12 2B 77         [24] 2131 	lcall	_nrf24_write
                                   2132 ;	nrf24l01.c:291: register_new_value = STATUS_REGISTER_DEFAULT;
      00215F 90 00 A9         [24] 2133 	mov	dptr,#_register_new_value
      002162 74 0E            [12] 2134 	mov	a,#0x0e
      002164 F0               [24] 2135 	movx	@dptr,a
                                   2136 ;	nrf24l01.c:292: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      002165 90 00 E5         [24] 2137 	mov	dptr,#_nrf24_write_PARM_2
      002168 74 A9            [12] 2138 	mov	a,#_register_new_value
      00216A F0               [24] 2139 	movx	@dptr,a
      00216B 74 00            [12] 2140 	mov	a,#(_register_new_value >> 8)
      00216D A3               [24] 2141 	inc	dptr
      00216E F0               [24] 2142 	movx	@dptr,a
      00216F E4               [12] 2143 	clr	a
      002170 A3               [24] 2144 	inc	dptr
      002171 F0               [24] 2145 	movx	@dptr,a
      002172 90 00 E8         [24] 2146 	mov	dptr,#_nrf24_write_PARM_3
      002175 04               [12] 2147 	inc	a
      002176 F0               [24] 2148 	movx	@dptr,a
      002177 90 00 E9         [24] 2149 	mov	dptr,#_nrf24_write_PARM_4
      00217A E4               [12] 2150 	clr	a
      00217B F0               [24] 2151 	movx	@dptr,a
      00217C 75 82 07         [24] 2152 	mov	dpl, #0x07
      00217F 12 2B 77         [24] 2153 	lcall	_nrf24_write
                                   2154 ;	nrf24l01.c:299: nrf24_mode(PTX);
      002182 75 82 03         [24] 2155 	mov	dpl, #0x03
      002185 12 29 E1         [24] 2156 	lcall	_nrf24_mode
                                   2157 ;	nrf24l01.c:300: nrf24_flush(TX_BUFFER);
      002188 75 82 01         [24] 2158 	mov	dpl, #0x01
      00218B 12 20 21         [24] 2159 	lcall	_nrf24_flush
                                   2160 ;	nrf24l01.c:301: nrf24_mode(PRX);
      00218E 75 82 04         [24] 2161 	mov	dpl, #0x04
      002191 12 29 E1         [24] 2162 	lcall	_nrf24_mode
                                   2163 ;	nrf24l01.c:302: nrf24_flush(RX_BUFFER);
      002194 75 82 00         [24] 2164 	mov	dpl, #0x00
      002197 12 20 21         [24] 2165 	lcall	_nrf24_flush
                                   2166 ;	nrf24l01.c:304: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      00219A 90 00 DF         [24] 2167 	mov	dptr,#_nrf24_read_PARM_2
      00219D 74 A8            [12] 2168 	mov	a,#_register_current_value
      00219F F0               [24] 2169 	movx	@dptr,a
      0021A0 74 00            [12] 2170 	mov	a,#(_register_current_value >> 8)
      0021A2 A3               [24] 2171 	inc	dptr
      0021A3 F0               [24] 2172 	movx	@dptr,a
      0021A4 E4               [12] 2173 	clr	a
      0021A5 A3               [24] 2174 	inc	dptr
      0021A6 F0               [24] 2175 	movx	@dptr,a
      0021A7 90 00 E2         [24] 2176 	mov	dptr,#_nrf24_read_PARM_3
      0021AA 04               [12] 2177 	inc	a
      0021AB F0               [24] 2178 	movx	@dptr,a
      0021AC 90 00 E3         [24] 2179 	mov	dptr,#_nrf24_read_PARM_4
      0021AF E4               [12] 2180 	clr	a
      0021B0 F0               [24] 2181 	movx	@dptr,a
      0021B1 75 82 07         [24] 2182 	mov	dpl, #0x07
      0021B4 12 2B 0B         [24] 2183 	lcall	_nrf24_read
                                   2184 ;	nrf24l01.c:305: register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
      0021B7 90 00 A8         [24] 2185 	mov	dptr,#_register_current_value
      0021BA E0               [24] 2186 	movx	a,@dptr
      0021BB 90 00 A9         [24] 2187 	mov	dptr,#_register_new_value
      0021BE 44 70            [12] 2188 	orl	a,#0x70
      0021C0 F0               [24] 2189 	movx	@dptr,a
                                   2190 ;	nrf24l01.c:306: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      0021C1 90 00 E5         [24] 2191 	mov	dptr,#_nrf24_write_PARM_2
      0021C4 74 A9            [12] 2192 	mov	a,#_register_new_value
      0021C6 F0               [24] 2193 	movx	@dptr,a
      0021C7 74 00            [12] 2194 	mov	a,#(_register_new_value >> 8)
      0021C9 A3               [24] 2195 	inc	dptr
      0021CA F0               [24] 2196 	movx	@dptr,a
      0021CB E4               [12] 2197 	clr	a
      0021CC A3               [24] 2198 	inc	dptr
      0021CD F0               [24] 2199 	movx	@dptr,a
      0021CE 90 00 E8         [24] 2200 	mov	dptr,#_nrf24_write_PARM_3
      0021D1 04               [12] 2201 	inc	a
      0021D2 F0               [24] 2202 	movx	@dptr,a
      0021D3 90 00 E9         [24] 2203 	mov	dptr,#_nrf24_write_PARM_4
      0021D6 E4               [12] 2204 	clr	a
      0021D7 F0               [24] 2205 	movx	@dptr,a
      0021D8 75 82 07         [24] 2206 	mov	dpl, #0x07
      0021DB 12 2B 77         [24] 2207 	lcall	_nrf24_write
                                   2208 ;	nrf24l01.c:308: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      0021DE 90 00 D9         [24] 2209 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      0021E1 74 01            [12] 2210 	mov	a,#0x01
      0021E3 F0               [24] 2211 	movx	@dptr,a
      0021E4 90 00 DA         [24] 2212 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      0021E7 F0               [24] 2213 	movx	@dptr,a
      0021E8 75 82 01         [24] 2214 	mov	dpl, #0x01
      0021EB 12 28 E3         [24] 2215 	lcall	_nrf24_interrupt_mask
                                   2216 ;	nrf24l01.c:309: nrf24_crc_configuration(ENABLE, 2);
      0021EE 90 00 DC         [24] 2217 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      0021F1 74 02            [12] 2218 	mov	a,#0x02
      0021F3 F0               [24] 2219 	movx	@dptr,a
      0021F4 75 82 01         [24] 2220 	mov	dpl, #0x01
      0021F7 12 29 6D         [24] 2221 	lcall	_nrf24_crc_configuration
                                   2222 ;	nrf24l01.c:310: nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
      0021FA 75 82 05         [24] 2223 	mov	dpl, #0x05
      0021FD 12 27 1C         [24] 2224 	lcall	_nrf24_address_width
                                   2225 ;	nrf24l01.c:313: nrf24_rf_channel(RF_CHANNEL_DEFAULT);
      002200 75 82 2E         [24] 2226 	mov	dpl, #0x2e
      002203 12 28 8D         [24] 2227 	lcall	_nrf24_rf_channel
                                   2228 ;	nrf24l01.c:314: nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
      002206 75 82 02         [24] 2229 	mov	dpl, #0x02
      002209 12 26 E5         [24] 2230 	lcall	_nrf24_datapipe_enable
                                   2231 ;	nrf24l01.c:315: nrf24_datapipe_address_configuration();  // I uncommented it
      00220C 12 26 60         [24] 2232 	lcall	_nrf24_datapipe_address_configuration
                                   2233 ;	nrf24l01.c:316: nrf24_datapipe_ptx(1);  // I uncommented it
      00220F 75 82 01         [24] 2234 	mov	dpl, #0x01
      002212 12 26 12         [24] 2235 	lcall	_nrf24_datapipe_ptx
                                   2236 ;	nrf24l01.c:317: nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
      002215 90 00 CF         [24] 2237 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      002218 74 02            [12] 2238 	mov	a,#0x02
      00221A F0               [24] 2239 	movx	@dptr,a
      00221B 75 82 10         [24] 2240 	mov	dpl, #0x10
      00221E 12 26 A4         [24] 2241 	lcall	_nrf24_prx_static_payload_width
                                   2242 ;	nrf24l01.c:318: nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
      002221 90 00 C8         [24] 2243 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      002224 74 08            [12] 2244 	mov	a,#0x08
      002226 F0               [24] 2245 	movx	@dptr,a
      002227 90 06 D6         [24] 2246 	mov	dptr,#0x06d6
      00222A 12 24 91         [24] 2247 	lcall	_nrf24_automatic_retransmit_setup
                                   2248 ;	nrf24l01.c:319: nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
      00222D 75 82 02         [24] 2249 	mov	dpl, #0x02
      002230 12 25 0A         [24] 2250 	lcall	_nrf24_auto_acknowledgment_setup
                                   2251 ;	nrf24l01.c:320: nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
      002233 90 00 CC         [24] 2252 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      002236 74 02            [12] 2253 	mov	a,#0x02
      002238 F0               [24] 2254 	movx	@dptr,a
      002239 75 82 00         [24] 2255 	mov	dpl, #0x00
      00223C 12 25 46         [24] 2256 	lcall	_nrf24_dynamic_payload
                                   2257 ;	nrf24l01.c:321: nrf24_dynamic_ack(ENABLE);
      00223F 75 82 01         [24] 2258 	mov	dpl, #0x01
                                   2259 ;	nrf24l01.c:323: }
      002242 02 1C DC         [24] 2260 	ljmp	_nrf24_dynamic_ack
                                   2261 ;------------------------------------------------------------
                                   2262 ;Allocation info for local variables in function 'nrf24_device'
                                   2263 ;------------------------------------------------------------
                                   2264 ;reset_state               Allocated with name '_nrf24_device_PARM_2'
                                   2265 ;device_mode               Allocated with name '_nrf24_device_device_mode_10000_157'
                                   2266 ;register_to_write_to      Allocated with name '_nrf24_device_register_to_write_to_10001_159'
                                   2267 ;hardwareCheckPassed       Allocated with name '_nrf24_device_hardwareCheckPassed_10001_159'
                                   2268 ;new_value                 Allocated with name '_nrf24_device_new_value_10001_159'
                                   2269 ;------------------------------------------------------------
                                   2270 ;	nrf24l01.c:328: void nrf24_device(uint8_t device_mode, uint8_t reset_state)
                                   2271 ;	-----------------------------------------
                                   2272 ;	 function nrf24_device
                                   2273 ;	-----------------------------------------
      002245                       2274 _nrf24_device:
      002245 E5 82            [12] 2275 	mov	a,dpl
      002247 90 00 C5         [24] 2276 	mov	dptr,#_nrf24_device_device_mode_10000_157
      00224A F0               [24] 2277 	movx	@dptr,a
                                   2278 ;	nrf24l01.c:330: SPI_Initializer();
      00224B 12 1C 23         [24] 2279 	lcall	_SPI_Initializer
                                   2280 ;	nrf24l01.c:331: pinout_Initializer();
      00224E 12 1C 48         [24] 2281 	lcall	_pinout_Initializer
                                   2282 ;	nrf24l01.c:332: delay_function(STARTUP_DELAY);
      002251 90 00 96         [24] 2283 	mov	dptr,#0x0096
      002254 E4               [12] 2284 	clr	a
      002255 F5 F0            [12] 2285 	mov	b,a
      002257 12 1B FB         [24] 2286 	lcall	_delay_function
                                   2287 ;	nrf24l01.c:333: nrf24_CE(CE_OFF);
      00225A 75 82 00         [24] 2288 	mov	dpl, #0x00
      00225D 12 1C C8         [24] 2289 	lcall	_nrf24_CE
                                   2290 ;	nrf24l01.c:337: nrf24_read(0x00, &register_current_value, 1, CLOSE);
      002260 90 00 DF         [24] 2291 	mov	dptr,#_nrf24_read_PARM_2
      002263 74 A8            [12] 2292 	mov	a,#_register_current_value
      002265 F0               [24] 2293 	movx	@dptr,a
      002266 74 00            [12] 2294 	mov	a,#(_register_current_value >> 8)
      002268 A3               [24] 2295 	inc	dptr
      002269 F0               [24] 2296 	movx	@dptr,a
      00226A E4               [12] 2297 	clr	a
      00226B A3               [24] 2298 	inc	dptr
      00226C F0               [24] 2299 	movx	@dptr,a
      00226D 90 00 E2         [24] 2300 	mov	dptr,#_nrf24_read_PARM_3
      002270 04               [12] 2301 	inc	a
      002271 F0               [24] 2302 	movx	@dptr,a
      002272 90 00 E3         [24] 2303 	mov	dptr,#_nrf24_read_PARM_4
      002275 E4               [12] 2304 	clr	a
      002276 F0               [24] 2305 	movx	@dptr,a
      002277 75 82 00         [24] 2306 	mov	dpl, #0x00
      00227A 12 2B 0B         [24] 2307 	lcall	_nrf24_read
                                   2308 ;	nrf24l01.c:341: bool hardwareCheckPassed = false;
      00227D 90 00 C6         [24] 2309 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      002280 E4               [12] 2310 	clr	a
      002281 F0               [24] 2311 	movx	@dptr,a
                                   2312 ;	nrf24l01.c:343: while (!hardwareCheckPassed) {
      002282                       2313 00104$:
      002282 90 00 C6         [24] 2314 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      002285 E0               [24] 2315 	movx	a,@dptr
      002286 60 03            [24] 2316 	jz	00148$
      002288 02 23 C7         [24] 2317 	ljmp	00106$
      00228B                       2318 00148$:
                                   2319 ;	nrf24l01.c:345: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      00228B 90 00 DF         [24] 2320 	mov	dptr,#_nrf24_read_PARM_2
      00228E 74 A8            [12] 2321 	mov	a,#_register_current_value
      002290 F0               [24] 2322 	movx	@dptr,a
      002291 74 00            [12] 2323 	mov	a,#(_register_current_value >> 8)
      002293 A3               [24] 2324 	inc	dptr
      002294 F0               [24] 2325 	movx	@dptr,a
      002295 E4               [12] 2326 	clr	a
      002296 A3               [24] 2327 	inc	dptr
      002297 F0               [24] 2328 	movx	@dptr,a
      002298 90 00 E2         [24] 2329 	mov	dptr,#_nrf24_read_PARM_3
      00229B 04               [12] 2330 	inc	a
      00229C F0               [24] 2331 	movx	@dptr,a
      00229D 90 00 E3         [24] 2332 	mov	dptr,#_nrf24_read_PARM_4
      0022A0 E4               [12] 2333 	clr	a
      0022A1 F0               [24] 2334 	movx	@dptr,a
      0022A2 75 82 00         [24] 2335 	mov	dpl, #0x00
      0022A5 12 2B 0B         [24] 2336 	lcall	_nrf24_read
                                   2337 ;	nrf24l01.c:346: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      0022A8 90 00 A8         [24] 2338 	mov	dptr,#_register_current_value
      0022AB E0               [24] 2339 	movx	a,@dptr
      0022AC FF               [12] 2340 	mov	r7,a
      0022AD 7E 00            [12] 2341 	mov	r6,#0x00
      0022AF C0 07            [24] 2342 	push	ar7
      0022B1 C0 06            [24] 2343 	push	ar6
      0022B3 E4               [12] 2344 	clr	a
      0022B4 C0 E0            [24] 2345 	push	acc
      0022B6 C0 E0            [24] 2346 	push	acc
      0022B8 74 CF            [12] 2347 	mov	a,#___str_0
      0022BA C0 E0            [24] 2348 	push	acc
      0022BC 74 3B            [12] 2349 	mov	a,#(___str_0 >> 8)
      0022BE C0 E0            [24] 2350 	push	acc
      0022C0 74 80            [12] 2351 	mov	a,#0x80
      0022C2 C0 E0            [24] 2352 	push	acc
      0022C4 12 30 5E         [24] 2353 	lcall	_printf
      0022C7 E5 81            [12] 2354 	mov	a,sp
      0022C9 24 F9            [12] 2355 	add	a,#0xf9
      0022CB F5 81            [12] 2356 	mov	sp,a
                                   2357 ;	nrf24l01.c:349: new_value = register_current_value + 3;
      0022CD 90 00 A8         [24] 2358 	mov	dptr,#_register_current_value
      0022D0 E0               [24] 2359 	movx	a,@dptr
      0022D1 FF               [12] 2360 	mov	r7,a
      0022D2 0F               [12] 2361 	inc	r7
      0022D3 0F               [12] 2362 	inc	r7
      0022D4 0F               [12] 2363 	inc	r7
      0022D5 90 00 C7         [24] 2364 	mov	dptr,#_nrf24_device_new_value_10001_159
      0022D8 EF               [12] 2365 	mov	a,r7
      0022D9 F0               [24] 2366 	movx	@dptr,a
                                   2367 ;	nrf24l01.c:350: register_new_value = new_value;
      0022DA 90 00 A9         [24] 2368 	mov	dptr,#_register_new_value
      0022DD EF               [12] 2369 	mov	a,r7
      0022DE F0               [24] 2370 	movx	@dptr,a
                                   2371 ;	nrf24l01.c:351: nrf24_write(register_to_write_to, &register_new_value, 1, CLOSE); // restarts the nrf?!?!? where is requires two read calls to return 8 again
      0022DF 90 00 E5         [24] 2372 	mov	dptr,#_nrf24_write_PARM_2
      0022E2 74 A9            [12] 2373 	mov	a,#_register_new_value
      0022E4 F0               [24] 2374 	movx	@dptr,a
      0022E5 74 00            [12] 2375 	mov	a,#(_register_new_value >> 8)
      0022E7 A3               [24] 2376 	inc	dptr
      0022E8 F0               [24] 2377 	movx	@dptr,a
      0022E9 E4               [12] 2378 	clr	a
      0022EA A3               [24] 2379 	inc	dptr
      0022EB F0               [24] 2380 	movx	@dptr,a
      0022EC 90 00 E8         [24] 2381 	mov	dptr,#_nrf24_write_PARM_3
      0022EF 04               [12] 2382 	inc	a
      0022F0 F0               [24] 2383 	movx	@dptr,a
      0022F1 90 00 E9         [24] 2384 	mov	dptr,#_nrf24_write_PARM_4
      0022F4 E4               [12] 2385 	clr	a
      0022F5 F0               [24] 2386 	movx	@dptr,a
      0022F6 75 82 00         [24] 2387 	mov	dpl, #0x00
      0022F9 12 2B 77         [24] 2388 	lcall	_nrf24_write
                                   2389 ;	nrf24l01.c:352: printf("Sending to %d: %d\n", register_to_write_to, register_new_value);
      0022FC 90 00 A9         [24] 2390 	mov	dptr,#_register_new_value
      0022FF E0               [24] 2391 	movx	a,@dptr
      002300 FF               [12] 2392 	mov	r7,a
      002301 7E 00            [12] 2393 	mov	r6,#0x00
      002303 C0 07            [24] 2394 	push	ar7
      002305 C0 06            [24] 2395 	push	ar6
      002307 E4               [12] 2396 	clr	a
      002308 C0 E0            [24] 2397 	push	acc
      00230A C0 E0            [24] 2398 	push	acc
      00230C 74 E2            [12] 2399 	mov	a,#___str_1
      00230E C0 E0            [24] 2400 	push	acc
      002310 74 3B            [12] 2401 	mov	a,#(___str_1 >> 8)
      002312 C0 E0            [24] 2402 	push	acc
      002314 74 80            [12] 2403 	mov	a,#0x80
      002316 C0 E0            [24] 2404 	push	acc
      002318 12 30 5E         [24] 2405 	lcall	_printf
      00231B E5 81            [12] 2406 	mov	a,sp
      00231D 24 F9            [12] 2407 	add	a,#0xf9
      00231F F5 81            [12] 2408 	mov	sp,a
                                   2409 ;	nrf24l01.c:355: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      002321 90 00 DF         [24] 2410 	mov	dptr,#_nrf24_read_PARM_2
      002324 74 A8            [12] 2411 	mov	a,#_register_current_value
      002326 F0               [24] 2412 	movx	@dptr,a
      002327 74 00            [12] 2413 	mov	a,#(_register_current_value >> 8)
      002329 A3               [24] 2414 	inc	dptr
      00232A F0               [24] 2415 	movx	@dptr,a
      00232B E4               [12] 2416 	clr	a
      00232C A3               [24] 2417 	inc	dptr
      00232D F0               [24] 2418 	movx	@dptr,a
      00232E 90 00 E2         [24] 2419 	mov	dptr,#_nrf24_read_PARM_3
      002331 04               [12] 2420 	inc	a
      002332 F0               [24] 2421 	movx	@dptr,a
      002333 90 00 E3         [24] 2422 	mov	dptr,#_nrf24_read_PARM_4
      002336 E4               [12] 2423 	clr	a
      002337 F0               [24] 2424 	movx	@dptr,a
      002338 75 82 00         [24] 2425 	mov	dpl, #0x00
      00233B 12 2B 0B         [24] 2426 	lcall	_nrf24_read
                                   2427 ;	nrf24l01.c:356: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      00233E 90 00 A8         [24] 2428 	mov	dptr,#_register_current_value
      002341 E0               [24] 2429 	movx	a,@dptr
      002342 FF               [12] 2430 	mov	r7,a
      002343 7E 00            [12] 2431 	mov	r6,#0x00
      002345 C0 07            [24] 2432 	push	ar7
      002347 C0 06            [24] 2433 	push	ar6
      002349 E4               [12] 2434 	clr	a
      00234A C0 E0            [24] 2435 	push	acc
      00234C C0 E0            [24] 2436 	push	acc
      00234E 74 CF            [12] 2437 	mov	a,#___str_0
      002350 C0 E0            [24] 2438 	push	acc
      002352 74 3B            [12] 2439 	mov	a,#(___str_0 >> 8)
      002354 C0 E0            [24] 2440 	push	acc
      002356 74 80            [12] 2441 	mov	a,#0x80
      002358 C0 E0            [24] 2442 	push	acc
      00235A 12 30 5E         [24] 2443 	lcall	_printf
      00235D E5 81            [12] 2444 	mov	a,sp
      00235F 24 F9            [12] 2445 	add	a,#0xf9
      002361 F5 81            [12] 2446 	mov	sp,a
                                   2447 ;	nrf24l01.c:358: if (register_current_value == new_value) {
      002363 90 00 A8         [24] 2448 	mov	dptr,#_register_current_value
      002366 E0               [24] 2449 	movx	a,@dptr
      002367 FF               [12] 2450 	mov	r7,a
      002368 90 00 C7         [24] 2451 	mov	dptr,#_nrf24_device_new_value_10001_159
      00236B E0               [24] 2452 	movx	a,@dptr
      00236C FE               [12] 2453 	mov	r6,a
      00236D EF               [12] 2454 	mov	a,r7
      00236E B5 06 1E         [24] 2455 	cjne	a,ar6,00102$
                                   2456 ;	nrf24l01.c:359: printf("\rRead value matches the newly written value :D\n");
      002371 74 F5            [12] 2457 	mov	a,#___str_2
      002373 C0 E0            [24] 2458 	push	acc
      002375 74 3B            [12] 2459 	mov	a,#(___str_2 >> 8)
      002377 C0 E0            [24] 2460 	push	acc
      002379 74 80            [12] 2461 	mov	a,#0x80
      00237B C0 E0            [24] 2462 	push	acc
      00237D 12 30 5E         [24] 2463 	lcall	_printf
      002380 15 81            [12] 2464 	dec	sp
      002382 15 81            [12] 2465 	dec	sp
      002384 15 81            [12] 2466 	dec	sp
                                   2467 ;	nrf24l01.c:360: hardwareCheckPassed = true;
      002386 90 00 C6         [24] 2468 	mov	dptr,#_nrf24_device_hardwareCheckPassed_10001_159
      002389 74 01            [12] 2469 	mov	a,#0x01
      00238B F0               [24] 2470 	movx	@dptr,a
      00238C 02 22 82         [24] 2471 	ljmp	00104$
      00238F                       2472 00102$:
                                   2473 ;	nrf24l01.c:362: printf("\rRead value doesn't match the newly written value ;(\n");
      00238F 74 25            [12] 2474 	mov	a,#___str_3
      002391 C0 E0            [24] 2475 	push	acc
      002393 74 3C            [12] 2476 	mov	a,#(___str_3 >> 8)
      002395 C0 E0            [24] 2477 	push	acc
      002397 74 80            [12] 2478 	mov	a,#0x80
      002399 C0 E0            [24] 2479 	push	acc
      00239B 12 30 5E         [24] 2480 	lcall	_printf
      00239E 15 81            [12] 2481 	dec	sp
      0023A0 15 81            [12] 2482 	dec	sp
      0023A2 15 81            [12] 2483 	dec	sp
                                   2484 ;	nrf24l01.c:363: printf("\rRead: %d\n", register_current_value);
      0023A4 90 00 A8         [24] 2485 	mov	dptr,#_register_current_value
      0023A7 E0               [24] 2486 	movx	a,@dptr
      0023A8 FF               [12] 2487 	mov	r7,a
      0023A9 7E 00            [12] 2488 	mov	r6,#0x00
      0023AB C0 07            [24] 2489 	push	ar7
      0023AD C0 06            [24] 2490 	push	ar6
      0023AF 74 5B            [12] 2491 	mov	a,#___str_4
      0023B1 C0 E0            [24] 2492 	push	acc
      0023B3 74 3C            [12] 2493 	mov	a,#(___str_4 >> 8)
      0023B5 C0 E0            [24] 2494 	push	acc
      0023B7 74 80            [12] 2495 	mov	a,#0x80
      0023B9 C0 E0            [24] 2496 	push	acc
      0023BB 12 30 5E         [24] 2497 	lcall	_printf
      0023BE E5 81            [12] 2498 	mov	a,sp
      0023C0 24 FB            [12] 2499 	add	a,#0xfb
      0023C2 F5 81            [12] 2500 	mov	sp,a
      0023C4 02 22 82         [24] 2501 	ljmp	00104$
      0023C7                       2502 00106$:
                                   2503 ;	nrf24l01.c:367: printf("\rHardware Detected!\n");
      0023C7 74 66            [12] 2504 	mov	a,#___str_5
      0023C9 C0 E0            [24] 2505 	push	acc
      0023CB 74 3C            [12] 2506 	mov	a,#(___str_5 >> 8)
      0023CD C0 E0            [24] 2507 	push	acc
      0023CF 74 80            [12] 2508 	mov	a,#0x80
      0023D1 C0 E0            [24] 2509 	push	acc
      0023D3 12 30 5E         [24] 2510 	lcall	_printf
      0023D6 15 81            [12] 2511 	dec	sp
      0023D8 15 81            [12] 2512 	dec	sp
      0023DA 15 81            [12] 2513 	dec	sp
                                   2514 ;	nrf24l01.c:369: if ((reset_state == RESET) || (reset_flag == 0))
      0023DC 90 00 C4         [24] 2515 	mov	dptr,#_nrf24_device_PARM_2
      0023DF E0               [24] 2516 	movx	a,@dptr
      0023E0 FF               [12] 2517 	mov	r7,a
      0023E1 BF 01 02         [24] 2518 	cjne	r7,#0x01,00151$
      0023E4 80 06            [24] 2519 	sjmp	00107$
      0023E6                       2520 00151$:
      0023E6 90 01 72         [24] 2521 	mov	dptr,#_reset_flag
      0023E9 E0               [24] 2522 	movx	a,@dptr
      0023EA 70 03            [24] 2523 	jnz	00108$
      0023EC                       2524 00107$:
                                   2525 ;	nrf24l01.c:371: nrf24_reset();
      0023EC 12 20 82         [24] 2526 	lcall	_nrf24_reset
      0023EF                       2527 00108$:
                                   2528 ;	nrf24l01.c:374: switch (device_mode)
      0023EF 90 00 C5         [24] 2529 	mov	dptr,#_nrf24_device_device_mode_10000_157
      0023F2 E0               [24] 2530 	movx	a,@dptr
      0023F3 FF               [12] 2531 	mov  r7,a
      0023F4 24 FC            [12] 2532 	add	a,#0xff - 0x03
      0023F6 50 03            [24] 2533 	jnc	00153$
      0023F8 02 24 7B         [24] 2534 	ljmp	00114$
      0023FB                       2535 00153$:
      0023FB EF               [12] 2536 	mov	a,r7
      0023FC 2F               [12] 2537 	add	a,r7
                                   2538 ;	nrf24l01.c:376: case TRANSMITTER:
      0023FD 90 24 01         [24] 2539 	mov	dptr,#00154$
      002400 73               [24] 2540 	jmp	@a+dptr
      002401                       2541 00154$:
      002401 80 06            [24] 2542 	sjmp	00110$
      002403 80 1F            [24] 2543 	sjmp	00111$
      002405 80 42            [24] 2544 	sjmp	00112$
      002407 80 5C            [24] 2545 	sjmp	00113$
      002409                       2546 00110$:
                                   2547 ;	nrf24l01.c:377: nrf24_mode(POWER_DOWN);
      002409 75 82 00         [24] 2548 	mov	dpl, #0x00
      00240C 12 29 E1         [24] 2549 	lcall	_nrf24_mode
                                   2550 ;	nrf24l01.c:378: nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
      00240F 90 00 D9         [24] 2551 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002412 E4               [12] 2552 	clr	a
      002413 F0               [24] 2553 	movx	@dptr,a
      002414 90 00 DA         [24] 2554 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002417 F0               [24] 2555 	movx	@dptr,a
      002418 75 82 01         [24] 2556 	mov	dpl, #0x01
      00241B 12 28 E3         [24] 2557 	lcall	_nrf24_interrupt_mask
                                   2558 ;	nrf24l01.c:379: nrf24_mode(PTX);
      00241E 75 82 03         [24] 2559 	mov	dpl, #0x03
                                   2560 ;	nrf24l01.c:380: break;
                                   2561 ;	nrf24l01.c:381: case RECEIVER:
      002421 02 29 E1         [24] 2562 	ljmp	_nrf24_mode
      002424                       2563 00111$:
                                   2564 ;	nrf24l01.c:382: nrf24_mode(POWER_DOWN);
      002424 75 82 00         [24] 2565 	mov	dpl, #0x00
      002427 12 29 E1         [24] 2566 	lcall	_nrf24_mode
                                   2567 ;	nrf24l01.c:383: nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
      00242A 90 00 D9         [24] 2568 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      00242D 74 01            [12] 2569 	mov	a,#0x01
      00242F F0               [24] 2570 	movx	@dptr,a
      002430 90 00 DA         [24] 2571 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002433 F0               [24] 2572 	movx	@dptr,a
      002434 75 82 00         [24] 2573 	mov	dpl, #0x00
      002437 12 28 E3         [24] 2574 	lcall	_nrf24_interrupt_mask
                                   2575 ;	nrf24l01.c:384: nrf24_mode(PRX);
      00243A 75 82 04         [24] 2576 	mov	dpl, #0x04
      00243D 12 29 E1         [24] 2577 	lcall	_nrf24_mode
                                   2578 ;	nrf24l01.c:385: delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
      002440 90 00 64         [24] 2579 	mov	dptr,#0x0064
      002443 E4               [12] 2580 	clr	a
      002444 F5 F0            [12] 2581 	mov	b,a
                                   2582 ;	nrf24l01.c:386: break;
                                   2583 ;	nrf24l01.c:387: case POWER_SAVING:
      002446 02 1B FB         [24] 2584 	ljmp	_delay_function
      002449                       2585 00112$:
                                   2586 ;	nrf24l01.c:388: nrf24_mode(POWER_DOWN);
      002449 75 82 00         [24] 2587 	mov	dpl, #0x00
      00244C 12 29 E1         [24] 2588 	lcall	_nrf24_mode
                                   2589 ;	nrf24l01.c:389: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      00244F 90 00 D9         [24] 2590 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002452 74 01            [12] 2591 	mov	a,#0x01
      002454 F0               [24] 2592 	movx	@dptr,a
      002455 90 00 DA         [24] 2593 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002458 F0               [24] 2594 	movx	@dptr,a
      002459 75 82 01         [24] 2595 	mov	dpl, #0x01
      00245C 12 28 E3         [24] 2596 	lcall	_nrf24_interrupt_mask
                                   2597 ;	nrf24l01.c:390: nrf24_mode(STANDBYI);
      00245F 75 82 01         [24] 2598 	mov	dpl, #0x01
                                   2599 ;	nrf24l01.c:391: break;
                                   2600 ;	nrf24l01.c:392: case TURN_OFF:
      002462 02 29 E1         [24] 2601 	ljmp	_nrf24_mode
      002465                       2602 00113$:
                                   2603 ;	nrf24l01.c:393: nrf24_mode(POWER_DOWN);
      002465 75 82 00         [24] 2604 	mov	dpl, #0x00
      002468 12 29 E1         [24] 2605 	lcall	_nrf24_mode
                                   2606 ;	nrf24l01.c:394: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      00246B 90 00 D9         [24] 2607 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      00246E 74 01            [12] 2608 	mov	a,#0x01
      002470 F0               [24] 2609 	movx	@dptr,a
      002471 90 00 DA         [24] 2610 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002474 F0               [24] 2611 	movx	@dptr,a
      002475 75 82 01         [24] 2612 	mov	dpl, #0x01
                                   2613 ;	nrf24l01.c:395: break;
                                   2614 ;	nrf24l01.c:396: default:
      002478 02 28 E3         [24] 2615 	ljmp	_nrf24_interrupt_mask
      00247B                       2616 00114$:
                                   2617 ;	nrf24l01.c:397: nrf24_mode(POWER_DOWN);
      00247B 75 82 00         [24] 2618 	mov	dpl, #0x00
      00247E 12 29 E1         [24] 2619 	lcall	_nrf24_mode
                                   2620 ;	nrf24l01.c:398: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      002481 90 00 D9         [24] 2621 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002484 74 01            [12] 2622 	mov	a,#0x01
      002486 F0               [24] 2623 	movx	@dptr,a
      002487 90 00 DA         [24] 2624 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00248A F0               [24] 2625 	movx	@dptr,a
      00248B 75 82 01         [24] 2626 	mov	dpl, #0x01
                                   2627 ;	nrf24l01.c:400: }
                                   2628 ;	nrf24l01.c:401: }
      00248E 02 28 E3         [24] 2629 	ljmp	_nrf24_interrupt_mask
                                   2630 ;------------------------------------------------------------
                                   2631 ;Allocation info for local variables in function 'nrf24_automatic_retransmit_setup'
                                   2632 ;------------------------------------------------------------
                                   2633 ;retransmit_count          Allocated with name '_nrf24_automatic_retransmit_setup_PARM_2'
                                   2634 ;delay_time                Allocated with name '_nrf24_automatic_retransmit_setup_delay_time_10000_165'
                                   2635 ;------------------------------------------------------------
                                   2636 ;	nrf24l01.c:404: void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
                                   2637 ;	-----------------------------------------
                                   2638 ;	 function nrf24_automatic_retransmit_setup
                                   2639 ;	-----------------------------------------
      002491                       2640 _nrf24_automatic_retransmit_setup:
      002491 AF 83            [24] 2641 	mov	r7,dph
      002493 E5 82            [12] 2642 	mov	a,dpl
      002495 90 00 C9         [24] 2643 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      002498 F0               [24] 2644 	movx	@dptr,a
      002499 EF               [12] 2645 	mov	a,r7
      00249A A3               [24] 2646 	inc	dptr
      00249B F0               [24] 2647 	movx	@dptr,a
                                   2648 ;	nrf24l01.c:406: register_new_value = 0x00;
      00249C 90 00 A9         [24] 2649 	mov	dptr,#_register_new_value
      00249F E4               [12] 2650 	clr	a
      0024A0 F0               [24] 2651 	movx	@dptr,a
      0024A1                       2652 00108$:
                                   2653 ;	nrf24l01.c:407: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      0024A1 90 00 C9         [24] 2654 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      0024A4 E0               [24] 2655 	movx	a,@dptr
      0024A5 FE               [12] 2656 	mov	r6,a
      0024A6 A3               [24] 2657 	inc	dptr
      0024A7 E0               [24] 2658 	movx	a,@dptr
      0024A8 FF               [12] 2659 	mov	r7,a
      0024A9 C3               [12] 2660 	clr	c
      0024AA 74 FA            [12] 2661 	mov	a,#0xfa
      0024AC 9E               [12] 2662 	subb	a,r6
      0024AD E4               [12] 2663 	clr	a
      0024AE 9F               [12] 2664 	subb	a,r7
      0024AF 50 22            [24] 2665 	jnc	00101$
      0024B1 90 00 A9         [24] 2666 	mov	dptr,#_register_new_value
      0024B4 E0               [24] 2667 	movx	a,@dptr
      0024B5 FD               [12] 2668 	mov	r5,a
      0024B6 BD 0F 00         [24] 2669 	cjne	r5,#0x0f,00143$
      0024B9                       2670 00143$:
      0024B9 50 18            [24] 2671 	jnc	00101$
                                   2672 ;	nrf24l01.c:408: register_new_value++;
      0024BB 90 00 A9         [24] 2673 	mov	dptr,#_register_new_value
      0024BE ED               [12] 2674 	mov	a,r5
      0024BF 04               [12] 2675 	inc	a
      0024C0 F0               [24] 2676 	movx	@dptr,a
                                   2677 ;	nrf24l01.c:407: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      0024C1 EE               [12] 2678 	mov	a,r6
      0024C2 24 06            [12] 2679 	add	a,#0x06
      0024C4 FE               [12] 2680 	mov	r6,a
      0024C5 EF               [12] 2681 	mov	a,r7
      0024C6 34 FF            [12] 2682 	addc	a,#0xff
      0024C8 FF               [12] 2683 	mov	r7,a
      0024C9 90 00 C9         [24] 2684 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_10000_165
      0024CC EE               [12] 2685 	mov	a,r6
      0024CD F0               [24] 2686 	movx	@dptr,a
      0024CE EF               [12] 2687 	mov	a,r7
      0024CF A3               [24] 2688 	inc	dptr
      0024D0 F0               [24] 2689 	movx	@dptr,a
      0024D1 80 CE            [24] 2690 	sjmp	00108$
      0024D3                       2691 00101$:
                                   2692 ;	nrf24l01.c:409: register_new_value <<= ARD_0;
      0024D3 90 00 A9         [24] 2693 	mov	dptr,#_register_new_value
      0024D6 E0               [24] 2694 	movx	a,@dptr
      0024D7 C4               [12] 2695 	swap	a
      0024D8 54 F0            [12] 2696 	anl	a,#0xf0
      0024DA F0               [24] 2697 	movx	@dptr,a
                                   2698 ;	nrf24l01.c:410: if ((retransmit_count > 0) && (retransmit_count < 16))
      0024DB 90 00 C8         [24] 2699 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      0024DE E0               [24] 2700 	movx	a,@dptr
      0024DF FF               [12] 2701 	mov	r7,a
      0024E0 60 0B            [24] 2702 	jz	00103$
      0024E2 BF 10 00         [24] 2703 	cjne	r7,#0x10,00146$
      0024E5                       2704 00146$:
      0024E5 50 06            [24] 2705 	jnc	00103$
                                   2706 ;	nrf24l01.c:411: register_new_value |= retransmit_count;
      0024E7 90 00 A9         [24] 2707 	mov	dptr,#_register_new_value
      0024EA E0               [24] 2708 	movx	a,@dptr
      0024EB 4F               [12] 2709 	orl	a,r7
      0024EC F0               [24] 2710 	movx	@dptr,a
                                   2711 ;	nrf24l01.c:413: register_new_value |= 0;
      0024ED                       2712 00103$:
                                   2713 ;	nrf24l01.c:414: nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
      0024ED 90 00 E5         [24] 2714 	mov	dptr,#_nrf24_write_PARM_2
      0024F0 74 A9            [12] 2715 	mov	a,#_register_new_value
      0024F2 F0               [24] 2716 	movx	@dptr,a
      0024F3 74 00            [12] 2717 	mov	a,#(_register_new_value >> 8)
      0024F5 A3               [24] 2718 	inc	dptr
      0024F6 F0               [24] 2719 	movx	@dptr,a
      0024F7 E4               [12] 2720 	clr	a
      0024F8 A3               [24] 2721 	inc	dptr
      0024F9 F0               [24] 2722 	movx	@dptr,a
      0024FA 90 00 E8         [24] 2723 	mov	dptr,#_nrf24_write_PARM_3
      0024FD 04               [12] 2724 	inc	a
      0024FE F0               [24] 2725 	movx	@dptr,a
      0024FF 90 00 E9         [24] 2726 	mov	dptr,#_nrf24_write_PARM_4
      002502 E4               [12] 2727 	clr	a
      002503 F0               [24] 2728 	movx	@dptr,a
      002504 75 82 04         [24] 2729 	mov	dpl, #0x04
                                   2730 ;	nrf24l01.c:415: }
      002507 02 2B 77         [24] 2731 	ljmp	_nrf24_write
                                   2732 ;------------------------------------------------------------
                                   2733 ;Allocation info for local variables in function 'nrf24_auto_acknowledgment_setup'
                                   2734 ;------------------------------------------------------------
                                   2735 ;datapipe                  Allocated with name '_nrf24_auto_acknowledgment_setup_datapipe_10000_168'
                                   2736 ;------------------------------------------------------------
                                   2737 ;	nrf24l01.c:418: void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
                                   2738 ;	-----------------------------------------
                                   2739 ;	 function nrf24_auto_acknowledgment_setup
                                   2740 ;	-----------------------------------------
      00250A                       2741 _nrf24_auto_acknowledgment_setup:
      00250A E5 82            [12] 2742 	mov	a,dpl
      00250C 90 00 CB         [24] 2743 	mov	dptr,#_nrf24_auto_acknowledgment_setup_datapipe_10000_168
      00250F F0               [24] 2744 	movx	@dptr,a
                                   2745 ;	nrf24l01.c:420: if (datapipe < 7)
      002510 E0               [24] 2746 	movx	a,@dptr
      002511 FF               [12] 2747 	mov	r7,a
      002512 BF 07 00         [24] 2748 	cjne	r7,#0x07,00111$
      002515                       2749 00111$:
      002515 50 12            [24] 2750 	jnc	00102$
                                   2751 ;	nrf24l01.c:421: register_new_value = (1 << datapipe) - 1;
      002517 8F F0            [24] 2752 	mov	b,r7
      002519 05 F0            [12] 2753 	inc	b
      00251B 74 01            [12] 2754 	mov	a,#0x01
      00251D 80 02            [24] 2755 	sjmp	00114$
      00251F                       2756 00113$:
      00251F 25 E0            [12] 2757 	add	a,acc
      002521                       2758 00114$:
      002521 D5 F0 FB         [24] 2759 	djnz	b,00113$
      002524 14               [12] 2760 	dec	a
      002525 90 00 A9         [24] 2761 	mov	dptr,#_register_new_value
      002528 F0               [24] 2762 	movx	@dptr,a
      002529                       2763 00102$:
                                   2764 ;	nrf24l01.c:422: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      002529 90 00 E5         [24] 2765 	mov	dptr,#_nrf24_write_PARM_2
      00252C 74 A9            [12] 2766 	mov	a,#_register_new_value
      00252E F0               [24] 2767 	movx	@dptr,a
      00252F 74 00            [12] 2768 	mov	a,#(_register_new_value >> 8)
      002531 A3               [24] 2769 	inc	dptr
      002532 F0               [24] 2770 	movx	@dptr,a
      002533 E4               [12] 2771 	clr	a
      002534 A3               [24] 2772 	inc	dptr
      002535 F0               [24] 2773 	movx	@dptr,a
      002536 90 00 E8         [24] 2774 	mov	dptr,#_nrf24_write_PARM_3
      002539 04               [12] 2775 	inc	a
      00253A F0               [24] 2776 	movx	@dptr,a
      00253B 90 00 E9         [24] 2777 	mov	dptr,#_nrf24_write_PARM_4
      00253E E4               [12] 2778 	clr	a
      00253F F0               [24] 2779 	movx	@dptr,a
      002540 75 82 01         [24] 2780 	mov	dpl, #0x01
                                   2781 ;	nrf24l01.c:423: }
      002543 02 2B 77         [24] 2782 	ljmp	_nrf24_write
                                   2783 ;------------------------------------------------------------
                                   2784 ;Allocation info for local variables in function 'nrf24_dynamic_payload'
                                   2785 ;------------------------------------------------------------
                                   2786 ;datapipe                  Allocated with name '_nrf24_dynamic_payload_PARM_2'
                                   2787 ;state                     Allocated with name '_nrf24_dynamic_payload_state_10000_170'
                                   2788 ;------------------------------------------------------------
                                   2789 ;	nrf24l01.c:426: void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
                                   2790 ;	-----------------------------------------
                                   2791 ;	 function nrf24_dynamic_payload
                                   2792 ;	-----------------------------------------
      002546                       2793 _nrf24_dynamic_payload:
      002546 E5 82            [12] 2794 	mov	a,dpl
      002548 90 00 CD         [24] 2795 	mov	dptr,#_nrf24_dynamic_payload_state_10000_170
      00254B F0               [24] 2796 	movx	@dptr,a
                                   2797 ;	nrf24l01.c:428: nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
      00254C 90 00 CC         [24] 2798 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      00254F E0               [24] 2799 	movx	a,@dptr
      002550 FF               [12] 2800 	mov	r7,a
      002551 F5 82            [12] 2801 	mov	dpl,a
      002553 C0 07            [24] 2802 	push	ar7
      002555 12 25 0A         [24] 2803 	lcall	_nrf24_auto_acknowledgment_setup
                                   2804 ;	nrf24l01.c:429: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      002558 90 00 DF         [24] 2805 	mov	dptr,#_nrf24_read_PARM_2
      00255B 74 A8            [12] 2806 	mov	a,#_register_current_value
      00255D F0               [24] 2807 	movx	@dptr,a
      00255E 74 00            [12] 2808 	mov	a,#(_register_current_value >> 8)
      002560 A3               [24] 2809 	inc	dptr
      002561 F0               [24] 2810 	movx	@dptr,a
      002562 E4               [12] 2811 	clr	a
      002563 A3               [24] 2812 	inc	dptr
      002564 F0               [24] 2813 	movx	@dptr,a
      002565 90 00 E2         [24] 2814 	mov	dptr,#_nrf24_read_PARM_3
      002568 04               [12] 2815 	inc	a
      002569 F0               [24] 2816 	movx	@dptr,a
      00256A 90 00 E3         [24] 2817 	mov	dptr,#_nrf24_read_PARM_4
      00256D E4               [12] 2818 	clr	a
      00256E F0               [24] 2819 	movx	@dptr,a
      00256F 75 82 1D         [24] 2820 	mov	dpl, #0x1d
      002572 12 2B 0B         [24] 2821 	lcall	_nrf24_read
      002575 D0 07            [24] 2822 	pop	ar7
                                   2823 ;	nrf24l01.c:430: if (state == ENABLE)
      002577 90 00 CD         [24] 2824 	mov	dptr,#_nrf24_dynamic_payload_state_10000_170
      00257A E0               [24] 2825 	movx	a,@dptr
      00257B FE               [12] 2826 	mov	r6,a
      00257C BE 01 66         [24] 2827 	cjne	r6,#0x01,00104$
                                   2828 ;	nrf24l01.c:432: register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
      00257F 90 00 A8         [24] 2829 	mov	dptr,#_register_current_value
      002582 E0               [24] 2830 	movx	a,@dptr
      002583 90 00 A9         [24] 2831 	mov	dptr,#_register_new_value
      002586 44 04            [12] 2832 	orl	a,#0x04
      002588 F0               [24] 2833 	movx	@dptr,a
                                   2834 ;	nrf24l01.c:433: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      002589 90 00 E5         [24] 2835 	mov	dptr,#_nrf24_write_PARM_2
      00258C 74 A9            [12] 2836 	mov	a,#_register_new_value
      00258E F0               [24] 2837 	movx	@dptr,a
      00258F 74 00            [12] 2838 	mov	a,#(_register_new_value >> 8)
      002591 A3               [24] 2839 	inc	dptr
      002592 F0               [24] 2840 	movx	@dptr,a
      002593 E4               [12] 2841 	clr	a
      002594 A3               [24] 2842 	inc	dptr
      002595 F0               [24] 2843 	movx	@dptr,a
      002596 90 00 E8         [24] 2844 	mov	dptr,#_nrf24_write_PARM_3
      002599 04               [12] 2845 	inc	a
      00259A F0               [24] 2846 	movx	@dptr,a
      00259B 90 00 E9         [24] 2847 	mov	dptr,#_nrf24_write_PARM_4
      00259E E4               [12] 2848 	clr	a
      00259F F0               [24] 2849 	movx	@dptr,a
      0025A0 75 82 1D         [24] 2850 	mov	dpl, #0x1d
      0025A3 C0 07            [24] 2851 	push	ar7
      0025A5 12 2B 77         [24] 2852 	lcall	_nrf24_write
      0025A8 D0 07            [24] 2853 	pop	ar7
                                   2854 ;	nrf24l01.c:434: if (datapipe < 7)
      0025AA BF 07 00         [24] 2855 	cjne	r7,#0x07,00122$
      0025AD                       2856 00122$:
      0025AD 50 12            [24] 2857 	jnc	00102$
                                   2858 ;	nrf24l01.c:435: register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
      0025AF 8F F0            [24] 2859 	mov	b,r7
      0025B1 05 F0            [12] 2860 	inc	b
      0025B3 74 01            [12] 2861 	mov	a,#0x01
      0025B5 80 02            [24] 2862 	sjmp	00125$
      0025B7                       2863 00124$:
      0025B7 25 E0            [12] 2864 	add	a,acc
      0025B9                       2865 00125$:
      0025B9 D5 F0 FB         [24] 2866 	djnz	b,00124$
      0025BC 14               [12] 2867 	dec	a
      0025BD 90 00 A9         [24] 2868 	mov	dptr,#_register_new_value
      0025C0 F0               [24] 2869 	movx	@dptr,a
      0025C1                       2870 00102$:
                                   2871 ;	nrf24l01.c:436: nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
      0025C1 90 00 E5         [24] 2872 	mov	dptr,#_nrf24_write_PARM_2
      0025C4 74 A9            [12] 2873 	mov	a,#_register_new_value
      0025C6 F0               [24] 2874 	movx	@dptr,a
      0025C7 74 00            [12] 2875 	mov	a,#(_register_new_value >> 8)
      0025C9 A3               [24] 2876 	inc	dptr
      0025CA F0               [24] 2877 	movx	@dptr,a
      0025CB E4               [12] 2878 	clr	a
      0025CC A3               [24] 2879 	inc	dptr
      0025CD F0               [24] 2880 	movx	@dptr,a
      0025CE 90 00 E8         [24] 2881 	mov	dptr,#_nrf24_write_PARM_3
      0025D1 04               [12] 2882 	inc	a
      0025D2 F0               [24] 2883 	movx	@dptr,a
      0025D3 90 00 E9         [24] 2884 	mov	dptr,#_nrf24_write_PARM_4
      0025D6 E4               [12] 2885 	clr	a
      0025D7 F0               [24] 2886 	movx	@dptr,a
      0025D8 75 82 1C         [24] 2887 	mov	dpl, #0x1c
      0025DB 12 2B 77         [24] 2888 	lcall	_nrf24_write
                                   2889 ;	nrf24l01.c:437: dynamic_payload = ENABLE;
      0025DE 90 01 75         [24] 2890 	mov	dptr,#_dynamic_payload
      0025E1 74 01            [12] 2891 	mov	a,#0x01
      0025E3 F0               [24] 2892 	movx	@dptr,a
      0025E4 22               [24] 2893 	ret
      0025E5                       2894 00104$:
                                   2895 ;	nrf24l01.c:441: register_new_value = register_current_value & (~(1 << EN_DPL));
      0025E5 90 00 A8         [24] 2896 	mov	dptr,#_register_current_value
      0025E8 E0               [24] 2897 	movx	a,@dptr
      0025E9 90 00 A9         [24] 2898 	mov	dptr,#_register_new_value
      0025EC 54 FB            [12] 2899 	anl	a,#0xfb
      0025EE F0               [24] 2900 	movx	@dptr,a
                                   2901 ;	nrf24l01.c:442: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      0025EF 90 00 E5         [24] 2902 	mov	dptr,#_nrf24_write_PARM_2
      0025F2 74 A9            [12] 2903 	mov	a,#_register_new_value
      0025F4 F0               [24] 2904 	movx	@dptr,a
      0025F5 74 00            [12] 2905 	mov	a,#(_register_new_value >> 8)
      0025F7 A3               [24] 2906 	inc	dptr
      0025F8 F0               [24] 2907 	movx	@dptr,a
      0025F9 E4               [12] 2908 	clr	a
      0025FA A3               [24] 2909 	inc	dptr
      0025FB F0               [24] 2910 	movx	@dptr,a
      0025FC 90 00 E8         [24] 2911 	mov	dptr,#_nrf24_write_PARM_3
      0025FF 04               [12] 2912 	inc	a
      002600 F0               [24] 2913 	movx	@dptr,a
      002601 90 00 E9         [24] 2914 	mov	dptr,#_nrf24_write_PARM_4
      002604 E4               [12] 2915 	clr	a
      002605 F0               [24] 2916 	movx	@dptr,a
      002606 75 82 1D         [24] 2917 	mov	dpl, #0x1d
      002609 12 2B 77         [24] 2918 	lcall	_nrf24_write
                                   2919 ;	nrf24l01.c:443: dynamic_payload = DISABLE;
      00260C 90 01 75         [24] 2920 	mov	dptr,#_dynamic_payload
      00260F E4               [12] 2921 	clr	a
      002610 F0               [24] 2922 	movx	@dptr,a
                                   2923 ;	nrf24l01.c:445: }
      002611 22               [24] 2924 	ret
                                   2925 ;------------------------------------------------------------
                                   2926 ;Allocation info for local variables in function 'nrf24_datapipe_ptx'
                                   2927 ;------------------------------------------------------------
                                   2928 ;datapipe_number           Allocated with name '_nrf24_datapipe_ptx_datapipe_number_10000_174'
                                   2929 ;------------------------------------------------------------
                                   2930 ;	nrf24l01.c:448: void nrf24_datapipe_ptx(uint8_t datapipe_number)
                                   2931 ;	-----------------------------------------
                                   2932 ;	 function nrf24_datapipe_ptx
                                   2933 ;	-----------------------------------------
      002612                       2934 _nrf24_datapipe_ptx:
      002612 E5 82            [12] 2935 	mov	a,dpl
      002614 90 00 CE         [24] 2936 	mov	dptr,#_nrf24_datapipe_ptx_datapipe_number_10000_174
      002617 F0               [24] 2937 	movx	@dptr,a
                                   2938 ;	nrf24l01.c:450: nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
      002618 E0               [24] 2939 	movx	a,@dptr
      002619 FF               [12] 2940 	mov	r7,a
      00261A 1F               [12] 2941 	dec	r7
      00261B C2 D5            [12] 2942 	clr	F0
      00261D 75 F0 05         [24] 2943 	mov	b,#0x05
      002620 EF               [12] 2944 	mov	a,r7
      002621 30 E7 04         [24] 2945 	jnb	acc.7,00103$
      002624 B2 D5            [12] 2946 	cpl	F0
      002626 F4               [12] 2947 	cpl	a
      002627 04               [12] 2948 	inc	a
      002628                       2949 00103$:
      002628 A4               [48] 2950 	mul	ab
      002629 30 D5 0A         [24] 2951 	jnb	F0,00104$
      00262C F4               [12] 2952 	cpl	a
      00262D 24 01            [12] 2953 	add	a,#0x01
      00262F C5 F0            [12] 2954 	xch	a,b
      002631 F4               [12] 2955 	cpl	a
      002632 34 00            [12] 2956 	addc	a,#0x00
      002634 C5 F0            [12] 2957 	xch	a,b
      002636                       2958 00104$:
      002636 24 76            [12] 2959 	add	a, #_datapipe_address
      002638 FE               [12] 2960 	mov	r6,a
      002639 74 01            [12] 2961 	mov	a,#(_datapipe_address >> 8)
      00263B 35 F0            [12] 2962 	addc	a, b
      00263D FF               [12] 2963 	mov	r7,a
      00263E 7D 00            [12] 2964 	mov	r5,#0x00
      002640 90 00 AB         [24] 2965 	mov	dptr,#_current_address_width
      002643 E0               [24] 2966 	movx	a,@dptr
      002644 FC               [12] 2967 	mov	r4,a
      002645 90 00 E5         [24] 2968 	mov	dptr,#_nrf24_write_PARM_2
      002648 EE               [12] 2969 	mov	a,r6
      002649 F0               [24] 2970 	movx	@dptr,a
      00264A EF               [12] 2971 	mov	a,r7
      00264B A3               [24] 2972 	inc	dptr
      00264C F0               [24] 2973 	movx	@dptr,a
      00264D ED               [12] 2974 	mov	a,r5
      00264E A3               [24] 2975 	inc	dptr
      00264F F0               [24] 2976 	movx	@dptr,a
      002650 90 00 E8         [24] 2977 	mov	dptr,#_nrf24_write_PARM_3
      002653 EC               [12] 2978 	mov	a,r4
      002654 F0               [24] 2979 	movx	@dptr,a
      002655 90 00 E9         [24] 2980 	mov	dptr,#_nrf24_write_PARM_4
      002658 E4               [12] 2981 	clr	a
      002659 F0               [24] 2982 	movx	@dptr,a
      00265A 75 82 10         [24] 2983 	mov	dpl, #0x10
                                   2984 ;	nrf24l01.c:451: }
      00265D 02 2B 77         [24] 2985 	ljmp	_nrf24_write
                                   2986 ;------------------------------------------------------------
                                   2987 ;Allocation info for local variables in function 'nrf24_datapipe_address_configuration'
                                   2988 ;------------------------------------------------------------
                                   2989 ;address                   Allocated with name '_nrf24_datapipe_address_configuration_address_10000_177'
                                   2990 ;counter                   Allocated with name '_nrf24_datapipe_address_configuration_counter_20000_178'
                                   2991 ;------------------------------------------------------------
                                   2992 ;	nrf24l01.c:454: void nrf24_datapipe_address_configuration(void)
                                   2993 ;	-----------------------------------------
                                   2994 ;	 function nrf24_datapipe_address_configuration
                                   2995 ;	-----------------------------------------
      002660                       2996 _nrf24_datapipe_address_configuration:
                                   2997 ;	nrf24l01.c:458: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      002660 7F 0A            [12] 2998 	mov	r7,#0x0a
      002662 7E 00            [12] 2999 	mov	r6,#0x00
      002664                       3000 00103$:
      002664 BE 02 00         [24] 3001 	cjne	r6,#0x02,00120$
      002667                       3002 00120$:
      002667 50 3A            [24] 3003 	jnc	00105$
                                   3004 ;	nrf24l01.c:460: nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
      002669 EE               [12] 3005 	mov	a,r6
      00266A 75 F0 05         [24] 3006 	mov	b,#0x05
      00266D A4               [48] 3007 	mul	ab
      00266E 24 76            [12] 3008 	add	a, #_datapipe_address
      002670 FC               [12] 3009 	mov	r4,a
      002671 74 01            [12] 3010 	mov	a,#(_datapipe_address >> 8)
      002673 35 F0            [12] 3011 	addc	a, b
      002675 FD               [12] 3012 	mov	r5,a
      002676 7B 00            [12] 3013 	mov	r3,#0x00
      002678 90 00 AB         [24] 3014 	mov	dptr,#_current_address_width
      00267B E0               [24] 3015 	movx	a,@dptr
      00267C FA               [12] 3016 	mov	r2,a
      00267D 90 00 E5         [24] 3017 	mov	dptr,#_nrf24_write_PARM_2
      002680 EC               [12] 3018 	mov	a,r4
      002681 F0               [24] 3019 	movx	@dptr,a
      002682 ED               [12] 3020 	mov	a,r5
      002683 A3               [24] 3021 	inc	dptr
      002684 F0               [24] 3022 	movx	@dptr,a
      002685 EB               [12] 3023 	mov	a,r3
      002686 A3               [24] 3024 	inc	dptr
      002687 F0               [24] 3025 	movx	@dptr,a
      002688 90 00 E8         [24] 3026 	mov	dptr,#_nrf24_write_PARM_3
      00268B EA               [12] 3027 	mov	a,r2
      00268C F0               [24] 3028 	movx	@dptr,a
      00268D 90 00 E9         [24] 3029 	mov	dptr,#_nrf24_write_PARM_4
      002690 E4               [12] 3030 	clr	a
      002691 F0               [24] 3031 	movx	@dptr,a
      002692 8F 82            [24] 3032 	mov	dpl, r7
      002694 C0 07            [24] 3033 	push	ar7
      002696 C0 06            [24] 3034 	push	ar6
      002698 12 2B 77         [24] 3035 	lcall	_nrf24_write
      00269B D0 06            [24] 3036 	pop	ar6
      00269D D0 07            [24] 3037 	pop	ar7
                                   3038 ;	nrf24l01.c:461: address++;
      00269F 0F               [12] 3039 	inc	r7
                                   3040 ;	nrf24l01.c:458: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      0026A0 0E               [12] 3041 	inc	r6
      0026A1 80 C1            [24] 3042 	sjmp	00103$
      0026A3                       3043 00105$:
                                   3044 ;	nrf24l01.c:463: }
      0026A3 22               [24] 3045 	ret
                                   3046 ;------------------------------------------------------------
                                   3047 ;Allocation info for local variables in function 'nrf24_prx_static_payload_width'
                                   3048 ;------------------------------------------------------------
                                   3049 ;number_of_datapipes       Allocated with name '_nrf24_prx_static_payload_width_PARM_2'
                                   3050 ;static_payload_width      Allocated with name '_nrf24_prx_static_payload_width_static_payload_width_10000_180'
                                   3051 ;address                   Allocated with name '_nrf24_prx_static_payload_width_address_20000_182'
                                   3052 ;------------------------------------------------------------
                                   3053 ;	nrf24l01.c:466: void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
                                   3054 ;	-----------------------------------------
                                   3055 ;	 function nrf24_prx_static_payload_width
                                   3056 ;	-----------------------------------------
      0026A4                       3057 _nrf24_prx_static_payload_width:
      0026A4 E5 82            [12] 3058 	mov	a,dpl
      0026A6 90 00 D0         [24] 3059 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      0026A9 F0               [24] 3060 	movx	@dptr,a
                                   3061 ;	nrf24l01.c:468: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      0026AA 7F 11            [12] 3062 	mov	r7,#0x11
      0026AC 90 00 CF         [24] 3063 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      0026AF E0               [24] 3064 	movx	a,@dptr
      0026B0 FE               [12] 3065 	mov	r6,a
      0026B1                       3066 00103$:
      0026B1 EE               [12] 3067 	mov	a,r6
      0026B2 60 28            [24] 3068 	jz	00101$
                                   3069 ;	nrf24l01.c:470: nrf24_write(address, &static_payload_width, 1, CLOSE);
      0026B4 90 00 E5         [24] 3070 	mov	dptr,#_nrf24_write_PARM_2
      0026B7 74 D0            [12] 3071 	mov	a,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      0026B9 F0               [24] 3072 	movx	@dptr,a
      0026BA 74 00            [12] 3073 	mov	a,#(_nrf24_prx_static_payload_width_static_payload_width_10000_180 >> 8)
      0026BC A3               [24] 3074 	inc	dptr
      0026BD F0               [24] 3075 	movx	@dptr,a
      0026BE E4               [12] 3076 	clr	a
      0026BF A3               [24] 3077 	inc	dptr
      0026C0 F0               [24] 3078 	movx	@dptr,a
      0026C1 90 00 E8         [24] 3079 	mov	dptr,#_nrf24_write_PARM_3
      0026C4 04               [12] 3080 	inc	a
      0026C5 F0               [24] 3081 	movx	@dptr,a
      0026C6 90 00 E9         [24] 3082 	mov	dptr,#_nrf24_write_PARM_4
      0026C9 E4               [12] 3083 	clr	a
      0026CA F0               [24] 3084 	movx	@dptr,a
      0026CB 8F 82            [24] 3085 	mov	dpl, r7
      0026CD C0 07            [24] 3086 	push	ar7
      0026CF C0 06            [24] 3087 	push	ar6
      0026D1 12 2B 77         [24] 3088 	lcall	_nrf24_write
      0026D4 D0 06            [24] 3089 	pop	ar6
      0026D6 D0 07            [24] 3090 	pop	ar7
                                   3091 ;	nrf24l01.c:471: address++;
      0026D8 0F               [12] 3092 	inc	r7
                                   3093 ;	nrf24l01.c:468: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      0026D9 1E               [12] 3094 	dec	r6
      0026DA 80 D5            [24] 3095 	sjmp	00103$
      0026DC                       3096 00101$:
                                   3097 ;	nrf24l01.c:473: current_payload_width = static_payload_width;
      0026DC 90 00 D0         [24] 3098 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_10000_180
      0026DF E0               [24] 3099 	movx	a,@dptr
      0026E0 90 00 AC         [24] 3100 	mov	dptr,#_current_payload_width
      0026E3 F0               [24] 3101 	movx	@dptr,a
                                   3102 ;	nrf24l01.c:474: }
      0026E4 22               [24] 3103 	ret
                                   3104 ;------------------------------------------------------------
                                   3105 ;Allocation info for local variables in function 'nrf24_datapipe_enable'
                                   3106 ;------------------------------------------------------------
                                   3107 ;number_of_datapipes       Allocated with name '_nrf24_datapipe_enable_number_of_datapipes_10000_184'
                                   3108 ;------------------------------------------------------------
                                   3109 ;	nrf24l01.c:477: void nrf24_datapipe_enable(uint8_t number_of_datapipes)
                                   3110 ;	-----------------------------------------
                                   3111 ;	 function nrf24_datapipe_enable
                                   3112 ;	-----------------------------------------
      0026E5                       3113 _nrf24_datapipe_enable:
      0026E5 E5 82            [12] 3114 	mov	a,dpl
      0026E7 90 00 D1         [24] 3115 	mov	dptr,#_nrf24_datapipe_enable_number_of_datapipes_10000_184
      0026EA F0               [24] 3116 	movx	@dptr,a
                                   3117 ;	nrf24l01.c:479: register_new_value = (1 << number_of_datapipes) - 1;
      0026EB E0               [24] 3118 	movx	a,@dptr
      0026EC FF               [12] 3119 	mov	r7,a
      0026ED 8F F0            [24] 3120 	mov	b,r7
      0026EF 05 F0            [12] 3121 	inc	b
      0026F1 74 01            [12] 3122 	mov	a,#0x01
      0026F3 80 02            [24] 3123 	sjmp	00104$
      0026F5                       3124 00103$:
      0026F5 25 E0            [12] 3125 	add	a,acc
      0026F7                       3126 00104$:
      0026F7 D5 F0 FB         [24] 3127 	djnz	b,00103$
      0026FA 14               [12] 3128 	dec	a
      0026FB 90 00 A9         [24] 3129 	mov	dptr,#_register_new_value
      0026FE F0               [24] 3130 	movx	@dptr,a
                                   3131 ;	nrf24l01.c:480: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0026FF 90 00 E5         [24] 3132 	mov	dptr,#_nrf24_write_PARM_2
      002702 74 A9            [12] 3133 	mov	a,#_register_new_value
      002704 F0               [24] 3134 	movx	@dptr,a
      002705 74 00            [12] 3135 	mov	a,#(_register_new_value >> 8)
      002707 A3               [24] 3136 	inc	dptr
      002708 F0               [24] 3137 	movx	@dptr,a
      002709 E4               [12] 3138 	clr	a
      00270A A3               [24] 3139 	inc	dptr
      00270B F0               [24] 3140 	movx	@dptr,a
      00270C 90 00 E8         [24] 3141 	mov	dptr,#_nrf24_write_PARM_3
      00270F 04               [12] 3142 	inc	a
      002710 F0               [24] 3143 	movx	@dptr,a
      002711 90 00 E9         [24] 3144 	mov	dptr,#_nrf24_write_PARM_4
      002714 E4               [12] 3145 	clr	a
      002715 F0               [24] 3146 	movx	@dptr,a
      002716 75 82 02         [24] 3147 	mov	dpl, #0x02
                                   3148 ;	nrf24l01.c:481: }
      002719 02 2B 77         [24] 3149 	ljmp	_nrf24_write
                                   3150 ;------------------------------------------------------------
                                   3151 ;Allocation info for local variables in function 'nrf24_address_width'
                                   3152 ;------------------------------------------------------------
                                   3153 ;address_width             Allocated with name '_nrf24_address_width_address_width_10000_186'
                                   3154 ;------------------------------------------------------------
                                   3155 ;	nrf24l01.c:484: void nrf24_address_width(uint8_t address_width)
                                   3156 ;	-----------------------------------------
                                   3157 ;	 function nrf24_address_width
                                   3158 ;	-----------------------------------------
      00271C                       3159 _nrf24_address_width:
      00271C E5 82            [12] 3160 	mov	a,dpl
      00271E 90 00 D2         [24] 3161 	mov	dptr,#_nrf24_address_width_address_width_10000_186
      002721 F0               [24] 3162 	movx	@dptr,a
                                   3163 ;	nrf24l01.c:486: if ((address_width <= 5) && (address_width >= 3))
      002722 E0               [24] 3164 	movx	a,@dptr
      002723 FF               [12] 3165 	mov  r7,a
      002724 24 FA            [12] 3166 	add	a,#0xff - 0x05
      002726 40 0E            [24] 3167 	jc	00102$
      002728 BF 03 00         [24] 3168 	cjne	r7,#0x03,00120$
      00272B                       3169 00120$:
      00272B 40 09            [24] 3170 	jc	00102$
                                   3171 ;	nrf24l01.c:488: write_pointer = address_width - 2;
      00272D EF               [12] 3172 	mov	a,r7
      00272E 24 FE            [12] 3173 	add	a,#0xfe
      002730 90 00 AA         [24] 3174 	mov	dptr,#_write_pointer
      002733 F0               [24] 3175 	movx	@dptr,a
      002734 80 06            [24] 3176 	sjmp	00103$
      002736                       3177 00102$:
                                   3178 ;	nrf24l01.c:492: write_pointer = 3;
      002736 90 00 AA         [24] 3179 	mov	dptr,#_write_pointer
      002739 74 03            [12] 3180 	mov	a,#0x03
      00273B F0               [24] 3181 	movx	@dptr,a
      00273C                       3182 00103$:
                                   3183 ;	nrf24l01.c:494: nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
      00273C 90 00 E5         [24] 3184 	mov	dptr,#_nrf24_write_PARM_2
      00273F 74 AA            [12] 3185 	mov	a,#_write_pointer
      002741 F0               [24] 3186 	movx	@dptr,a
      002742 74 00            [12] 3187 	mov	a,#(_write_pointer >> 8)
      002744 A3               [24] 3188 	inc	dptr
      002745 F0               [24] 3189 	movx	@dptr,a
      002746 E4               [12] 3190 	clr	a
      002747 A3               [24] 3191 	inc	dptr
      002748 F0               [24] 3192 	movx	@dptr,a
      002749 90 00 E8         [24] 3193 	mov	dptr,#_nrf24_write_PARM_3
      00274C 04               [12] 3194 	inc	a
      00274D F0               [24] 3195 	movx	@dptr,a
      00274E 90 00 E9         [24] 3196 	mov	dptr,#_nrf24_write_PARM_4
      002751 E4               [12] 3197 	clr	a
      002752 F0               [24] 3198 	movx	@dptr,a
      002753 75 82 03         [24] 3199 	mov	dpl, #0x03
      002756 12 2B 77         [24] 3200 	lcall	_nrf24_write
                                   3201 ;	nrf24l01.c:495: current_address_width = address_width;
      002759 90 00 D2         [24] 3202 	mov	dptr,#_nrf24_address_width_address_width_10000_186
      00275C E0               [24] 3203 	movx	a,@dptr
      00275D 90 00 AB         [24] 3204 	mov	dptr,#_current_address_width
      002760 F0               [24] 3205 	movx	@dptr,a
                                   3206 ;	nrf24l01.c:496: }
      002761 22               [24] 3207 	ret
                                   3208 ;------------------------------------------------------------
                                   3209 ;Allocation info for local variables in function 'nrf24_rf_datarate'
                                   3210 ;------------------------------------------------------------
                                   3211 ;rf_datarate               Allocated with name '_nrf24_rf_datarate_rf_datarate_10000_190'
                                   3212 ;------------------------------------------------------------
                                   3213 ;	nrf24l01.c:499: void nrf24_rf_datarate(uint16_t rf_datarate)
                                   3214 ;	-----------------------------------------
                                   3215 ;	 function nrf24_rf_datarate
                                   3216 ;	-----------------------------------------
      002762                       3217 _nrf24_rf_datarate:
      002762 AF 83            [24] 3218 	mov	r7,dph
      002764 E5 82            [12] 3219 	mov	a,dpl
      002766 90 00 D3         [24] 3220 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_10000_190
      002769 F0               [24] 3221 	movx	@dptr,a
      00276A EF               [12] 3222 	mov	a,r7
      00276B A3               [24] 3223 	inc	dptr
      00276C F0               [24] 3224 	movx	@dptr,a
                                   3225 ;	nrf24l01.c:501: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      00276D 90 00 DF         [24] 3226 	mov	dptr,#_nrf24_read_PARM_2
      002770 74 A8            [12] 3227 	mov	a,#_register_current_value
      002772 F0               [24] 3228 	movx	@dptr,a
      002773 74 00            [12] 3229 	mov	a,#(_register_current_value >> 8)
      002775 A3               [24] 3230 	inc	dptr
      002776 F0               [24] 3231 	movx	@dptr,a
      002777 E4               [12] 3232 	clr	a
      002778 A3               [24] 3233 	inc	dptr
      002779 F0               [24] 3234 	movx	@dptr,a
      00277A 90 00 E2         [24] 3235 	mov	dptr,#_nrf24_read_PARM_3
      00277D 04               [12] 3236 	inc	a
      00277E F0               [24] 3237 	movx	@dptr,a
      00277F 90 00 E3         [24] 3238 	mov	dptr,#_nrf24_read_PARM_4
      002782 E4               [12] 3239 	clr	a
      002783 F0               [24] 3240 	movx	@dptr,a
      002784 75 82 06         [24] 3241 	mov	dpl, #0x06
      002787 12 2B 0B         [24] 3242 	lcall	_nrf24_read
                                   3243 ;	nrf24l01.c:502: register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
      00278A 90 00 A8         [24] 3244 	mov	dptr,#_register_current_value
      00278D E0               [24] 3245 	movx	a,@dptr
      00278E 53 E0 D7         [24] 3246 	anl	acc,#0xd7
      002791 F0               [24] 3247 	movx	@dptr,a
                                   3248 ;	nrf24l01.c:503: switch (rf_datarate)
      002792 90 00 D3         [24] 3249 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_10000_190
      002795 E0               [24] 3250 	movx	a,@dptr
      002796 FE               [12] 3251 	mov	r6,a
      002797 A3               [24] 3252 	inc	dptr
      002798 E0               [24] 3253 	movx	a,@dptr
      002799 FF               [12] 3254 	mov	r7,a
      00279A BE FA 05         [24] 3255 	cjne	r6,#0xfa,00126$
      00279D BF 00 02         [24] 3256 	cjne	r7,#0x00,00126$
      0027A0 80 24            [24] 3257 	sjmp	00103$
      0027A2                       3258 00126$:
      0027A2 BE E8 05         [24] 3259 	cjne	r6,#0xe8,00127$
      0027A5 BF 03 02         [24] 3260 	cjne	r7,#0x03,00127$
      0027A8 80 12            [24] 3261 	sjmp	00102$
      0027AA                       3262 00127$:
      0027AA BE D0 25         [24] 3263 	cjne	r6,#0xd0,00104$
      0027AD BF 07 22         [24] 3264 	cjne	r7,#0x07,00104$
                                   3265 ;	nrf24l01.c:506: register_new_value = register_current_value | (1 << RF_DR_HIGH);
      0027B0 90 00 A8         [24] 3266 	mov	dptr,#_register_current_value
      0027B3 E0               [24] 3267 	movx	a,@dptr
      0027B4 90 00 A9         [24] 3268 	mov	dptr,#_register_new_value
      0027B7 44 08            [12] 3269 	orl	a,#0x08
      0027B9 F0               [24] 3270 	movx	@dptr,a
                                   3271 ;	nrf24l01.c:507: break;
                                   3272 ;	nrf24l01.c:508: case 1000:
      0027BA 80 1E            [24] 3273 	sjmp	00105$
      0027BC                       3274 00102$:
                                   3275 ;	nrf24l01.c:509: register_new_value = register_current_value;
      0027BC 90 00 A8         [24] 3276 	mov	dptr,#_register_current_value
      0027BF E0               [24] 3277 	movx	a,@dptr
      0027C0 90 00 A9         [24] 3278 	mov	dptr,#_register_new_value
      0027C3 F0               [24] 3279 	movx	@dptr,a
                                   3280 ;	nrf24l01.c:510: break;
                                   3281 ;	nrf24l01.c:511: case 250:
      0027C4 80 14            [24] 3282 	sjmp	00105$
      0027C6                       3283 00103$:
                                   3284 ;	nrf24l01.c:512: register_new_value = register_current_value | (1 << RF_DR_LOW);
      0027C6 90 00 A8         [24] 3285 	mov	dptr,#_register_current_value
      0027C9 E0               [24] 3286 	movx	a,@dptr
      0027CA 90 00 A9         [24] 3287 	mov	dptr,#_register_new_value
      0027CD 44 20            [12] 3288 	orl	a,#0x20
      0027CF F0               [24] 3289 	movx	@dptr,a
                                   3290 ;	nrf24l01.c:513: break;
                                   3291 ;	nrf24l01.c:514: default:
      0027D0 80 08            [24] 3292 	sjmp	00105$
      0027D2                       3293 00104$:
                                   3294 ;	nrf24l01.c:515: register_new_value = register_current_value;
      0027D2 90 00 A8         [24] 3295 	mov	dptr,#_register_current_value
      0027D5 E0               [24] 3296 	movx	a,@dptr
      0027D6 90 00 A9         [24] 3297 	mov	dptr,#_register_new_value
      0027D9 F0               [24] 3298 	movx	@dptr,a
                                   3299 ;	nrf24l01.c:517: }
      0027DA                       3300 00105$:
                                   3301 ;	nrf24l01.c:518: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      0027DA 90 00 E5         [24] 3302 	mov	dptr,#_nrf24_write_PARM_2
      0027DD 74 A9            [12] 3303 	mov	a,#_register_new_value
      0027DF F0               [24] 3304 	movx	@dptr,a
      0027E0 74 00            [12] 3305 	mov	a,#(_register_new_value >> 8)
      0027E2 A3               [24] 3306 	inc	dptr
      0027E3 F0               [24] 3307 	movx	@dptr,a
      0027E4 E4               [12] 3308 	clr	a
      0027E5 A3               [24] 3309 	inc	dptr
      0027E6 F0               [24] 3310 	movx	@dptr,a
      0027E7 90 00 E8         [24] 3311 	mov	dptr,#_nrf24_write_PARM_3
      0027EA 04               [12] 3312 	inc	a
      0027EB F0               [24] 3313 	movx	@dptr,a
      0027EC 90 00 E9         [24] 3314 	mov	dptr,#_nrf24_write_PARM_4
      0027EF E4               [12] 3315 	clr	a
      0027F0 F0               [24] 3316 	movx	@dptr,a
      0027F1 75 82 06         [24] 3317 	mov	dpl, #0x06
                                   3318 ;	nrf24l01.c:519: }
      0027F4 02 2B 77         [24] 3319 	ljmp	_nrf24_write
                                   3320 ;------------------------------------------------------------
                                   3321 ;Allocation info for local variables in function 'nrf24_rf_power'
                                   3322 ;------------------------------------------------------------
                                   3323 ;rf_power                  Allocated with name '_nrf24_rf_power_rf_power_10000_193'
                                   3324 ;------------------------------------------------------------
                                   3325 ;	nrf24l01.c:522: void nrf24_rf_power(uint8_t rf_power)
                                   3326 ;	-----------------------------------------
                                   3327 ;	 function nrf24_rf_power
                                   3328 ;	-----------------------------------------
      0027F7                       3329 _nrf24_rf_power:
      0027F7 E5 82            [12] 3330 	mov	a,dpl
      0027F9 90 00 D5         [24] 3331 	mov	dptr,#_nrf24_rf_power_rf_power_10000_193
      0027FC F0               [24] 3332 	movx	@dptr,a
                                   3333 ;	nrf24l01.c:524: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      0027FD 90 00 DF         [24] 3334 	mov	dptr,#_nrf24_read_PARM_2
      002800 74 A8            [12] 3335 	mov	a,#_register_current_value
      002802 F0               [24] 3336 	movx	@dptr,a
      002803 74 00            [12] 3337 	mov	a,#(_register_current_value >> 8)
      002805 A3               [24] 3338 	inc	dptr
      002806 F0               [24] 3339 	movx	@dptr,a
      002807 E4               [12] 3340 	clr	a
      002808 A3               [24] 3341 	inc	dptr
      002809 F0               [24] 3342 	movx	@dptr,a
      00280A 90 00 E2         [24] 3343 	mov	dptr,#_nrf24_read_PARM_3
      00280D 04               [12] 3344 	inc	a
      00280E F0               [24] 3345 	movx	@dptr,a
      00280F 90 00 E3         [24] 3346 	mov	dptr,#_nrf24_read_PARM_4
      002812 E4               [12] 3347 	clr	a
      002813 F0               [24] 3348 	movx	@dptr,a
      002814 75 82 06         [24] 3349 	mov	dpl, #0x06
      002817 12 2B 0B         [24] 3350 	lcall	_nrf24_read
                                   3351 ;	nrf24l01.c:525: register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
      00281A 90 00 A8         [24] 3352 	mov	dptr,#_register_current_value
      00281D E0               [24] 3353 	movx	a,@dptr
      00281E 53 E0 F9         [24] 3354 	anl	acc,#0xf9
      002821 F0               [24] 3355 	movx	@dptr,a
                                   3356 ;	nrf24l01.c:526: switch (rf_power)
      002822 90 00 D5         [24] 3357 	mov	dptr,#_nrf24_rf_power_rf_power_10000_193
      002825 E0               [24] 3358 	movx	a,@dptr
      002826 FF               [12] 3359 	mov	r7,a
      002827 60 0F            [24] 3360 	jz	00101$
      002829 BF 06 02         [24] 3361 	cjne	r7,#0x06,00134$
      00282C 80 16            [24] 3362 	sjmp	00102$
      00282E                       3363 00134$:
      00282E BF 0C 02         [24] 3364 	cjne	r7,#0x0c,00135$
      002831 80 1D            [24] 3365 	sjmp	00103$
      002833                       3366 00135$:
                                   3367 ;	nrf24l01.c:528: case 0:
      002833 BF 12 30         [24] 3368 	cjne	r7,#0x12,00105$
      002836 80 24            [24] 3369 	sjmp	00104$
      002838                       3370 00101$:
                                   3371 ;	nrf24l01.c:529: register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
      002838 90 00 A8         [24] 3372 	mov	dptr,#_register_current_value
      00283B E0               [24] 3373 	movx	a,@dptr
      00283C 90 00 A9         [24] 3374 	mov	dptr,#_register_new_value
      00283F 44 06            [12] 3375 	orl	a,#0x06
      002841 F0               [24] 3376 	movx	@dptr,a
                                   3377 ;	nrf24l01.c:530: break;
                                   3378 ;	nrf24l01.c:531: case 6:
      002842 80 2C            [24] 3379 	sjmp	00106$
      002844                       3380 00102$:
                                   3381 ;	nrf24l01.c:532: register_new_value = register_current_value | (1 << RF_PWR_1);
      002844 90 00 A8         [24] 3382 	mov	dptr,#_register_current_value
      002847 E0               [24] 3383 	movx	a,@dptr
      002848 90 00 A9         [24] 3384 	mov	dptr,#_register_new_value
      00284B 44 04            [12] 3385 	orl	a,#0x04
      00284D F0               [24] 3386 	movx	@dptr,a
                                   3387 ;	nrf24l01.c:533: break;
                                   3388 ;	nrf24l01.c:534: case 12:
      00284E 80 20            [24] 3389 	sjmp	00106$
      002850                       3390 00103$:
                                   3391 ;	nrf24l01.c:535: register_new_value = register_current_value | (1 << RF_PWR_0);
      002850 90 00 A8         [24] 3392 	mov	dptr,#_register_current_value
      002853 E0               [24] 3393 	movx	a,@dptr
      002854 90 00 A9         [24] 3394 	mov	dptr,#_register_new_value
      002857 44 02            [12] 3395 	orl	a,#0x02
      002859 F0               [24] 3396 	movx	@dptr,a
                                   3397 ;	nrf24l01.c:536: break;
                                   3398 ;	nrf24l01.c:537: case 18:
      00285A 80 14            [24] 3399 	sjmp	00106$
      00285C                       3400 00104$:
                                   3401 ;	nrf24l01.c:538: register_new_value = register_current_value;
      00285C 90 00 A8         [24] 3402 	mov	dptr,#_register_current_value
      00285F E0               [24] 3403 	movx	a,@dptr
      002860 90 00 A9         [24] 3404 	mov	dptr,#_register_new_value
      002863 F0               [24] 3405 	movx	@dptr,a
                                   3406 ;	nrf24l01.c:539: break;
                                   3407 ;	nrf24l01.c:540: default:
      002864 80 0A            [24] 3408 	sjmp	00106$
      002866                       3409 00105$:
                                   3410 ;	nrf24l01.c:541: register_new_value = register_current_value | (1 << RF_PWR_1);
      002866 90 00 A8         [24] 3411 	mov	dptr,#_register_current_value
      002869 E0               [24] 3412 	movx	a,@dptr
      00286A 90 00 A9         [24] 3413 	mov	dptr,#_register_new_value
      00286D 44 04            [12] 3414 	orl	a,#0x04
      00286F F0               [24] 3415 	movx	@dptr,a
                                   3416 ;	nrf24l01.c:543: }
      002870                       3417 00106$:
                                   3418 ;	nrf24l01.c:544: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      002870 90 00 E5         [24] 3419 	mov	dptr,#_nrf24_write_PARM_2
      002873 74 A9            [12] 3420 	mov	a,#_register_new_value
      002875 F0               [24] 3421 	movx	@dptr,a
      002876 74 00            [12] 3422 	mov	a,#(_register_new_value >> 8)
      002878 A3               [24] 3423 	inc	dptr
      002879 F0               [24] 3424 	movx	@dptr,a
      00287A E4               [12] 3425 	clr	a
      00287B A3               [24] 3426 	inc	dptr
      00287C F0               [24] 3427 	movx	@dptr,a
      00287D 90 00 E8         [24] 3428 	mov	dptr,#_nrf24_write_PARM_3
      002880 04               [12] 3429 	inc	a
      002881 F0               [24] 3430 	movx	@dptr,a
      002882 90 00 E9         [24] 3431 	mov	dptr,#_nrf24_write_PARM_4
      002885 E4               [12] 3432 	clr	a
      002886 F0               [24] 3433 	movx	@dptr,a
      002887 75 82 06         [24] 3434 	mov	dpl, #0x06
                                   3435 ;	nrf24l01.c:545: }
      00288A 02 2B 77         [24] 3436 	ljmp	_nrf24_write
                                   3437 ;------------------------------------------------------------
                                   3438 ;Allocation info for local variables in function 'nrf24_rf_channel'
                                   3439 ;------------------------------------------------------------
                                   3440 ;rf_channel                Allocated with name '_nrf24_rf_channel_rf_channel_10000_196'
                                   3441 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_20000_198'
                                   3442 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_20000_199'
                                   3443 ;------------------------------------------------------------
                                   3444 ;	nrf24l01.c:548: void nrf24_rf_channel(uint8_t rf_channel)
                                   3445 ;	-----------------------------------------
                                   3446 ;	 function nrf24_rf_channel
                                   3447 ;	-----------------------------------------
      00288D                       3448 _nrf24_rf_channel:
      00288D E5 82            [12] 3449 	mov	a,dpl
      00288F 90 00 D6         [24] 3450 	mov	dptr,#_nrf24_rf_channel_rf_channel_10000_196
      002892 F0               [24] 3451 	movx	@dptr,a
                                   3452 ;	nrf24l01.c:550: if ((rf_channel <= 125) && (rf_channel >= 1))
      002893 E0               [24] 3453 	movx	a,@dptr
      002894 FF               [12] 3454 	mov  r7,a
      002895 24 82            [12] 3455 	add	a,#0xff - 0x7d
      002897 40 27            [24] 3456 	jc	00102$
      002899 BF 01 00         [24] 3457 	cjne	r7,#0x01,00120$
      00289C                       3458 00120$:
      00289C 40 22            [24] 3459 	jc	00102$
                                   3460 ;	nrf24l01.c:552: uint8_t write_pointer = rf_channel;
      00289E 90 00 D7         [24] 3461 	mov	dptr,#_nrf24_rf_channel_write_pointer_20000_198
      0028A1 EF               [12] 3462 	mov	a,r7
      0028A2 F0               [24] 3463 	movx	@dptr,a
                                   3464 ;	nrf24l01.c:553: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      0028A3 90 00 E5         [24] 3465 	mov	dptr,#_nrf24_write_PARM_2
      0028A6 74 D7            [12] 3466 	mov	a,#_nrf24_rf_channel_write_pointer_20000_198
      0028A8 F0               [24] 3467 	movx	@dptr,a
      0028A9 74 00            [12] 3468 	mov	a,#(_nrf24_rf_channel_write_pointer_20000_198 >> 8)
      0028AB A3               [24] 3469 	inc	dptr
      0028AC F0               [24] 3470 	movx	@dptr,a
      0028AD E4               [12] 3471 	clr	a
      0028AE A3               [24] 3472 	inc	dptr
      0028AF F0               [24] 3473 	movx	@dptr,a
      0028B0 90 00 E8         [24] 3474 	mov	dptr,#_nrf24_write_PARM_3
      0028B3 04               [12] 3475 	inc	a
      0028B4 F0               [24] 3476 	movx	@dptr,a
      0028B5 90 00 E9         [24] 3477 	mov	dptr,#_nrf24_write_PARM_4
      0028B8 E4               [12] 3478 	clr	a
      0028B9 F0               [24] 3479 	movx	@dptr,a
      0028BA 75 82 05         [24] 3480 	mov	dpl, #0x05
      0028BD 02 2B 77         [24] 3481 	ljmp	_nrf24_write
      0028C0                       3482 00102$:
                                   3483 ;	nrf24l01.c:557: uint8_t write_pointer = 1;
      0028C0 90 00 D8         [24] 3484 	mov	dptr,#_nrf24_rf_channel_write_pointer_20000_199
      0028C3 74 01            [12] 3485 	mov	a,#0x01
      0028C5 F0               [24] 3486 	movx	@dptr,a
                                   3487 ;	nrf24l01.c:558: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      0028C6 90 00 E5         [24] 3488 	mov	dptr,#_nrf24_write_PARM_2
      0028C9 74 D8            [12] 3489 	mov	a,#_nrf24_rf_channel_write_pointer_20000_199
      0028CB F0               [24] 3490 	movx	@dptr,a
      0028CC 74 00            [12] 3491 	mov	a,#(_nrf24_rf_channel_write_pointer_20000_199 >> 8)
      0028CE A3               [24] 3492 	inc	dptr
      0028CF F0               [24] 3493 	movx	@dptr,a
      0028D0 E4               [12] 3494 	clr	a
      0028D1 A3               [24] 3495 	inc	dptr
      0028D2 F0               [24] 3496 	movx	@dptr,a
      0028D3 90 00 E8         [24] 3497 	mov	dptr,#_nrf24_write_PARM_3
      0028D6 04               [12] 3498 	inc	a
      0028D7 F0               [24] 3499 	movx	@dptr,a
      0028D8 90 00 E9         [24] 3500 	mov	dptr,#_nrf24_write_PARM_4
      0028DB E4               [12] 3501 	clr	a
      0028DC F0               [24] 3502 	movx	@dptr,a
      0028DD 75 82 05         [24] 3503 	mov	dpl, #0x05
                                   3504 ;	nrf24l01.c:560: }
      0028E0 02 2B 77         [24] 3505 	ljmp	_nrf24_write
                                   3506 ;------------------------------------------------------------
                                   3507 ;Allocation info for local variables in function 'nrf24_interrupt_mask'
                                   3508 ;------------------------------------------------------------
                                   3509 ;tx_mask                   Allocated with name '_nrf24_interrupt_mask_PARM_2'
                                   3510 ;max_rt_mask               Allocated with name '_nrf24_interrupt_mask_PARM_3'
                                   3511 ;rx_mask                   Allocated with name '_nrf24_interrupt_mask_rx_mask_10000_200'
                                   3512 ;------------------------------------------------------------
                                   3513 ;	nrf24l01.c:563: void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
                                   3514 ;	-----------------------------------------
                                   3515 ;	 function nrf24_interrupt_mask
                                   3516 ;	-----------------------------------------
      0028E3                       3517 _nrf24_interrupt_mask:
      0028E3 E5 82            [12] 3518 	mov	a,dpl
      0028E5 90 00 DB         [24] 3519 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_10000_200
      0028E8 F0               [24] 3520 	movx	@dptr,a
                                   3521 ;	nrf24l01.c:565: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      0028E9 90 00 DF         [24] 3522 	mov	dptr,#_nrf24_read_PARM_2
      0028EC 74 A8            [12] 3523 	mov	a,#_register_current_value
      0028EE F0               [24] 3524 	movx	@dptr,a
      0028EF 74 00            [12] 3525 	mov	a,#(_register_current_value >> 8)
      0028F1 A3               [24] 3526 	inc	dptr
      0028F2 F0               [24] 3527 	movx	@dptr,a
      0028F3 E4               [12] 3528 	clr	a
      0028F4 A3               [24] 3529 	inc	dptr
      0028F5 F0               [24] 3530 	movx	@dptr,a
      0028F6 90 00 E2         [24] 3531 	mov	dptr,#_nrf24_read_PARM_3
      0028F9 04               [12] 3532 	inc	a
      0028FA F0               [24] 3533 	movx	@dptr,a
      0028FB 90 00 E3         [24] 3534 	mov	dptr,#_nrf24_read_PARM_4
      0028FE E4               [12] 3535 	clr	a
      0028FF F0               [24] 3536 	movx	@dptr,a
      002900 75 82 00         [24] 3537 	mov	dpl, #0x00
      002903 12 2B 0B         [24] 3538 	lcall	_nrf24_read
                                   3539 ;	nrf24l01.c:566: if (rx_mask)
      002906 90 00 DB         [24] 3540 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_10000_200
      002909 E0               [24] 3541 	movx	a,@dptr
      00290A 60 0C            [24] 3542 	jz	00102$
                                   3543 ;	nrf24l01.c:567: register_new_value = (register_current_value) | (1 << MASK_RX_DR);
      00290C 90 00 A8         [24] 3544 	mov	dptr,#_register_current_value
      00290F E0               [24] 3545 	movx	a,@dptr
      002910 90 00 A9         [24] 3546 	mov	dptr,#_register_new_value
      002913 44 40            [12] 3547 	orl	a,#0x40
      002915 F0               [24] 3548 	movx	@dptr,a
      002916 80 08            [24] 3549 	sjmp	00103$
      002918                       3550 00102$:
                                   3551 ;	nrf24l01.c:569: register_new_value &= (~(1 << MASK_RX_DR));
      002918 90 00 A9         [24] 3552 	mov	dptr,#_register_new_value
      00291B E0               [24] 3553 	movx	a,@dptr
      00291C 53 E0 BF         [24] 3554 	anl	acc,#0xbf
      00291F F0               [24] 3555 	movx	@dptr,a
      002920                       3556 00103$:
                                   3557 ;	nrf24l01.c:570: if (tx_mask)
      002920 90 00 D9         [24] 3558 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002923 E0               [24] 3559 	movx	a,@dptr
      002924 60 0A            [24] 3560 	jz	00105$
                                   3561 ;	nrf24l01.c:571: register_new_value |= (1 << MASK_TX_DS);
      002926 90 00 A9         [24] 3562 	mov	dptr,#_register_new_value
      002929 E0               [24] 3563 	movx	a,@dptr
      00292A 43 E0 20         [24] 3564 	orl	acc,#0x20
      00292D F0               [24] 3565 	movx	@dptr,a
      00292E 80 08            [24] 3566 	sjmp	00106$
      002930                       3567 00105$:
                                   3568 ;	nrf24l01.c:573: register_new_value &= (~(1 << MASK_TX_DS));
      002930 90 00 A9         [24] 3569 	mov	dptr,#_register_new_value
      002933 E0               [24] 3570 	movx	a,@dptr
      002934 53 E0 DF         [24] 3571 	anl	acc,#0xdf
      002937 F0               [24] 3572 	movx	@dptr,a
      002938                       3573 00106$:
                                   3574 ;	nrf24l01.c:574: if (max_rt_mask)
      002938 90 00 DA         [24] 3575 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00293B E0               [24] 3576 	movx	a,@dptr
      00293C 60 0A            [24] 3577 	jz	00108$
                                   3578 ;	nrf24l01.c:575: register_new_value |= (1 << MASK_MAX_RT);
      00293E 90 00 A9         [24] 3579 	mov	dptr,#_register_new_value
      002941 E0               [24] 3580 	movx	a,@dptr
      002942 43 E0 10         [24] 3581 	orl	acc,#0x10
      002945 F0               [24] 3582 	movx	@dptr,a
      002946 80 08            [24] 3583 	sjmp	00109$
      002948                       3584 00108$:
                                   3585 ;	nrf24l01.c:577: register_new_value &= (~(1 << MASK_MAX_RT));
      002948 90 00 A9         [24] 3586 	mov	dptr,#_register_new_value
      00294B E0               [24] 3587 	movx	a,@dptr
      00294C 53 E0 EF         [24] 3588 	anl	acc,#0xef
      00294F F0               [24] 3589 	movx	@dptr,a
      002950                       3590 00109$:
                                   3591 ;	nrf24l01.c:579: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002950 90 00 E5         [24] 3592 	mov	dptr,#_nrf24_write_PARM_2
      002953 74 A9            [12] 3593 	mov	a,#_register_new_value
      002955 F0               [24] 3594 	movx	@dptr,a
      002956 74 00            [12] 3595 	mov	a,#(_register_new_value >> 8)
      002958 A3               [24] 3596 	inc	dptr
      002959 F0               [24] 3597 	movx	@dptr,a
      00295A E4               [12] 3598 	clr	a
      00295B A3               [24] 3599 	inc	dptr
      00295C F0               [24] 3600 	movx	@dptr,a
      00295D 90 00 E8         [24] 3601 	mov	dptr,#_nrf24_write_PARM_3
      002960 04               [12] 3602 	inc	a
      002961 F0               [24] 3603 	movx	@dptr,a
      002962 90 00 E9         [24] 3604 	mov	dptr,#_nrf24_write_PARM_4
      002965 E4               [12] 3605 	clr	a
      002966 F0               [24] 3606 	movx	@dptr,a
      002967 75 82 00         [24] 3607 	mov	dpl, #0x00
                                   3608 ;	nrf24l01.c:580: }
      00296A 02 2B 77         [24] 3609 	ljmp	_nrf24_write
                                   3610 ;------------------------------------------------------------
                                   3611 ;Allocation info for local variables in function 'nrf24_crc_configuration'
                                   3612 ;------------------------------------------------------------
                                   3613 ;crc_encoding_scheme       Allocated with name '_nrf24_crc_configuration_PARM_2'
                                   3614 ;crc_enable                Allocated with name '_nrf24_crc_configuration_crc_enable_10000_202'
                                   3615 ;------------------------------------------------------------
                                   3616 ;	nrf24l01.c:583: void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
                                   3617 ;	-----------------------------------------
                                   3618 ;	 function nrf24_crc_configuration
                                   3619 ;	-----------------------------------------
      00296D                       3620 _nrf24_crc_configuration:
      00296D E5 82            [12] 3621 	mov	a,dpl
      00296F 90 00 DD         [24] 3622 	mov	dptr,#_nrf24_crc_configuration_crc_enable_10000_202
      002972 F0               [24] 3623 	movx	@dptr,a
                                   3624 ;	nrf24l01.c:585: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      002973 90 00 DF         [24] 3625 	mov	dptr,#_nrf24_read_PARM_2
      002976 74 A8            [12] 3626 	mov	a,#_register_current_value
      002978 F0               [24] 3627 	movx	@dptr,a
      002979 74 00            [12] 3628 	mov	a,#(_register_current_value >> 8)
      00297B A3               [24] 3629 	inc	dptr
      00297C F0               [24] 3630 	movx	@dptr,a
      00297D E4               [12] 3631 	clr	a
      00297E A3               [24] 3632 	inc	dptr
      00297F F0               [24] 3633 	movx	@dptr,a
      002980 90 00 E2         [24] 3634 	mov	dptr,#_nrf24_read_PARM_3
      002983 04               [12] 3635 	inc	a
      002984 F0               [24] 3636 	movx	@dptr,a
      002985 90 00 E3         [24] 3637 	mov	dptr,#_nrf24_read_PARM_4
      002988 E4               [12] 3638 	clr	a
      002989 F0               [24] 3639 	movx	@dptr,a
      00298A 75 82 00         [24] 3640 	mov	dpl, #0x00
      00298D 12 2B 0B         [24] 3641 	lcall	_nrf24_read
                                   3642 ;	nrf24l01.c:586: if (crc_enable)
      002990 90 00 DD         [24] 3643 	mov	dptr,#_nrf24_crc_configuration_crc_enable_10000_202
      002993 E0               [24] 3644 	movx	a,@dptr
      002994 60 0C            [24] 3645 	jz	00102$
                                   3646 ;	nrf24l01.c:587: register_new_value = (register_current_value) | (1 << EN_CRC);
      002996 90 00 A8         [24] 3647 	mov	dptr,#_register_current_value
      002999 E0               [24] 3648 	movx	a,@dptr
      00299A 90 00 A9         [24] 3649 	mov	dptr,#_register_new_value
      00299D 44 08            [12] 3650 	orl	a,#0x08
      00299F F0               [24] 3651 	movx	@dptr,a
      0029A0 80 08            [24] 3652 	sjmp	00103$
      0029A2                       3653 00102$:
                                   3654 ;	nrf24l01.c:589: register_new_value &= (~(1 << EN_CRC));
      0029A2 90 00 A9         [24] 3655 	mov	dptr,#_register_new_value
      0029A5 E0               [24] 3656 	movx	a,@dptr
      0029A6 53 E0 F7         [24] 3657 	anl	acc,#0xf7
      0029A9 F0               [24] 3658 	movx	@dptr,a
      0029AA                       3659 00103$:
                                   3660 ;	nrf24l01.c:590: if (crc_encoding_scheme == 2)
      0029AA 90 00 DC         [24] 3661 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      0029AD E0               [24] 3662 	movx	a,@dptr
      0029AE FF               [12] 3663 	mov	r7,a
      0029AF BF 02 0A         [24] 3664 	cjne	r7,#0x02,00105$
                                   3665 ;	nrf24l01.c:591: register_new_value |= (1 << CRCO);
      0029B2 90 00 A9         [24] 3666 	mov	dptr,#_register_new_value
      0029B5 E0               [24] 3667 	movx	a,@dptr
      0029B6 43 E0 04         [24] 3668 	orl	acc,#0x04
      0029B9 F0               [24] 3669 	movx	@dptr,a
      0029BA 80 08            [24] 3670 	sjmp	00106$
      0029BC                       3671 00105$:
                                   3672 ;	nrf24l01.c:593: register_new_value &= (~(1 << CRCO));
      0029BC 90 00 A9         [24] 3673 	mov	dptr,#_register_new_value
      0029BF E0               [24] 3674 	movx	a,@dptr
      0029C0 53 E0 FB         [24] 3675 	anl	acc,#0xfb
      0029C3 F0               [24] 3676 	movx	@dptr,a
      0029C4                       3677 00106$:
                                   3678 ;	nrf24l01.c:595: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      0029C4 90 00 E5         [24] 3679 	mov	dptr,#_nrf24_write_PARM_2
      0029C7 74 A9            [12] 3680 	mov	a,#_register_new_value
      0029C9 F0               [24] 3681 	movx	@dptr,a
      0029CA 74 00            [12] 3682 	mov	a,#(_register_new_value >> 8)
      0029CC A3               [24] 3683 	inc	dptr
      0029CD F0               [24] 3684 	movx	@dptr,a
      0029CE E4               [12] 3685 	clr	a
      0029CF A3               [24] 3686 	inc	dptr
      0029D0 F0               [24] 3687 	movx	@dptr,a
      0029D1 90 00 E8         [24] 3688 	mov	dptr,#_nrf24_write_PARM_3
      0029D4 04               [12] 3689 	inc	a
      0029D5 F0               [24] 3690 	movx	@dptr,a
      0029D6 90 00 E9         [24] 3691 	mov	dptr,#_nrf24_write_PARM_4
      0029D9 E4               [12] 3692 	clr	a
      0029DA F0               [24] 3693 	movx	@dptr,a
      0029DB 75 82 00         [24] 3694 	mov	dpl, #0x00
                                   3695 ;	nrf24l01.c:596: }
      0029DE 02 2B 77         [24] 3696 	ljmp	_nrf24_write
                                   3697 ;------------------------------------------------------------
                                   3698 ;Allocation info for local variables in function 'nrf24_mode'
                                   3699 ;------------------------------------------------------------
                                   3700 ;mode                      Allocated with name '_nrf24_mode_mode_10000_204'
                                   3701 ;------------------------------------------------------------
                                   3702 ;	nrf24l01.c:599: void nrf24_mode(uint8_t mode)
                                   3703 ;	-----------------------------------------
                                   3704 ;	 function nrf24_mode
                                   3705 ;	-----------------------------------------
      0029E1                       3706 _nrf24_mode:
      0029E1 E5 82            [12] 3707 	mov	a,dpl
      0029E3 90 00 DE         [24] 3708 	mov	dptr,#_nrf24_mode_mode_10000_204
      0029E6 F0               [24] 3709 	movx	@dptr,a
                                   3710 ;	nrf24l01.c:601: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      0029E7 90 00 DF         [24] 3711 	mov	dptr,#_nrf24_read_PARM_2
      0029EA 74 A8            [12] 3712 	mov	a,#_register_current_value
      0029EC F0               [24] 3713 	movx	@dptr,a
      0029ED 74 00            [12] 3714 	mov	a,#(_register_current_value >> 8)
      0029EF A3               [24] 3715 	inc	dptr
      0029F0 F0               [24] 3716 	movx	@dptr,a
      0029F1 E4               [12] 3717 	clr	a
      0029F2 A3               [24] 3718 	inc	dptr
      0029F3 F0               [24] 3719 	movx	@dptr,a
      0029F4 90 00 E2         [24] 3720 	mov	dptr,#_nrf24_read_PARM_3
      0029F7 04               [12] 3721 	inc	a
      0029F8 F0               [24] 3722 	movx	@dptr,a
      0029F9 90 00 E3         [24] 3723 	mov	dptr,#_nrf24_read_PARM_4
      0029FC E4               [12] 3724 	clr	a
      0029FD F0               [24] 3725 	movx	@dptr,a
      0029FE 75 82 00         [24] 3726 	mov	dpl, #0x00
      002A01 12 2B 0B         [24] 3727 	lcall	_nrf24_read
                                   3728 ;	nrf24l01.c:602: switch (mode)
      002A04 90 00 DE         [24] 3729 	mov	dptr,#_nrf24_mode_mode_10000_204
      002A07 E0               [24] 3730 	movx	a,@dptr
      002A08 FF               [12] 3731 	mov  r7,a
      002A09 24 FB            [12] 3732 	add	a,#0xff - 0x04
      002A0B 50 03            [24] 3733 	jnc	00116$
      002A0D 02 2A C7         [24] 3734 	ljmp	00106$
      002A10                       3735 00116$:
      002A10 EF               [12] 3736 	mov	a,r7
      002A11 2F               [12] 3737 	add	a,r7
      002A12 2F               [12] 3738 	add	a,r7
      002A13 90 2A 17         [24] 3739 	mov	dptr,#00117$
      002A16 73               [24] 3740 	jmp	@a+dptr
      002A17                       3741 00117$:
      002A17 02 2A 26         [24] 3742 	ljmp	00101$
      002A1A 02 2A 46         [24] 3743 	ljmp	00102$
      002A1D 02 2A 66         [24] 3744 	ljmp	00103$
      002A20 02 2A 87         [24] 3745 	ljmp	00104$
      002A23 02 2A A8         [24] 3746 	ljmp	00105$
                                   3747 ;	nrf24l01.c:604: case POWER_DOWN:
      002A26                       3748 00101$:
                                   3749 ;	nrf24l01.c:605: nrf24_CE(CE_OFF);
      002A26 75 82 00         [24] 3750 	mov	dpl, #0x00
      002A29 C0 07            [24] 3751 	push	ar7
      002A2B 12 1C C8         [24] 3752 	lcall	_nrf24_CE
                                   3753 ;	nrf24l01.c:606: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      002A2E 90 00 A8         [24] 3754 	mov	dptr,#_register_current_value
      002A31 E0               [24] 3755 	movx	a,@dptr
      002A32 90 00 A9         [24] 3756 	mov	dptr,#_register_new_value
      002A35 54 FD            [12] 3757 	anl	a,#0xfd
      002A37 F0               [24] 3758 	movx	@dptr,a
                                   3759 ;	nrf24l01.c:607: delay_function(POWER_DOWN_DELAY);
      002A38 90 00 02         [24] 3760 	mov	dptr,#0x0002
      002A3B E4               [12] 3761 	clr	a
      002A3C F5 F0            [12] 3762 	mov	b,a
      002A3E 12 1B FB         [24] 3763 	lcall	_delay_function
      002A41 D0 07            [24] 3764 	pop	ar7
                                   3765 ;	nrf24l01.c:608: break;
      002A43 02 2A E4         [24] 3766 	ljmp	00107$
                                   3767 ;	nrf24l01.c:609: case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
      002A46                       3768 00102$:
                                   3769 ;	nrf24l01.c:610: nrf24_CE(CE_OFF);
      002A46 75 82 00         [24] 3770 	mov	dpl, #0x00
      002A49 C0 07            [24] 3771 	push	ar7
      002A4B 12 1C C8         [24] 3772 	lcall	_nrf24_CE
                                   3773 ;	nrf24l01.c:611: register_new_value = (register_current_value) | (1 << PWR_UP);
      002A4E 90 00 A8         [24] 3774 	mov	dptr,#_register_current_value
      002A51 E0               [24] 3775 	movx	a,@dptr
      002A52 90 00 A9         [24] 3776 	mov	dptr,#_register_new_value
      002A55 44 02            [12] 3777 	orl	a,#0x02
      002A57 F0               [24] 3778 	movx	@dptr,a
                                   3779 ;	nrf24l01.c:612: delay_function(STANDBYI_DELAY);
      002A58 90 00 02         [24] 3780 	mov	dptr,#0x0002
      002A5B E4               [12] 3781 	clr	a
      002A5C F5 F0            [12] 3782 	mov	b,a
      002A5E 12 1B FB         [24] 3783 	lcall	_delay_function
      002A61 D0 07            [24] 3784 	pop	ar7
                                   3785 ;	nrf24l01.c:613: break;
      002A63 02 2A E4         [24] 3786 	ljmp	00107$
                                   3787 ;	nrf24l01.c:614: case STANDBYII:                                 /*standby ii is related to a ptx device*/
      002A66                       3788 00103$:
                                   3789 ;	nrf24l01.c:615: nrf24_CE(CE_ON);
      002A66 75 82 01         [24] 3790 	mov	dpl, #0x01
      002A69 C0 07            [24] 3791 	push	ar7
      002A6B 12 1C C8         [24] 3792 	lcall	_nrf24_CE
                                   3793 ;	nrf24l01.c:616: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      002A6E 90 00 A8         [24] 3794 	mov	dptr,#_register_current_value
      002A71 E0               [24] 3795 	movx	a,@dptr
      002A72 44 02            [12] 3796 	orl	a,#0x02
      002A74 90 00 A9         [24] 3797 	mov	dptr,#_register_new_value
      002A77 54 FE            [12] 3798 	anl	a,#0xfe
      002A79 F0               [24] 3799 	movx	@dptr,a
                                   3800 ;	nrf24l01.c:617: delay_function(STANDBYI_DELAY);
      002A7A 90 00 02         [24] 3801 	mov	dptr,#0x0002
      002A7D E4               [12] 3802 	clr	a
      002A7E F5 F0            [12] 3803 	mov	b,a
      002A80 12 1B FB         [24] 3804 	lcall	_delay_function
      002A83 D0 07            [24] 3805 	pop	ar7
                                   3806 ;	nrf24l01.c:618: break;
                                   3807 ;	nrf24l01.c:619: case PTX:
      002A85 80 5D            [24] 3808 	sjmp	00107$
      002A87                       3809 00104$:
                                   3810 ;	nrf24l01.c:620: nrf24_CE(CE_ON);
      002A87 75 82 01         [24] 3811 	mov	dpl, #0x01
      002A8A C0 07            [24] 3812 	push	ar7
      002A8C 12 1C C8         [24] 3813 	lcall	_nrf24_CE
                                   3814 ;	nrf24l01.c:621: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      002A8F 90 00 A8         [24] 3815 	mov	dptr,#_register_current_value
      002A92 E0               [24] 3816 	movx	a,@dptr
      002A93 44 02            [12] 3817 	orl	a,#0x02
      002A95 90 00 A9         [24] 3818 	mov	dptr,#_register_new_value
      002A98 54 FE            [12] 3819 	anl	a,#0xfe
      002A9A F0               [24] 3820 	movx	@dptr,a
                                   3821 ;	nrf24l01.c:622: delay_function(STANDBYI_DELAY);
      002A9B 90 00 02         [24] 3822 	mov	dptr,#0x0002
      002A9E E4               [12] 3823 	clr	a
      002A9F F5 F0            [12] 3824 	mov	b,a
      002AA1 12 1B FB         [24] 3825 	lcall	_delay_function
      002AA4 D0 07            [24] 3826 	pop	ar7
                                   3827 ;	nrf24l01.c:623: break;
                                   3828 ;	nrf24l01.c:624: case PRX:
      002AA6 80 3C            [24] 3829 	sjmp	00107$
      002AA8                       3830 00105$:
                                   3831 ;	nrf24l01.c:625: nrf24_CE(CE_ON);
      002AA8 75 82 01         [24] 3832 	mov	dpl, #0x01
      002AAB C0 07            [24] 3833 	push	ar7
      002AAD 12 1C C8         [24] 3834 	lcall	_nrf24_CE
                                   3835 ;	nrf24l01.c:626: register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
      002AB0 90 00 A8         [24] 3836 	mov	dptr,#_register_current_value
      002AB3 E0               [24] 3837 	movx	a,@dptr
      002AB4 90 00 A9         [24] 3838 	mov	dptr,#_register_new_value
      002AB7 44 03            [12] 3839 	orl	a,#0x03
      002AB9 F0               [24] 3840 	movx	@dptr,a
                                   3841 ;	nrf24l01.c:627: delay_function(STANDBYI_DELAY);
      002ABA 90 00 02         [24] 3842 	mov	dptr,#0x0002
      002ABD E4               [12] 3843 	clr	a
      002ABE F5 F0            [12] 3844 	mov	b,a
      002AC0 12 1B FB         [24] 3845 	lcall	_delay_function
      002AC3 D0 07            [24] 3846 	pop	ar7
                                   3847 ;	nrf24l01.c:628: break;
                                   3848 ;	nrf24l01.c:629: default:
      002AC5 80 1D            [24] 3849 	sjmp	00107$
      002AC7                       3850 00106$:
                                   3851 ;	nrf24l01.c:630: nrf24_CE(CE_OFF);
      002AC7 75 82 00         [24] 3852 	mov	dpl, #0x00
      002ACA C0 07            [24] 3853 	push	ar7
      002ACC 12 1C C8         [24] 3854 	lcall	_nrf24_CE
                                   3855 ;	nrf24l01.c:631: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      002ACF 90 00 A8         [24] 3856 	mov	dptr,#_register_current_value
      002AD2 E0               [24] 3857 	movx	a,@dptr
      002AD3 90 00 A9         [24] 3858 	mov	dptr,#_register_new_value
      002AD6 54 FD            [12] 3859 	anl	a,#0xfd
      002AD8 F0               [24] 3860 	movx	@dptr,a
                                   3861 ;	nrf24l01.c:632: delay_function(POWER_DOWN_DELAY);
      002AD9 90 00 02         [24] 3862 	mov	dptr,#0x0002
      002ADC E4               [12] 3863 	clr	a
      002ADD F5 F0            [12] 3864 	mov	b,a
      002ADF 12 1B FB         [24] 3865 	lcall	_delay_function
      002AE2 D0 07            [24] 3866 	pop	ar7
                                   3867 ;	nrf24l01.c:634: }
      002AE4                       3868 00107$:
                                   3869 ;	nrf24l01.c:635: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002AE4 90 00 E5         [24] 3870 	mov	dptr,#_nrf24_write_PARM_2
      002AE7 74 A9            [12] 3871 	mov	a,#_register_new_value
      002AE9 F0               [24] 3872 	movx	@dptr,a
      002AEA 74 00            [12] 3873 	mov	a,#(_register_new_value >> 8)
      002AEC A3               [24] 3874 	inc	dptr
      002AED F0               [24] 3875 	movx	@dptr,a
      002AEE E4               [12] 3876 	clr	a
      002AEF A3               [24] 3877 	inc	dptr
      002AF0 F0               [24] 3878 	movx	@dptr,a
      002AF1 90 00 E8         [24] 3879 	mov	dptr,#_nrf24_write_PARM_3
      002AF4 04               [12] 3880 	inc	a
      002AF5 F0               [24] 3881 	movx	@dptr,a
      002AF6 90 00 E9         [24] 3882 	mov	dptr,#_nrf24_write_PARM_4
      002AF9 E4               [12] 3883 	clr	a
      002AFA F0               [24] 3884 	movx	@dptr,a
      002AFB 75 82 00         [24] 3885 	mov	dpl, #0x00
      002AFE C0 07            [24] 3886 	push	ar7
      002B00 12 2B 77         [24] 3887 	lcall	_nrf24_write
      002B03 D0 07            [24] 3888 	pop	ar7
                                   3889 ;	nrf24l01.c:636: current_mode = mode;
      002B05 90 01 73         [24] 3890 	mov	dptr,#_current_mode
      002B08 EF               [12] 3891 	mov	a,r7
      002B09 F0               [24] 3892 	movx	@dptr,a
                                   3893 ;	nrf24l01.c:637: }
      002B0A 22               [24] 3894 	ret
                                   3895 ;------------------------------------------------------------
                                   3896 ;Allocation info for local variables in function 'nrf24_read'
                                   3897 ;------------------------------------------------------------
                                   3898 ;value                     Allocated with name '_nrf24_read_PARM_2'
                                   3899 ;data_length               Allocated with name '_nrf24_read_PARM_3'
                                   3900 ;spi_state                 Allocated with name '_nrf24_read_PARM_4'
                                   3901 ;address                   Allocated with name '_nrf24_read_address_10000_207'
                                   3902 ;------------------------------------------------------------
                                   3903 ;	nrf24l01.c:641: void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3904 ;	-----------------------------------------
                                   3905 ;	 function nrf24_read
                                   3906 ;	-----------------------------------------
      002B0B                       3907 _nrf24_read:
      002B0B E5 82            [12] 3908 	mov	a,dpl
      002B0D 90 00 E4         [24] 3909 	mov	dptr,#_nrf24_read_address_10000_207
      002B10 F0               [24] 3910 	movx	@dptr,a
                                   3911 ;	nrf24l01.c:643: nrf24_SPI(SPI_ON);
      002B11 75 82 00         [24] 3912 	mov	dpl, #0x00
      002B14 12 1C 76         [24] 3913 	lcall	_nrf24_SPI
                                   3914 ;	nrf24l01.c:646: SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      002B17 90 00 E4         [24] 3915 	mov	dptr,#_nrf24_read_address_10000_207
      002B1A E0               [24] 3916 	movx	a,@dptr
      002B1B FF               [12] 3917 	mov	r7,a
      002B1C 90 00 A7         [24] 3918 	mov	dptr,#_SPI_command
      002B1F F0               [24] 3919 	movx	@dptr,a
                                   3920 ;	nrf24l01.c:647: SPI_send_command(SPI_command);
      002B20 8F 82            [24] 3921 	mov	dpl, r7
      002B22 12 1C 8A         [24] 3922 	lcall	_SPI_send_command
                                   3923 ;	nrf24l01.c:649: SPI_command = 0;
      002B25 90 00 A7         [24] 3924 	mov	dptr,#_SPI_command
      002B28 E4               [12] 3925 	clr	a
      002B29 F0               [24] 3926 	movx	@dptr,a
      002B2A 90 00 DF         [24] 3927 	mov	dptr,#_nrf24_read_PARM_2
      002B2D E0               [24] 3928 	movx	a,@dptr
      002B2E FD               [12] 3929 	mov	r5,a
      002B2F A3               [24] 3930 	inc	dptr
      002B30 E0               [24] 3931 	movx	a,@dptr
      002B31 FE               [12] 3932 	mov	r6,a
      002B32 A3               [24] 3933 	inc	dptr
      002B33 E0               [24] 3934 	movx	a,@dptr
      002B34 FF               [12] 3935 	mov	r7,a
      002B35 90 00 E2         [24] 3936 	mov	dptr,#_nrf24_read_PARM_3
      002B38 E0               [24] 3937 	movx	a,@dptr
      002B39 FC               [12] 3938 	mov	r4,a
      002B3A                       3939 00105$:
                                   3940 ;	nrf24l01.c:650: for (; data_length ; data_length--)
      002B3A EC               [12] 3941 	mov	a,r4
      002B3B 60 2D            [24] 3942 	jz	00101$
                                   3943 ;	nrf24l01.c:652: *value = SPI_send_command(SPI_command);
      002B3D 90 00 A7         [24] 3944 	mov	dptr,#_SPI_command
      002B40 E0               [24] 3945 	movx	a,@dptr
      002B41 F5 82            [12] 3946 	mov	dpl,a
      002B43 C0 07            [24] 3947 	push	ar7
      002B45 C0 06            [24] 3948 	push	ar6
      002B47 C0 05            [24] 3949 	push	ar5
      002B49 C0 04            [24] 3950 	push	ar4
      002B4B 12 1C 8A         [24] 3951 	lcall	_SPI_send_command
      002B4E AB 82            [24] 3952 	mov	r3, dpl
      002B50 D0 04            [24] 3953 	pop	ar4
      002B52 D0 05            [24] 3954 	pop	ar5
      002B54 D0 06            [24] 3955 	pop	ar6
      002B56 D0 07            [24] 3956 	pop	ar7
      002B58 8D 82            [24] 3957 	mov	dpl,r5
      002B5A 8E 83            [24] 3958 	mov	dph,r6
      002B5C 8F F0            [24] 3959 	mov	b,r7
      002B5E EB               [12] 3960 	mov	a,r3
      002B5F 12 2F F5         [24] 3961 	lcall	__gptrput
      002B62 A3               [24] 3962 	inc	dptr
      002B63 AD 82            [24] 3963 	mov	r5,dpl
      002B65 AE 83            [24] 3964 	mov	r6,dph
                                   3965 ;	nrf24l01.c:653: value++;
                                   3966 ;	nrf24l01.c:650: for (; data_length ; data_length--)
      002B67 1C               [12] 3967 	dec	r4
      002B68 80 D0            [24] 3968 	sjmp	00105$
      002B6A                       3969 00101$:
                                   3970 ;	nrf24l01.c:655: if (spi_state == CLOSE)
      002B6A 90 00 E3         [24] 3971 	mov	dptr,#_nrf24_read_PARM_4
      002B6D E0               [24] 3972 	movx	a,@dptr
      002B6E 70 06            [24] 3973 	jnz	00107$
                                   3974 ;	nrf24l01.c:656: nrf24_SPI(SPI_OFF);
      002B70 75 82 01         [24] 3975 	mov	dpl, #0x01
                                   3976 ;	nrf24l01.c:657: }
      002B73 02 1C 76         [24] 3977 	ljmp	_nrf24_SPI
      002B76                       3978 00107$:
      002B76 22               [24] 3979 	ret
                                   3980 ;------------------------------------------------------------
                                   3981 ;Allocation info for local variables in function 'nrf24_write'
                                   3982 ;------------------------------------------------------------
                                   3983 ;value                     Allocated with name '_nrf24_write_PARM_2'
                                   3984 ;data_length               Allocated with name '_nrf24_write_PARM_3'
                                   3985 ;spi_state                 Allocated with name '_nrf24_write_PARM_4'
                                   3986 ;address                   Allocated with name '_nrf24_write_address_10000_211'
                                   3987 ;------------------------------------------------------------
                                   3988 ;	nrf24l01.c:661: void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3989 ;	-----------------------------------------
                                   3990 ;	 function nrf24_write
                                   3991 ;	-----------------------------------------
      002B77                       3992 _nrf24_write:
      002B77 E5 82            [12] 3993 	mov	a,dpl
      002B79 90 00 EA         [24] 3994 	mov	dptr,#_nrf24_write_address_10000_211
      002B7C F0               [24] 3995 	movx	@dptr,a
                                   3996 ;	nrf24l01.c:663: nrf24_SPI(SPI_ON);
      002B7D 75 82 00         [24] 3997 	mov	dpl, #0x00
      002B80 12 1C 76         [24] 3998 	lcall	_nrf24_SPI
                                   3999 ;	nrf24l01.c:664: SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      002B83 90 00 EA         [24] 4000 	mov	dptr,#_nrf24_write_address_10000_211
      002B86 E0               [24] 4001 	movx	a,@dptr
      002B87 44 20            [12] 4002 	orl	a,#0x20
      002B89 FF               [12] 4003 	mov	r7,a
      002B8A 90 00 A7         [24] 4004 	mov	dptr,#_SPI_command
      002B8D F0               [24] 4005 	movx	@dptr,a
                                   4006 ;	nrf24l01.c:665: SPI_send_command(SPI_command);
      002B8E 8F 82            [24] 4007 	mov	dpl, r7
      002B90 12 1C 8A         [24] 4008 	lcall	_SPI_send_command
      002B93 90 00 E5         [24] 4009 	mov	dptr,#_nrf24_write_PARM_2
      002B96 E0               [24] 4010 	movx	a,@dptr
      002B97 FD               [12] 4011 	mov	r5,a
      002B98 A3               [24] 4012 	inc	dptr
      002B99 E0               [24] 4013 	movx	a,@dptr
      002B9A FE               [12] 4014 	mov	r6,a
      002B9B A3               [24] 4015 	inc	dptr
      002B9C E0               [24] 4016 	movx	a,@dptr
      002B9D FF               [12] 4017 	mov	r7,a
      002B9E 90 00 E8         [24] 4018 	mov	dptr,#_nrf24_write_PARM_3
      002BA1 E0               [24] 4019 	movx	a,@dptr
      002BA2 FC               [12] 4020 	mov	r4,a
      002BA3                       4021 00105$:
                                   4022 ;	nrf24l01.c:666: for (; data_length ; data_length--)
      002BA3 EC               [12] 4023 	mov	a,r4
      002BA4 60 2D            [24] 4024 	jz	00101$
                                   4025 ;	nrf24l01.c:668: SPI_command = *value;
      002BA6 8D 82            [24] 4026 	mov	dpl,r5
      002BA8 8E 83            [24] 4027 	mov	dph,r6
      002BAA 8F F0            [24] 4028 	mov	b,r7
      002BAC 12 3A A0         [24] 4029 	lcall	__gptrget
      002BAF FB               [12] 4030 	mov	r3,a
      002BB0 A3               [24] 4031 	inc	dptr
      002BB1 AD 82            [24] 4032 	mov	r5,dpl
      002BB3 AE 83            [24] 4033 	mov	r6,dph
      002BB5 90 00 A7         [24] 4034 	mov	dptr,#_SPI_command
      002BB8 EB               [12] 4035 	mov	a,r3
      002BB9 F0               [24] 4036 	movx	@dptr,a
                                   4037 ;	nrf24l01.c:669: value++;
                                   4038 ;	nrf24l01.c:670: SPI_send_command(SPI_command);
      002BBA E0               [24] 4039 	movx	a,@dptr
      002BBB F5 82            [12] 4040 	mov	dpl,a
      002BBD C0 07            [24] 4041 	push	ar7
      002BBF C0 06            [24] 4042 	push	ar6
      002BC1 C0 05            [24] 4043 	push	ar5
      002BC3 C0 04            [24] 4044 	push	ar4
      002BC5 12 1C 8A         [24] 4045 	lcall	_SPI_send_command
      002BC8 D0 04            [24] 4046 	pop	ar4
      002BCA D0 05            [24] 4047 	pop	ar5
      002BCC D0 06            [24] 4048 	pop	ar6
      002BCE D0 07            [24] 4049 	pop	ar7
                                   4050 ;	nrf24l01.c:666: for (; data_length ; data_length--)
      002BD0 1C               [12] 4051 	dec	r4
      002BD1 80 D0            [24] 4052 	sjmp	00105$
      002BD3                       4053 00101$:
                                   4054 ;	nrf24l01.c:672: if (spi_state == CLOSE)
      002BD3 90 00 E9         [24] 4055 	mov	dptr,#_nrf24_write_PARM_4
      002BD6 E0               [24] 4056 	movx	a,@dptr
      002BD7 70 06            [24] 4057 	jnz	00107$
                                   4058 ;	nrf24l01.c:673: nrf24_SPI(SPI_OFF);
      002BD9 75 82 01         [24] 4059 	mov	dpl, #0x01
                                   4060 ;	nrf24l01.c:674: }
      002BDC 02 1C 76         [24] 4061 	ljmp	_nrf24_SPI
      002BDF                       4062 00107$:
      002BDF 22               [24] 4063 	ret
                                   4064 	.area CSEG    (CODE)
                                   4065 	.area CONST   (CODE)
      003ACF                       4066 _bitReverseTable256:
      003ACF 00                    4067 	.db #0x00	; 0
      003AD0 80                    4068 	.db #0x80	; 128
      003AD1 40                    4069 	.db #0x40	; 64
      003AD2 C0                    4070 	.db #0xc0	; 192
      003AD3 20                    4071 	.db #0x20	; 32
      003AD4 A0                    4072 	.db #0xa0	; 160
      003AD5 60                    4073 	.db #0x60	; 96
      003AD6 E0                    4074 	.db #0xe0	; 224
      003AD7 10                    4075 	.db #0x10	; 16
      003AD8 90                    4076 	.db #0x90	; 144
      003AD9 50                    4077 	.db #0x50	; 80	'P'
      003ADA D0                    4078 	.db #0xd0	; 208
      003ADB 30                    4079 	.db #0x30	; 48	'0'
      003ADC B0                    4080 	.db #0xb0	; 176
      003ADD 70                    4081 	.db #0x70	; 112	'p'
      003ADE F0                    4082 	.db #0xf0	; 240
      003ADF 08                    4083 	.db #0x08	; 8
      003AE0 88                    4084 	.db #0x88	; 136
      003AE1 48                    4085 	.db #0x48	; 72	'H'
      003AE2 C8                    4086 	.db #0xc8	; 200
      003AE3 28                    4087 	.db #0x28	; 40
      003AE4 A8                    4088 	.db #0xa8	; 168
      003AE5 68                    4089 	.db #0x68	; 104	'h'
      003AE6 E8                    4090 	.db #0xe8	; 232
      003AE7 18                    4091 	.db #0x18	; 24
      003AE8 98                    4092 	.db #0x98	; 152
      003AE9 58                    4093 	.db #0x58	; 88	'X'
      003AEA D8                    4094 	.db #0xd8	; 216
      003AEB 38                    4095 	.db #0x38	; 56	'8'
      003AEC B8                    4096 	.db #0xb8	; 184
      003AED 78                    4097 	.db #0x78	; 120	'x'
      003AEE F8                    4098 	.db #0xf8	; 248
      003AEF 04                    4099 	.db #0x04	; 4
      003AF0 84                    4100 	.db #0x84	; 132
      003AF1 44                    4101 	.db #0x44	; 68	'D'
      003AF2 C4                    4102 	.db #0xc4	; 196
      003AF3 24                    4103 	.db #0x24	; 36
      003AF4 A4                    4104 	.db #0xa4	; 164
      003AF5 64                    4105 	.db #0x64	; 100	'd'
      003AF6 E4                    4106 	.db #0xe4	; 228
      003AF7 14                    4107 	.db #0x14	; 20
      003AF8 94                    4108 	.db #0x94	; 148
      003AF9 54                    4109 	.db #0x54	; 84	'T'
      003AFA D4                    4110 	.db #0xd4	; 212
      003AFB 34                    4111 	.db #0x34	; 52	'4'
      003AFC B4                    4112 	.db #0xb4	; 180
      003AFD 74                    4113 	.db #0x74	; 116	't'
      003AFE F4                    4114 	.db #0xf4	; 244
      003AFF 0C                    4115 	.db #0x0c	; 12
      003B00 8C                    4116 	.db #0x8c	; 140
      003B01 4C                    4117 	.db #0x4c	; 76	'L'
      003B02 CC                    4118 	.db #0xcc	; 204
      003B03 2C                    4119 	.db #0x2c	; 44
      003B04 AC                    4120 	.db #0xac	; 172
      003B05 6C                    4121 	.db #0x6c	; 108	'l'
      003B06 EC                    4122 	.db #0xec	; 236
      003B07 1C                    4123 	.db #0x1c	; 28
      003B08 9C                    4124 	.db #0x9c	; 156
      003B09 5C                    4125 	.db #0x5c	; 92
      003B0A DC                    4126 	.db #0xdc	; 220
      003B0B 3C                    4127 	.db #0x3c	; 60
      003B0C BC                    4128 	.db #0xbc	; 188
      003B0D 7C                    4129 	.db #0x7c	; 124
      003B0E FC                    4130 	.db #0xfc	; 252
      003B0F 02                    4131 	.db #0x02	; 2
      003B10 82                    4132 	.db #0x82	; 130
      003B11 42                    4133 	.db #0x42	; 66	'B'
      003B12 C2                    4134 	.db #0xc2	; 194
      003B13 22                    4135 	.db #0x22	; 34
      003B14 A2                    4136 	.db #0xa2	; 162
      003B15 62                    4137 	.db #0x62	; 98	'b'
      003B16 E2                    4138 	.db #0xe2	; 226
      003B17 12                    4139 	.db #0x12	; 18
      003B18 92                    4140 	.db #0x92	; 146
      003B19 52                    4141 	.db #0x52	; 82	'R'
      003B1A D2                    4142 	.db #0xd2	; 210
      003B1B 32                    4143 	.db #0x32	; 50	'2'
      003B1C B2                    4144 	.db #0xb2	; 178
      003B1D 72                    4145 	.db #0x72	; 114	'r'
      003B1E F2                    4146 	.db #0xf2	; 242
      003B1F 0A                    4147 	.db #0x0a	; 10
      003B20 8A                    4148 	.db #0x8a	; 138
      003B21 4A                    4149 	.db #0x4a	; 74	'J'
      003B22 CA                    4150 	.db #0xca	; 202
      003B23 2A                    4151 	.db #0x2a	; 42
      003B24 AA                    4152 	.db #0xaa	; 170
      003B25 6A                    4153 	.db #0x6a	; 106	'j'
      003B26 EA                    4154 	.db #0xea	; 234
      003B27 1A                    4155 	.db #0x1a	; 26
      003B28 9A                    4156 	.db #0x9a	; 154
      003B29 5A                    4157 	.db #0x5a	; 90	'Z'
      003B2A DA                    4158 	.db #0xda	; 218
      003B2B 3A                    4159 	.db #0x3a	; 58
      003B2C BA                    4160 	.db #0xba	; 186
      003B2D 7A                    4161 	.db #0x7a	; 122	'z'
      003B2E FA                    4162 	.db #0xfa	; 250
      003B2F 06                    4163 	.db #0x06	; 6
      003B30 86                    4164 	.db #0x86	; 134
      003B31 46                    4165 	.db #0x46	; 70	'F'
      003B32 C6                    4166 	.db #0xc6	; 198
      003B33 26                    4167 	.db #0x26	; 38
      003B34 A6                    4168 	.db #0xa6	; 166
      003B35 66                    4169 	.db #0x66	; 102	'f'
      003B36 E6                    4170 	.db #0xe6	; 230
      003B37 16                    4171 	.db #0x16	; 22
      003B38 96                    4172 	.db #0x96	; 150
      003B39 56                    4173 	.db #0x56	; 86	'V'
      003B3A D6                    4174 	.db #0xd6	; 214
      003B3B 36                    4175 	.db #0x36	; 54	'6'
      003B3C B6                    4176 	.db #0xb6	; 182
      003B3D 76                    4177 	.db #0x76	; 118	'v'
      003B3E F6                    4178 	.db #0xf6	; 246
      003B3F 0E                    4179 	.db #0x0e	; 14
      003B40 8E                    4180 	.db #0x8e	; 142
      003B41 4E                    4181 	.db #0x4e	; 78	'N'
      003B42 CE                    4182 	.db #0xce	; 206
      003B43 2E                    4183 	.db #0x2e	; 46
      003B44 AE                    4184 	.db #0xae	; 174
      003B45 6E                    4185 	.db #0x6e	; 110	'n'
      003B46 EE                    4186 	.db #0xee	; 238
      003B47 1E                    4187 	.db #0x1e	; 30
      003B48 9E                    4188 	.db #0x9e	; 158
      003B49 5E                    4189 	.db #0x5e	; 94
      003B4A DE                    4190 	.db #0xde	; 222
      003B4B 3E                    4191 	.db #0x3e	; 62
      003B4C BE                    4192 	.db #0xbe	; 190
      003B4D 7E                    4193 	.db #0x7e	; 126
      003B4E FE                    4194 	.db #0xfe	; 254
      003B4F 01                    4195 	.db #0x01	; 1
      003B50 81                    4196 	.db #0x81	; 129
      003B51 41                    4197 	.db #0x41	; 65	'A'
      003B52 C1                    4198 	.db #0xc1	; 193
      003B53 21                    4199 	.db #0x21	; 33
      003B54 A1                    4200 	.db #0xa1	; 161
      003B55 61                    4201 	.db #0x61	; 97	'a'
      003B56 E1                    4202 	.db #0xe1	; 225
      003B57 11                    4203 	.db #0x11	; 17
      003B58 91                    4204 	.db #0x91	; 145
      003B59 51                    4205 	.db #0x51	; 81	'Q'
      003B5A D1                    4206 	.db #0xd1	; 209
      003B5B 31                    4207 	.db #0x31	; 49	'1'
      003B5C B1                    4208 	.db #0xb1	; 177
      003B5D 71                    4209 	.db #0x71	; 113	'q'
      003B5E F1                    4210 	.db #0xf1	; 241
      003B5F 09                    4211 	.db #0x09	; 9
      003B60 89                    4212 	.db #0x89	; 137
      003B61 49                    4213 	.db #0x49	; 73	'I'
      003B62 C9                    4214 	.db #0xc9	; 201
      003B63 29                    4215 	.db #0x29	; 41
      003B64 A9                    4216 	.db #0xa9	; 169
      003B65 69                    4217 	.db #0x69	; 105	'i'
      003B66 E9                    4218 	.db #0xe9	; 233
      003B67 19                    4219 	.db #0x19	; 25
      003B68 99                    4220 	.db #0x99	; 153
      003B69 59                    4221 	.db #0x59	; 89	'Y'
      003B6A D9                    4222 	.db #0xd9	; 217
      003B6B 39                    4223 	.db #0x39	; 57	'9'
      003B6C B9                    4224 	.db #0xb9	; 185
      003B6D 79                    4225 	.db #0x79	; 121	'y'
      003B6E F9                    4226 	.db #0xf9	; 249
      003B6F 05                    4227 	.db #0x05	; 5
      003B70 85                    4228 	.db #0x85	; 133
      003B71 45                    4229 	.db #0x45	; 69	'E'
      003B72 C5                    4230 	.db #0xc5	; 197
      003B73 25                    4231 	.db #0x25	; 37
      003B74 A5                    4232 	.db #0xa5	; 165
      003B75 65                    4233 	.db #0x65	; 101	'e'
      003B76 E5                    4234 	.db #0xe5	; 229
      003B77 15                    4235 	.db #0x15	; 21
      003B78 95                    4236 	.db #0x95	; 149
      003B79 55                    4237 	.db #0x55	; 85	'U'
      003B7A D5                    4238 	.db #0xd5	; 213
      003B7B 35                    4239 	.db #0x35	; 53	'5'
      003B7C B5                    4240 	.db #0xb5	; 181
      003B7D 75                    4241 	.db #0x75	; 117	'u'
      003B7E F5                    4242 	.db #0xf5	; 245
      003B7F 0D                    4243 	.db #0x0d	; 13
      003B80 8D                    4244 	.db #0x8d	; 141
      003B81 4D                    4245 	.db #0x4d	; 77	'M'
      003B82 CD                    4246 	.db #0xcd	; 205
      003B83 2D                    4247 	.db #0x2d	; 45
      003B84 AD                    4248 	.db #0xad	; 173
      003B85 6D                    4249 	.db #0x6d	; 109	'm'
      003B86 ED                    4250 	.db #0xed	; 237
      003B87 1D                    4251 	.db #0x1d	; 29
      003B88 9D                    4252 	.db #0x9d	; 157
      003B89 5D                    4253 	.db #0x5d	; 93
      003B8A DD                    4254 	.db #0xdd	; 221
      003B8B 3D                    4255 	.db #0x3d	; 61
      003B8C BD                    4256 	.db #0xbd	; 189
      003B8D 7D                    4257 	.db #0x7d	; 125
      003B8E FD                    4258 	.db #0xfd	; 253
      003B8F 03                    4259 	.db #0x03	; 3
      003B90 83                    4260 	.db #0x83	; 131
      003B91 43                    4261 	.db #0x43	; 67	'C'
      003B92 C3                    4262 	.db #0xc3	; 195
      003B93 23                    4263 	.db #0x23	; 35
      003B94 A3                    4264 	.db #0xa3	; 163
      003B95 63                    4265 	.db #0x63	; 99	'c'
      003B96 E3                    4266 	.db #0xe3	; 227
      003B97 13                    4267 	.db #0x13	; 19
      003B98 93                    4268 	.db #0x93	; 147
      003B99 53                    4269 	.db #0x53	; 83	'S'
      003B9A D3                    4270 	.db #0xd3	; 211
      003B9B 33                    4271 	.db #0x33	; 51	'3'
      003B9C B3                    4272 	.db #0xb3	; 179
      003B9D 73                    4273 	.db #0x73	; 115	's'
      003B9E F3                    4274 	.db #0xf3	; 243
      003B9F 0B                    4275 	.db #0x0b	; 11
      003BA0 8B                    4276 	.db #0x8b	; 139
      003BA1 4B                    4277 	.db #0x4b	; 75	'K'
      003BA2 CB                    4278 	.db #0xcb	; 203
      003BA3 2B                    4279 	.db #0x2b	; 43
      003BA4 AB                    4280 	.db #0xab	; 171
      003BA5 6B                    4281 	.db #0x6b	; 107	'k'
      003BA6 EB                    4282 	.db #0xeb	; 235
      003BA7 1B                    4283 	.db #0x1b	; 27
      003BA8 9B                    4284 	.db #0x9b	; 155
      003BA9 5B                    4285 	.db #0x5b	; 91
      003BAA DB                    4286 	.db #0xdb	; 219
      003BAB 3B                    4287 	.db #0x3b	; 59
      003BAC BB                    4288 	.db #0xbb	; 187
      003BAD 7B                    4289 	.db #0x7b	; 123
      003BAE FB                    4290 	.db #0xfb	; 251
      003BAF 07                    4291 	.db #0x07	; 7
      003BB0 87                    4292 	.db #0x87	; 135
      003BB1 47                    4293 	.db #0x47	; 71	'G'
      003BB2 C7                    4294 	.db #0xc7	; 199
      003BB3 27                    4295 	.db #0x27	; 39
      003BB4 A7                    4296 	.db #0xa7	; 167
      003BB5 67                    4297 	.db #0x67	; 103	'g'
      003BB6 E7                    4298 	.db #0xe7	; 231
      003BB7 17                    4299 	.db #0x17	; 23
      003BB8 97                    4300 	.db #0x97	; 151
      003BB9 57                    4301 	.db #0x57	; 87	'W'
      003BBA D7                    4302 	.db #0xd7	; 215
      003BBB 37                    4303 	.db #0x37	; 55	'7'
      003BBC B7                    4304 	.db #0xb7	; 183
      003BBD 77                    4305 	.db #0x77	; 119	'w'
      003BBE F7                    4306 	.db #0xf7	; 247
      003BBF 0F                    4307 	.db #0x0f	; 15
      003BC0 8F                    4308 	.db #0x8f	; 143
      003BC1 4F                    4309 	.db #0x4f	; 79	'O'
      003BC2 CF                    4310 	.db #0xcf	; 207
      003BC3 2F                    4311 	.db #0x2f	; 47
      003BC4 AF                    4312 	.db #0xaf	; 175
      003BC5 6F                    4313 	.db #0x6f	; 111	'o'
      003BC6 EF                    4314 	.db #0xef	; 239
      003BC7 1F                    4315 	.db #0x1f	; 31
      003BC8 9F                    4316 	.db #0x9f	; 159
      003BC9 5F                    4317 	.db #0x5f	; 95
      003BCA DF                    4318 	.db #0xdf	; 223
      003BCB 3F                    4319 	.db #0x3f	; 63
      003BCC BF                    4320 	.db #0xbf	; 191
      003BCD 7F                    4321 	.db #0x7f	; 127
      003BCE FF                    4322 	.db #0xff	; 255
                                   4323 	.area CONST   (CODE)
      003BCF                       4324 ___str_0:
      003BCF 0D                    4325 	.db 0x0d
      003BD0 52 65 61 64 20 66 72  4326 	.ascii "Read from %d: %d"
             6F 6D 20 25 64 3A 20
             25 64
      003BE0 0A                    4327 	.db 0x0a
      003BE1 00                    4328 	.db 0x00
                                   4329 	.area CSEG    (CODE)
                                   4330 	.area CONST   (CODE)
      003BE2                       4331 ___str_1:
      003BE2 53 65 6E 64 69 6E 67  4332 	.ascii "Sending to %d: %d"
             20 74 6F 20 25 64 3A
             20 25 64
      003BF3 0A                    4333 	.db 0x0a
      003BF4 00                    4334 	.db 0x00
                                   4335 	.area CSEG    (CODE)
                                   4336 	.area CONST   (CODE)
      003BF5                       4337 ___str_2:
      003BF5 0D                    4338 	.db 0x0d
      003BF6 52 65 61 64 20 76 61  4339 	.ascii "Read value matches the newly written value :D"
             6C 75 65 20 6D 61 74
             63 68 65 73 20 74 68
             65 20 6E 65 77 6C 79
             20 77 72 69 74 74 65
             6E 20 76 61 6C 75 65
             20 3A 44
      003C23 0A                    4340 	.db 0x0a
      003C24 00                    4341 	.db 0x00
                                   4342 	.area CSEG    (CODE)
                                   4343 	.area CONST   (CODE)
      003C25                       4344 ___str_3:
      003C25 0D                    4345 	.db 0x0d
      003C26 52 65 61 64 20 76 61  4346 	.ascii "Read value doesn't match the newly written value ;("
             6C 75 65 20 64 6F 65
             73 6E 27 74 20 6D 61
             74 63 68 20 74 68 65
             20 6E 65 77 6C 79 20
             77 72 69 74 74 65 6E
             20 76 61 6C 75 65 20
             3B 28
      003C59 0A                    4347 	.db 0x0a
      003C5A 00                    4348 	.db 0x00
                                   4349 	.area CSEG    (CODE)
                                   4350 	.area CONST   (CODE)
      003C5B                       4351 ___str_4:
      003C5B 0D                    4352 	.db 0x0d
      003C5C 52 65 61 64 3A 20 25  4353 	.ascii "Read: %d"
             64
      003C64 0A                    4354 	.db 0x0a
      003C65 00                    4355 	.db 0x00
                                   4356 	.area CSEG    (CODE)
                                   4357 	.area CONST   (CODE)
      003C66                       4358 ___str_5:
      003C66 0D                    4359 	.db 0x0d
      003C67 48 61 72 64 77 61 72  4360 	.ascii "Hardware Detected!"
             65 20 44 65 74 65 63
             74 65 64 21
      003C79 0A                    4361 	.db 0x0a
      003C7A 00                    4362 	.db 0x00
                                   4363 	.area CSEG    (CODE)
                                   4364 	.area XINIT   (CODE)
      003CC7                       4365 __xinit__dataReady:
      003CC7 00                    4366 	.db #0x00	;  0
      003CC8                       4367 __xinit__CSN_pin:
      003CC8 02                    4368 	.db #0x02	; 2
      003CC9 06                    4369 	.db #0x06	; 6
      003CCA 01                    4370 	.db #0x01	; 1
      003CCB 00                    4371 	.db #0x00	; 0
      003CCC 00                    4372 	.db #0x00	;  0
      003CCD 00                    4373 	.db #0x00	;  0
      003CCE 03                    4374 	.db #0x03	; 3
      003CCF 01                    4375 	.db #0x01	;  1
      003CD0 00                    4376 	.db #0x00	;  0
      003CD1 00                    4377 	.db #0x00	; 0
      003CD2 00                    4378 	.db #0x00	;  0
      003CD3 00                    4379 	.db #0x00	; 0
      003CD4 00                    4380 	.db #0x00	; 0
      003CD5                       4381 __xinit__CE_pin:
      003CD5 02                    4382 	.db #0x02	; 2
      003CD6 07                    4383 	.db #0x07	; 7
      003CD7 01                    4384 	.db #0x01	; 1
      003CD8 00                    4385 	.db #0x00	; 0
      003CD9 00                    4386 	.db #0x00	;  0
      003CDA 00                    4387 	.db #0x00	;  0
      003CDB 03                    4388 	.db #0x03	; 3
      003CDC 01                    4389 	.db #0x01	;  1
      003CDD 00                    4390 	.db #0x00	;  0
      003CDE 00                    4391 	.db #0x00	; 0
      003CDF 00                    4392 	.db #0x00	;  0
      003CE0 00                    4393 	.db #0x00	; 0
      003CE1 00                    4394 	.db #0x00	; 0
      003CE2                       4395 __xinit__reset_flag:
      003CE2 00                    4396 	.db #0x00	; 0
      003CE3                       4397 __xinit__current_mode:
      003CE3 05                    4398 	.db #0x05	; 5
      003CE4                       4399 __xinit__current_acknowledgement_state:
      003CE4 01                    4400 	.db #0x01	; 1
      003CE5                       4401 __xinit__dynamic_payload:
      003CE5 00                    4402 	.db #0x00	; 0
      003CE6                       4403 __xinit__datapipe_address:
      003CE6 D2                    4404 	.db #0xd2	; 210
      003CE7 F0                    4405 	.db #0xf0	; 240
      003CE8 F0                    4406 	.db #0xf0	; 240
      003CE9 F0                    4407 	.db #0xf0	; 240
      003CEA F0                    4408 	.db #0xf0	; 240
      003CEB E1                    4409 	.db #0xe1	; 225
      003CEC F0                    4410 	.db #0xf0	; 240
      003CED F0                    4411 	.db #0xf0	; 240
      003CEE F0                    4412 	.db #0xf0	; 240
      003CEF F0                    4413 	.db #0xf0	; 240
      003CF0 F0                    4414 	.db #0xf0	; 240
      003CF1 F0                    4415 	.db #0xf0	; 240
      003CF2 F0                    4416 	.db #0xf0	; 240
      003CF3 F0                    4417 	.db #0xf0	; 240
      003CF4 F0                    4418 	.db #0xf0	; 240
      003CF5 F0                    4419 	.db #0xf0	; 240
      003CF6 F0                    4420 	.db #0xf0	; 240
      003CF7 F0                    4421 	.db #0xf0	; 240
      003CF8 F0                    4422 	.db #0xf0	; 240
      003CF9 F0                    4423 	.db #0xf0	; 240
      003CFA F0                    4424 	.db #0xf0	; 240
      003CFB F0                    4425 	.db #0xf0	; 240
      003CFC F0                    4426 	.db #0xf0	; 240
      003CFD F0                    4427 	.db #0xf0	; 240
      003CFE F0                    4428 	.db #0xf0	; 240
      003CFF F0                    4429 	.db #0xf0	; 240
      003D00 F0                    4430 	.db #0xf0	; 240
      003D01 F0                    4431 	.db #0xf0	; 240
      003D02 F0                    4432 	.db #0xf0	; 240
      003D03 F0                    4433 	.db #0xf0	; 240
                                   4434 	.area CABS    (ABS,CODE)
