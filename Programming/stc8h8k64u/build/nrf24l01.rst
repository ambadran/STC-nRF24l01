                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module nrf24l01
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bitReverseTable256
                                     12 	.globl _spiSend
                                     13 	.globl _spiConfigure
                                     14 	.globl _spiSelectSpeed
                                     15 	.globl _gpioWrite
                                     16 	.globl _gpioConfigure
                                     17 	.globl _delay1ms
                                     18 	.globl _printf
                                     19 	.globl _S1SM0_FE
                                     20 	.globl _T1IE
                                     21 	.globl _T0IE
                                     22 	.globl _T1RUN
                                     23 	.globl _T0RUN
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _EA
                                     33 	.globl _INT1IE
                                     34 	.globl _INT0IE
                                     35 	.globl _INT1TR
                                     36 	.globl _INT0TR
                                     37 	.globl _P5_5
                                     38 	.globl _P5_4
                                     39 	.globl _P5_3
                                     40 	.globl _P5_2
                                     41 	.globl _P5_1
                                     42 	.globl _P5_0
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _P1_7
                                     60 	.globl _P1_6
                                     61 	.globl _P1_5
                                     62 	.globl _P1_4
                                     63 	.globl _P1_3
                                     64 	.globl _P1_2
                                     65 	.globl _P1_1
                                     66 	.globl _P1_0
                                     67 	.globl _USBADR
                                     68 	.globl _USBCON
                                     69 	.globl _USBDAT
                                     70 	.globl _USBCLK
                                     71 	.globl _S4BUF
                                     72 	.globl _S4CON
                                     73 	.globl _S3BUF
                                     74 	.globl _S3CON
                                     75 	.globl _S2BUF
                                     76 	.globl _S2CON
                                     77 	.globl _S1BUF
                                     78 	.globl _S1CON
                                     79 	.globl _SADEN
                                     80 	.globl _SADDR
                                     81 	.globl _AUXINTIF
                                     82 	.globl _T3
                                     83 	.globl _T3L
                                     84 	.globl _T3H
                                     85 	.globl _T4
                                     86 	.globl _T4L
                                     87 	.globl _T4H
                                     88 	.globl _T4T3M
                                     89 	.globl _WDT_CONTR
                                     90 	.globl _AUXR
                                     91 	.globl _T2
                                     92 	.globl _T2H
                                     93 	.globl _T2L
                                     94 	.globl _T1
                                     95 	.globl _T1H
                                     96 	.globl _T1L
                                     97 	.globl _T0
                                     98 	.globl _T0H
                                     99 	.globl _T0L
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _IRTRIM
                                    103 	.globl _LIRTRIM
                                    104 	.globl _IRCBAND
                                    105 	.globl _SPDAT
                                    106 	.globl _SPCTL
                                    107 	.globl _SPSTAT
                                    108 	.globl _WKTC
                                    109 	.globl _WKTCH
                                    110 	.globl _WKTCL
                                    111 	.globl _BUS_SPEED
                                    112 	.globl _P_SW2
                                    113 	.globl _P_SW1
                                    114 	.globl _RSTCFG
                                    115 	.globl _PCON
                                    116 	.globl _B
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _SP
                                    120 	.globl _IP3H
                                    121 	.globl _IP3L
                                    122 	.globl _IP2H
                                    123 	.globl _IP2L
                                    124 	.globl _IE2
                                    125 	.globl _IP1H
                                    126 	.globl _IP1L
                                    127 	.globl _IE1
                                    128 	.globl _INT_CLKO
                                    129 	.globl _IAP_TPS
                                    130 	.globl _IAP_CONTR
                                    131 	.globl _IAP_TRIG
                                    132 	.globl _IAP_CMD
                                    133 	.globl _IAP_ADDR
                                    134 	.globl _IAP_ADDRL
                                    135 	.globl _IAP_ADDRH
                                    136 	.globl _IAP_DATA
                                    137 	.globl _P5M0
                                    138 	.globl _P5M1
                                    139 	.globl _P5
                                    140 	.globl _P3M0
                                    141 	.globl _P3M1
                                    142 	.globl _P3
                                    143 	.globl _P2M0
                                    144 	.globl _P2M1
                                    145 	.globl _P2
                                    146 	.globl _P1M0
                                    147 	.globl _P1M1
                                    148 	.globl _P1
                                    149 	.globl _TA
                                    150 	.globl _DPH1
                                    151 	.globl _DPL1
                                    152 	.globl _DPS
                                    153 	.globl _DP
                                    154 	.globl _DPH
                                    155 	.globl _DPL
                                    156 	.globl _CMPCR2
                                    157 	.globl _CMPCR1
                                    158 	.globl _DMA_ADC_AMT
                                    159 	.globl _ADCCFG
                                    160 	.globl _ADC_RES
                                    161 	.globl _ADC_RESL
                                    162 	.globl _ADC_RESH
                                    163 	.globl _ADC_CONTR
                                    164 	.globl _datapipe_address
                                    165 	.globl _CE_pin
                                    166 	.globl _CSN_pin
                                    167 	.globl _dataReady
                                    168 	.globl _nrf24_write_PARM_4
                                    169 	.globl _nrf24_write_PARM_3
                                    170 	.globl _nrf24_write_PARM_2
                                    171 	.globl _nrf24_read_PARM_4
                                    172 	.globl _nrf24_read_PARM_3
                                    173 	.globl _nrf24_read_PARM_2
                                    174 	.globl _nrf24_crc_configuration_PARM_2
                                    175 	.globl _nrf24_interrupt_mask_PARM_3
                                    176 	.globl _nrf24_interrupt_mask_PARM_2
                                    177 	.globl _nrf24_prx_static_payload_width_PARM_2
                                    178 	.globl _nrf24_dynamic_payload_PARM_2
                                    179 	.globl _nrf24_automatic_retransmit_setup_PARM_2
                                    180 	.globl _nrf24_device_PARM_2
                                    181 	.globl _nrf24_receive_PARM_2
                                    182 	.globl _nrf24_send_payload_PARM_2
                                    183 	.globl _nrf24_transmit_PARM_3
                                    184 	.globl _nrf24_transmit_PARM_2
                                    185 	.globl _DMA_UR4R_TXAL
                                    186 	.globl _DMA_UR4R_TXAH
                                    187 	.globl _DMA_UR4R_DONE
                                    188 	.globl _DMA_UR4R_AMT
                                    189 	.globl _DMA_UR4R_STA
                                    190 	.globl _DMA_UR4R_CR
                                    191 	.globl _DMA_UR4R_CFG
                                    192 	.globl _DMA_UR4T_TXAL
                                    193 	.globl _DMA_UR4T_TXAH
                                    194 	.globl _DMA_UR4T_DONE
                                    195 	.globl _DMA_UR4T_AMT
                                    196 	.globl _DMA_UR4T_STA
                                    197 	.globl _DMA_UR4T_CR
                                    198 	.globl _DMA_UR4T_CFG
                                    199 	.globl _DMA_UR3R_TXAL
                                    200 	.globl _DMA_UR3R_TXAH
                                    201 	.globl _DMA_UR3R_DONE
                                    202 	.globl _DMA_UR3R_AMT
                                    203 	.globl _DMA_UR3R_STA
                                    204 	.globl _DMA_UR3R_CR
                                    205 	.globl _DMA_UR3R_CFG
                                    206 	.globl _DMA_UR3T_TXAL
                                    207 	.globl _DMA_UR3T_TXAH
                                    208 	.globl _DMA_UR3T_DONE
                                    209 	.globl _DMA_UR3T_AMT
                                    210 	.globl _DMA_UR3T_STA
                                    211 	.globl _DMA_UR3T_CR
                                    212 	.globl _DMA_UR3T_CFG
                                    213 	.globl _DMA_UR2R_TXAL
                                    214 	.globl _DMA_UR2R_TXAH
                                    215 	.globl _DMA_UR2R_DONE
                                    216 	.globl _DMA_UR2R_AMT
                                    217 	.globl _DMA_UR2R_STA
                                    218 	.globl _DMA_UR2R_CR
                                    219 	.globl _DMA_UR2R_CFG
                                    220 	.globl _DMA_UR2T_TXAL
                                    221 	.globl _DMA_UR2T_TXAH
                                    222 	.globl _DMA_UR2T_DONE
                                    223 	.globl _DMA_UR2T_AMT
                                    224 	.globl _DMA_UR2T_STA
                                    225 	.globl _DMA_UR2T_CR
                                    226 	.globl _DMA_UR2T_CFG
                                    227 	.globl _DMA_UR1R_TXAL
                                    228 	.globl _DMA_UR1R_TXAH
                                    229 	.globl _DMA_UR1R_DONE
                                    230 	.globl _DMA_UR1R_AMT
                                    231 	.globl _DMA_UR1R_STA
                                    232 	.globl _DMA_UR1R_CR
                                    233 	.globl _DMA_UR1R_CFG
                                    234 	.globl _DMA_UR1T_TXAL
                                    235 	.globl _DMA_UR1T_TXAH
                                    236 	.globl _DMA_UR1T_DONE
                                    237 	.globl _DMA_URTX_AMT
                                    238 	.globl _DMA_UR1T_STA
                                    239 	.globl _DMA_UR1T_CR
                                    240 	.globl _DMA_UR1T_CFG
                                    241 	.globl _TM4PS
                                    242 	.globl _TM3PS
                                    243 	.globl _TM2PS
                                    244 	.globl _IRC48MCR
                                    245 	.globl _IRCDB
                                    246 	.globl _MCLKOCR
                                    247 	.globl _CKSEL
                                    248 	.globl _IRC32KCR
                                    249 	.globl _XOSCCR
                                    250 	.globl _HIRCCR
                                    251 	.globl _CLKDIV
                                    252 	.globl _DMA_SPI_CFG2
                                    253 	.globl _DMA_SPI_RXAL
                                    254 	.globl _DMA_SPI_RXAH
                                    255 	.globl _DMA_SPI_TXAL
                                    256 	.globl _DMA_SPI_TXAH
                                    257 	.globl _DMA_SPI_DONE
                                    258 	.globl _DMA_SPI_AMT
                                    259 	.globl _DMA_SPI_STA
                                    260 	.globl _DMA_SPI_CR
                                    261 	.globl _DMA_SPI_CFG
                                    262 	.globl _SSEC
                                    263 	.globl _SEC
                                    264 	.globl _MIN
                                    265 	.globl _HOUR
                                    266 	.globl _DAY
                                    267 	.globl _MONTH
                                    268 	.globl _YEAR
                                    269 	.globl _INISSEC
                                    270 	.globl _INISEC
                                    271 	.globl _INIMIN
                                    272 	.globl _INIHOUR
                                    273 	.globl _INIDAY
                                    274 	.globl _INIMONTH
                                    275 	.globl _INIYEAR
                                    276 	.globl _ALASSEC
                                    277 	.globl _ALASEC
                                    278 	.globl _ALAMIN
                                    279 	.globl _ALAHOUR
                                    280 	.globl _RTCIF
                                    281 	.globl _RTCIEN
                                    282 	.globl _RTCCFG
                                    283 	.globl _RTCCR
                                    284 	.globl _PWMB_OISR
                                    285 	.globl _PWMB_DTR
                                    286 	.globl _PWMB_BKR
                                    287 	.globl _PWMB_CCR4L
                                    288 	.globl _PWMB_CCR4H
                                    289 	.globl _PWMB_CCR3L
                                    290 	.globl _PWMB_CCR3H
                                    291 	.globl _PWMB_CCR2L
                                    292 	.globl _PWMB_CCR2H
                                    293 	.globl _PWMB_CCR1L
                                    294 	.globl _PWMB_CCR1H
                                    295 	.globl _PWMB_RCR
                                    296 	.globl _PWMB_ARRL
                                    297 	.globl _PWMB_ARRH
                                    298 	.globl _PWMB_PSCRL
                                    299 	.globl _PWMB_PSCRH
                                    300 	.globl _PWMB_CNTRL
                                    301 	.globl _PWMB_CNTRH
                                    302 	.globl _PWMB_CCER2
                                    303 	.globl _PWMB_CCER1
                                    304 	.globl _PWMB_CCMR4
                                    305 	.globl _PWMB_CCMR3
                                    306 	.globl _PWMB_CCMR2
                                    307 	.globl _PWMB_CCMR1
                                    308 	.globl _PWMB_EGR
                                    309 	.globl _PWMB_SR2
                                    310 	.globl _PWMB_SR1
                                    311 	.globl _PWMB_IER
                                    312 	.globl _PWMB_ETR
                                    313 	.globl _PWMB_SMCR
                                    314 	.globl _PWMB_CR2
                                    315 	.globl _PWMB_CR1
                                    316 	.globl _PWMA_OISR
                                    317 	.globl _PWMA_DTR
                                    318 	.globl _PWMA_BKR
                                    319 	.globl _PWMA_CCR4L
                                    320 	.globl _PWMA_CCR4H
                                    321 	.globl _PWMA_CCR3L
                                    322 	.globl _PWMA_CCR3H
                                    323 	.globl _PWMA_CCR2L
                                    324 	.globl _PWMA_CCR2H
                                    325 	.globl _PWMA_CCR1L
                                    326 	.globl _PWMA_CCR1H
                                    327 	.globl _PWMA_RCR
                                    328 	.globl _PWMA_ARRL
                                    329 	.globl _PWMA_ARRH
                                    330 	.globl _PWMA_PSCRL
                                    331 	.globl _PWMA_PSCRH
                                    332 	.globl _PWMA_CNTRL
                                    333 	.globl _PWMA_CNTRH
                                    334 	.globl _PWMA_CCER2
                                    335 	.globl _PWMA_CCER1
                                    336 	.globl _PWMA_CCMR4
                                    337 	.globl _PWMA_CCMR3
                                    338 	.globl _PWMA_CCMR2
                                    339 	.globl _PWMA_CCMR1
                                    340 	.globl _PWMA_EGR
                                    341 	.globl _PWMA_SR2
                                    342 	.globl _PWMA_SR1
                                    343 	.globl _PWMA_IER
                                    344 	.globl _PWMA_ETR
                                    345 	.globl _PWMA_SMCR
                                    346 	.globl _PWMA_CR2
                                    347 	.globl _PWMA_CR1
                                    348 	.globl _PWMB_IOAUX
                                    349 	.globl _PWMB_PS
                                    350 	.globl _PWMB_ENO
                                    351 	.globl _PWMB_ETRPS
                                    352 	.globl _PWMA_IOAUX
                                    353 	.globl _PWMA_PS
                                    354 	.globl _PWMA_ENO
                                    355 	.globl _PWMA_ETRPS
                                    356 	.globl _RSTFLAG
                                    357 	.globl _SPFUNC
                                    358 	.globl _OPCON
                                    359 	.globl _ARCON
                                    360 	.globl _MD4
                                    361 	.globl _MD5
                                    362 	.globl _MD0
                                    363 	.globl _MD1
                                    364 	.globl _MD2
                                    365 	.globl _MD3
                                    366 	.globl _DMA_LCM_RXAL
                                    367 	.globl _DMA_LCM_RXAH
                                    368 	.globl _DMA_LCM_TXAL
                                    369 	.globl _DMA_LCM_TXAH
                                    370 	.globl _DMA_LCM_DONE
                                    371 	.globl _DMA_LCM_AMT
                                    372 	.globl _DMA_LCM_STA
                                    373 	.globl _DMA_LCM_CR
                                    374 	.globl _DMA_LCM_CFG
                                    375 	.globl _LCMIDDAT
                                    376 	.globl _LCMIDDATH
                                    377 	.globl _LCMIDDATL
                                    378 	.globl _LCMSTA
                                    379 	.globl _LCMCR
                                    380 	.globl _LCMCFG2
                                    381 	.globl _LCMCFG
                                    382 	.globl _I2CMSAUX
                                    383 	.globl _I2CRXD
                                    384 	.globl _I2CTXD
                                    385 	.globl _I2CSLADR
                                    386 	.globl _I2CSLST
                                    387 	.globl _I2CSLCR
                                    388 	.globl _I2CMSST
                                    389 	.globl _I2CMSCR
                                    390 	.globl _I2CCFG
                                    391 	.globl _PINIPH
                                    392 	.globl _PINIPL
                                    393 	.globl _P5IE
                                    394 	.globl _P5DR
                                    395 	.globl _P5SR
                                    396 	.globl _P5NCS
                                    397 	.globl _P5PU
                                    398 	.globl _P5WKUE
                                    399 	.globl _P5IM1
                                    400 	.globl _P5IM0
                                    401 	.globl _P5INTF
                                    402 	.globl _P5INTE
                                    403 	.globl _P3IE
                                    404 	.globl _P3DR
                                    405 	.globl _P3SR
                                    406 	.globl _P3NCS
                                    407 	.globl _P3PU
                                    408 	.globl _P3WKUE
                                    409 	.globl _P3IM1
                                    410 	.globl _P3IM0
                                    411 	.globl _P3INTF
                                    412 	.globl _P3INTE
                                    413 	.globl _P2IE
                                    414 	.globl _P2DR
                                    415 	.globl _P2SR
                                    416 	.globl _P2NCS
                                    417 	.globl _P2PU
                                    418 	.globl _P2WKUE
                                    419 	.globl _P2IM1
                                    420 	.globl _P2IM0
                                    421 	.globl _P2INTF
                                    422 	.globl _P2INTE
                                    423 	.globl _P1IE
                                    424 	.globl _P1DR
                                    425 	.globl _P1SR
                                    426 	.globl _P1NCS
                                    427 	.globl _P1PU
                                    428 	.globl _P1WKUE
                                    429 	.globl _P1IM1
                                    430 	.globl _P1IM0
                                    431 	.globl _P1INTF
                                    432 	.globl _P1INTE
                                    433 	.globl _DMA_M2M_RXAL
                                    434 	.globl _DMA_M2M_RXAH
                                    435 	.globl _DMA_M2M_TXAL
                                    436 	.globl _DMA_M2M_TXAH
                                    437 	.globl _DMA_M2M_DONE
                                    438 	.globl _DMA_M2M_AMT
                                    439 	.globl _DMA_M2M_STA
                                    440 	.globl _DMA_M2M_CR
                                    441 	.globl _DMA_M2M_CFG
                                    442 	.globl _CMPEXCFG
                                    443 	.globl _DMA_ADC_CHSW1
                                    444 	.globl _DMA_ADC_CHSW0
                                    445 	.globl _DMA_ADC_CFG2
                                    446 	.globl _DMA_ADC_RXAL
                                    447 	.globl _DMA_ADC_RXAH
                                    448 	.globl _DMA_ADC_STA
                                    449 	.globl _DMA_ADC_CR
                                    450 	.globl _DMA_ADC_CFG
                                    451 	.globl _ADCEXCFG
                                    452 	.globl _ADCTIM
                                    453 	.globl _delay_function
                                    454 	.globl _SPI_Initializer
                                    455 	.globl _pinout_Initializer
                                    456 	.globl _nrf24_SPI
                                    457 	.globl _SPI_send_command
                                    458 	.globl _nrf24_CE
                                    459 	.globl _nrf24_dynamic_ack
                                    460 	.globl _nrf24_transmit
                                    461 	.globl _nrf24_send_payload
                                    462 	.globl _nrf24_transmit_status
                                    463 	.globl _nrf24_receive
                                    464 	.globl _nrf24_flush
                                    465 	.globl _nrf24_reset
                                    466 	.globl _nrf24_device
                                    467 	.globl _nrf24_automatic_retransmit_setup
                                    468 	.globl _nrf24_auto_acknowledgment_setup
                                    469 	.globl _nrf24_dynamic_payload
                                    470 	.globl _nrf24_datapipe_ptx
                                    471 	.globl _nrf24_datapipe_address_configuration
                                    472 	.globl _nrf24_prx_static_payload_width
                                    473 	.globl _nrf24_datapipe_enable
                                    474 	.globl _nrf24_address_width
                                    475 	.globl _nrf24_rf_datarate
                                    476 	.globl _nrf24_rf_power
                                    477 	.globl _nrf24_rf_channel
                                    478 	.globl _nrf24_interrupt_mask
                                    479 	.globl _nrf24_crc_configuration
                                    480 	.globl _nrf24_mode
                                    481 	.globl _nrf24_read
                                    482 	.globl _nrf24_write
                                    483 ;--------------------------------------------------------
                                    484 ; special function registers
                                    485 ;--------------------------------------------------------
                                    486 	.area RSEG    (ABS,DATA)
      000000                        487 	.org 0x0000
                           0000BC   488 _ADC_CONTR	=	0x00bc
                           0000BD   489 _ADC_RESH	=	0x00bd
                           0000BE   490 _ADC_RESL	=	0x00be
                           00BDBE   491 _ADC_RES	=	0xbdbe
                           0000DE   492 _ADCCFG	=	0x00de
                           0000FA   493 _DMA_ADC_AMT	=	0x00fa
                           0000E6   494 _CMPCR1	=	0x00e6
                           0000E7   495 _CMPCR2	=	0x00e7
                           000082   496 _DPL	=	0x0082
                           000083   497 _DPH	=	0x0083
                           008382   498 _DP	=	0x8382
                           0000E3   499 _DPS	=	0x00e3
                           0000E4   500 _DPL1	=	0x00e4
                           0000E5   501 _DPH1	=	0x00e5
                           0000AE   502 _TA	=	0x00ae
                           000090   503 _P1	=	0x0090
                           000091   504 _P1M1	=	0x0091
                           000092   505 _P1M0	=	0x0092
                           0000A0   506 _P2	=	0x00a0
                           000095   507 _P2M1	=	0x0095
                           000096   508 _P2M0	=	0x0096
                           0000B0   509 _P3	=	0x00b0
                           0000B1   510 _P3M1	=	0x00b1
                           0000B2   511 _P3M0	=	0x00b2
                           0000C8   512 _P5	=	0x00c8
                           0000C9   513 _P5M1	=	0x00c9
                           0000CA   514 _P5M0	=	0x00ca
                           0000C2   515 _IAP_DATA	=	0x00c2
                           0000C3   516 _IAP_ADDRH	=	0x00c3
                           0000C4   517 _IAP_ADDRL	=	0x00c4
                           00C3C4   518 _IAP_ADDR	=	0xc3c4
                           0000C5   519 _IAP_CMD	=	0x00c5
                           0000C6   520 _IAP_TRIG	=	0x00c6
                           0000C7   521 _IAP_CONTR	=	0x00c7
                           0000F5   522 _IAP_TPS	=	0x00f5
                           00008F   523 _INT_CLKO	=	0x008f
                           0000A8   524 _IE1	=	0x00a8
                           0000B8   525 _IP1L	=	0x00b8
                           0000B7   526 _IP1H	=	0x00b7
                           0000AF   527 _IE2	=	0x00af
                           0000B5   528 _IP2L	=	0x00b5
                           0000B6   529 _IP2H	=	0x00b6
                           0000DF   530 _IP3L	=	0x00df
                           0000EE   531 _IP3H	=	0x00ee
                           000081   532 _SP	=	0x0081
                           0000D0   533 _PSW	=	0x00d0
                           0000E0   534 _ACC	=	0x00e0
                           0000F0   535 _B	=	0x00f0
                           000087   536 _PCON	=	0x0087
                           0000FF   537 _RSTCFG	=	0x00ff
                           0000A2   538 _P_SW1	=	0x00a2
                           0000BA   539 _P_SW2	=	0x00ba
                           0000A1   540 _BUS_SPEED	=	0x00a1
                           0000AA   541 _WKTCL	=	0x00aa
                           0000AB   542 _WKTCH	=	0x00ab
                           00ABAA   543 _WKTC	=	0xabaa
                           0000CD   544 _SPSTAT	=	0x00cd
                           0000CE   545 _SPCTL	=	0x00ce
                           0000CF   546 _SPDAT	=	0x00cf
                           00009D   547 _IRCBAND	=	0x009d
                           00009E   548 _LIRTRIM	=	0x009e
                           00009F   549 _IRTRIM	=	0x009f
                           000088   550 _TCON	=	0x0088
                           000089   551 _TMOD	=	0x0089
                           00008A   552 _T0L	=	0x008a
                           00008C   553 _T0H	=	0x008c
                           008C8A   554 _T0	=	0x8c8a
                           00008B   555 _T1L	=	0x008b
                           00008D   556 _T1H	=	0x008d
                           008D8B   557 _T1	=	0x8d8b
                           0000D7   558 _T2L	=	0x00d7
                           0000D6   559 _T2H	=	0x00d6
                           00D6D7   560 _T2	=	0xd6d7
                           00008E   561 _AUXR	=	0x008e
                           0000C1   562 _WDT_CONTR	=	0x00c1
                           0000D1   563 _T4T3M	=	0x00d1
                           0000D2   564 _T4H	=	0x00d2
                           0000D3   565 _T4L	=	0x00d3
                           00D2D3   566 _T4	=	0xd2d3
                           0000D4   567 _T3H	=	0x00d4
                           0000D5   568 _T3L	=	0x00d5
                           00D4D5   569 _T3	=	0xd4d5
                           0000EF   570 _AUXINTIF	=	0x00ef
                           0000A9   571 _SADDR	=	0x00a9
                           0000B9   572 _SADEN	=	0x00b9
                           000098   573 _S1CON	=	0x0098
                           000099   574 _S1BUF	=	0x0099
                           00009A   575 _S2CON	=	0x009a
                           00009B   576 _S2BUF	=	0x009b
                           0000AC   577 _S3CON	=	0x00ac
                           0000AD   578 _S3BUF	=	0x00ad
                           000084   579 _S4CON	=	0x0084
                           000085   580 _S4BUF	=	0x0085
                           0000DC   581 _USBCLK	=	0x00dc
                           0000EC   582 _USBDAT	=	0x00ec
                           0000F4   583 _USBCON	=	0x00f4
                           0000FC   584 _USBADR	=	0x00fc
                                    585 ;--------------------------------------------------------
                                    586 ; special function bits
                                    587 ;--------------------------------------------------------
                                    588 	.area RSEG    (ABS,DATA)
      000000                        589 	.org 0x0000
                           000090   590 _P1_0	=	0x0090
                           000091   591 _P1_1	=	0x0091
                           000092   592 _P1_2	=	0x0092
                           000093   593 _P1_3	=	0x0093
                           000094   594 _P1_4	=	0x0094
                           000095   595 _P1_5	=	0x0095
                           000096   596 _P1_6	=	0x0096
                           000097   597 _P1_7	=	0x0097
                           0000A0   598 _P2_0	=	0x00a0
                           0000A1   599 _P2_1	=	0x00a1
                           0000A2   600 _P2_2	=	0x00a2
                           0000A3   601 _P2_3	=	0x00a3
                           0000A4   602 _P2_4	=	0x00a4
                           0000A5   603 _P2_5	=	0x00a5
                           0000A6   604 _P2_6	=	0x00a6
                           0000A7   605 _P2_7	=	0x00a7
                           0000B0   606 _P3_0	=	0x00b0
                           0000B1   607 _P3_1	=	0x00b1
                           0000B2   608 _P3_2	=	0x00b2
                           0000B3   609 _P3_3	=	0x00b3
                           0000B4   610 _P3_4	=	0x00b4
                           0000B5   611 _P3_5	=	0x00b5
                           0000B6   612 _P3_6	=	0x00b6
                           0000B7   613 _P3_7	=	0x00b7
                           0000C8   614 _P5_0	=	0x00c8
                           0000C9   615 _P5_1	=	0x00c9
                           0000CA   616 _P5_2	=	0x00ca
                           0000CB   617 _P5_3	=	0x00cb
                           0000CC   618 _P5_4	=	0x00cc
                           0000CD   619 _P5_5	=	0x00cd
                           000088   620 _INT0TR	=	0x0088
                           00008A   621 _INT1TR	=	0x008a
                           0000A8   622 _INT0IE	=	0x00a8
                           0000AA   623 _INT1IE	=	0x00aa
                           0000AF   624 _EA	=	0x00af
                           0000D0   625 _P	=	0x00d0
                           0000D1   626 _F1	=	0x00d1
                           0000D2   627 _OV	=	0x00d2
                           0000D3   628 _RS0	=	0x00d3
                           0000D4   629 _RS1	=	0x00d4
                           0000D5   630 _F0	=	0x00d5
                           0000D6   631 _AC	=	0x00d6
                           0000D7   632 _CY	=	0x00d7
                           00008C   633 _T0RUN	=	0x008c
                           00008E   634 _T1RUN	=	0x008e
                           0000A9   635 _T0IE	=	0x00a9
                           0000AB   636 _T1IE	=	0x00ab
                           00009F   637 _S1SM0_FE	=	0x009f
                                    638 ;--------------------------------------------------------
                                    639 ; overlayable register banks
                                    640 ;--------------------------------------------------------
                                    641 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        642 	.ds 8
                                    643 ;--------------------------------------------------------
                                    644 ; internal ram data
                                    645 ;--------------------------------------------------------
                                    646 	.area DSEG    (DATA)
                                    647 ;--------------------------------------------------------
                                    648 ; overlayable items in internal ram 
                                    649 ;--------------------------------------------------------
                                    650 ;--------------------------------------------------------
                                    651 ; indirectly addressable internal ram data
                                    652 ;--------------------------------------------------------
                                    653 	.area ISEG    (DATA)
                                    654 ;--------------------------------------------------------
                                    655 ; absolute internal ram data
                                    656 ;--------------------------------------------------------
                                    657 	.area IABS    (ABS,DATA)
                                    658 	.area IABS    (ABS,DATA)
                                    659 ;--------------------------------------------------------
                                    660 ; bit data
                                    661 ;--------------------------------------------------------
                                    662 	.area BSEG    (BIT)
                                    663 ;--------------------------------------------------------
                                    664 ; paged external ram data
                                    665 ;--------------------------------------------------------
                                    666 	.area PSEG    (PAG,XDATA)
                                    667 ;--------------------------------------------------------
                                    668 ; external ram data
                                    669 ;--------------------------------------------------------
                                    670 	.area XSEG    (XDATA)
                           00FEA8   671 _ADCTIM	=	0xfea8
                           00FEAD   672 _ADCEXCFG	=	0xfead
                           00FA10   673 _DMA_ADC_CFG	=	0xfa10
                           00FA11   674 _DMA_ADC_CR	=	0xfa11
                           00FA12   675 _DMA_ADC_STA	=	0xfa12
                           00FA17   676 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   677 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   678 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   679 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   680 _DMA_ADC_CHSW1	=	0xfa1b
                           00FEAE   681 _CMPEXCFG	=	0xfeae
                           00FA00   682 _DMA_M2M_CFG	=	0xfa00
                           00FA01   683 _DMA_M2M_CR	=	0xfa01
                           00FA02   684 _DMA_M2M_STA	=	0xfa02
                           00FA03   685 _DMA_M2M_AMT	=	0xfa03
                           00FA04   686 _DMA_M2M_DONE	=	0xfa04
                           00FA05   687 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   688 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   689 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   690 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   691 _P1INTE	=	0xfd01
                           00FD11   692 _P1INTF	=	0xfd11
                           00FD21   693 _P1IM0	=	0xfd21
                           00FD31   694 _P1IM1	=	0xfd31
                           00FD41   695 _P1WKUE	=	0xfd41
                           00FE11   696 _P1PU	=	0xfe11
                           00FE19   697 _P1NCS	=	0xfe19
                           00FE21   698 _P1SR	=	0xfe21
                           00FE29   699 _P1DR	=	0xfe29
                           00FE31   700 _P1IE	=	0xfe31
                           00FD02   701 _P2INTE	=	0xfd02
                           00FD12   702 _P2INTF	=	0xfd12
                           00FD22   703 _P2IM0	=	0xfd22
                           00FD32   704 _P2IM1	=	0xfd32
                           00FD42   705 _P2WKUE	=	0xfd42
                           00FE12   706 _P2PU	=	0xfe12
                           00FE1A   707 _P2NCS	=	0xfe1a
                           00FE22   708 _P2SR	=	0xfe22
                           00FE2A   709 _P2DR	=	0xfe2a
                           00FE32   710 _P2IE	=	0xfe32
                           00FD03   711 _P3INTE	=	0xfd03
                           00FD13   712 _P3INTF	=	0xfd13
                           00FD23   713 _P3IM0	=	0xfd23
                           00FD33   714 _P3IM1	=	0xfd33
                           00FD43   715 _P3WKUE	=	0xfd43
                           00FE13   716 _P3PU	=	0xfe13
                           00FE1B   717 _P3NCS	=	0xfe1b
                           00FE23   718 _P3SR	=	0xfe23
                           00FE2B   719 _P3DR	=	0xfe2b
                           00FE33   720 _P3IE	=	0xfe33
                           00FD05   721 _P5INTE	=	0xfd05
                           00FD15   722 _P5INTF	=	0xfd15
                           00FD25   723 _P5IM0	=	0xfd25
                           00FD35   724 _P5IM1	=	0xfd35
                           00FD45   725 _P5WKUE	=	0xfd45
                           00FE15   726 _P5PU	=	0xfe15
                           00FE1D   727 _P5NCS	=	0xfe1d
                           00FE25   728 _P5SR	=	0xfe25
                           00FE2D   729 _P5DR	=	0xfe2d
                           00FE35   730 _P5IE	=	0xfe35
                           00FD60   731 _PINIPL	=	0xfd60
                           00FD61   732 _PINIPH	=	0xfd61
                           00FE80   733 _I2CCFG	=	0xfe80
                           00FE81   734 _I2CMSCR	=	0xfe81
                           00FE82   735 _I2CMSST	=	0xfe82
                           00FE83   736 _I2CSLCR	=	0xfe83
                           00FE84   737 _I2CSLST	=	0xfe84
                           00FE85   738 _I2CSLADR	=	0xfe85
                           00FE86   739 _I2CTXD	=	0xfe86
                           00FE87   740 _I2CRXD	=	0xfe87
                           00FE88   741 _I2CMSAUX	=	0xfe88
                           00FE50   742 _LCMCFG	=	0xfe50
                           00FE51   743 _LCMCFG2	=	0xfe51
                           00FE52   744 _LCMCR	=	0xfe52
                           00FE53   745 _LCMSTA	=	0xfe53
                           00FE54   746 _LCMIDDATL	=	0xfe54
                           00FE55   747 _LCMIDDATH	=	0xfe55
                           00FE54   748 _LCMIDDAT	=	0xfe54
                           00FA70   749 _DMA_LCM_CFG	=	0xfa70
                           00FA71   750 _DMA_LCM_CR	=	0xfa71
                           00FA72   751 _DMA_LCM_STA	=	0xfa72
                           00FA73   752 _DMA_LCM_AMT	=	0xfa73
                           00FA74   753 _DMA_LCM_DONE	=	0xfa74
                           00FA75   754 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   755 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   756 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   757 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   758 _MD3	=	0xfcf0
                           00FCF1   759 _MD2	=	0xfcf1
                           00FCF2   760 _MD1	=	0xfcf2
                           00FCF3   761 _MD0	=	0xfcf3
                           00FCF4   762 _MD5	=	0xfcf4
                           00FCF5   763 _MD4	=	0xfcf5
                           00FCF6   764 _ARCON	=	0xfcf6
                           00FCF7   765 _OPCON	=	0xfcf7
                           00FE08   766 _SPFUNC	=	0xfe08
                           00FE09   767 _RSTFLAG	=	0xfe09
                           00FEB0   768 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   769 _PWMA_ENO	=	0xfeb1
                           00FEB2   770 _PWMA_PS	=	0xfeb2
                           00FEB3   771 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   772 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   773 _PWMB_ENO	=	0xfeb5
                           00FEB6   774 _PWMB_PS	=	0xfeb6
                           00FEB7   775 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   776 _PWMA_CR1	=	0xfec0
                           00FEC1   777 _PWMA_CR2	=	0xfec1
                           00FEC2   778 _PWMA_SMCR	=	0xfec2
                           00FEC3   779 _PWMA_ETR	=	0xfec3
                           00FEC4   780 _PWMA_IER	=	0xfec4
                           00FEC5   781 _PWMA_SR1	=	0xfec5
                           00FEC6   782 _PWMA_SR2	=	0xfec6
                           00FEC7   783 _PWMA_EGR	=	0xfec7
                           00FEC8   784 _PWMA_CCMR1	=	0xfec8
                           00FEC9   785 _PWMA_CCMR2	=	0xfec9
                           00FECA   786 _PWMA_CCMR3	=	0xfeca
                           00FECB   787 _PWMA_CCMR4	=	0xfecb
                           00FECC   788 _PWMA_CCER1	=	0xfecc
                           00FECD   789 _PWMA_CCER2	=	0xfecd
                           00FECE   790 _PWMA_CNTRH	=	0xfece
                           00FECF   791 _PWMA_CNTRL	=	0xfecf
                           00FED0   792 _PWMA_PSCRH	=	0xfed0
                           00FED1   793 _PWMA_PSCRL	=	0xfed1
                           00FED2   794 _PWMA_ARRH	=	0xfed2
                           00FED3   795 _PWMA_ARRL	=	0xfed3
                           00FED4   796 _PWMA_RCR	=	0xfed4
                           00FED5   797 _PWMA_CCR1H	=	0xfed5
                           00FED6   798 _PWMA_CCR1L	=	0xfed6
                           00FED7   799 _PWMA_CCR2H	=	0xfed7
                           00FED8   800 _PWMA_CCR2L	=	0xfed8
                           00FED9   801 _PWMA_CCR3H	=	0xfed9
                           00FEDA   802 _PWMA_CCR3L	=	0xfeda
                           00FEDB   803 _PWMA_CCR4H	=	0xfedb
                           00FEDC   804 _PWMA_CCR4L	=	0xfedc
                           00FEDD   805 _PWMA_BKR	=	0xfedd
                           00FEDE   806 _PWMA_DTR	=	0xfede
                           00FEDF   807 _PWMA_OISR	=	0xfedf
                           00FEE0   808 _PWMB_CR1	=	0xfee0
                           00FEE1   809 _PWMB_CR2	=	0xfee1
                           00FEE2   810 _PWMB_SMCR	=	0xfee2
                           00FEE3   811 _PWMB_ETR	=	0xfee3
                           00FEE4   812 _PWMB_IER	=	0xfee4
                           00FEE5   813 _PWMB_SR1	=	0xfee5
                           00FEE6   814 _PWMB_SR2	=	0xfee6
                           00FEE7   815 _PWMB_EGR	=	0xfee7
                           00FEE8   816 _PWMB_CCMR1	=	0xfee8
                           00FEE9   817 _PWMB_CCMR2	=	0xfee9
                           00FEEA   818 _PWMB_CCMR3	=	0xfeea
                           00FEEB   819 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   820 _PWMB_CCER1	=	0xfeec
                           00FEED   821 _PWMB_CCER2	=	0xfeed
                           00FEEE   822 _PWMB_CNTRH	=	0xfeee
                           00FEEF   823 _PWMB_CNTRL	=	0xfeef
                           00FEF0   824 _PWMB_PSCRH	=	0xfef0
                           00FEF1   825 _PWMB_PSCRL	=	0xfef1
                           00FEF2   826 _PWMB_ARRH	=	0xfef2
                           00FEF3   827 _PWMB_ARRL	=	0xfef3
                           00FEF4   828 _PWMB_RCR	=	0xfef4
                           00FEF5   829 _PWMB_CCR1H	=	0xfef5
                           00FEF6   830 _PWMB_CCR1L	=	0xfef6
                           00FEF7   831 _PWMB_CCR2H	=	0xfef7
                           00FEF8   832 _PWMB_CCR2L	=	0xfef8
                           00FEF9   833 _PWMB_CCR3H	=	0xfef9
                           00FEFA   834 _PWMB_CCR3L	=	0xfefa
                           00FEFB   835 _PWMB_CCR4H	=	0xfefb
                           00FEFC   836 _PWMB_CCR4L	=	0xfefc
                           00FEFD   837 _PWMB_BKR	=	0xfefd
                           00FEFE   838 _PWMB_DTR	=	0xfefe
                           00FEFF   839 _PWMB_OISR	=	0xfeff
                           00FE60   840 _RTCCR	=	0xfe60
                           00FE61   841 _RTCCFG	=	0xfe61
                           00FE62   842 _RTCIEN	=	0xfe62
                           00FE63   843 _RTCIF	=	0xfe63
                           00FE64   844 _ALAHOUR	=	0xfe64
                           00FE65   845 _ALAMIN	=	0xfe65
                           00FE66   846 _ALASEC	=	0xfe66
                           00FE67   847 _ALASSEC	=	0xfe67
                           00FE68   848 _INIYEAR	=	0xfe68
                           00FE69   849 _INIMONTH	=	0xfe69
                           00FE6A   850 _INIDAY	=	0xfe6a
                           00FE6B   851 _INIHOUR	=	0xfe6b
                           00FE6C   852 _INIMIN	=	0xfe6c
                           00FE6D   853 _INISEC	=	0xfe6d
                           00FE6E   854 _INISSEC	=	0xfe6e
                           00FE70   855 _YEAR	=	0xfe70
                           00FE71   856 _MONTH	=	0xfe71
                           00FE72   857 _DAY	=	0xfe72
                           00FE73   858 _HOUR	=	0xfe73
                           00FE74   859 _MIN	=	0xfe74
                           00FE75   860 _SEC	=	0xfe75
                           00FE76   861 _SSEC	=	0xfe76
                           00FA20   862 _DMA_SPI_CFG	=	0xfa20
                           00FA21   863 _DMA_SPI_CR	=	0xfa21
                           00FA22   864 _DMA_SPI_STA	=	0xfa22
                           00FA23   865 _DMA_SPI_AMT	=	0xfa23
                           00FA24   866 _DMA_SPI_DONE	=	0xfa24
                           00FA25   867 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   868 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   869 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   870 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   871 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   872 _CLKDIV	=	0xfe01
                           00FE02   873 _HIRCCR	=	0xfe02
                           00FE03   874 _XOSCCR	=	0xfe03
                           00FE04   875 _IRC32KCR	=	0xfe04
                           00FE00   876 _CKSEL	=	0xfe00
                           00FE05   877 _MCLKOCR	=	0xfe05
                           00FE06   878 _IRCDB	=	0xfe06
                           00FE07   879 _IRC48MCR	=	0xfe07
                           00FEA2   880 _TM2PS	=	0xfea2
                           00FEA3   881 _TM3PS	=	0xfea3
                           00FEA4   882 _TM4PS	=	0xfea4
                           00FA30   883 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   884 _DMA_UR1T_CR	=	0xfa31
                           00FA32   885 _DMA_UR1T_STA	=	0xfa32
                           00FA33   886 _DMA_URTX_AMT	=	0xfa33
                           00FA34   887 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   888 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   889 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   890 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   891 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   892 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   893 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   894 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   895 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   896 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   897 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   898 _DMA_UR2T_CR	=	0xfa31
                           00FA32   899 _DMA_UR2T_STA	=	0xfa32
                           00FA33   900 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   901 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   902 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   903 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   904 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   905 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   906 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   907 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   908 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   909 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   910 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   911 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   912 _DMA_UR3T_CR	=	0xfa31
                           00FA32   913 _DMA_UR3T_STA	=	0xfa32
                           00FA33   914 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   915 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   916 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   917 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   918 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   919 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   920 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   921 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   922 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   923 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   924 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   925 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   926 _DMA_UR4T_CR	=	0xfa31
                           00FA32   927 _DMA_UR4T_STA	=	0xfa32
                           00FA33   928 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   929 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   930 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   931 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   932 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   933 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   934 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   935 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   936 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   937 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   938 _DMA_UR4R_TXAL	=	0xfa3e
      0000AC                        939 _uartGetCharacter_result_65536_74:
      0000AC                        940 	.ds 1
      0000AD                        941 _SPI_command:
      0000AD                        942 	.ds 1
      0000AE                        943 _register_current_value:
      0000AE                        944 	.ds 1
      0000AF                        945 _register_new_value:
      0000AF                        946 	.ds 1
      0000B0                        947 _write_pointer:
      0000B0                        948 	.ds 1
      0000B1                        949 _current_address_width:
      0000B1                        950 	.ds 1
      0000B2                        951 _current_payload_width:
      0000B2                        952 	.ds 1
      0000B3                        953 _delay_function_duration_ms_65536_113:
      0000B3                        954 	.ds 4
      0000B7                        955 _nrf24_SPI_input_65536_119:
      0000B7                        956 	.ds 1
      0000B8                        957 _SPI_send_command_command_65536_121:
      0000B8                        958 	.ds 1
      0000B9                        959 _SPI_send_command_spi_byte_65536_122:
      0000B9                        960 	.ds 1
      0000BA                        961 _nrf24_CE_input_65536_123:
      0000BA                        962 	.ds 1
      0000BB                        963 _nrf24_dynamic_ack_state_65536_125:
      0000BB                        964 	.ds 1
      0000BC                        965 _nrf24_transmit_PARM_2:
      0000BC                        966 	.ds 1
      0000BD                        967 _nrf24_transmit_PARM_3:
      0000BD                        968 	.ds 1
      0000BE                        969 _nrf24_transmit_payload_65536_129:
      0000BE                        970 	.ds 3
      0000C1                        971 _nrf24_send_payload_PARM_2:
      0000C1                        972 	.ds 1
      0000C2                        973 _nrf24_send_payload_payload_65536_133:
      0000C2                        974 	.ds 3
      0000C5                        975 _nrf24_receive_PARM_2:
      0000C5                        976 	.ds 1
      0000C6                        977 _nrf24_receive_payload_65536_141:
      0000C6                        978 	.ds 3
      0000C9                        979 _nrf24_flush_fifo_select_65536_149:
      0000C9                        980 	.ds 1
      0000CA                        981 _nrf24_device_PARM_2:
      0000CA                        982 	.ds 1
      0000CB                        983 _nrf24_device_device_mode_65536_156:
      0000CB                        984 	.ds 1
      0000CC                        985 _nrf24_device_hardwareCheckPassed_65537_158:
      0000CC                        986 	.ds 1
      0000CD                        987 _nrf24_device_new_value_65537_158:
      0000CD                        988 	.ds 1
      0000CE                        989 _nrf24_automatic_retransmit_setup_PARM_2:
      0000CE                        990 	.ds 1
      0000CF                        991 _nrf24_automatic_retransmit_setup_delay_time_65536_166:
      0000CF                        992 	.ds 2
      0000D1                        993 _nrf24_auto_acknowledgment_setup_datapipe_65536_169:
      0000D1                        994 	.ds 1
      0000D2                        995 _nrf24_dynamic_payload_PARM_2:
      0000D2                        996 	.ds 1
      0000D3                        997 _nrf24_dynamic_payload_state_65536_171:
      0000D3                        998 	.ds 1
      0000D4                        999 _nrf24_datapipe_ptx_datapipe_number_65536_175:
      0000D4                       1000 	.ds 1
      0000D5                       1001 _nrf24_prx_static_payload_width_PARM_2:
      0000D5                       1002 	.ds 1
      0000D6                       1003 _nrf24_prx_static_payload_width_static_payload_width_65536_181:
      0000D6                       1004 	.ds 1
      0000D7                       1005 _nrf24_datapipe_enable_number_of_datapipes_65536_185:
      0000D7                       1006 	.ds 1
      0000D8                       1007 _nrf24_address_width_address_width_65536_187:
      0000D8                       1008 	.ds 1
      0000D9                       1009 _nrf24_rf_datarate_rf_datarate_65536_191:
      0000D9                       1010 	.ds 2
      0000DB                       1011 _nrf24_rf_power_rf_power_65536_194:
      0000DB                       1012 	.ds 1
      0000DC                       1013 _nrf24_rf_channel_rf_channel_65536_197:
      0000DC                       1014 	.ds 1
      0000DD                       1015 _nrf24_rf_channel_write_pointer_131072_199:
      0000DD                       1016 	.ds 1
      0000DE                       1017 _nrf24_rf_channel_write_pointer_131072_200:
      0000DE                       1018 	.ds 1
      0000DF                       1019 _nrf24_interrupt_mask_PARM_2:
      0000DF                       1020 	.ds 1
      0000E0                       1021 _nrf24_interrupt_mask_PARM_3:
      0000E0                       1022 	.ds 1
      0000E1                       1023 _nrf24_interrupt_mask_rx_mask_65536_201:
      0000E1                       1024 	.ds 1
      0000E2                       1025 _nrf24_crc_configuration_PARM_2:
      0000E2                       1026 	.ds 1
      0000E3                       1027 _nrf24_crc_configuration_crc_enable_65536_203:
      0000E3                       1028 	.ds 1
      0000E4                       1029 _nrf24_mode_mode_65536_205:
      0000E4                       1030 	.ds 1
      0000E5                       1031 _nrf24_read_PARM_2:
      0000E5                       1032 	.ds 3
      0000E8                       1033 _nrf24_read_PARM_3:
      0000E8                       1034 	.ds 1
      0000E9                       1035 _nrf24_read_PARM_4:
      0000E9                       1036 	.ds 1
      0000EA                       1037 _nrf24_read_address_65536_208:
      0000EA                       1038 	.ds 1
      0000EB                       1039 _nrf24_write_PARM_2:
      0000EB                       1040 	.ds 3
      0000EE                       1041 _nrf24_write_PARM_3:
      0000EE                       1042 	.ds 1
      0000EF                       1043 _nrf24_write_PARM_4:
      0000EF                       1044 	.ds 1
      0000F0                       1045 _nrf24_write_address_65536_212:
      0000F0                       1046 	.ds 1
                                   1047 ;--------------------------------------------------------
                                   1048 ; absolute external ram data
                                   1049 ;--------------------------------------------------------
                                   1050 	.area XABS    (ABS,XDATA)
                                   1051 ;--------------------------------------------------------
                                   1052 ; external initialized ram data
                                   1053 ;--------------------------------------------------------
                                   1054 	.area XISEG   (XDATA)
      000151                       1055 _dataReady::
      000151                       1056 	.ds 1
      000152                       1057 _CSN_pin::
      000152                       1058 	.ds 13
      00015F                       1059 _CE_pin::
      00015F                       1060 	.ds 13
      00016C                       1061 _reset_flag:
      00016C                       1062 	.ds 1
      00016D                       1063 _current_mode:
      00016D                       1064 	.ds 1
      00016E                       1065 _current_acknowledgement_state:
      00016E                       1066 	.ds 1
      00016F                       1067 _dynamic_payload:
      00016F                       1068 	.ds 1
      000170                       1069 _datapipe_address::
      000170                       1070 	.ds 30
                                   1071 	.area HOME    (CODE)
                                   1072 	.area GSINIT0 (CODE)
                                   1073 	.area GSINIT1 (CODE)
                                   1074 	.area GSINIT2 (CODE)
                                   1075 	.area GSINIT3 (CODE)
                                   1076 	.area GSINIT4 (CODE)
                                   1077 	.area GSINIT5 (CODE)
                                   1078 	.area GSINIT  (CODE)
                                   1079 	.area GSFINAL (CODE)
                                   1080 	.area CSEG    (CODE)
                                   1081 ;--------------------------------------------------------
                                   1082 ; global & static initialisations
                                   1083 ;--------------------------------------------------------
                                   1084 	.area HOME    (CODE)
                                   1085 	.area GSINIT  (CODE)
                                   1086 	.area GSFINAL (CODE)
                                   1087 	.area GSINIT  (CODE)
                                   1088 ;--------------------------------------------------------
                                   1089 ; Home
                                   1090 ;--------------------------------------------------------
                                   1091 	.area HOME    (CODE)
                                   1092 	.area HOME    (CODE)
                                   1093 ;--------------------------------------------------------
                                   1094 ; code
                                   1095 ;--------------------------------------------------------
                                   1096 	.area CSEG    (CODE)
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'delay_function'
                                   1099 ;------------------------------------------------------------
                                   1100 ;duration_ms               Allocated with name '_delay_function_duration_ms_65536_113'
                                   1101 ;------------------------------------------------------------
                                   1102 ;	nrf24l01.c:66: void delay_function(uint32_t duration_ms)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function delay_function
                                   1105 ;	-----------------------------------------
      001D10                       1106 _delay_function:
                           000007  1107 	ar7 = 0x07
                           000006  1108 	ar6 = 0x06
                           000005  1109 	ar5 = 0x05
                           000004  1110 	ar4 = 0x04
                           000003  1111 	ar3 = 0x03
                           000002  1112 	ar2 = 0x02
                           000001  1113 	ar1 = 0x01
                           000000  1114 	ar0 = 0x00
      001D10 AF 82            [24] 1115 	mov	r7,dpl
      001D12 AE 83            [24] 1116 	mov	r6,dph
      001D14 AD F0            [24] 1117 	mov	r5,b
      001D16 FC               [12] 1118 	mov	r4,a
      001D17 90 00 B3         [24] 1119 	mov	dptr,#_delay_function_duration_ms_65536_113
      001D1A EF               [12] 1120 	mov	a,r7
      001D1B F0               [24] 1121 	movx	@dptr,a
      001D1C EE               [12] 1122 	mov	a,r6
      001D1D A3               [24] 1123 	inc	dptr
      001D1E F0               [24] 1124 	movx	@dptr,a
      001D1F ED               [12] 1125 	mov	a,r5
      001D20 A3               [24] 1126 	inc	dptr
      001D21 F0               [24] 1127 	movx	@dptr,a
      001D22 EC               [12] 1128 	mov	a,r4
      001D23 A3               [24] 1129 	inc	dptr
      001D24 F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	nrf24l01.c:68: delay1ms(duration_ms);
      001D25 90 00 B3         [24] 1132 	mov	dptr,#_delay_function_duration_ms_65536_113
      001D28 E0               [24] 1133 	movx	a,@dptr
      001D29 FC               [12] 1134 	mov	r4,a
      001D2A A3               [24] 1135 	inc	dptr
      001D2B E0               [24] 1136 	movx	a,@dptr
      001D2C FD               [12] 1137 	mov	r5,a
      001D2D A3               [24] 1138 	inc	dptr
      001D2E E0               [24] 1139 	movx	a,@dptr
      001D2F A3               [24] 1140 	inc	dptr
      001D30 E0               [24] 1141 	movx	a,@dptr
      001D31 8C 82            [24] 1142 	mov	dpl,r4
      001D33 8D 83            [24] 1143 	mov	dph,r5
                                   1144 ;	nrf24l01.c:69: }
      001D35 02 01 D6         [24] 1145 	ljmp	_delay1ms
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'SPI_Initializer'
                                   1148 ;------------------------------------------------------------
                                   1149 ;	nrf24l01.c:73: void SPI_Initializer(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function SPI_Initializer
                                   1152 ;	-----------------------------------------
      001D38                       1153 _SPI_Initializer:
                                   1154 ;	nrf24l01.c:79: spiSelectSpeed(SPI_SPEED), 
      001D38 90 09 00         [24] 1155 	mov	dptr,#0x0900
      001D3B 75 F0 3D         [24] 1156 	mov	b,#0x3d
      001D3E E4               [12] 1157 	clr	a
      001D3F 12 1A 07         [24] 1158 	lcall	_spiSelectSpeed
      001D42 AF 82            [24] 1159 	mov	r7,dpl
                                   1160 ;	nrf24l01.c:81: GPIO_BIDIRECTIONAL_MODE
      001D44 90 00 97         [24] 1161 	mov	dptr,#_spiConfigure_PARM_2
      001D47 E4               [12] 1162 	clr	a
      001D48 F0               [24] 1163 	movx	@dptr,a
      001D49 90 00 98         [24] 1164 	mov	dptr,#_spiConfigure_PARM_3
      001D4C EF               [12] 1165 	mov	a,r7
      001D4D F0               [24] 1166 	movx	@dptr,a
      001D4E 90 00 99         [24] 1167 	mov	dptr,#_spiConfigure_PARM_4
      001D51 E4               [12] 1168 	clr	a
      001D52 F0               [24] 1169 	movx	@dptr,a
      001D53 90 00 9A         [24] 1170 	mov	dptr,#_spiConfigure_PARM_5
      001D56 F0               [24] 1171 	movx	@dptr,a
      001D57 75 82 20         [24] 1172 	mov	dpl,#0x20
                                   1173 ;	nrf24l01.c:84: }
      001D5A 02 1B 34         [24] 1174 	ljmp	_spiConfigure
                                   1175 ;------------------------------------------------------------
                                   1176 ;Allocation info for local variables in function 'pinout_Initializer'
                                   1177 ;------------------------------------------------------------
                                   1178 ;	nrf24l01.c:87: void pinout_Initializer(void)
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function pinout_Initializer
                                   1181 ;	-----------------------------------------
      001D5D                       1182 _pinout_Initializer:
                                   1183 ;	nrf24l01.c:90: gpioConfigure(&CSN_pin);
      001D5D 90 01 52         [24] 1184 	mov	dptr,#_CSN_pin
      001D60 75 F0 00         [24] 1185 	mov	b,#0x00
      001D63 12 10 0E         [24] 1186 	lcall	_gpioConfigure
                                   1187 ;	nrf24l01.c:91: gpioConfigure(&CE_pin);
      001D66 90 01 5F         [24] 1188 	mov	dptr,#_CE_pin
      001D69 75 F0 00         [24] 1189 	mov	b,#0x00
      001D6C 12 10 0E         [24] 1190 	lcall	_gpioConfigure
                                   1191 ;	nrf24l01.c:93: gpioWrite(&CSN_pin, 0);
      001D6F 90 00 79         [24] 1192 	mov	dptr,#_gpioWrite_PARM_2
      001D72 E4               [12] 1193 	clr	a
      001D73 F0               [24] 1194 	movx	@dptr,a
      001D74 90 01 52         [24] 1195 	mov	dptr,#_CSN_pin
      001D77 75 F0 00         [24] 1196 	mov	b,#0x00
      001D7A 12 18 0E         [24] 1197 	lcall	_gpioWrite
                                   1198 ;	nrf24l01.c:94: gpioWrite(&CE_pin, 1);
      001D7D 90 00 79         [24] 1199 	mov	dptr,#_gpioWrite_PARM_2
      001D80 74 01            [12] 1200 	mov	a,#0x01
      001D82 F0               [24] 1201 	movx	@dptr,a
      001D83 90 01 5F         [24] 1202 	mov	dptr,#_CE_pin
      001D86 75 F0 00         [24] 1203 	mov	b,#0x00
                                   1204 ;	nrf24l01.c:96: }
      001D89 02 18 0E         [24] 1205 	ljmp	_gpioWrite
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'nrf24_SPI'
                                   1208 ;------------------------------------------------------------
                                   1209 ;input                     Allocated with name '_nrf24_SPI_input_65536_119'
                                   1210 ;------------------------------------------------------------
                                   1211 ;	nrf24l01.c:99: void nrf24_SPI(uint8_t input)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function nrf24_SPI
                                   1214 ;	-----------------------------------------
      001D8C                       1215 _nrf24_SPI:
      001D8C E5 82            [12] 1216 	mov	a,dpl
      001D8E 90 00 B7         [24] 1217 	mov	dptr,#_nrf24_SPI_input_65536_119
      001D91 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	nrf24l01.c:101: gpioWrite(&CSN_pin, input);
      001D92 E0               [24] 1220 	movx	a,@dptr
      001D93 90 00 79         [24] 1221 	mov	dptr,#_gpioWrite_PARM_2
      001D96 F0               [24] 1222 	movx	@dptr,a
      001D97 90 01 52         [24] 1223 	mov	dptr,#_CSN_pin
      001D9A 75 F0 00         [24] 1224 	mov	b,#0x00
                                   1225 ;	nrf24l01.c:102: }
      001D9D 02 18 0E         [24] 1226 	ljmp	_gpioWrite
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'SPI_send_command'
                                   1229 ;------------------------------------------------------------
                                   1230 ;command                   Allocated with name '_SPI_send_command_command_65536_121'
                                   1231 ;spi_byte                  Allocated with name '_SPI_send_command_spi_byte_65536_122'
                                   1232 ;------------------------------------------------------------
                                   1233 ;	nrf24l01.c:105: uint8_t SPI_send_command(uint8_t command)
                                   1234 ;	-----------------------------------------
                                   1235 ;	 function SPI_send_command
                                   1236 ;	-----------------------------------------
      001DA0                       1237 _SPI_send_command:
      001DA0 E5 82            [12] 1238 	mov	a,dpl
      001DA2 90 00 B8         [24] 1239 	mov	dptr,#_SPI_send_command_command_65536_121
      001DA5 F0               [24] 1240 	movx	@dptr,a
                                   1241 ;	nrf24l01.c:107: uint8_t spi_byte = bitReverseTable256[command];
      001DA6 E0               [24] 1242 	movx	a,@dptr
      001DA7 90 3C 47         [24] 1243 	mov	dptr,#_bitReverseTable256
      001DAA 93               [24] 1244 	movc	a,@a+dptr
      001DAB 90 00 B9         [24] 1245 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      001DAE F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	nrf24l01.c:109: spiSend(&spi_byte, 1, &dataReady);
      001DAF 90 00 9C         [24] 1248 	mov	dptr,#_spiSend_PARM_2
      001DB2 74 01            [12] 1249 	mov	a,#0x01
      001DB4 F0               [24] 1250 	movx	@dptr,a
      001DB5 E4               [12] 1251 	clr	a
      001DB6 A3               [24] 1252 	inc	dptr
      001DB7 F0               [24] 1253 	movx	@dptr,a
      001DB8 90 00 9E         [24] 1254 	mov	dptr,#_spiSend_PARM_3
      001DBB 74 51            [12] 1255 	mov	a,#_dataReady
      001DBD F0               [24] 1256 	movx	@dptr,a
      001DBE 74 01            [12] 1257 	mov	a,#(_dataReady >> 8)
      001DC0 A3               [24] 1258 	inc	dptr
      001DC1 F0               [24] 1259 	movx	@dptr,a
      001DC2 E4               [12] 1260 	clr	a
      001DC3 A3               [24] 1261 	inc	dptr
      001DC4 F0               [24] 1262 	movx	@dptr,a
      001DC5 90 00 B9         [24] 1263 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      001DC8 75 F0 00         [24] 1264 	mov	b,#0x00
      001DCB 12 1B 64         [24] 1265 	lcall	_spiSend
                                   1266 ;	nrf24l01.c:112: while(!dataReady);
      001DCE                       1267 00101$:
      001DCE 90 01 51         [24] 1268 	mov	dptr,#_dataReady
      001DD1 E0               [24] 1269 	movx	a,@dptr
      001DD2 60 FA            [24] 1270 	jz	00101$
                                   1271 ;	nrf24l01.c:114: return bitReverseTable256[spi_byte];
      001DD4 90 00 B9         [24] 1272 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      001DD7 E0               [24] 1273 	movx	a,@dptr
      001DD8 90 3C 47         [24] 1274 	mov	dptr,#_bitReverseTable256
      001DDB 93               [24] 1275 	movc	a,@a+dptr
                                   1276 ;	nrf24l01.c:116: }
      001DDC F5 82            [12] 1277 	mov	dpl,a
      001DDE 22               [24] 1278 	ret
                                   1279 ;------------------------------------------------------------
                                   1280 ;Allocation info for local variables in function 'nrf24_CE'
                                   1281 ;------------------------------------------------------------
                                   1282 ;input                     Allocated with name '_nrf24_CE_input_65536_123'
                                   1283 ;------------------------------------------------------------
                                   1284 ;	nrf24l01.c:119: void nrf24_CE(uint8_t input)
                                   1285 ;	-----------------------------------------
                                   1286 ;	 function nrf24_CE
                                   1287 ;	-----------------------------------------
      001DDF                       1288 _nrf24_CE:
      001DDF E5 82            [12] 1289 	mov	a,dpl
      001DE1 90 00 BA         [24] 1290 	mov	dptr,#_nrf24_CE_input_65536_123
      001DE4 F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	nrf24l01.c:121: gpioWrite(&CE_pin, input);
      001DE5 E0               [24] 1293 	movx	a,@dptr
      001DE6 90 00 79         [24] 1294 	mov	dptr,#_gpioWrite_PARM_2
      001DE9 F0               [24] 1295 	movx	@dptr,a
      001DEA 90 01 5F         [24] 1296 	mov	dptr,#_CE_pin
      001DED 75 F0 00         [24] 1297 	mov	b,#0x00
                                   1298 ;	nrf24l01.c:122: }
      001DF0 02 18 0E         [24] 1299 	ljmp	_gpioWrite
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'nrf24_dynamic_ack'
                                   1302 ;------------------------------------------------------------
                                   1303 ;state                     Allocated with name '_nrf24_dynamic_ack_state_65536_125'
                                   1304 ;------------------------------------------------------------
                                   1305 ;	nrf24l01.c:128: void nrf24_dynamic_ack(uint8_t state)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function nrf24_dynamic_ack
                                   1308 ;	-----------------------------------------
      001DF3                       1309 _nrf24_dynamic_ack:
      001DF3 E5 82            [12] 1310 	mov	a,dpl
      001DF5 90 00 BB         [24] 1311 	mov	dptr,#_nrf24_dynamic_ack_state_65536_125
      001DF8 F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	nrf24l01.c:130: if (state == ENABLE)
      001DF9 E0               [24] 1314 	movx	a,@dptr
      001DFA FF               [12] 1315 	mov	r7,a
      001DFB BF 01 44         [24] 1316 	cjne	r7,#0x01,00102$
                                   1317 ;	nrf24l01.c:132: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      001DFE 90 00 E5         [24] 1318 	mov	dptr,#_nrf24_read_PARM_2
      001E01 74 AE            [12] 1319 	mov	a,#_register_current_value
      001E03 F0               [24] 1320 	movx	@dptr,a
      001E04 74 00            [12] 1321 	mov	a,#(_register_current_value >> 8)
      001E06 A3               [24] 1322 	inc	dptr
      001E07 F0               [24] 1323 	movx	@dptr,a
      001E08 E4               [12] 1324 	clr	a
      001E09 A3               [24] 1325 	inc	dptr
      001E0A F0               [24] 1326 	movx	@dptr,a
      001E0B 90 00 E8         [24] 1327 	mov	dptr,#_nrf24_read_PARM_3
      001E0E 04               [12] 1328 	inc	a
      001E0F F0               [24] 1329 	movx	@dptr,a
      001E10 90 00 E9         [24] 1330 	mov	dptr,#_nrf24_read_PARM_4
      001E13 E4               [12] 1331 	clr	a
      001E14 F0               [24] 1332 	movx	@dptr,a
      001E15 75 82 1D         [24] 1333 	mov	dpl,#0x1d
      001E18 12 2C AA         [24] 1334 	lcall	_nrf24_read
                                   1335 ;	nrf24l01.c:133: register_new_value = register_current_value | (1 << EN_DYN_ACK);
      001E1B 90 00 AE         [24] 1336 	mov	dptr,#_register_current_value
      001E1E E0               [24] 1337 	movx	a,@dptr
      001E1F 90 00 AF         [24] 1338 	mov	dptr,#_register_new_value
      001E22 44 01            [12] 1339 	orl	a,#0x01
      001E24 F0               [24] 1340 	movx	@dptr,a
                                   1341 ;	nrf24l01.c:134: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      001E25 90 00 EB         [24] 1342 	mov	dptr,#_nrf24_write_PARM_2
      001E28 74 AF            [12] 1343 	mov	a,#_register_new_value
      001E2A F0               [24] 1344 	movx	@dptr,a
      001E2B 74 00            [12] 1345 	mov	a,#(_register_new_value >> 8)
      001E2D A3               [24] 1346 	inc	dptr
      001E2E F0               [24] 1347 	movx	@dptr,a
      001E2F E4               [12] 1348 	clr	a
      001E30 A3               [24] 1349 	inc	dptr
      001E31 F0               [24] 1350 	movx	@dptr,a
      001E32 90 00 EE         [24] 1351 	mov	dptr,#_nrf24_write_PARM_3
      001E35 04               [12] 1352 	inc	a
      001E36 F0               [24] 1353 	movx	@dptr,a
      001E37 90 00 EF         [24] 1354 	mov	dptr,#_nrf24_write_PARM_4
      001E3A E4               [12] 1355 	clr	a
      001E3B F0               [24] 1356 	movx	@dptr,a
      001E3C 75 82 1D         [24] 1357 	mov	dpl,#0x1d
      001E3F 02 2D 16         [24] 1358 	ljmp	_nrf24_write
      001E42                       1359 00102$:
                                   1360 ;	nrf24l01.c:138: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      001E42 90 00 E5         [24] 1361 	mov	dptr,#_nrf24_read_PARM_2
      001E45 74 AE            [12] 1362 	mov	a,#_register_current_value
      001E47 F0               [24] 1363 	movx	@dptr,a
      001E48 74 00            [12] 1364 	mov	a,#(_register_current_value >> 8)
      001E4A A3               [24] 1365 	inc	dptr
      001E4B F0               [24] 1366 	movx	@dptr,a
      001E4C E4               [12] 1367 	clr	a
      001E4D A3               [24] 1368 	inc	dptr
      001E4E F0               [24] 1369 	movx	@dptr,a
      001E4F 90 00 E8         [24] 1370 	mov	dptr,#_nrf24_read_PARM_3
      001E52 04               [12] 1371 	inc	a
      001E53 F0               [24] 1372 	movx	@dptr,a
      001E54 90 00 E9         [24] 1373 	mov	dptr,#_nrf24_read_PARM_4
      001E57 E4               [12] 1374 	clr	a
      001E58 F0               [24] 1375 	movx	@dptr,a
      001E59 75 82 1D         [24] 1376 	mov	dpl,#0x1d
      001E5C 12 2C AA         [24] 1377 	lcall	_nrf24_read
                                   1378 ;	nrf24l01.c:139: register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
      001E5F 90 00 AE         [24] 1379 	mov	dptr,#_register_current_value
      001E62 E0               [24] 1380 	movx	a,@dptr
      001E63 90 00 AF         [24] 1381 	mov	dptr,#_register_new_value
      001E66 54 FE            [12] 1382 	anl	a,#0xfe
      001E68 F0               [24] 1383 	movx	@dptr,a
                                   1384 ;	nrf24l01.c:140: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      001E69 90 00 EB         [24] 1385 	mov	dptr,#_nrf24_write_PARM_2
      001E6C 74 AF            [12] 1386 	mov	a,#_register_new_value
      001E6E F0               [24] 1387 	movx	@dptr,a
      001E6F 74 00            [12] 1388 	mov	a,#(_register_new_value >> 8)
      001E71 A3               [24] 1389 	inc	dptr
      001E72 F0               [24] 1390 	movx	@dptr,a
      001E73 E4               [12] 1391 	clr	a
      001E74 A3               [24] 1392 	inc	dptr
      001E75 F0               [24] 1393 	movx	@dptr,a
      001E76 90 00 EE         [24] 1394 	mov	dptr,#_nrf24_write_PARM_3
      001E79 04               [12] 1395 	inc	a
      001E7A F0               [24] 1396 	movx	@dptr,a
      001E7B 90 00 EF         [24] 1397 	mov	dptr,#_nrf24_write_PARM_4
      001E7E E4               [12] 1398 	clr	a
      001E7F F0               [24] 1399 	movx	@dptr,a
      001E80 75 82 1D         [24] 1400 	mov	dpl,#0x1d
                                   1401 ;	nrf24l01.c:142: }
      001E83 02 2D 16         [24] 1402 	ljmp	_nrf24_write
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'nrf24_transmit'
                                   1405 ;------------------------------------------------------------
                                   1406 ;payload_width             Allocated with name '_nrf24_transmit_PARM_2'
                                   1407 ;acknowledgement_state     Allocated with name '_nrf24_transmit_PARM_3'
                                   1408 ;payload                   Allocated with name '_nrf24_transmit_payload_65536_129'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	nrf24l01.c:146: uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function nrf24_transmit
                                   1413 ;	-----------------------------------------
      001E86                       1414 _nrf24_transmit:
      001E86 AF F0            [24] 1415 	mov	r7,b
      001E88 AE 83            [24] 1416 	mov	r6,dph
      001E8A E5 82            [12] 1417 	mov	a,dpl
      001E8C 90 00 BE         [24] 1418 	mov	dptr,#_nrf24_transmit_payload_65536_129
      001E8F F0               [24] 1419 	movx	@dptr,a
      001E90 EE               [12] 1420 	mov	a,r6
      001E91 A3               [24] 1421 	inc	dptr
      001E92 F0               [24] 1422 	movx	@dptr,a
      001E93 EF               [12] 1423 	mov	a,r7
      001E94 A3               [24] 1424 	inc	dptr
      001E95 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	nrf24l01.c:148: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
      001E96 90 00 E5         [24] 1427 	mov	dptr,#_nrf24_read_PARM_2
      001E99 74 AE            [12] 1428 	mov	a,#_register_current_value
      001E9B F0               [24] 1429 	movx	@dptr,a
      001E9C 74 00            [12] 1430 	mov	a,#(_register_current_value >> 8)
      001E9E A3               [24] 1431 	inc	dptr
      001E9F F0               [24] 1432 	movx	@dptr,a
      001EA0 E4               [12] 1433 	clr	a
      001EA1 A3               [24] 1434 	inc	dptr
      001EA2 F0               [24] 1435 	movx	@dptr,a
      001EA3 90 00 E8         [24] 1436 	mov	dptr,#_nrf24_read_PARM_3
      001EA6 04               [12] 1437 	inc	a
      001EA7 F0               [24] 1438 	movx	@dptr,a
      001EA8 90 00 E9         [24] 1439 	mov	dptr,#_nrf24_read_PARM_4
      001EAB E4               [12] 1440 	clr	a
      001EAC F0               [24] 1441 	movx	@dptr,a
      001EAD 75 82 07         [24] 1442 	mov	dpl,#0x07
      001EB0 12 2C AA         [24] 1443 	lcall	_nrf24_read
                                   1444 ;	nrf24l01.c:149: if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
      001EB3 90 00 AE         [24] 1445 	mov	dptr,#_register_current_value
      001EB6 E0               [24] 1446 	movx	a,@dptr
      001EB7 20 E5 40         [24] 1447 	jb	acc.5,00104$
      001EBA 90 01 6D         [24] 1448 	mov	dptr,#_current_mode
      001EBD E0               [24] 1449 	movx	a,@dptr
      001EBE FF               [12] 1450 	mov	r7,a
      001EBF BF 03 38         [24] 1451 	cjne	r7,#0x03,00104$
                                   1452 ;	nrf24l01.c:151: current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
      001EC2 90 00 BD         [24] 1453 	mov	dptr,#_nrf24_transmit_PARM_3
      001EC5 E0               [24] 1454 	movx	a,@dptr
      001EC6 90 01 6E         [24] 1455 	mov	dptr,#_current_acknowledgement_state
      001EC9 F0               [24] 1456 	movx	@dptr,a
                                   1457 ;	nrf24l01.c:152: if (dynamic_payload == ENABLE)
      001ECA 90 01 6F         [24] 1458 	mov	dptr,#_dynamic_payload
      001ECD E0               [24] 1459 	movx	a,@dptr
      001ECE FF               [12] 1460 	mov	r7,a
      001ECF BF 01 08         [24] 1461 	cjne	r7,#0x01,00102$
                                   1462 ;	nrf24l01.c:153: payload_width = current_payload_width;
      001ED2 90 00 B2         [24] 1463 	mov	dptr,#_current_payload_width
      001ED5 E0               [24] 1464 	movx	a,@dptr
      001ED6 90 00 BC         [24] 1465 	mov	dptr,#_nrf24_transmit_PARM_2
      001ED9 F0               [24] 1466 	movx	@dptr,a
      001EDA                       1467 00102$:
                                   1468 ;	nrf24l01.c:154: nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
      001EDA 90 00 BE         [24] 1469 	mov	dptr,#_nrf24_transmit_payload_65536_129
      001EDD E0               [24] 1470 	movx	a,@dptr
      001EDE FD               [12] 1471 	mov	r5,a
      001EDF A3               [24] 1472 	inc	dptr
      001EE0 E0               [24] 1473 	movx	a,@dptr
      001EE1 FE               [12] 1474 	mov	r6,a
      001EE2 A3               [24] 1475 	inc	dptr
      001EE3 E0               [24] 1476 	movx	a,@dptr
      001EE4 FF               [12] 1477 	mov	r7,a
      001EE5 90 00 BC         [24] 1478 	mov	dptr,#_nrf24_transmit_PARM_2
      001EE8 E0               [24] 1479 	movx	a,@dptr
      001EE9 90 00 C1         [24] 1480 	mov	dptr,#_nrf24_send_payload_PARM_2
      001EEC F0               [24] 1481 	movx	@dptr,a
      001EED 8D 82            [24] 1482 	mov	dpl,r5
      001EEF 8E 83            [24] 1483 	mov	dph,r6
      001EF1 8F F0            [24] 1484 	mov	b,r7
      001EF3 12 1E FE         [24] 1485 	lcall	_nrf24_send_payload
                                   1486 ;	nrf24l01.c:155: return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
      001EF6 75 82 01         [24] 1487 	mov	dpl,#0x01
      001EF9 22               [24] 1488 	ret
      001EFA                       1489 00104$:
                                   1490 ;	nrf24l01.c:159: return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
      001EFA 75 82 00         [24] 1491 	mov	dpl,#0x00
                                   1492 ;	nrf24l01.c:161: }
      001EFD 22               [24] 1493 	ret
                                   1494 ;------------------------------------------------------------
                                   1495 ;Allocation info for local variables in function 'nrf24_send_payload'
                                   1496 ;------------------------------------------------------------
                                   1497 ;payload_width             Allocated with name '_nrf24_send_payload_PARM_2'
                                   1498 ;payload                   Allocated with name '_nrf24_send_payload_payload_65536_133'
                                   1499 ;------------------------------------------------------------
                                   1500 ;	nrf24l01.c:164: void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
                                   1501 ;	-----------------------------------------
                                   1502 ;	 function nrf24_send_payload
                                   1503 ;	-----------------------------------------
      001EFE                       1504 _nrf24_send_payload:
      001EFE AF F0            [24] 1505 	mov	r7,b
      001F00 AE 83            [24] 1506 	mov	r6,dph
      001F02 E5 82            [12] 1507 	mov	a,dpl
      001F04 90 00 C2         [24] 1508 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      001F07 F0               [24] 1509 	movx	@dptr,a
      001F08 EE               [12] 1510 	mov	a,r6
      001F09 A3               [24] 1511 	inc	dptr
      001F0A F0               [24] 1512 	movx	@dptr,a
      001F0B EF               [12] 1513 	mov	a,r7
      001F0C A3               [24] 1514 	inc	dptr
      001F0D F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	nrf24l01.c:166: nrf24_SPI(SPI_ON);
      001F0E 75 82 00         [24] 1517 	mov	dpl,#0x00
      001F11 12 1D 8C         [24] 1518 	lcall	_nrf24_SPI
                                   1519 ;	nrf24l01.c:167: if (current_acknowledgement_state == NO_ACK_MODE)
      001F14 90 01 6E         [24] 1520 	mov	dptr,#_current_acknowledgement_state
      001F17 E0               [24] 1521 	movx	a,@dptr
      001F18 FF               [12] 1522 	mov	r7,a
      001F19 BF 01 08         [24] 1523 	cjne	r7,#0x01,00102$
                                   1524 ;	nrf24l01.c:168: SPI_command = W_TX_PAYLOAD_NOACK;
      001F1C 90 00 AD         [24] 1525 	mov	dptr,#_SPI_command
      001F1F 74 B0            [12] 1526 	mov	a,#0xb0
      001F21 F0               [24] 1527 	movx	@dptr,a
      001F22 80 06            [24] 1528 	sjmp	00103$
      001F24                       1529 00102$:
                                   1530 ;	nrf24l01.c:170: SPI_command = W_TX_PAYLOAD;
      001F24 90 00 AD         [24] 1531 	mov	dptr,#_SPI_command
      001F27 74 A0            [12] 1532 	mov	a,#0xa0
      001F29 F0               [24] 1533 	movx	@dptr,a
      001F2A                       1534 00103$:
                                   1535 ;	nrf24l01.c:171: SPI_send_command(SPI_command);
      001F2A 90 00 AD         [24] 1536 	mov	dptr,#_SPI_command
      001F2D E0               [24] 1537 	movx	a,@dptr
      001F2E F5 82            [12] 1538 	mov	dpl,a
      001F30 12 1D A0         [24] 1539 	lcall	_SPI_send_command
      001F33 90 00 C2         [24] 1540 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      001F36 E0               [24] 1541 	movx	a,@dptr
      001F37 FD               [12] 1542 	mov	r5,a
      001F38 A3               [24] 1543 	inc	dptr
      001F39 E0               [24] 1544 	movx	a,@dptr
      001F3A FE               [12] 1545 	mov	r6,a
      001F3B A3               [24] 1546 	inc	dptr
      001F3C E0               [24] 1547 	movx	a,@dptr
      001F3D FF               [12] 1548 	mov	r7,a
      001F3E 90 00 C1         [24] 1549 	mov	dptr,#_nrf24_send_payload_PARM_2
      001F41 E0               [24] 1550 	movx	a,@dptr
      001F42 FC               [12] 1551 	mov	r4,a
      001F43                       1552 00106$:
                                   1553 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      001F43 EC               [12] 1554 	mov	a,r4
      001F44 60 37            [24] 1555 	jz	00113$
                                   1556 ;	nrf24l01.c:174: SPI_command = *payload;
      001F46 8D 82            [24] 1557 	mov	dpl,r5
      001F48 8E 83            [24] 1558 	mov	dph,r6
      001F4A 8F F0            [24] 1559 	mov	b,r7
      001F4C 12 3C 18         [24] 1560 	lcall	__gptrget
      001F4F FB               [12] 1561 	mov	r3,a
      001F50 A3               [24] 1562 	inc	dptr
      001F51 AD 82            [24] 1563 	mov	r5,dpl
      001F53 AE 83            [24] 1564 	mov	r6,dph
      001F55 90 00 AD         [24] 1565 	mov	dptr,#_SPI_command
      001F58 EB               [12] 1566 	mov	a,r3
      001F59 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	nrf24l01.c:175: SPI_send_command(SPI_command);
      001F5A 8B 82            [24] 1569 	mov	dpl,r3
      001F5C C0 07            [24] 1570 	push	ar7
      001F5E C0 06            [24] 1571 	push	ar6
      001F60 C0 05            [24] 1572 	push	ar5
      001F62 C0 04            [24] 1573 	push	ar4
      001F64 12 1D A0         [24] 1574 	lcall	_SPI_send_command
      001F67 D0 04            [24] 1575 	pop	ar4
      001F69 D0 05            [24] 1576 	pop	ar5
      001F6B D0 06            [24] 1577 	pop	ar6
      001F6D D0 07            [24] 1578 	pop	ar7
                                   1579 ;	nrf24l01.c:176: payload++;
      001F6F 90 00 C2         [24] 1580 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      001F72 ED               [12] 1581 	mov	a,r5
      001F73 F0               [24] 1582 	movx	@dptr,a
      001F74 EE               [12] 1583 	mov	a,r6
      001F75 A3               [24] 1584 	inc	dptr
      001F76 F0               [24] 1585 	movx	@dptr,a
      001F77 EF               [12] 1586 	mov	a,r7
      001F78 A3               [24] 1587 	inc	dptr
      001F79 F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      001F7A 1C               [12] 1590 	dec	r4
      001F7B 80 C6            [24] 1591 	sjmp	00106$
      001F7D                       1592 00113$:
      001F7D 90 00 C2         [24] 1593 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      001F80 ED               [12] 1594 	mov	a,r5
      001F81 F0               [24] 1595 	movx	@dptr,a
      001F82 EE               [12] 1596 	mov	a,r6
      001F83 A3               [24] 1597 	inc	dptr
      001F84 F0               [24] 1598 	movx	@dptr,a
      001F85 EF               [12] 1599 	mov	a,r7
      001F86 A3               [24] 1600 	inc	dptr
      001F87 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	nrf24l01.c:178: nrf24_SPI(SPI_OFF);
      001F88 75 82 01         [24] 1603 	mov	dpl,#0x01
                                   1604 ;	nrf24l01.c:179: }
      001F8B 02 1D 8C         [24] 1605 	ljmp	_nrf24_SPI
                                   1606 ;------------------------------------------------------------
                                   1607 ;Allocation info for local variables in function 'nrf24_transmit_status'
                                   1608 ;------------------------------------------------------------
                                   1609 ;	nrf24l01.c:183: uint8_t nrf24_transmit_status(void)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function nrf24_transmit_status
                                   1612 ;	-----------------------------------------
      001F8E                       1613 _nrf24_transmit_status:
                                   1614 ;	nrf24l01.c:185: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
      001F8E 90 00 E5         [24] 1615 	mov	dptr,#_nrf24_read_PARM_2
      001F91 74 AE            [12] 1616 	mov	a,#_register_current_value
      001F93 F0               [24] 1617 	movx	@dptr,a
      001F94 74 00            [12] 1618 	mov	a,#(_register_current_value >> 8)
      001F96 A3               [24] 1619 	inc	dptr
      001F97 F0               [24] 1620 	movx	@dptr,a
      001F98 E4               [12] 1621 	clr	a
      001F99 A3               [24] 1622 	inc	dptr
      001F9A F0               [24] 1623 	movx	@dptr,a
      001F9B 90 00 E8         [24] 1624 	mov	dptr,#_nrf24_read_PARM_3
      001F9E 04               [12] 1625 	inc	a
      001F9F F0               [24] 1626 	movx	@dptr,a
      001FA0 90 00 E9         [24] 1627 	mov	dptr,#_nrf24_read_PARM_4
      001FA3 E4               [12] 1628 	clr	a
      001FA4 F0               [24] 1629 	movx	@dptr,a
      001FA5 75 82 07         [24] 1630 	mov	dpl,#0x07
      001FA8 12 2C AA         [24] 1631 	lcall	_nrf24_read
                                   1632 ;	nrf24l01.c:186: if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
      001FAB 90 00 AE         [24] 1633 	mov	dptr,#_register_current_value
      001FAE E0               [24] 1634 	movx	a,@dptr
      001FAF FF               [12] 1635 	mov	r7,a
      001FB0 30 E5 21         [24] 1636 	jnb	acc.5,00105$
                                   1637 ;	nrf24l01.c:188: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      001FB3 90 00 EB         [24] 1638 	mov	dptr,#_nrf24_write_PARM_2
      001FB6 74 AE            [12] 1639 	mov	a,#_register_current_value
      001FB8 F0               [24] 1640 	movx	@dptr,a
      001FB9 74 00            [12] 1641 	mov	a,#(_register_current_value >> 8)
      001FBB A3               [24] 1642 	inc	dptr
      001FBC F0               [24] 1643 	movx	@dptr,a
      001FBD E4               [12] 1644 	clr	a
      001FBE A3               [24] 1645 	inc	dptr
      001FBF F0               [24] 1646 	movx	@dptr,a
      001FC0 90 00 EE         [24] 1647 	mov	dptr,#_nrf24_write_PARM_3
      001FC3 04               [12] 1648 	inc	a
      001FC4 F0               [24] 1649 	movx	@dptr,a
      001FC5 90 00 EF         [24] 1650 	mov	dptr,#_nrf24_write_PARM_4
      001FC8 E4               [12] 1651 	clr	a
      001FC9 F0               [24] 1652 	movx	@dptr,a
      001FCA 75 82 07         [24] 1653 	mov	dpl,#0x07
      001FCD 12 2D 16         [24] 1654 	lcall	_nrf24_write
                                   1655 ;	nrf24l01.c:189: return TRANSMIT_DONE;
      001FD0 75 82 01         [24] 1656 	mov	dpl,#0x01
      001FD3 22               [24] 1657 	ret
      001FD4                       1658 00105$:
                                   1659 ;	nrf24l01.c:191: else if (register_current_value & (1 << MAX_RT))
      001FD4 EF               [12] 1660 	mov	a,r7
      001FD5 30 E4 21         [24] 1661 	jnb	acc.4,00102$
                                   1662 ;	nrf24l01.c:193: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      001FD8 90 00 EB         [24] 1663 	mov	dptr,#_nrf24_write_PARM_2
      001FDB 74 AE            [12] 1664 	mov	a,#_register_current_value
      001FDD F0               [24] 1665 	movx	@dptr,a
      001FDE 74 00            [12] 1666 	mov	a,#(_register_current_value >> 8)
      001FE0 A3               [24] 1667 	inc	dptr
      001FE1 F0               [24] 1668 	movx	@dptr,a
      001FE2 E4               [12] 1669 	clr	a
      001FE3 A3               [24] 1670 	inc	dptr
      001FE4 F0               [24] 1671 	movx	@dptr,a
      001FE5 90 00 EE         [24] 1672 	mov	dptr,#_nrf24_write_PARM_3
      001FE8 04               [12] 1673 	inc	a
      001FE9 F0               [24] 1674 	movx	@dptr,a
      001FEA 90 00 EF         [24] 1675 	mov	dptr,#_nrf24_write_PARM_4
      001FED E4               [12] 1676 	clr	a
      001FEE F0               [24] 1677 	movx	@dptr,a
      001FEF 75 82 07         [24] 1678 	mov	dpl,#0x07
      001FF2 12 2D 16         [24] 1679 	lcall	_nrf24_write
                                   1680 ;	nrf24l01.c:194: return TRANSMIT_FAILED;
      001FF5 75 82 FF         [24] 1681 	mov	dpl,#0xff
      001FF8 22               [24] 1682 	ret
      001FF9                       1683 00102$:
                                   1684 ;	nrf24l01.c:197: return TRANSMIT_IN_PROGRESS;
      001FF9 75 82 00         [24] 1685 	mov	dpl,#0x00
                                   1686 ;	nrf24l01.c:198: }
      001FFC 22               [24] 1687 	ret
                                   1688 ;------------------------------------------------------------
                                   1689 ;Allocation info for local variables in function 'nrf24_receive'
                                   1690 ;------------------------------------------------------------
                                   1691 ;payload_width             Allocated with name '_nrf24_receive_PARM_2'
                                   1692 ;payload                   Allocated with name '_nrf24_receive_payload_65536_141'
                                   1693 ;------------------------------------------------------------
                                   1694 ;	nrf24l01.c:202: uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
                                   1695 ;	-----------------------------------------
                                   1696 ;	 function nrf24_receive
                                   1697 ;	-----------------------------------------
      001FFD                       1698 _nrf24_receive:
      001FFD AF F0            [24] 1699 	mov	r7,b
      001FFF AE 83            [24] 1700 	mov	r6,dph
      002001 E5 82            [12] 1701 	mov	a,dpl
      002003 90 00 C6         [24] 1702 	mov	dptr,#_nrf24_receive_payload_65536_141
      002006 F0               [24] 1703 	movx	@dptr,a
      002007 EE               [12] 1704 	mov	a,r6
      002008 A3               [24] 1705 	inc	dptr
      002009 F0               [24] 1706 	movx	@dptr,a
      00200A EF               [12] 1707 	mov	a,r7
      00200B A3               [24] 1708 	inc	dptr
      00200C F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	nrf24l01.c:204: if (current_mode == PRX)
      00200D 90 01 6D         [24] 1711 	mov	dptr,#_current_mode
      002010 E0               [24] 1712 	movx	a,@dptr
      002011 FF               [12] 1713 	mov	r7,a
      002012 BF 04 02         [24] 1714 	cjne	r7,#0x04,00142$
      002015 80 03            [24] 1715 	sjmp	00143$
      002017                       1716 00142$:
      002017 02 21 30         [24] 1717 	ljmp	00110$
      00201A                       1718 00143$:
                                   1719 ;	nrf24l01.c:206: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      00201A 90 00 E5         [24] 1720 	mov	dptr,#_nrf24_read_PARM_2
      00201D 74 AE            [12] 1721 	mov	a,#_register_current_value
      00201F F0               [24] 1722 	movx	@dptr,a
      002020 74 00            [12] 1723 	mov	a,#(_register_current_value >> 8)
      002022 A3               [24] 1724 	inc	dptr
      002023 F0               [24] 1725 	movx	@dptr,a
      002024 E4               [12] 1726 	clr	a
      002025 A3               [24] 1727 	inc	dptr
      002026 F0               [24] 1728 	movx	@dptr,a
      002027 90 00 E8         [24] 1729 	mov	dptr,#_nrf24_read_PARM_3
      00202A 04               [12] 1730 	inc	a
      00202B F0               [24] 1731 	movx	@dptr,a
      00202C 90 00 E9         [24] 1732 	mov	dptr,#_nrf24_read_PARM_4
      00202F E4               [12] 1733 	clr	a
      002030 F0               [24] 1734 	movx	@dptr,a
      002031 75 82 07         [24] 1735 	mov	dpl,#0x07
      002034 12 2C AA         [24] 1736 	lcall	_nrf24_read
                                   1737 ;	nrf24l01.c:207: if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
      002037 90 00 AE         [24] 1738 	mov	dptr,#_register_current_value
      00203A E0               [24] 1739 	movx	a,@dptr
      00203B 20 E6 03         [24] 1740 	jb	acc.6,00144$
      00203E 02 21 2C         [24] 1741 	ljmp	00107$
      002041                       1742 00144$:
                                   1743 ;	nrf24l01.c:209: if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
      002041 90 01 6F         [24] 1744 	mov	dptr,#_dynamic_payload
      002044 E0               [24] 1745 	movx	a,@dptr
      002045 70 08            [24] 1746 	jnz	00102$
                                   1747 ;	nrf24l01.c:210: payload_width = current_payload_width;
      002047 90 00 B2         [24] 1748 	mov	dptr,#_current_payload_width
      00204A E0               [24] 1749 	movx	a,@dptr
      00204B 90 00 C5         [24] 1750 	mov	dptr,#_nrf24_receive_PARM_2
      00204E F0               [24] 1751 	movx	@dptr,a
      00204F                       1752 00102$:
                                   1753 ;	nrf24l01.c:212: nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/                          
      00204F 75 82 00         [24] 1754 	mov	dpl,#0x00
      002052 12 1D 8C         [24] 1755 	lcall	_nrf24_SPI
                                   1756 ;	nrf24l01.c:213: SPI_command = R_RX_PAYLOAD;
      002055 90 00 AD         [24] 1757 	mov	dptr,#_SPI_command
      002058 74 61            [12] 1758 	mov	a,#0x61
      00205A F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	nrf24l01.c:214: SPI_send_command(SPI_command);
      00205B 75 82 61         [24] 1761 	mov	dpl,#0x61
      00205E 12 1D A0         [24] 1762 	lcall	_SPI_send_command
      002061 90 00 C6         [24] 1763 	mov	dptr,#_nrf24_receive_payload_65536_141
      002064 E0               [24] 1764 	movx	a,@dptr
      002065 FD               [12] 1765 	mov	r5,a
      002066 A3               [24] 1766 	inc	dptr
      002067 E0               [24] 1767 	movx	a,@dptr
      002068 FE               [12] 1768 	mov	r6,a
      002069 A3               [24] 1769 	inc	dptr
      00206A E0               [24] 1770 	movx	a,@dptr
      00206B FF               [12] 1771 	mov	r7,a
      00206C 90 00 C5         [24] 1772 	mov	dptr,#_nrf24_receive_PARM_2
      00206F E0               [24] 1773 	movx	a,@dptr
      002070 FC               [12] 1774 	mov	r4,a
      002071                       1775 00113$:
                                   1776 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      002071 EC               [12] 1777 	mov	a,r4
      002072 60 3B            [24] 1778 	jz	00123$
                                   1779 ;	nrf24l01.c:218: SPI_command = NOP_CMD;
      002074 90 00 AD         [24] 1780 	mov	dptr,#_SPI_command
      002077 74 FF            [12] 1781 	mov	a,#0xff
      002079 F0               [24] 1782 	movx	@dptr,a
                                   1783 ;	nrf24l01.c:219: *payload = SPI_send_command(SPI_command); // newly added
      00207A 75 82 FF         [24] 1784 	mov	dpl,#0xff
      00207D C0 07            [24] 1785 	push	ar7
      00207F C0 06            [24] 1786 	push	ar6
      002081 C0 05            [24] 1787 	push	ar5
      002083 C0 04            [24] 1788 	push	ar4
      002085 12 1D A0         [24] 1789 	lcall	_SPI_send_command
      002088 AB 82            [24] 1790 	mov	r3,dpl
      00208A D0 04            [24] 1791 	pop	ar4
      00208C D0 05            [24] 1792 	pop	ar5
      00208E D0 06            [24] 1793 	pop	ar6
      002090 D0 07            [24] 1794 	pop	ar7
      002092 8D 82            [24] 1795 	mov	dpl,r5
      002094 8E 83            [24] 1796 	mov	dph,r6
      002096 8F F0            [24] 1797 	mov	b,r7
      002098 EB               [12] 1798 	mov	a,r3
      002099 12 31 6D         [24] 1799 	lcall	__gptrput
      00209C A3               [24] 1800 	inc	dptr
      00209D AD 82            [24] 1801 	mov	r5,dpl
      00209F AE 83            [24] 1802 	mov	r6,dph
                                   1803 ;	nrf24l01.c:220: payload++;
      0020A1 90 00 C6         [24] 1804 	mov	dptr,#_nrf24_receive_payload_65536_141
      0020A4 ED               [12] 1805 	mov	a,r5
      0020A5 F0               [24] 1806 	movx	@dptr,a
      0020A6 EE               [12] 1807 	mov	a,r6
      0020A7 A3               [24] 1808 	inc	dptr
      0020A8 F0               [24] 1809 	movx	@dptr,a
      0020A9 EF               [12] 1810 	mov	a,r7
      0020AA A3               [24] 1811 	inc	dptr
      0020AB F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      0020AC 1C               [12] 1814 	dec	r4
      0020AD 80 C2            [24] 1815 	sjmp	00113$
      0020AF                       1816 00123$:
      0020AF 90 00 C6         [24] 1817 	mov	dptr,#_nrf24_receive_payload_65536_141
      0020B2 ED               [12] 1818 	mov	a,r5
      0020B3 F0               [24] 1819 	movx	@dptr,a
      0020B4 EE               [12] 1820 	mov	a,r6
      0020B5 A3               [24] 1821 	inc	dptr
      0020B6 F0               [24] 1822 	movx	@dptr,a
      0020B7 EF               [12] 1823 	mov	a,r7
      0020B8 A3               [24] 1824 	inc	dptr
      0020B9 F0               [24] 1825 	movx	@dptr,a
                                   1826 ;	nrf24l01.c:222: nrf24_SPI(SPI_OFF); 
      0020BA 75 82 01         [24] 1827 	mov	dpl,#0x01
      0020BD 12 1D 8C         [24] 1828 	lcall	_nrf24_SPI
                                   1829 ;	nrf24l01.c:223: nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
      0020C0 90 00 E5         [24] 1830 	mov	dptr,#_nrf24_read_PARM_2
      0020C3 74 AE            [12] 1831 	mov	a,#_register_current_value
      0020C5 F0               [24] 1832 	movx	@dptr,a
      0020C6 74 00            [12] 1833 	mov	a,#(_register_current_value >> 8)
      0020C8 A3               [24] 1834 	inc	dptr
      0020C9 F0               [24] 1835 	movx	@dptr,a
      0020CA E4               [12] 1836 	clr	a
      0020CB A3               [24] 1837 	inc	dptr
      0020CC F0               [24] 1838 	movx	@dptr,a
      0020CD 90 00 E8         [24] 1839 	mov	dptr,#_nrf24_read_PARM_3
      0020D0 04               [12] 1840 	inc	a
      0020D1 F0               [24] 1841 	movx	@dptr,a
      0020D2 90 00 E9         [24] 1842 	mov	dptr,#_nrf24_read_PARM_4
      0020D5 E4               [12] 1843 	clr	a
      0020D6 F0               [24] 1844 	movx	@dptr,a
      0020D7 75 82 17         [24] 1845 	mov	dpl,#0x17
      0020DA 12 2C AA         [24] 1846 	lcall	_nrf24_read
                                   1847 ;	nrf24l01.c:224: if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
      0020DD 90 00 AE         [24] 1848 	mov	dptr,#_register_current_value
      0020E0 E0               [24] 1849 	movx	a,@dptr
      0020E1 30 E0 44         [24] 1850 	jnb	acc.0,00105$
                                   1851 ;	nrf24l01.c:226: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0020E4 90 00 E5         [24] 1852 	mov	dptr,#_nrf24_read_PARM_2
      0020E7 74 AE            [12] 1853 	mov	a,#_register_current_value
      0020E9 F0               [24] 1854 	movx	@dptr,a
      0020EA 74 00            [12] 1855 	mov	a,#(_register_current_value >> 8)
      0020EC A3               [24] 1856 	inc	dptr
      0020ED F0               [24] 1857 	movx	@dptr,a
      0020EE E4               [12] 1858 	clr	a
      0020EF A3               [24] 1859 	inc	dptr
      0020F0 F0               [24] 1860 	movx	@dptr,a
      0020F1 90 00 E8         [24] 1861 	mov	dptr,#_nrf24_read_PARM_3
      0020F4 04               [12] 1862 	inc	a
      0020F5 F0               [24] 1863 	movx	@dptr,a
      0020F6 90 00 E9         [24] 1864 	mov	dptr,#_nrf24_read_PARM_4
      0020F9 E4               [12] 1865 	clr	a
      0020FA F0               [24] 1866 	movx	@dptr,a
      0020FB 75 82 07         [24] 1867 	mov	dpl,#0x07
      0020FE 12 2C AA         [24] 1868 	lcall	_nrf24_read
                                   1869 ;	nrf24l01.c:227: register_new_value = register_current_value | (1 << RX_DR);
      002101 90 00 AE         [24] 1870 	mov	dptr,#_register_current_value
      002104 E0               [24] 1871 	movx	a,@dptr
      002105 90 00 AF         [24] 1872 	mov	dptr,#_register_new_value
      002108 44 40            [12] 1873 	orl	a,#0x40
      00210A F0               [24] 1874 	movx	@dptr,a
                                   1875 ;	nrf24l01.c:228: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE); 
      00210B 90 00 EB         [24] 1876 	mov	dptr,#_nrf24_write_PARM_2
      00210E 74 AF            [12] 1877 	mov	a,#_register_new_value
      002110 F0               [24] 1878 	movx	@dptr,a
      002111 74 00            [12] 1879 	mov	a,#(_register_new_value >> 8)
      002113 A3               [24] 1880 	inc	dptr
      002114 F0               [24] 1881 	movx	@dptr,a
      002115 E4               [12] 1882 	clr	a
      002116 A3               [24] 1883 	inc	dptr
      002117 F0               [24] 1884 	movx	@dptr,a
      002118 90 00 EE         [24] 1885 	mov	dptr,#_nrf24_write_PARM_3
      00211B 04               [12] 1886 	inc	a
      00211C F0               [24] 1887 	movx	@dptr,a
      00211D 90 00 EF         [24] 1888 	mov	dptr,#_nrf24_write_PARM_4
      002120 E4               [12] 1889 	clr	a
      002121 F0               [24] 1890 	movx	@dptr,a
      002122 75 82 07         [24] 1891 	mov	dpl,#0x07
      002125 12 2D 16         [24] 1892 	lcall	_nrf24_write
      002128                       1893 00105$:
                                   1894 ;	nrf24l01.c:230: return OPERATION_DONE;
      002128 75 82 01         [24] 1895 	mov	dpl,#0x01
      00212B 22               [24] 1896 	ret
      00212C                       1897 00107$:
                                   1898 ;	nrf24l01.c:234: return RECEIVE_FIFO_EMPTY;
      00212C 75 82 02         [24] 1899 	mov	dpl,#0x02
      00212F 22               [24] 1900 	ret
      002130                       1901 00110$:
                                   1902 ;	nrf24l01.c:238: return OPERATION_ERROR;
      002130 75 82 00         [24] 1903 	mov	dpl,#0x00
                                   1904 ;	nrf24l01.c:239: }
      002133 22               [24] 1905 	ret
                                   1906 ;------------------------------------------------------------
                                   1907 ;Allocation info for local variables in function 'nrf24_flush'
                                   1908 ;------------------------------------------------------------
                                   1909 ;fifo_select               Allocated with name '_nrf24_flush_fifo_select_65536_149'
                                   1910 ;------------------------------------------------------------
                                   1911 ;	nrf24l01.c:243: uint8_t nrf24_flush(uint8_t fifo_select)
                                   1912 ;	-----------------------------------------
                                   1913 ;	 function nrf24_flush
                                   1914 ;	-----------------------------------------
      002134                       1915 _nrf24_flush:
      002134 E5 82            [12] 1916 	mov	a,dpl
      002136 90 00 C9         [24] 1917 	mov	dptr,#_nrf24_flush_fifo_select_65536_149
      002139 F0               [24] 1918 	movx	@dptr,a
                                   1919 ;	nrf24l01.c:245: switch (fifo_select)
      00213A E0               [24] 1920 	movx	a,@dptr
      00213B FF               [12] 1921 	mov	r7,a
      00213C 60 2B            [24] 1922 	jz	00105$
      00213E BF 01 50         [24] 1923 	cjne	r7,#0x01,00109$
                                   1924 ;	nrf24l01.c:248: if (current_mode == PTX)
      002141 90 01 6D         [24] 1925 	mov	dptr,#_current_mode
      002144 E0               [24] 1926 	movx	a,@dptr
      002145 FF               [12] 1927 	mov	r7,a
      002146 BF 03 1C         [24] 1928 	cjne	r7,#0x03,00103$
                                   1929 ;	nrf24l01.c:250: nrf24_SPI(SPI_ON);
      002149 75 82 00         [24] 1930 	mov	dpl,#0x00
      00214C 12 1D 8C         [24] 1931 	lcall	_nrf24_SPI
                                   1932 ;	nrf24l01.c:251: SPI_command = FLUSH_TX;
      00214F 90 00 AD         [24] 1933 	mov	dptr,#_SPI_command
      002152 74 E1            [12] 1934 	mov	a,#0xe1
      002154 F0               [24] 1935 	movx	@dptr,a
                                   1936 ;	nrf24l01.c:252: SPI_send_command(SPI_command);
      002155 75 82 E1         [24] 1937 	mov	dpl,#0xe1
      002158 12 1D A0         [24] 1938 	lcall	_SPI_send_command
                                   1939 ;	nrf24l01.c:253: nrf24_SPI(SPI_OFF);
      00215B 75 82 01         [24] 1940 	mov	dpl,#0x01
      00215E 12 1D 8C         [24] 1941 	lcall	_nrf24_SPI
                                   1942 ;	nrf24l01.c:254: return OPERATION_DONE;
      002161 75 82 01         [24] 1943 	mov	dpl,#0x01
      002164 22               [24] 1944 	ret
      002165                       1945 00103$:
                                   1946 ;	nrf24l01.c:257: return OPERATION_ERROR;
      002165 75 82 00         [24] 1947 	mov	dpl,#0x00
                                   1948 ;	nrf24l01.c:258: case RX_BUFFER:
      002168 22               [24] 1949 	ret
      002169                       1950 00105$:
                                   1951 ;	nrf24l01.c:259: if (current_mode == PRX)
      002169 90 01 6D         [24] 1952 	mov	dptr,#_current_mode
      00216C E0               [24] 1953 	movx	a,@dptr
      00216D FF               [12] 1954 	mov	r7,a
      00216E BF 04 1C         [24] 1955 	cjne	r7,#0x04,00107$
                                   1956 ;	nrf24l01.c:261: nrf24_SPI(SPI_ON);
      002171 75 82 00         [24] 1957 	mov	dpl,#0x00
      002174 12 1D 8C         [24] 1958 	lcall	_nrf24_SPI
                                   1959 ;	nrf24l01.c:262: SPI_command = FLUSH_RX;
      002177 90 00 AD         [24] 1960 	mov	dptr,#_SPI_command
      00217A 74 E2            [12] 1961 	mov	a,#0xe2
      00217C F0               [24] 1962 	movx	@dptr,a
                                   1963 ;	nrf24l01.c:263: SPI_send_command(SPI_command);
      00217D 75 82 E2         [24] 1964 	mov	dpl,#0xe2
      002180 12 1D A0         [24] 1965 	lcall	_SPI_send_command
                                   1966 ;	nrf24l01.c:264: nrf24_SPI(SPI_OFF);
      002183 75 82 01         [24] 1967 	mov	dpl,#0x01
      002186 12 1D 8C         [24] 1968 	lcall	_nrf24_SPI
                                   1969 ;	nrf24l01.c:265: return OPERATION_DONE;
      002189 75 82 01         [24] 1970 	mov	dpl,#0x01
      00218C 22               [24] 1971 	ret
      00218D                       1972 00107$:
                                   1973 ;	nrf24l01.c:268: return OPERATION_ERROR;
      00218D 75 82 00         [24] 1974 	mov	dpl,#0x00
                                   1975 ;	nrf24l01.c:269: default:
      002190 22               [24] 1976 	ret
      002191                       1977 00109$:
                                   1978 ;	nrf24l01.c:270: return OPERATION_ERROR;
      002191 75 82 00         [24] 1979 	mov	dpl,#0x00
                                   1980 ;	nrf24l01.c:271: }
                                   1981 ;	nrf24l01.c:272: }
      002194 22               [24] 1982 	ret
                                   1983 ;------------------------------------------------------------
                                   1984 ;Allocation info for local variables in function 'nrf24_reset'
                                   1985 ;------------------------------------------------------------
                                   1986 ;	nrf24l01.c:275: void nrf24_reset(void)
                                   1987 ;	-----------------------------------------
                                   1988 ;	 function nrf24_reset
                                   1989 ;	-----------------------------------------
      002195                       1990 _nrf24_reset:
                                   1991 ;	nrf24l01.c:277: reset_flag = 1;
      002195 90 01 6C         [24] 1992 	mov	dptr,#_reset_flag
      002198 74 01            [12] 1993 	mov	a,#0x01
      00219A F0               [24] 1994 	movx	@dptr,a
                                   1995 ;	nrf24l01.c:278: nrf24_CE(CE_OFF);
      00219B 75 82 00         [24] 1996 	mov	dpl,#0x00
      00219E 12 1D DF         [24] 1997 	lcall	_nrf24_CE
                                   1998 ;	nrf24l01.c:279: register_new_value = CONFIG_REGISTER_DEFAULT;
      0021A1 90 00 AF         [24] 1999 	mov	dptr,#_register_new_value
      0021A4 74 08            [12] 2000 	mov	a,#0x08
      0021A6 F0               [24] 2001 	movx	@dptr,a
                                   2002 ;	nrf24l01.c:280: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      0021A7 90 00 EB         [24] 2003 	mov	dptr,#_nrf24_write_PARM_2
      0021AA 74 AF            [12] 2004 	mov	a,#_register_new_value
      0021AC F0               [24] 2005 	movx	@dptr,a
      0021AD 74 00            [12] 2006 	mov	a,#(_register_new_value >> 8)
      0021AF A3               [24] 2007 	inc	dptr
      0021B0 F0               [24] 2008 	movx	@dptr,a
      0021B1 E4               [12] 2009 	clr	a
      0021B2 A3               [24] 2010 	inc	dptr
      0021B3 F0               [24] 2011 	movx	@dptr,a
      0021B4 90 00 EE         [24] 2012 	mov	dptr,#_nrf24_write_PARM_3
      0021B7 04               [12] 2013 	inc	a
      0021B8 F0               [24] 2014 	movx	@dptr,a
      0021B9 90 00 EF         [24] 2015 	mov	dptr,#_nrf24_write_PARM_4
      0021BC E4               [12] 2016 	clr	a
      0021BD F0               [24] 2017 	movx	@dptr,a
      0021BE 75 82 00         [24] 2018 	mov	dpl,#0x00
      0021C1 12 2D 16         [24] 2019 	lcall	_nrf24_write
                                   2020 ;	nrf24l01.c:281: register_new_value = EN_AA_REGISTER_DEFAULT;
      0021C4 90 00 AF         [24] 2021 	mov	dptr,#_register_new_value
      0021C7 74 3F            [12] 2022 	mov	a,#0x3f
      0021C9 F0               [24] 2023 	movx	@dptr,a
                                   2024 ;	nrf24l01.c:282: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0021CA 90 00 EB         [24] 2025 	mov	dptr,#_nrf24_write_PARM_2
      0021CD 74 AF            [12] 2026 	mov	a,#_register_new_value
      0021CF F0               [24] 2027 	movx	@dptr,a
      0021D0 74 00            [12] 2028 	mov	a,#(_register_new_value >> 8)
      0021D2 A3               [24] 2029 	inc	dptr
      0021D3 F0               [24] 2030 	movx	@dptr,a
      0021D4 E4               [12] 2031 	clr	a
      0021D5 A3               [24] 2032 	inc	dptr
      0021D6 F0               [24] 2033 	movx	@dptr,a
      0021D7 90 00 EE         [24] 2034 	mov	dptr,#_nrf24_write_PARM_3
      0021DA 04               [12] 2035 	inc	a
      0021DB F0               [24] 2036 	movx	@dptr,a
      0021DC 90 00 EF         [24] 2037 	mov	dptr,#_nrf24_write_PARM_4
      0021DF E4               [12] 2038 	clr	a
      0021E0 F0               [24] 2039 	movx	@dptr,a
      0021E1 75 82 01         [24] 2040 	mov	dpl,#0x01
      0021E4 12 2D 16         [24] 2041 	lcall	_nrf24_write
                                   2042 ;	nrf24l01.c:283: register_new_value = EN_RXADDR_REGISTER_DEFAULT;
      0021E7 90 00 AF         [24] 2043 	mov	dptr,#_register_new_value
      0021EA E4               [12] 2044 	clr	a
      0021EB F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	nrf24l01.c:284: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0021EC 90 00 EB         [24] 2047 	mov	dptr,#_nrf24_write_PARM_2
      0021EF 74 AF            [12] 2048 	mov	a,#_register_new_value
      0021F1 F0               [24] 2049 	movx	@dptr,a
      0021F2 74 00            [12] 2050 	mov	a,#(_register_new_value >> 8)
      0021F4 A3               [24] 2051 	inc	dptr
      0021F5 F0               [24] 2052 	movx	@dptr,a
      0021F6 E4               [12] 2053 	clr	a
      0021F7 A3               [24] 2054 	inc	dptr
      0021F8 F0               [24] 2055 	movx	@dptr,a
      0021F9 90 00 EE         [24] 2056 	mov	dptr,#_nrf24_write_PARM_3
      0021FC 04               [12] 2057 	inc	a
      0021FD F0               [24] 2058 	movx	@dptr,a
      0021FE 90 00 EF         [24] 2059 	mov	dptr,#_nrf24_write_PARM_4
      002201 E4               [12] 2060 	clr	a
      002202 F0               [24] 2061 	movx	@dptr,a
      002203 75 82 02         [24] 2062 	mov	dpl,#0x02
      002206 12 2D 16         [24] 2063 	lcall	_nrf24_write
                                   2064 ;	nrf24l01.c:285: register_new_value = SETUP_AW_REGISTER_DEFAULT;
      002209 90 00 AF         [24] 2065 	mov	dptr,#_register_new_value
      00220C 74 03            [12] 2066 	mov	a,#0x03
      00220E F0               [24] 2067 	movx	@dptr,a
                                   2068 ;	nrf24l01.c:286: nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
      00220F 90 00 EB         [24] 2069 	mov	dptr,#_nrf24_write_PARM_2
      002212 74 AF            [12] 2070 	mov	a,#_register_new_value
      002214 F0               [24] 2071 	movx	@dptr,a
      002215 74 00            [12] 2072 	mov	a,#(_register_new_value >> 8)
      002217 A3               [24] 2073 	inc	dptr
      002218 F0               [24] 2074 	movx	@dptr,a
      002219 E4               [12] 2075 	clr	a
      00221A A3               [24] 2076 	inc	dptr
      00221B F0               [24] 2077 	movx	@dptr,a
      00221C 90 00 EE         [24] 2078 	mov	dptr,#_nrf24_write_PARM_3
      00221F 04               [12] 2079 	inc	a
      002220 F0               [24] 2080 	movx	@dptr,a
      002221 90 00 EF         [24] 2081 	mov	dptr,#_nrf24_write_PARM_4
      002224 E4               [12] 2082 	clr	a
      002225 F0               [24] 2083 	movx	@dptr,a
      002226 75 82 03         [24] 2084 	mov	dpl,#0x03
      002229 12 2D 16         [24] 2085 	lcall	_nrf24_write
                                   2086 ;	nrf24l01.c:287: register_new_value = RF_CH_REGISTER_DEFAULT;
      00222C 90 00 AF         [24] 2087 	mov	dptr,#_register_new_value
      00222F 74 02            [12] 2088 	mov	a,#0x02
      002231 F0               [24] 2089 	movx	@dptr,a
                                   2090 ;	nrf24l01.c:288: nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
      002232 90 00 EB         [24] 2091 	mov	dptr,#_nrf24_write_PARM_2
      002235 74 AF            [12] 2092 	mov	a,#_register_new_value
      002237 F0               [24] 2093 	movx	@dptr,a
      002238 74 00            [12] 2094 	mov	a,#(_register_new_value >> 8)
      00223A A3               [24] 2095 	inc	dptr
      00223B F0               [24] 2096 	movx	@dptr,a
      00223C E4               [12] 2097 	clr	a
      00223D A3               [24] 2098 	inc	dptr
      00223E F0               [24] 2099 	movx	@dptr,a
      00223F 90 00 EE         [24] 2100 	mov	dptr,#_nrf24_write_PARM_3
      002242 04               [12] 2101 	inc	a
      002243 F0               [24] 2102 	movx	@dptr,a
      002244 90 00 EF         [24] 2103 	mov	dptr,#_nrf24_write_PARM_4
      002247 E4               [12] 2104 	clr	a
      002248 F0               [24] 2105 	movx	@dptr,a
      002249 75 82 05         [24] 2106 	mov	dpl,#0x05
      00224C 12 2D 16         [24] 2107 	lcall	_nrf24_write
                                   2108 ;	nrf24l01.c:289: register_new_value = RF_SETUP_REGISTER_DEFAULT;
      00224F 90 00 AF         [24] 2109 	mov	dptr,#_register_new_value
      002252 74 27            [12] 2110 	mov	a,#0x27
      002254 F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	nrf24l01.c:290: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      002255 90 00 EB         [24] 2113 	mov	dptr,#_nrf24_write_PARM_2
      002258 74 AF            [12] 2114 	mov	a,#_register_new_value
      00225A F0               [24] 2115 	movx	@dptr,a
      00225B 74 00            [12] 2116 	mov	a,#(_register_new_value >> 8)
      00225D A3               [24] 2117 	inc	dptr
      00225E F0               [24] 2118 	movx	@dptr,a
      00225F E4               [12] 2119 	clr	a
      002260 A3               [24] 2120 	inc	dptr
      002261 F0               [24] 2121 	movx	@dptr,a
      002262 90 00 EE         [24] 2122 	mov	dptr,#_nrf24_write_PARM_3
      002265 04               [12] 2123 	inc	a
      002266 F0               [24] 2124 	movx	@dptr,a
      002267 90 00 EF         [24] 2125 	mov	dptr,#_nrf24_write_PARM_4
      00226A E4               [12] 2126 	clr	a
      00226B F0               [24] 2127 	movx	@dptr,a
      00226C 75 82 06         [24] 2128 	mov	dpl,#0x06
      00226F 12 2D 16         [24] 2129 	lcall	_nrf24_write
                                   2130 ;	nrf24l01.c:291: register_new_value = STATUS_REGISTER_DEFAULT;
      002272 90 00 AF         [24] 2131 	mov	dptr,#_register_new_value
      002275 74 0E            [12] 2132 	mov	a,#0x0e
      002277 F0               [24] 2133 	movx	@dptr,a
                                   2134 ;	nrf24l01.c:292: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      002278 90 00 EB         [24] 2135 	mov	dptr,#_nrf24_write_PARM_2
      00227B 74 AF            [12] 2136 	mov	a,#_register_new_value
      00227D F0               [24] 2137 	movx	@dptr,a
      00227E 74 00            [12] 2138 	mov	a,#(_register_new_value >> 8)
      002280 A3               [24] 2139 	inc	dptr
      002281 F0               [24] 2140 	movx	@dptr,a
      002282 E4               [12] 2141 	clr	a
      002283 A3               [24] 2142 	inc	dptr
      002284 F0               [24] 2143 	movx	@dptr,a
      002285 90 00 EE         [24] 2144 	mov	dptr,#_nrf24_write_PARM_3
      002288 04               [12] 2145 	inc	a
      002289 F0               [24] 2146 	movx	@dptr,a
      00228A 90 00 EF         [24] 2147 	mov	dptr,#_nrf24_write_PARM_4
      00228D E4               [12] 2148 	clr	a
      00228E F0               [24] 2149 	movx	@dptr,a
      00228F 75 82 07         [24] 2150 	mov	dpl,#0x07
      002292 12 2D 16         [24] 2151 	lcall	_nrf24_write
                                   2152 ;	nrf24l01.c:299: nrf24_mode(PTX);
      002295 75 82 03         [24] 2153 	mov	dpl,#0x03
      002298 12 2B 80         [24] 2154 	lcall	_nrf24_mode
                                   2155 ;	nrf24l01.c:300: nrf24_flush(TX_BUFFER);
      00229B 75 82 01         [24] 2156 	mov	dpl,#0x01
      00229E 12 21 34         [24] 2157 	lcall	_nrf24_flush
                                   2158 ;	nrf24l01.c:301: nrf24_mode(PRX);
      0022A1 75 82 04         [24] 2159 	mov	dpl,#0x04
      0022A4 12 2B 80         [24] 2160 	lcall	_nrf24_mode
                                   2161 ;	nrf24l01.c:302: nrf24_flush(RX_BUFFER);
      0022A7 75 82 00         [24] 2162 	mov	dpl,#0x00
      0022AA 12 21 34         [24] 2163 	lcall	_nrf24_flush
                                   2164 ;	nrf24l01.c:304: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0022AD 90 00 E5         [24] 2165 	mov	dptr,#_nrf24_read_PARM_2
      0022B0 74 AE            [12] 2166 	mov	a,#_register_current_value
      0022B2 F0               [24] 2167 	movx	@dptr,a
      0022B3 74 00            [12] 2168 	mov	a,#(_register_current_value >> 8)
      0022B5 A3               [24] 2169 	inc	dptr
      0022B6 F0               [24] 2170 	movx	@dptr,a
      0022B7 E4               [12] 2171 	clr	a
      0022B8 A3               [24] 2172 	inc	dptr
      0022B9 F0               [24] 2173 	movx	@dptr,a
      0022BA 90 00 E8         [24] 2174 	mov	dptr,#_nrf24_read_PARM_3
      0022BD 04               [12] 2175 	inc	a
      0022BE F0               [24] 2176 	movx	@dptr,a
      0022BF 90 00 E9         [24] 2177 	mov	dptr,#_nrf24_read_PARM_4
      0022C2 E4               [12] 2178 	clr	a
      0022C3 F0               [24] 2179 	movx	@dptr,a
      0022C4 75 82 07         [24] 2180 	mov	dpl,#0x07
      0022C7 12 2C AA         [24] 2181 	lcall	_nrf24_read
                                   2182 ;	nrf24l01.c:305: register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
      0022CA 90 00 AE         [24] 2183 	mov	dptr,#_register_current_value
      0022CD E0               [24] 2184 	movx	a,@dptr
      0022CE 90 00 AF         [24] 2185 	mov	dptr,#_register_new_value
      0022D1 44 70            [12] 2186 	orl	a,#0x70
      0022D3 F0               [24] 2187 	movx	@dptr,a
                                   2188 ;	nrf24l01.c:306: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      0022D4 90 00 EB         [24] 2189 	mov	dptr,#_nrf24_write_PARM_2
      0022D7 74 AF            [12] 2190 	mov	a,#_register_new_value
      0022D9 F0               [24] 2191 	movx	@dptr,a
      0022DA 74 00            [12] 2192 	mov	a,#(_register_new_value >> 8)
      0022DC A3               [24] 2193 	inc	dptr
      0022DD F0               [24] 2194 	movx	@dptr,a
      0022DE E4               [12] 2195 	clr	a
      0022DF A3               [24] 2196 	inc	dptr
      0022E0 F0               [24] 2197 	movx	@dptr,a
      0022E1 90 00 EE         [24] 2198 	mov	dptr,#_nrf24_write_PARM_3
      0022E4 04               [12] 2199 	inc	a
      0022E5 F0               [24] 2200 	movx	@dptr,a
      0022E6 90 00 EF         [24] 2201 	mov	dptr,#_nrf24_write_PARM_4
      0022E9 E4               [12] 2202 	clr	a
      0022EA F0               [24] 2203 	movx	@dptr,a
      0022EB 75 82 07         [24] 2204 	mov	dpl,#0x07
      0022EE 12 2D 16         [24] 2205 	lcall	_nrf24_write
                                   2206 ;	nrf24l01.c:308: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      0022F1 90 00 DF         [24] 2207 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      0022F4 74 01            [12] 2208 	mov	a,#0x01
      0022F6 F0               [24] 2209 	movx	@dptr,a
      0022F7 90 00 E0         [24] 2210 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      0022FA F0               [24] 2211 	movx	@dptr,a
      0022FB 75 82 01         [24] 2212 	mov	dpl,#0x01
      0022FE 12 2A 82         [24] 2213 	lcall	_nrf24_interrupt_mask
                                   2214 ;	nrf24l01.c:309: nrf24_crc_configuration(ENABLE, 2);
      002301 90 00 E2         [24] 2215 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      002304 74 02            [12] 2216 	mov	a,#0x02
      002306 F0               [24] 2217 	movx	@dptr,a
      002307 75 82 01         [24] 2218 	mov	dpl,#0x01
      00230A 12 2B 0C         [24] 2219 	lcall	_nrf24_crc_configuration
                                   2220 ;	nrf24l01.c:310: nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
      00230D 75 82 05         [24] 2221 	mov	dpl,#0x05
      002310 12 28 BB         [24] 2222 	lcall	_nrf24_address_width
                                   2223 ;	nrf24l01.c:313: nrf24_rf_channel(RF_CHANNEL_DEFAULT);
      002313 75 82 2E         [24] 2224 	mov	dpl,#0x2e
      002316 12 2A 2C         [24] 2225 	lcall	_nrf24_rf_channel
                                   2226 ;	nrf24l01.c:314: nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
      002319 75 82 02         [24] 2227 	mov	dpl,#0x02
      00231C 12 28 84         [24] 2228 	lcall	_nrf24_datapipe_enable
                                   2229 ;	nrf24l01.c:315: nrf24_datapipe_address_configuration();  // I uncommented it
      00231F 12 27 FF         [24] 2230 	lcall	_nrf24_datapipe_address_configuration
                                   2231 ;	nrf24l01.c:316: nrf24_datapipe_ptx(1);  // I uncommented it
      002322 75 82 01         [24] 2232 	mov	dpl,#0x01
      002325 12 27 B1         [24] 2233 	lcall	_nrf24_datapipe_ptx
                                   2234 ;	nrf24l01.c:317: nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
      002328 90 00 D5         [24] 2235 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      00232B 74 02            [12] 2236 	mov	a,#0x02
      00232D F0               [24] 2237 	movx	@dptr,a
      00232E 75 82 10         [24] 2238 	mov	dpl,#0x10
      002331 12 28 43         [24] 2239 	lcall	_nrf24_prx_static_payload_width
                                   2240 ;	nrf24l01.c:318: nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
      002334 90 00 CE         [24] 2241 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      002337 74 08            [12] 2242 	mov	a,#0x08
      002339 F0               [24] 2243 	movx	@dptr,a
      00233A 90 06 D6         [24] 2244 	mov	dptr,#0x06d6
      00233D 12 26 30         [24] 2245 	lcall	_nrf24_automatic_retransmit_setup
                                   2246 ;	nrf24l01.c:319: nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
      002340 75 82 02         [24] 2247 	mov	dpl,#0x02
      002343 12 26 A9         [24] 2248 	lcall	_nrf24_auto_acknowledgment_setup
                                   2249 ;	nrf24l01.c:320: nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
      002346 90 00 D2         [24] 2250 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      002349 74 02            [12] 2251 	mov	a,#0x02
      00234B F0               [24] 2252 	movx	@dptr,a
      00234C 75 82 00         [24] 2253 	mov	dpl,#0x00
      00234F 12 26 E5         [24] 2254 	lcall	_nrf24_dynamic_payload
                                   2255 ;	nrf24l01.c:321: nrf24_dynamic_ack(ENABLE);
      002352 75 82 01         [24] 2256 	mov	dpl,#0x01
                                   2257 ;	nrf24l01.c:323: }
      002355 02 1D F3         [24] 2258 	ljmp	_nrf24_dynamic_ack
                                   2259 ;------------------------------------------------------------
                                   2260 ;Allocation info for local variables in function 'nrf24_device'
                                   2261 ;------------------------------------------------------------
                                   2262 ;reset_state               Allocated with name '_nrf24_device_PARM_2'
                                   2263 ;device_mode               Allocated with name '_nrf24_device_device_mode_65536_156'
                                   2264 ;register_to_write_to      Allocated with name '_nrf24_device_register_to_write_to_65537_158'
                                   2265 ;hardwareCheckPassed       Allocated with name '_nrf24_device_hardwareCheckPassed_65537_158'
                                   2266 ;new_value                 Allocated with name '_nrf24_device_new_value_65537_158'
                                   2267 ;i                         Allocated with name '_nrf24_device_i_131073_164'
                                   2268 ;------------------------------------------------------------
                                   2269 ;	nrf24l01.c:328: void nrf24_device(uint8_t device_mode, uint8_t reset_state)
                                   2270 ;	-----------------------------------------
                                   2271 ;	 function nrf24_device
                                   2272 ;	-----------------------------------------
      002358                       2273 _nrf24_device:
      002358 E5 82            [12] 2274 	mov	a,dpl
      00235A 90 00 CB         [24] 2275 	mov	dptr,#_nrf24_device_device_mode_65536_156
      00235D F0               [24] 2276 	movx	@dptr,a
                                   2277 ;	nrf24l01.c:330: SPI_Initializer();
      00235E 12 1D 38         [24] 2278 	lcall	_SPI_Initializer
                                   2279 ;	nrf24l01.c:331: pinout_Initializer();
      002361 12 1D 5D         [24] 2280 	lcall	_pinout_Initializer
                                   2281 ;	nrf24l01.c:332: delay_function(STARTUP_DELAY);
      002364 90 00 96         [24] 2282 	mov	dptr,#(0x96&0x00ff)
      002367 E4               [12] 2283 	clr	a
      002368 F5 F0            [12] 2284 	mov	b,a
      00236A 12 1D 10         [24] 2285 	lcall	_delay_function
                                   2286 ;	nrf24l01.c:333: nrf24_CE(CE_OFF);
      00236D 75 82 00         [24] 2287 	mov	dpl,#0x00
      002370 12 1D DF         [24] 2288 	lcall	_nrf24_CE
                                   2289 ;	nrf24l01.c:337: nrf24_read(0x00, &register_current_value, 1, CLOSE);
      002373 90 00 E5         [24] 2290 	mov	dptr,#_nrf24_read_PARM_2
      002376 74 AE            [12] 2291 	mov	a,#_register_current_value
      002378 F0               [24] 2292 	movx	@dptr,a
      002379 74 00            [12] 2293 	mov	a,#(_register_current_value >> 8)
      00237B A3               [24] 2294 	inc	dptr
      00237C F0               [24] 2295 	movx	@dptr,a
      00237D E4               [12] 2296 	clr	a
      00237E A3               [24] 2297 	inc	dptr
      00237F F0               [24] 2298 	movx	@dptr,a
      002380 90 00 E8         [24] 2299 	mov	dptr,#_nrf24_read_PARM_3
      002383 04               [12] 2300 	inc	a
      002384 F0               [24] 2301 	movx	@dptr,a
      002385 90 00 E9         [24] 2302 	mov	dptr,#_nrf24_read_PARM_4
      002388 E4               [12] 2303 	clr	a
      002389 F0               [24] 2304 	movx	@dptr,a
      00238A 75 82 00         [24] 2305 	mov	dpl,#0x00
      00238D 12 2C AA         [24] 2306 	lcall	_nrf24_read
                                   2307 ;	nrf24l01.c:341: bool hardwareCheckPassed = false;
      002390 90 00 CC         [24] 2308 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      002393 E4               [12] 2309 	clr	a
      002394 F0               [24] 2310 	movx	@dptr,a
                                   2311 ;	nrf24l01.c:343: while (!hardwareCheckPassed) {
      002395                       2312 00104$:
      002395 90 00 CC         [24] 2313 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      002398 E0               [24] 2314 	movx	a,@dptr
      002399 60 03            [24] 2315 	jz	00151$
      00239B 02 24 DA         [24] 2316 	ljmp	00106$
      00239E                       2317 00151$:
                                   2318 ;	nrf24l01.c:345: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      00239E 90 00 E5         [24] 2319 	mov	dptr,#_nrf24_read_PARM_2
      0023A1 74 AE            [12] 2320 	mov	a,#_register_current_value
      0023A3 F0               [24] 2321 	movx	@dptr,a
      0023A4 74 00            [12] 2322 	mov	a,#(_register_current_value >> 8)
      0023A6 A3               [24] 2323 	inc	dptr
      0023A7 F0               [24] 2324 	movx	@dptr,a
      0023A8 E4               [12] 2325 	clr	a
      0023A9 A3               [24] 2326 	inc	dptr
      0023AA F0               [24] 2327 	movx	@dptr,a
      0023AB 90 00 E8         [24] 2328 	mov	dptr,#_nrf24_read_PARM_3
      0023AE 04               [12] 2329 	inc	a
      0023AF F0               [24] 2330 	movx	@dptr,a
      0023B0 90 00 E9         [24] 2331 	mov	dptr,#_nrf24_read_PARM_4
      0023B3 E4               [12] 2332 	clr	a
      0023B4 F0               [24] 2333 	movx	@dptr,a
      0023B5 75 82 00         [24] 2334 	mov	dpl,#0x00
      0023B8 12 2C AA         [24] 2335 	lcall	_nrf24_read
                                   2336 ;	nrf24l01.c:346: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      0023BB 90 00 AE         [24] 2337 	mov	dptr,#_register_current_value
      0023BE E0               [24] 2338 	movx	a,@dptr
      0023BF FF               [12] 2339 	mov	r7,a
      0023C0 7E 00            [12] 2340 	mov	r6,#0x00
      0023C2 C0 07            [24] 2341 	push	ar7
      0023C4 C0 06            [24] 2342 	push	ar6
      0023C6 E4               [12] 2343 	clr	a
      0023C7 C0 E0            [24] 2344 	push	acc
      0023C9 C0 E0            [24] 2345 	push	acc
      0023CB 74 47            [12] 2346 	mov	a,#___str_0
      0023CD C0 E0            [24] 2347 	push	acc
      0023CF 74 3D            [12] 2348 	mov	a,#(___str_0 >> 8)
      0023D1 C0 E0            [24] 2349 	push	acc
      0023D3 74 80            [12] 2350 	mov	a,#0x80
      0023D5 C0 E0            [24] 2351 	push	acc
      0023D7 12 31 D6         [24] 2352 	lcall	_printf
      0023DA E5 81            [12] 2353 	mov	a,sp
      0023DC 24 F9            [12] 2354 	add	a,#0xf9
      0023DE F5 81            [12] 2355 	mov	sp,a
                                   2356 ;	nrf24l01.c:349: new_value = register_current_value + 3;
      0023E0 90 00 AE         [24] 2357 	mov	dptr,#_register_current_value
      0023E3 E0               [24] 2358 	movx	a,@dptr
      0023E4 FF               [12] 2359 	mov	r7,a
      0023E5 0F               [12] 2360 	inc	r7
      0023E6 0F               [12] 2361 	inc	r7
      0023E7 0F               [12] 2362 	inc	r7
      0023E8 90 00 CD         [24] 2363 	mov	dptr,#_nrf24_device_new_value_65537_158
      0023EB EF               [12] 2364 	mov	a,r7
      0023EC F0               [24] 2365 	movx	@dptr,a
                                   2366 ;	nrf24l01.c:350: register_new_value = new_value;
      0023ED 90 00 AF         [24] 2367 	mov	dptr,#_register_new_value
      0023F0 EF               [12] 2368 	mov	a,r7
      0023F1 F0               [24] 2369 	movx	@dptr,a
                                   2370 ;	nrf24l01.c:351: nrf24_write(register_to_write_to, &register_new_value, 1, CLOSE); // restarts the nrf?!?!? where is requires two read calls to return 8 again
      0023F2 90 00 EB         [24] 2371 	mov	dptr,#_nrf24_write_PARM_2
      0023F5 74 AF            [12] 2372 	mov	a,#_register_new_value
      0023F7 F0               [24] 2373 	movx	@dptr,a
      0023F8 74 00            [12] 2374 	mov	a,#(_register_new_value >> 8)
      0023FA A3               [24] 2375 	inc	dptr
      0023FB F0               [24] 2376 	movx	@dptr,a
      0023FC E4               [12] 2377 	clr	a
      0023FD A3               [24] 2378 	inc	dptr
      0023FE F0               [24] 2379 	movx	@dptr,a
      0023FF 90 00 EE         [24] 2380 	mov	dptr,#_nrf24_write_PARM_3
      002402 04               [12] 2381 	inc	a
      002403 F0               [24] 2382 	movx	@dptr,a
      002404 90 00 EF         [24] 2383 	mov	dptr,#_nrf24_write_PARM_4
      002407 E4               [12] 2384 	clr	a
      002408 F0               [24] 2385 	movx	@dptr,a
      002409 75 82 00         [24] 2386 	mov	dpl,#0x00
      00240C 12 2D 16         [24] 2387 	lcall	_nrf24_write
                                   2388 ;	nrf24l01.c:352: printf("Sending to %d: %d\n", register_to_write_to, register_new_value);
      00240F 90 00 AF         [24] 2389 	mov	dptr,#_register_new_value
      002412 E0               [24] 2390 	movx	a,@dptr
      002413 FF               [12] 2391 	mov	r7,a
      002414 7E 00            [12] 2392 	mov	r6,#0x00
      002416 C0 07            [24] 2393 	push	ar7
      002418 C0 06            [24] 2394 	push	ar6
      00241A E4               [12] 2395 	clr	a
      00241B C0 E0            [24] 2396 	push	acc
      00241D C0 E0            [24] 2397 	push	acc
      00241F 74 5A            [12] 2398 	mov	a,#___str_1
      002421 C0 E0            [24] 2399 	push	acc
      002423 74 3D            [12] 2400 	mov	a,#(___str_1 >> 8)
      002425 C0 E0            [24] 2401 	push	acc
      002427 74 80            [12] 2402 	mov	a,#0x80
      002429 C0 E0            [24] 2403 	push	acc
      00242B 12 31 D6         [24] 2404 	lcall	_printf
      00242E E5 81            [12] 2405 	mov	a,sp
      002430 24 F9            [12] 2406 	add	a,#0xf9
      002432 F5 81            [12] 2407 	mov	sp,a
                                   2408 ;	nrf24l01.c:355: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      002434 90 00 E5         [24] 2409 	mov	dptr,#_nrf24_read_PARM_2
      002437 74 AE            [12] 2410 	mov	a,#_register_current_value
      002439 F0               [24] 2411 	movx	@dptr,a
      00243A 74 00            [12] 2412 	mov	a,#(_register_current_value >> 8)
      00243C A3               [24] 2413 	inc	dptr
      00243D F0               [24] 2414 	movx	@dptr,a
      00243E E4               [12] 2415 	clr	a
      00243F A3               [24] 2416 	inc	dptr
      002440 F0               [24] 2417 	movx	@dptr,a
      002441 90 00 E8         [24] 2418 	mov	dptr,#_nrf24_read_PARM_3
      002444 04               [12] 2419 	inc	a
      002445 F0               [24] 2420 	movx	@dptr,a
      002446 90 00 E9         [24] 2421 	mov	dptr,#_nrf24_read_PARM_4
      002449 E4               [12] 2422 	clr	a
      00244A F0               [24] 2423 	movx	@dptr,a
      00244B 75 82 00         [24] 2424 	mov	dpl,#0x00
      00244E 12 2C AA         [24] 2425 	lcall	_nrf24_read
                                   2426 ;	nrf24l01.c:356: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      002451 90 00 AE         [24] 2427 	mov	dptr,#_register_current_value
      002454 E0               [24] 2428 	movx	a,@dptr
      002455 FF               [12] 2429 	mov	r7,a
      002456 7E 00            [12] 2430 	mov	r6,#0x00
      002458 C0 07            [24] 2431 	push	ar7
      00245A C0 06            [24] 2432 	push	ar6
      00245C E4               [12] 2433 	clr	a
      00245D C0 E0            [24] 2434 	push	acc
      00245F C0 E0            [24] 2435 	push	acc
      002461 74 47            [12] 2436 	mov	a,#___str_0
      002463 C0 E0            [24] 2437 	push	acc
      002465 74 3D            [12] 2438 	mov	a,#(___str_0 >> 8)
      002467 C0 E0            [24] 2439 	push	acc
      002469 74 80            [12] 2440 	mov	a,#0x80
      00246B C0 E0            [24] 2441 	push	acc
      00246D 12 31 D6         [24] 2442 	lcall	_printf
      002470 E5 81            [12] 2443 	mov	a,sp
      002472 24 F9            [12] 2444 	add	a,#0xf9
      002474 F5 81            [12] 2445 	mov	sp,a
                                   2446 ;	nrf24l01.c:358: if (register_current_value == new_value) {
      002476 90 00 AE         [24] 2447 	mov	dptr,#_register_current_value
      002479 E0               [24] 2448 	movx	a,@dptr
      00247A FF               [12] 2449 	mov	r7,a
      00247B 90 00 CD         [24] 2450 	mov	dptr,#_nrf24_device_new_value_65537_158
      00247E E0               [24] 2451 	movx	a,@dptr
      00247F FE               [12] 2452 	mov	r6,a
      002480 EF               [12] 2453 	mov	a,r7
      002481 B5 06 1E         [24] 2454 	cjne	a,ar6,00102$
                                   2455 ;	nrf24l01.c:359: printf("\rRead value matches the newly written value :D\n");
      002484 74 6D            [12] 2456 	mov	a,#___str_2
      002486 C0 E0            [24] 2457 	push	acc
      002488 74 3D            [12] 2458 	mov	a,#(___str_2 >> 8)
      00248A C0 E0            [24] 2459 	push	acc
      00248C 74 80            [12] 2460 	mov	a,#0x80
      00248E C0 E0            [24] 2461 	push	acc
      002490 12 31 D6         [24] 2462 	lcall	_printf
      002493 15 81            [12] 2463 	dec	sp
      002495 15 81            [12] 2464 	dec	sp
      002497 15 81            [12] 2465 	dec	sp
                                   2466 ;	nrf24l01.c:360: hardwareCheckPassed = true;
      002499 90 00 CC         [24] 2467 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      00249C 74 01            [12] 2468 	mov	a,#0x01
      00249E F0               [24] 2469 	movx	@dptr,a
      00249F 02 23 95         [24] 2470 	ljmp	00104$
      0024A2                       2471 00102$:
                                   2472 ;	nrf24l01.c:362: printf("\rRead value doesn't match the newly written value ;(\n");
      0024A2 74 9D            [12] 2473 	mov	a,#___str_3
      0024A4 C0 E0            [24] 2474 	push	acc
      0024A6 74 3D            [12] 2475 	mov	a,#(___str_3 >> 8)
      0024A8 C0 E0            [24] 2476 	push	acc
      0024AA 74 80            [12] 2477 	mov	a,#0x80
      0024AC C0 E0            [24] 2478 	push	acc
      0024AE 12 31 D6         [24] 2479 	lcall	_printf
      0024B1 15 81            [12] 2480 	dec	sp
      0024B3 15 81            [12] 2481 	dec	sp
      0024B5 15 81            [12] 2482 	dec	sp
                                   2483 ;	nrf24l01.c:363: printf("\rRead: %d\n", register_current_value);
      0024B7 90 00 AE         [24] 2484 	mov	dptr,#_register_current_value
      0024BA E0               [24] 2485 	movx	a,@dptr
      0024BB FF               [12] 2486 	mov	r7,a
      0024BC 7E 00            [12] 2487 	mov	r6,#0x00
      0024BE C0 07            [24] 2488 	push	ar7
      0024C0 C0 06            [24] 2489 	push	ar6
      0024C2 74 D3            [12] 2490 	mov	a,#___str_4
      0024C4 C0 E0            [24] 2491 	push	acc
      0024C6 74 3D            [12] 2492 	mov	a,#(___str_4 >> 8)
      0024C8 C0 E0            [24] 2493 	push	acc
      0024CA 74 80            [12] 2494 	mov	a,#0x80
      0024CC C0 E0            [24] 2495 	push	acc
      0024CE 12 31 D6         [24] 2496 	lcall	_printf
      0024D1 E5 81            [12] 2497 	mov	a,sp
      0024D3 24 FB            [12] 2498 	add	a,#0xfb
      0024D5 F5 81            [12] 2499 	mov	sp,a
      0024D7 02 23 95         [24] 2500 	ljmp	00104$
      0024DA                       2501 00106$:
                                   2502 ;	nrf24l01.c:367: printf("\rHardware Detected!\n");
      0024DA 74 DE            [12] 2503 	mov	a,#___str_5
      0024DC C0 E0            [24] 2504 	push	acc
      0024DE 74 3D            [12] 2505 	mov	a,#(___str_5 >> 8)
      0024E0 C0 E0            [24] 2506 	push	acc
      0024E2 74 80            [12] 2507 	mov	a,#0x80
      0024E4 C0 E0            [24] 2508 	push	acc
      0024E6 12 31 D6         [24] 2509 	lcall	_printf
      0024E9 15 81            [12] 2510 	dec	sp
      0024EB 15 81            [12] 2511 	dec	sp
      0024ED 15 81            [12] 2512 	dec	sp
                                   2513 ;	nrf24l01.c:369: if ((reset_state == RESET) || (reset_flag == 0))
      0024EF 90 00 CA         [24] 2514 	mov	dptr,#_nrf24_device_PARM_2
      0024F2 E0               [24] 2515 	movx	a,@dptr
      0024F3 FF               [12] 2516 	mov	r7,a
      0024F4 BF 01 02         [24] 2517 	cjne	r7,#0x01,00154$
      0024F7 80 06            [24] 2518 	sjmp	00107$
      0024F9                       2519 00154$:
      0024F9 90 01 6C         [24] 2520 	mov	dptr,#_reset_flag
      0024FC E0               [24] 2521 	movx	a,@dptr
      0024FD 70 03            [24] 2522 	jnz	00108$
      0024FF                       2523 00107$:
                                   2524 ;	nrf24l01.c:371: nrf24_reset();
      0024FF 12 21 95         [24] 2525 	lcall	_nrf24_reset
      002502                       2526 00108$:
                                   2527 ;	nrf24l01.c:374: switch (device_mode)
      002502 90 00 CB         [24] 2528 	mov	dptr,#_nrf24_device_device_mode_65536_156
      002505 E0               [24] 2529 	movx	a,@dptr
      002506 FF               [12] 2530 	mov  r7,a
      002507 24 FC            [12] 2531 	add	a,#0xff - 0x03
      002509 50 03            [24] 2532 	jnc	00156$
      00250B 02 25 96         [24] 2533 	ljmp	00114$
      00250E                       2534 00156$:
      00250E EF               [12] 2535 	mov	a,r7
      00250F 2F               [12] 2536 	add	a,r7
                                   2537 ;	nrf24l01.c:376: case TRANSMITTER:
      002510 90 25 14         [24] 2538 	mov	dptr,#00157$
      002513 73               [24] 2539 	jmp	@a+dptr
      002514                       2540 00157$:
      002514 80 06            [24] 2541 	sjmp	00110$
      002516 80 21            [24] 2542 	sjmp	00111$
      002518 80 46            [24] 2543 	sjmp	00112$
      00251A 80 62            [24] 2544 	sjmp	00113$
      00251C                       2545 00110$:
                                   2546 ;	nrf24l01.c:377: nrf24_mode(POWER_DOWN);
      00251C 75 82 00         [24] 2547 	mov	dpl,#0x00
      00251F 12 2B 80         [24] 2548 	lcall	_nrf24_mode
                                   2549 ;	nrf24l01.c:378: nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
      002522 90 00 DF         [24] 2550 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002525 E4               [12] 2551 	clr	a
      002526 F0               [24] 2552 	movx	@dptr,a
      002527 90 00 E0         [24] 2553 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00252A F0               [24] 2554 	movx	@dptr,a
      00252B 75 82 01         [24] 2555 	mov	dpl,#0x01
      00252E 12 2A 82         [24] 2556 	lcall	_nrf24_interrupt_mask
                                   2557 ;	nrf24l01.c:379: nrf24_mode(PTX);
      002531 75 82 03         [24] 2558 	mov	dpl,#0x03
      002534 12 2B 80         [24] 2559 	lcall	_nrf24_mode
                                   2560 ;	nrf24l01.c:380: break;
                                   2561 ;	nrf24l01.c:381: case RECEIVER:
      002537 80 73            [24] 2562 	sjmp	00128$
      002539                       2563 00111$:
                                   2564 ;	nrf24l01.c:382: nrf24_mode(POWER_DOWN);
      002539 75 82 00         [24] 2565 	mov	dpl,#0x00
      00253C 12 2B 80         [24] 2566 	lcall	_nrf24_mode
                                   2567 ;	nrf24l01.c:383: nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
      00253F 90 00 DF         [24] 2568 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002542 74 01            [12] 2569 	mov	a,#0x01
      002544 F0               [24] 2570 	movx	@dptr,a
      002545 90 00 E0         [24] 2571 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002548 F0               [24] 2572 	movx	@dptr,a
      002549 75 82 00         [24] 2573 	mov	dpl,#0x00
      00254C 12 2A 82         [24] 2574 	lcall	_nrf24_interrupt_mask
                                   2575 ;	nrf24l01.c:384: nrf24_mode(PRX);
      00254F 75 82 04         [24] 2576 	mov	dpl,#0x04
      002552 12 2B 80         [24] 2577 	lcall	_nrf24_mode
                                   2578 ;	nrf24l01.c:385: delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
      002555 90 00 64         [24] 2579 	mov	dptr,#(0x64&0x00ff)
      002558 E4               [12] 2580 	clr	a
      002559 F5 F0            [12] 2581 	mov	b,a
      00255B 12 1D 10         [24] 2582 	lcall	_delay_function
                                   2583 ;	nrf24l01.c:386: break;
                                   2584 ;	nrf24l01.c:387: case POWER_SAVING:
      00255E 80 4C            [24] 2585 	sjmp	00128$
      002560                       2586 00112$:
                                   2587 ;	nrf24l01.c:388: nrf24_mode(POWER_DOWN);
      002560 75 82 00         [24] 2588 	mov	dpl,#0x00
      002563 12 2B 80         [24] 2589 	lcall	_nrf24_mode
                                   2590 ;	nrf24l01.c:389: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      002566 90 00 DF         [24] 2591 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002569 74 01            [12] 2592 	mov	a,#0x01
      00256B F0               [24] 2593 	movx	@dptr,a
      00256C 90 00 E0         [24] 2594 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00256F F0               [24] 2595 	movx	@dptr,a
      002570 75 82 01         [24] 2596 	mov	dpl,#0x01
      002573 12 2A 82         [24] 2597 	lcall	_nrf24_interrupt_mask
                                   2598 ;	nrf24l01.c:390: nrf24_mode(STANDBYI);
      002576 75 82 01         [24] 2599 	mov	dpl,#0x01
      002579 12 2B 80         [24] 2600 	lcall	_nrf24_mode
                                   2601 ;	nrf24l01.c:391: break;
                                   2602 ;	nrf24l01.c:392: case TURN_OFF:
      00257C 80 2E            [24] 2603 	sjmp	00128$
      00257E                       2604 00113$:
                                   2605 ;	nrf24l01.c:393: nrf24_mode(POWER_DOWN);
      00257E 75 82 00         [24] 2606 	mov	dpl,#0x00
      002581 12 2B 80         [24] 2607 	lcall	_nrf24_mode
                                   2608 ;	nrf24l01.c:394: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      002584 90 00 DF         [24] 2609 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002587 74 01            [12] 2610 	mov	a,#0x01
      002589 F0               [24] 2611 	movx	@dptr,a
      00258A 90 00 E0         [24] 2612 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00258D F0               [24] 2613 	movx	@dptr,a
      00258E 75 82 01         [24] 2614 	mov	dpl,#0x01
      002591 12 2A 82         [24] 2615 	lcall	_nrf24_interrupt_mask
                                   2616 ;	nrf24l01.c:395: break;
                                   2617 ;	nrf24l01.c:396: default:
      002594 80 16            [24] 2618 	sjmp	00128$
      002596                       2619 00114$:
                                   2620 ;	nrf24l01.c:397: nrf24_mode(POWER_DOWN);
      002596 75 82 00         [24] 2621 	mov	dpl,#0x00
      002599 12 2B 80         [24] 2622 	lcall	_nrf24_mode
                                   2623 ;	nrf24l01.c:398: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      00259C 90 00 DF         [24] 2624 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      00259F 74 01            [12] 2625 	mov	a,#0x01
      0025A1 F0               [24] 2626 	movx	@dptr,a
      0025A2 90 00 E0         [24] 2627 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      0025A5 F0               [24] 2628 	movx	@dptr,a
      0025A6 75 82 01         [24] 2629 	mov	dpl,#0x01
      0025A9 12 2A 82         [24] 2630 	lcall	_nrf24_interrupt_mask
                                   2631 ;	nrf24l01.c:403: for (int i=0; i<24; i++) {
      0025AC                       2632 00128$:
      0025AC 7E 00            [12] 2633 	mov	r6,#0x00
      0025AE 7F 00            [12] 2634 	mov	r7,#0x00
      0025B0                       2635 00118$:
      0025B0 C3               [12] 2636 	clr	c
      0025B1 EE               [12] 2637 	mov	a,r6
      0025B2 94 18            [12] 2638 	subb	a,#0x18
      0025B4 EF               [12] 2639 	mov	a,r7
      0025B5 64 80            [12] 2640 	xrl	a,#0x80
      0025B7 94 80            [12] 2641 	subb	a,#0x80
      0025B9 50 5F            [24] 2642 	jnc	00116$
                                   2643 ;	nrf24l01.c:404: nrf24_read(i, &register_current_value, 1, CLOSE);
      0025BB 8E 05            [24] 2644 	mov	ar5,r6
      0025BD 90 00 E5         [24] 2645 	mov	dptr,#_nrf24_read_PARM_2
      0025C0 74 AE            [12] 2646 	mov	a,#_register_current_value
      0025C2 F0               [24] 2647 	movx	@dptr,a
      0025C3 74 00            [12] 2648 	mov	a,#(_register_current_value >> 8)
      0025C5 A3               [24] 2649 	inc	dptr
      0025C6 F0               [24] 2650 	movx	@dptr,a
      0025C7 E4               [12] 2651 	clr	a
      0025C8 A3               [24] 2652 	inc	dptr
      0025C9 F0               [24] 2653 	movx	@dptr,a
      0025CA 90 00 E8         [24] 2654 	mov	dptr,#_nrf24_read_PARM_3
      0025CD 04               [12] 2655 	inc	a
      0025CE F0               [24] 2656 	movx	@dptr,a
      0025CF 90 00 E9         [24] 2657 	mov	dptr,#_nrf24_read_PARM_4
      0025D2 E4               [12] 2658 	clr	a
      0025D3 F0               [24] 2659 	movx	@dptr,a
      0025D4 8D 82            [24] 2660 	mov	dpl,r5
      0025D6 C0 07            [24] 2661 	push	ar7
      0025D8 C0 06            [24] 2662 	push	ar6
      0025DA 12 2C AA         [24] 2663 	lcall	_nrf24_read
      0025DD D0 06            [24] 2664 	pop	ar6
      0025DF D0 07            [24] 2665 	pop	ar7
                                   2666 ;	nrf24l01.c:405: printf("\rRegister %d: %d\n", i, register_current_value);
      0025E1 90 00 AE         [24] 2667 	mov	dptr,#_register_current_value
      0025E4 E0               [24] 2668 	movx	a,@dptr
      0025E5 FD               [12] 2669 	mov	r5,a
      0025E6 7C 00            [12] 2670 	mov	r4,#0x00
      0025E8 C0 07            [24] 2671 	push	ar7
      0025EA C0 06            [24] 2672 	push	ar6
      0025EC C0 05            [24] 2673 	push	ar5
      0025EE C0 04            [24] 2674 	push	ar4
      0025F0 C0 06            [24] 2675 	push	ar6
      0025F2 C0 07            [24] 2676 	push	ar7
      0025F4 74 F3            [12] 2677 	mov	a,#___str_6
      0025F6 C0 E0            [24] 2678 	push	acc
      0025F8 74 3D            [12] 2679 	mov	a,#(___str_6 >> 8)
      0025FA C0 E0            [24] 2680 	push	acc
      0025FC 74 80            [12] 2681 	mov	a,#0x80
      0025FE C0 E0            [24] 2682 	push	acc
      002600 12 31 D6         [24] 2683 	lcall	_printf
      002603 E5 81            [12] 2684 	mov	a,sp
      002605 24 F9            [12] 2685 	add	a,#0xf9
      002607 F5 81            [12] 2686 	mov	sp,a
                                   2687 ;	nrf24l01.c:406: delay1ms(20);
      002609 90 00 14         [24] 2688 	mov	dptr,#0x0014
      00260C 12 01 D6         [24] 2689 	lcall	_delay1ms
      00260F D0 06            [24] 2690 	pop	ar6
      002611 D0 07            [24] 2691 	pop	ar7
                                   2692 ;	nrf24l01.c:403: for (int i=0; i<24; i++) {
      002613 0E               [12] 2693 	inc	r6
      002614 BE 00 99         [24] 2694 	cjne	r6,#0x00,00118$
      002617 0F               [12] 2695 	inc	r7
      002618 80 96            [24] 2696 	sjmp	00118$
      00261A                       2697 00116$:
                                   2698 ;	nrf24l01.c:408: printf("\n\n");
      00261A 74 05            [12] 2699 	mov	a,#___str_7
      00261C C0 E0            [24] 2700 	push	acc
      00261E 74 3E            [12] 2701 	mov	a,#(___str_7 >> 8)
      002620 C0 E0            [24] 2702 	push	acc
      002622 74 80            [12] 2703 	mov	a,#0x80
      002624 C0 E0            [24] 2704 	push	acc
      002626 12 31 D6         [24] 2705 	lcall	_printf
      002629 15 81            [12] 2706 	dec	sp
      00262B 15 81            [12] 2707 	dec	sp
      00262D 15 81            [12] 2708 	dec	sp
                                   2709 ;	nrf24l01.c:411: }
      00262F 22               [24] 2710 	ret
                                   2711 ;------------------------------------------------------------
                                   2712 ;Allocation info for local variables in function 'nrf24_automatic_retransmit_setup'
                                   2713 ;------------------------------------------------------------
                                   2714 ;retransmit_count          Allocated with name '_nrf24_automatic_retransmit_setup_PARM_2'
                                   2715 ;delay_time                Allocated with name '_nrf24_automatic_retransmit_setup_delay_time_65536_166'
                                   2716 ;------------------------------------------------------------
                                   2717 ;	nrf24l01.c:414: void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
                                   2718 ;	-----------------------------------------
                                   2719 ;	 function nrf24_automatic_retransmit_setup
                                   2720 ;	-----------------------------------------
      002630                       2721 _nrf24_automatic_retransmit_setup:
      002630 AF 83            [24] 2722 	mov	r7,dph
      002632 E5 82            [12] 2723 	mov	a,dpl
      002634 90 00 CF         [24] 2724 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      002637 F0               [24] 2725 	movx	@dptr,a
      002638 EF               [12] 2726 	mov	a,r7
      002639 A3               [24] 2727 	inc	dptr
      00263A F0               [24] 2728 	movx	@dptr,a
                                   2729 ;	nrf24l01.c:416: register_new_value = 0x00;
      00263B 90 00 AF         [24] 2730 	mov	dptr,#_register_new_value
      00263E E4               [12] 2731 	clr	a
      00263F F0               [24] 2732 	movx	@dptr,a
      002640                       2733 00108$:
                                   2734 ;	nrf24l01.c:417: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      002640 90 00 CF         [24] 2735 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      002643 E0               [24] 2736 	movx	a,@dptr
      002644 FE               [12] 2737 	mov	r6,a
      002645 A3               [24] 2738 	inc	dptr
      002646 E0               [24] 2739 	movx	a,@dptr
      002647 FF               [12] 2740 	mov	r7,a
      002648 C3               [12] 2741 	clr	c
      002649 74 FA            [12] 2742 	mov	a,#0xfa
      00264B 9E               [12] 2743 	subb	a,r6
      00264C E4               [12] 2744 	clr	a
      00264D 9F               [12] 2745 	subb	a,r7
      00264E 50 22            [24] 2746 	jnc	00101$
      002650 90 00 AF         [24] 2747 	mov	dptr,#_register_new_value
      002653 E0               [24] 2748 	movx	a,@dptr
      002654 FD               [12] 2749 	mov	r5,a
      002655 BD 0F 00         [24] 2750 	cjne	r5,#0x0f,00133$
      002658                       2751 00133$:
      002658 50 18            [24] 2752 	jnc	00101$
                                   2753 ;	nrf24l01.c:418: register_new_value++;
      00265A 90 00 AF         [24] 2754 	mov	dptr,#_register_new_value
      00265D ED               [12] 2755 	mov	a,r5
      00265E 04               [12] 2756 	inc	a
      00265F F0               [24] 2757 	movx	@dptr,a
                                   2758 ;	nrf24l01.c:417: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      002660 EE               [12] 2759 	mov	a,r6
      002661 24 06            [12] 2760 	add	a,#0x06
      002663 FE               [12] 2761 	mov	r6,a
      002664 EF               [12] 2762 	mov	a,r7
      002665 34 FF            [12] 2763 	addc	a,#0xff
      002667 FF               [12] 2764 	mov	r7,a
      002668 90 00 CF         [24] 2765 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      00266B EE               [12] 2766 	mov	a,r6
      00266C F0               [24] 2767 	movx	@dptr,a
      00266D EF               [12] 2768 	mov	a,r7
      00266E A3               [24] 2769 	inc	dptr
      00266F F0               [24] 2770 	movx	@dptr,a
      002670 80 CE            [24] 2771 	sjmp	00108$
      002672                       2772 00101$:
                                   2773 ;	nrf24l01.c:419: register_new_value <<= ARD_0;
      002672 90 00 AF         [24] 2774 	mov	dptr,#_register_new_value
      002675 E0               [24] 2775 	movx	a,@dptr
      002676 C4               [12] 2776 	swap	a
      002677 54 F0            [12] 2777 	anl	a,#0xf0
      002679 F0               [24] 2778 	movx	@dptr,a
                                   2779 ;	nrf24l01.c:420: if ((retransmit_count > 0) && (retransmit_count < 16))
      00267A 90 00 CE         [24] 2780 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      00267D E0               [24] 2781 	movx	a,@dptr
      00267E FF               [12] 2782 	mov	r7,a
      00267F 60 0B            [24] 2783 	jz	00103$
      002681 BF 10 00         [24] 2784 	cjne	r7,#0x10,00136$
      002684                       2785 00136$:
      002684 50 06            [24] 2786 	jnc	00103$
                                   2787 ;	nrf24l01.c:421: register_new_value |= retransmit_count;
      002686 90 00 AF         [24] 2788 	mov	dptr,#_register_new_value
      002689 E0               [24] 2789 	movx	a,@dptr
      00268A 4F               [12] 2790 	orl	a,r7
      00268B F0               [24] 2791 	movx	@dptr,a
                                   2792 ;	nrf24l01.c:423: register_new_value |= 0;
      00268C                       2793 00103$:
                                   2794 ;	nrf24l01.c:424: nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
      00268C 90 00 EB         [24] 2795 	mov	dptr,#_nrf24_write_PARM_2
      00268F 74 AF            [12] 2796 	mov	a,#_register_new_value
      002691 F0               [24] 2797 	movx	@dptr,a
      002692 74 00            [12] 2798 	mov	a,#(_register_new_value >> 8)
      002694 A3               [24] 2799 	inc	dptr
      002695 F0               [24] 2800 	movx	@dptr,a
      002696 E4               [12] 2801 	clr	a
      002697 A3               [24] 2802 	inc	dptr
      002698 F0               [24] 2803 	movx	@dptr,a
      002699 90 00 EE         [24] 2804 	mov	dptr,#_nrf24_write_PARM_3
      00269C 04               [12] 2805 	inc	a
      00269D F0               [24] 2806 	movx	@dptr,a
      00269E 90 00 EF         [24] 2807 	mov	dptr,#_nrf24_write_PARM_4
      0026A1 E4               [12] 2808 	clr	a
      0026A2 F0               [24] 2809 	movx	@dptr,a
      0026A3 75 82 04         [24] 2810 	mov	dpl,#0x04
                                   2811 ;	nrf24l01.c:425: }
      0026A6 02 2D 16         [24] 2812 	ljmp	_nrf24_write
                                   2813 ;------------------------------------------------------------
                                   2814 ;Allocation info for local variables in function 'nrf24_auto_acknowledgment_setup'
                                   2815 ;------------------------------------------------------------
                                   2816 ;datapipe                  Allocated with name '_nrf24_auto_acknowledgment_setup_datapipe_65536_169'
                                   2817 ;------------------------------------------------------------
                                   2818 ;	nrf24l01.c:428: void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
                                   2819 ;	-----------------------------------------
                                   2820 ;	 function nrf24_auto_acknowledgment_setup
                                   2821 ;	-----------------------------------------
      0026A9                       2822 _nrf24_auto_acknowledgment_setup:
      0026A9 E5 82            [12] 2823 	mov	a,dpl
      0026AB 90 00 D1         [24] 2824 	mov	dptr,#_nrf24_auto_acknowledgment_setup_datapipe_65536_169
      0026AE F0               [24] 2825 	movx	@dptr,a
                                   2826 ;	nrf24l01.c:430: if (datapipe < 7)
      0026AF E0               [24] 2827 	movx	a,@dptr
      0026B0 FF               [12] 2828 	mov	r7,a
      0026B1 BF 07 00         [24] 2829 	cjne	r7,#0x07,00109$
      0026B4                       2830 00109$:
      0026B4 50 12            [24] 2831 	jnc	00102$
                                   2832 ;	nrf24l01.c:431: register_new_value = (1 << datapipe) - 1;
      0026B6 8F F0            [24] 2833 	mov	b,r7
      0026B8 05 F0            [12] 2834 	inc	b
      0026BA 74 01            [12] 2835 	mov	a,#0x01
      0026BC 80 02            [24] 2836 	sjmp	00113$
      0026BE                       2837 00111$:
      0026BE 25 E0            [12] 2838 	add	a,acc
      0026C0                       2839 00113$:
      0026C0 D5 F0 FB         [24] 2840 	djnz	b,00111$
      0026C3 14               [12] 2841 	dec	a
      0026C4 90 00 AF         [24] 2842 	mov	dptr,#_register_new_value
      0026C7 F0               [24] 2843 	movx	@dptr,a
      0026C8                       2844 00102$:
                                   2845 ;	nrf24l01.c:432: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0026C8 90 00 EB         [24] 2846 	mov	dptr,#_nrf24_write_PARM_2
      0026CB 74 AF            [12] 2847 	mov	a,#_register_new_value
      0026CD F0               [24] 2848 	movx	@dptr,a
      0026CE 74 00            [12] 2849 	mov	a,#(_register_new_value >> 8)
      0026D0 A3               [24] 2850 	inc	dptr
      0026D1 F0               [24] 2851 	movx	@dptr,a
      0026D2 E4               [12] 2852 	clr	a
      0026D3 A3               [24] 2853 	inc	dptr
      0026D4 F0               [24] 2854 	movx	@dptr,a
      0026D5 90 00 EE         [24] 2855 	mov	dptr,#_nrf24_write_PARM_3
      0026D8 04               [12] 2856 	inc	a
      0026D9 F0               [24] 2857 	movx	@dptr,a
      0026DA 90 00 EF         [24] 2858 	mov	dptr,#_nrf24_write_PARM_4
      0026DD E4               [12] 2859 	clr	a
      0026DE F0               [24] 2860 	movx	@dptr,a
      0026DF 75 82 01         [24] 2861 	mov	dpl,#0x01
                                   2862 ;	nrf24l01.c:433: }
      0026E2 02 2D 16         [24] 2863 	ljmp	_nrf24_write
                                   2864 ;------------------------------------------------------------
                                   2865 ;Allocation info for local variables in function 'nrf24_dynamic_payload'
                                   2866 ;------------------------------------------------------------
                                   2867 ;datapipe                  Allocated with name '_nrf24_dynamic_payload_PARM_2'
                                   2868 ;state                     Allocated with name '_nrf24_dynamic_payload_state_65536_171'
                                   2869 ;------------------------------------------------------------
                                   2870 ;	nrf24l01.c:436: void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
                                   2871 ;	-----------------------------------------
                                   2872 ;	 function nrf24_dynamic_payload
                                   2873 ;	-----------------------------------------
      0026E5                       2874 _nrf24_dynamic_payload:
      0026E5 E5 82            [12] 2875 	mov	a,dpl
      0026E7 90 00 D3         [24] 2876 	mov	dptr,#_nrf24_dynamic_payload_state_65536_171
      0026EA F0               [24] 2877 	movx	@dptr,a
                                   2878 ;	nrf24l01.c:438: nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
      0026EB 90 00 D2         [24] 2879 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      0026EE E0               [24] 2880 	movx	a,@dptr
      0026EF FF               [12] 2881 	mov	r7,a
      0026F0 F5 82            [12] 2882 	mov	dpl,a
      0026F2 C0 07            [24] 2883 	push	ar7
      0026F4 12 26 A9         [24] 2884 	lcall	_nrf24_auto_acknowledgment_setup
                                   2885 ;	nrf24l01.c:439: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0026F7 90 00 E5         [24] 2886 	mov	dptr,#_nrf24_read_PARM_2
      0026FA 74 AE            [12] 2887 	mov	a,#_register_current_value
      0026FC F0               [24] 2888 	movx	@dptr,a
      0026FD 74 00            [12] 2889 	mov	a,#(_register_current_value >> 8)
      0026FF A3               [24] 2890 	inc	dptr
      002700 F0               [24] 2891 	movx	@dptr,a
      002701 E4               [12] 2892 	clr	a
      002702 A3               [24] 2893 	inc	dptr
      002703 F0               [24] 2894 	movx	@dptr,a
      002704 90 00 E8         [24] 2895 	mov	dptr,#_nrf24_read_PARM_3
      002707 04               [12] 2896 	inc	a
      002708 F0               [24] 2897 	movx	@dptr,a
      002709 90 00 E9         [24] 2898 	mov	dptr,#_nrf24_read_PARM_4
      00270C E4               [12] 2899 	clr	a
      00270D F0               [24] 2900 	movx	@dptr,a
      00270E 75 82 1D         [24] 2901 	mov	dpl,#0x1d
      002711 12 2C AA         [24] 2902 	lcall	_nrf24_read
      002714 D0 07            [24] 2903 	pop	ar7
                                   2904 ;	nrf24l01.c:440: if (state == ENABLE)
      002716 90 00 D3         [24] 2905 	mov	dptr,#_nrf24_dynamic_payload_state_65536_171
      002719 E0               [24] 2906 	movx	a,@dptr
      00271A FE               [12] 2907 	mov	r6,a
      00271B BE 01 66         [24] 2908 	cjne	r6,#0x01,00104$
                                   2909 ;	nrf24l01.c:442: register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
      00271E 90 00 AE         [24] 2910 	mov	dptr,#_register_current_value
      002721 E0               [24] 2911 	movx	a,@dptr
      002722 90 00 AF         [24] 2912 	mov	dptr,#_register_new_value
      002725 44 04            [12] 2913 	orl	a,#0x04
      002727 F0               [24] 2914 	movx	@dptr,a
                                   2915 ;	nrf24l01.c:443: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      002728 90 00 EB         [24] 2916 	mov	dptr,#_nrf24_write_PARM_2
      00272B 74 AF            [12] 2917 	mov	a,#_register_new_value
      00272D F0               [24] 2918 	movx	@dptr,a
      00272E 74 00            [12] 2919 	mov	a,#(_register_new_value >> 8)
      002730 A3               [24] 2920 	inc	dptr
      002731 F0               [24] 2921 	movx	@dptr,a
      002732 E4               [12] 2922 	clr	a
      002733 A3               [24] 2923 	inc	dptr
      002734 F0               [24] 2924 	movx	@dptr,a
      002735 90 00 EE         [24] 2925 	mov	dptr,#_nrf24_write_PARM_3
      002738 04               [12] 2926 	inc	a
      002739 F0               [24] 2927 	movx	@dptr,a
      00273A 90 00 EF         [24] 2928 	mov	dptr,#_nrf24_write_PARM_4
      00273D E4               [12] 2929 	clr	a
      00273E F0               [24] 2930 	movx	@dptr,a
      00273F 75 82 1D         [24] 2931 	mov	dpl,#0x1d
      002742 C0 07            [24] 2932 	push	ar7
      002744 12 2D 16         [24] 2933 	lcall	_nrf24_write
      002747 D0 07            [24] 2934 	pop	ar7
                                   2935 ;	nrf24l01.c:444: if (datapipe < 7)
      002749 BF 07 00         [24] 2936 	cjne	r7,#0x07,00118$
      00274C                       2937 00118$:
      00274C 50 12            [24] 2938 	jnc	00102$
                                   2939 ;	nrf24l01.c:445: register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
      00274E 8F F0            [24] 2940 	mov	b,r7
      002750 05 F0            [12] 2941 	inc	b
      002752 74 01            [12] 2942 	mov	a,#0x01
      002754 80 02            [24] 2943 	sjmp	00122$
      002756                       2944 00120$:
      002756 25 E0            [12] 2945 	add	a,acc
      002758                       2946 00122$:
      002758 D5 F0 FB         [24] 2947 	djnz	b,00120$
      00275B 14               [12] 2948 	dec	a
      00275C 90 00 AF         [24] 2949 	mov	dptr,#_register_new_value
      00275F F0               [24] 2950 	movx	@dptr,a
      002760                       2951 00102$:
                                   2952 ;	nrf24l01.c:446: nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
      002760 90 00 EB         [24] 2953 	mov	dptr,#_nrf24_write_PARM_2
      002763 74 AF            [12] 2954 	mov	a,#_register_new_value
      002765 F0               [24] 2955 	movx	@dptr,a
      002766 74 00            [12] 2956 	mov	a,#(_register_new_value >> 8)
      002768 A3               [24] 2957 	inc	dptr
      002769 F0               [24] 2958 	movx	@dptr,a
      00276A E4               [12] 2959 	clr	a
      00276B A3               [24] 2960 	inc	dptr
      00276C F0               [24] 2961 	movx	@dptr,a
      00276D 90 00 EE         [24] 2962 	mov	dptr,#_nrf24_write_PARM_3
      002770 04               [12] 2963 	inc	a
      002771 F0               [24] 2964 	movx	@dptr,a
      002772 90 00 EF         [24] 2965 	mov	dptr,#_nrf24_write_PARM_4
      002775 E4               [12] 2966 	clr	a
      002776 F0               [24] 2967 	movx	@dptr,a
      002777 75 82 1C         [24] 2968 	mov	dpl,#0x1c
      00277A 12 2D 16         [24] 2969 	lcall	_nrf24_write
                                   2970 ;	nrf24l01.c:447: dynamic_payload = ENABLE;
      00277D 90 01 6F         [24] 2971 	mov	dptr,#_dynamic_payload
      002780 74 01            [12] 2972 	mov	a,#0x01
      002782 F0               [24] 2973 	movx	@dptr,a
      002783 22               [24] 2974 	ret
      002784                       2975 00104$:
                                   2976 ;	nrf24l01.c:451: register_new_value = register_current_value & (~(1 << EN_DPL));
      002784 90 00 AE         [24] 2977 	mov	dptr,#_register_current_value
      002787 E0               [24] 2978 	movx	a,@dptr
      002788 90 00 AF         [24] 2979 	mov	dptr,#_register_new_value
      00278B 54 FB            [12] 2980 	anl	a,#0xfb
      00278D F0               [24] 2981 	movx	@dptr,a
                                   2982 ;	nrf24l01.c:452: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      00278E 90 00 EB         [24] 2983 	mov	dptr,#_nrf24_write_PARM_2
      002791 74 AF            [12] 2984 	mov	a,#_register_new_value
      002793 F0               [24] 2985 	movx	@dptr,a
      002794 74 00            [12] 2986 	mov	a,#(_register_new_value >> 8)
      002796 A3               [24] 2987 	inc	dptr
      002797 F0               [24] 2988 	movx	@dptr,a
      002798 E4               [12] 2989 	clr	a
      002799 A3               [24] 2990 	inc	dptr
      00279A F0               [24] 2991 	movx	@dptr,a
      00279B 90 00 EE         [24] 2992 	mov	dptr,#_nrf24_write_PARM_3
      00279E 04               [12] 2993 	inc	a
      00279F F0               [24] 2994 	movx	@dptr,a
      0027A0 90 00 EF         [24] 2995 	mov	dptr,#_nrf24_write_PARM_4
      0027A3 E4               [12] 2996 	clr	a
      0027A4 F0               [24] 2997 	movx	@dptr,a
      0027A5 75 82 1D         [24] 2998 	mov	dpl,#0x1d
      0027A8 12 2D 16         [24] 2999 	lcall	_nrf24_write
                                   3000 ;	nrf24l01.c:453: dynamic_payload = DISABLE;
      0027AB 90 01 6F         [24] 3001 	mov	dptr,#_dynamic_payload
      0027AE E4               [12] 3002 	clr	a
      0027AF F0               [24] 3003 	movx	@dptr,a
                                   3004 ;	nrf24l01.c:455: }
      0027B0 22               [24] 3005 	ret
                                   3006 ;------------------------------------------------------------
                                   3007 ;Allocation info for local variables in function 'nrf24_datapipe_ptx'
                                   3008 ;------------------------------------------------------------
                                   3009 ;datapipe_number           Allocated with name '_nrf24_datapipe_ptx_datapipe_number_65536_175'
                                   3010 ;------------------------------------------------------------
                                   3011 ;	nrf24l01.c:458: void nrf24_datapipe_ptx(uint8_t datapipe_number)
                                   3012 ;	-----------------------------------------
                                   3013 ;	 function nrf24_datapipe_ptx
                                   3014 ;	-----------------------------------------
      0027B1                       3015 _nrf24_datapipe_ptx:
      0027B1 E5 82            [12] 3016 	mov	a,dpl
      0027B3 90 00 D4         [24] 3017 	mov	dptr,#_nrf24_datapipe_ptx_datapipe_number_65536_175
      0027B6 F0               [24] 3018 	movx	@dptr,a
                                   3019 ;	nrf24l01.c:460: nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
      0027B7 E0               [24] 3020 	movx	a,@dptr
      0027B8 FF               [12] 3021 	mov	r7,a
      0027B9 1F               [12] 3022 	dec	r7
      0027BA C2 D5            [12] 3023 	clr	F0
      0027BC 75 F0 05         [24] 3024 	mov	b,#0x05
      0027BF EF               [12] 3025 	mov	a,r7
      0027C0 30 E7 04         [24] 3026 	jnb	acc.7,00103$
      0027C3 B2 D5            [12] 3027 	cpl	F0
      0027C5 F4               [12] 3028 	cpl	a
      0027C6 04               [12] 3029 	inc	a
      0027C7                       3030 00103$:
      0027C7 A4               [48] 3031 	mul	ab
      0027C8 30 D5 0A         [24] 3032 	jnb	F0,00104$
      0027CB F4               [12] 3033 	cpl	a
      0027CC 24 01            [12] 3034 	add	a,#0x01
      0027CE C5 F0            [12] 3035 	xch	a,b
      0027D0 F4               [12] 3036 	cpl	a
      0027D1 34 00            [12] 3037 	addc	a,#0x00
      0027D3 C5 F0            [12] 3038 	xch	a,b
      0027D5                       3039 00104$:
      0027D5 24 70            [12] 3040 	add	a,#_datapipe_address
      0027D7 FE               [12] 3041 	mov	r6,a
      0027D8 74 01            [12] 3042 	mov	a,#(_datapipe_address >> 8)
      0027DA 35 F0            [12] 3043 	addc	a,b
      0027DC FF               [12] 3044 	mov	r7,a
      0027DD 7D 00            [12] 3045 	mov	r5,#0x00
      0027DF 90 00 B1         [24] 3046 	mov	dptr,#_current_address_width
      0027E2 E0               [24] 3047 	movx	a,@dptr
      0027E3 FC               [12] 3048 	mov	r4,a
      0027E4 90 00 EB         [24] 3049 	mov	dptr,#_nrf24_write_PARM_2
      0027E7 EE               [12] 3050 	mov	a,r6
      0027E8 F0               [24] 3051 	movx	@dptr,a
      0027E9 EF               [12] 3052 	mov	a,r7
      0027EA A3               [24] 3053 	inc	dptr
      0027EB F0               [24] 3054 	movx	@dptr,a
      0027EC ED               [12] 3055 	mov	a,r5
      0027ED A3               [24] 3056 	inc	dptr
      0027EE F0               [24] 3057 	movx	@dptr,a
      0027EF 90 00 EE         [24] 3058 	mov	dptr,#_nrf24_write_PARM_3
      0027F2 EC               [12] 3059 	mov	a,r4
      0027F3 F0               [24] 3060 	movx	@dptr,a
      0027F4 90 00 EF         [24] 3061 	mov	dptr,#_nrf24_write_PARM_4
      0027F7 E4               [12] 3062 	clr	a
      0027F8 F0               [24] 3063 	movx	@dptr,a
      0027F9 75 82 10         [24] 3064 	mov	dpl,#0x10
                                   3065 ;	nrf24l01.c:461: }
      0027FC 02 2D 16         [24] 3066 	ljmp	_nrf24_write
                                   3067 ;------------------------------------------------------------
                                   3068 ;Allocation info for local variables in function 'nrf24_datapipe_address_configuration'
                                   3069 ;------------------------------------------------------------
                                   3070 ;address                   Allocated with name '_nrf24_datapipe_address_configuration_address_65536_178'
                                   3071 ;counter                   Allocated with name '_nrf24_datapipe_address_configuration_counter_131072_179'
                                   3072 ;------------------------------------------------------------
                                   3073 ;	nrf24l01.c:464: void nrf24_datapipe_address_configuration(void)
                                   3074 ;	-----------------------------------------
                                   3075 ;	 function nrf24_datapipe_address_configuration
                                   3076 ;	-----------------------------------------
      0027FF                       3077 _nrf24_datapipe_address_configuration:
                                   3078 ;	nrf24l01.c:468: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      0027FF 7F 0A            [12] 3079 	mov	r7,#0x0a
      002801 7E 00            [12] 3080 	mov	r6,#0x00
      002803                       3081 00103$:
      002803 BE 02 00         [24] 3082 	cjne	r6,#0x02,00116$
      002806                       3083 00116$:
      002806 50 3A            [24] 3084 	jnc	00105$
                                   3085 ;	nrf24l01.c:470: nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
      002808 EE               [12] 3086 	mov	a,r6
      002809 75 F0 05         [24] 3087 	mov	b,#0x05
      00280C A4               [48] 3088 	mul	ab
      00280D 24 70            [12] 3089 	add	a,#_datapipe_address
      00280F FC               [12] 3090 	mov	r4,a
      002810 74 01            [12] 3091 	mov	a,#(_datapipe_address >> 8)
      002812 35 F0            [12] 3092 	addc	a,b
      002814 FD               [12] 3093 	mov	r5,a
      002815 7B 00            [12] 3094 	mov	r3,#0x00
      002817 90 00 B1         [24] 3095 	mov	dptr,#_current_address_width
      00281A E0               [24] 3096 	movx	a,@dptr
      00281B FA               [12] 3097 	mov	r2,a
      00281C 90 00 EB         [24] 3098 	mov	dptr,#_nrf24_write_PARM_2
      00281F EC               [12] 3099 	mov	a,r4
      002820 F0               [24] 3100 	movx	@dptr,a
      002821 ED               [12] 3101 	mov	a,r5
      002822 A3               [24] 3102 	inc	dptr
      002823 F0               [24] 3103 	movx	@dptr,a
      002824 EB               [12] 3104 	mov	a,r3
      002825 A3               [24] 3105 	inc	dptr
      002826 F0               [24] 3106 	movx	@dptr,a
      002827 90 00 EE         [24] 3107 	mov	dptr,#_nrf24_write_PARM_3
      00282A EA               [12] 3108 	mov	a,r2
      00282B F0               [24] 3109 	movx	@dptr,a
      00282C 90 00 EF         [24] 3110 	mov	dptr,#_nrf24_write_PARM_4
      00282F E4               [12] 3111 	clr	a
      002830 F0               [24] 3112 	movx	@dptr,a
      002831 8F 82            [24] 3113 	mov	dpl,r7
      002833 C0 07            [24] 3114 	push	ar7
      002835 C0 06            [24] 3115 	push	ar6
      002837 12 2D 16         [24] 3116 	lcall	_nrf24_write
      00283A D0 06            [24] 3117 	pop	ar6
      00283C D0 07            [24] 3118 	pop	ar7
                                   3119 ;	nrf24l01.c:471: address++;
      00283E 0F               [12] 3120 	inc	r7
                                   3121 ;	nrf24l01.c:468: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      00283F 0E               [12] 3122 	inc	r6
      002840 80 C1            [24] 3123 	sjmp	00103$
      002842                       3124 00105$:
                                   3125 ;	nrf24l01.c:473: }
      002842 22               [24] 3126 	ret
                                   3127 ;------------------------------------------------------------
                                   3128 ;Allocation info for local variables in function 'nrf24_prx_static_payload_width'
                                   3129 ;------------------------------------------------------------
                                   3130 ;number_of_datapipes       Allocated with name '_nrf24_prx_static_payload_width_PARM_2'
                                   3131 ;static_payload_width      Allocated with name '_nrf24_prx_static_payload_width_static_payload_width_65536_181'
                                   3132 ;address                   Allocated with name '_nrf24_prx_static_payload_width_address_131072_183'
                                   3133 ;------------------------------------------------------------
                                   3134 ;	nrf24l01.c:476: void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
                                   3135 ;	-----------------------------------------
                                   3136 ;	 function nrf24_prx_static_payload_width
                                   3137 ;	-----------------------------------------
      002843                       3138 _nrf24_prx_static_payload_width:
      002843 E5 82            [12] 3139 	mov	a,dpl
      002845 90 00 D6         [24] 3140 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      002848 F0               [24] 3141 	movx	@dptr,a
                                   3142 ;	nrf24l01.c:478: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      002849 7F 11            [12] 3143 	mov	r7,#0x11
      00284B 90 00 D5         [24] 3144 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      00284E E0               [24] 3145 	movx	a,@dptr
      00284F FE               [12] 3146 	mov	r6,a
      002850                       3147 00103$:
      002850 EE               [12] 3148 	mov	a,r6
      002851 60 28            [24] 3149 	jz	00101$
                                   3150 ;	nrf24l01.c:480: nrf24_write(address, &static_payload_width, 1, CLOSE);
      002853 90 00 EB         [24] 3151 	mov	dptr,#_nrf24_write_PARM_2
      002856 74 D6            [12] 3152 	mov	a,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      002858 F0               [24] 3153 	movx	@dptr,a
      002859 74 00            [12] 3154 	mov	a,#(_nrf24_prx_static_payload_width_static_payload_width_65536_181 >> 8)
      00285B A3               [24] 3155 	inc	dptr
      00285C F0               [24] 3156 	movx	@dptr,a
      00285D E4               [12] 3157 	clr	a
      00285E A3               [24] 3158 	inc	dptr
      00285F F0               [24] 3159 	movx	@dptr,a
      002860 90 00 EE         [24] 3160 	mov	dptr,#_nrf24_write_PARM_3
      002863 04               [12] 3161 	inc	a
      002864 F0               [24] 3162 	movx	@dptr,a
      002865 90 00 EF         [24] 3163 	mov	dptr,#_nrf24_write_PARM_4
      002868 E4               [12] 3164 	clr	a
      002869 F0               [24] 3165 	movx	@dptr,a
      00286A 8F 82            [24] 3166 	mov	dpl,r7
      00286C C0 07            [24] 3167 	push	ar7
      00286E C0 06            [24] 3168 	push	ar6
      002870 12 2D 16         [24] 3169 	lcall	_nrf24_write
      002873 D0 06            [24] 3170 	pop	ar6
      002875 D0 07            [24] 3171 	pop	ar7
                                   3172 ;	nrf24l01.c:481: address++;
      002877 0F               [12] 3173 	inc	r7
                                   3174 ;	nrf24l01.c:478: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      002878 1E               [12] 3175 	dec	r6
      002879 80 D5            [24] 3176 	sjmp	00103$
      00287B                       3177 00101$:
                                   3178 ;	nrf24l01.c:483: current_payload_width = static_payload_width;
      00287B 90 00 D6         [24] 3179 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      00287E E0               [24] 3180 	movx	a,@dptr
      00287F 90 00 B2         [24] 3181 	mov	dptr,#_current_payload_width
      002882 F0               [24] 3182 	movx	@dptr,a
                                   3183 ;	nrf24l01.c:484: }
      002883 22               [24] 3184 	ret
                                   3185 ;------------------------------------------------------------
                                   3186 ;Allocation info for local variables in function 'nrf24_datapipe_enable'
                                   3187 ;------------------------------------------------------------
                                   3188 ;number_of_datapipes       Allocated with name '_nrf24_datapipe_enable_number_of_datapipes_65536_185'
                                   3189 ;------------------------------------------------------------
                                   3190 ;	nrf24l01.c:487: void nrf24_datapipe_enable(uint8_t number_of_datapipes)
                                   3191 ;	-----------------------------------------
                                   3192 ;	 function nrf24_datapipe_enable
                                   3193 ;	-----------------------------------------
      002884                       3194 _nrf24_datapipe_enable:
      002884 E5 82            [12] 3195 	mov	a,dpl
      002886 90 00 D7         [24] 3196 	mov	dptr,#_nrf24_datapipe_enable_number_of_datapipes_65536_185
      002889 F0               [24] 3197 	movx	@dptr,a
                                   3198 ;	nrf24l01.c:489: register_new_value = (1 << number_of_datapipes) - 1;
      00288A E0               [24] 3199 	movx	a,@dptr
      00288B FF               [12] 3200 	mov	r7,a
      00288C 8F F0            [24] 3201 	mov	b,r7
      00288E 05 F0            [12] 3202 	inc	b
      002890 74 01            [12] 3203 	mov	a,#0x01
      002892 80 02            [24] 3204 	sjmp	00105$
      002894                       3205 00103$:
      002894 25 E0            [12] 3206 	add	a,acc
      002896                       3207 00105$:
      002896 D5 F0 FB         [24] 3208 	djnz	b,00103$
      002899 14               [12] 3209 	dec	a
      00289A 90 00 AF         [24] 3210 	mov	dptr,#_register_new_value
      00289D F0               [24] 3211 	movx	@dptr,a
                                   3212 ;	nrf24l01.c:490: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      00289E 90 00 EB         [24] 3213 	mov	dptr,#_nrf24_write_PARM_2
      0028A1 74 AF            [12] 3214 	mov	a,#_register_new_value
      0028A3 F0               [24] 3215 	movx	@dptr,a
      0028A4 74 00            [12] 3216 	mov	a,#(_register_new_value >> 8)
      0028A6 A3               [24] 3217 	inc	dptr
      0028A7 F0               [24] 3218 	movx	@dptr,a
      0028A8 E4               [12] 3219 	clr	a
      0028A9 A3               [24] 3220 	inc	dptr
      0028AA F0               [24] 3221 	movx	@dptr,a
      0028AB 90 00 EE         [24] 3222 	mov	dptr,#_nrf24_write_PARM_3
      0028AE 04               [12] 3223 	inc	a
      0028AF F0               [24] 3224 	movx	@dptr,a
      0028B0 90 00 EF         [24] 3225 	mov	dptr,#_nrf24_write_PARM_4
      0028B3 E4               [12] 3226 	clr	a
      0028B4 F0               [24] 3227 	movx	@dptr,a
      0028B5 75 82 02         [24] 3228 	mov	dpl,#0x02
                                   3229 ;	nrf24l01.c:491: }
      0028B8 02 2D 16         [24] 3230 	ljmp	_nrf24_write
                                   3231 ;------------------------------------------------------------
                                   3232 ;Allocation info for local variables in function 'nrf24_address_width'
                                   3233 ;------------------------------------------------------------
                                   3234 ;address_width             Allocated with name '_nrf24_address_width_address_width_65536_187'
                                   3235 ;------------------------------------------------------------
                                   3236 ;	nrf24l01.c:494: void nrf24_address_width(uint8_t address_width)
                                   3237 ;	-----------------------------------------
                                   3238 ;	 function nrf24_address_width
                                   3239 ;	-----------------------------------------
      0028BB                       3240 _nrf24_address_width:
      0028BB E5 82            [12] 3241 	mov	a,dpl
      0028BD 90 00 D8         [24] 3242 	mov	dptr,#_nrf24_address_width_address_width_65536_187
      0028C0 F0               [24] 3243 	movx	@dptr,a
                                   3244 ;	nrf24l01.c:496: if ((address_width <= 5) && (address_width >= 3))
      0028C1 E0               [24] 3245 	movx	a,@dptr
      0028C2 FF               [12] 3246 	mov  r7,a
      0028C3 24 FA            [12] 3247 	add	a,#0xff - 0x05
      0028C5 40 0E            [24] 3248 	jc	00102$
      0028C7 BF 03 00         [24] 3249 	cjne	r7,#0x03,00116$
      0028CA                       3250 00116$:
      0028CA 40 09            [24] 3251 	jc	00102$
                                   3252 ;	nrf24l01.c:498: write_pointer = address_width - 2;
      0028CC EF               [12] 3253 	mov	a,r7
      0028CD 24 FE            [12] 3254 	add	a,#0xfe
      0028CF 90 00 B0         [24] 3255 	mov	dptr,#_write_pointer
      0028D2 F0               [24] 3256 	movx	@dptr,a
      0028D3 80 06            [24] 3257 	sjmp	00103$
      0028D5                       3258 00102$:
                                   3259 ;	nrf24l01.c:502: write_pointer = 3;
      0028D5 90 00 B0         [24] 3260 	mov	dptr,#_write_pointer
      0028D8 74 03            [12] 3261 	mov	a,#0x03
      0028DA F0               [24] 3262 	movx	@dptr,a
      0028DB                       3263 00103$:
                                   3264 ;	nrf24l01.c:504: nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
      0028DB 90 00 EB         [24] 3265 	mov	dptr,#_nrf24_write_PARM_2
      0028DE 74 B0            [12] 3266 	mov	a,#_write_pointer
      0028E0 F0               [24] 3267 	movx	@dptr,a
      0028E1 74 00            [12] 3268 	mov	a,#(_write_pointer >> 8)
      0028E3 A3               [24] 3269 	inc	dptr
      0028E4 F0               [24] 3270 	movx	@dptr,a
      0028E5 E4               [12] 3271 	clr	a
      0028E6 A3               [24] 3272 	inc	dptr
      0028E7 F0               [24] 3273 	movx	@dptr,a
      0028E8 90 00 EE         [24] 3274 	mov	dptr,#_nrf24_write_PARM_3
      0028EB 04               [12] 3275 	inc	a
      0028EC F0               [24] 3276 	movx	@dptr,a
      0028ED 90 00 EF         [24] 3277 	mov	dptr,#_nrf24_write_PARM_4
      0028F0 E4               [12] 3278 	clr	a
      0028F1 F0               [24] 3279 	movx	@dptr,a
      0028F2 75 82 03         [24] 3280 	mov	dpl,#0x03
      0028F5 12 2D 16         [24] 3281 	lcall	_nrf24_write
                                   3282 ;	nrf24l01.c:505: current_address_width = address_width;
      0028F8 90 00 D8         [24] 3283 	mov	dptr,#_nrf24_address_width_address_width_65536_187
      0028FB E0               [24] 3284 	movx	a,@dptr
      0028FC 90 00 B1         [24] 3285 	mov	dptr,#_current_address_width
      0028FF F0               [24] 3286 	movx	@dptr,a
                                   3287 ;	nrf24l01.c:506: }
      002900 22               [24] 3288 	ret
                                   3289 ;------------------------------------------------------------
                                   3290 ;Allocation info for local variables in function 'nrf24_rf_datarate'
                                   3291 ;------------------------------------------------------------
                                   3292 ;rf_datarate               Allocated with name '_nrf24_rf_datarate_rf_datarate_65536_191'
                                   3293 ;------------------------------------------------------------
                                   3294 ;	nrf24l01.c:509: void nrf24_rf_datarate(uint16_t rf_datarate)
                                   3295 ;	-----------------------------------------
                                   3296 ;	 function nrf24_rf_datarate
                                   3297 ;	-----------------------------------------
      002901                       3298 _nrf24_rf_datarate:
      002901 AF 83            [24] 3299 	mov	r7,dph
      002903 E5 82            [12] 3300 	mov	a,dpl
      002905 90 00 D9         [24] 3301 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_191
      002908 F0               [24] 3302 	movx	@dptr,a
      002909 EF               [12] 3303 	mov	a,r7
      00290A A3               [24] 3304 	inc	dptr
      00290B F0               [24] 3305 	movx	@dptr,a
                                   3306 ;	nrf24l01.c:511: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      00290C 90 00 E5         [24] 3307 	mov	dptr,#_nrf24_read_PARM_2
      00290F 74 AE            [12] 3308 	mov	a,#_register_current_value
      002911 F0               [24] 3309 	movx	@dptr,a
      002912 74 00            [12] 3310 	mov	a,#(_register_current_value >> 8)
      002914 A3               [24] 3311 	inc	dptr
      002915 F0               [24] 3312 	movx	@dptr,a
      002916 E4               [12] 3313 	clr	a
      002917 A3               [24] 3314 	inc	dptr
      002918 F0               [24] 3315 	movx	@dptr,a
      002919 90 00 E8         [24] 3316 	mov	dptr,#_nrf24_read_PARM_3
      00291C 04               [12] 3317 	inc	a
      00291D F0               [24] 3318 	movx	@dptr,a
      00291E 90 00 E9         [24] 3319 	mov	dptr,#_nrf24_read_PARM_4
      002921 E4               [12] 3320 	clr	a
      002922 F0               [24] 3321 	movx	@dptr,a
      002923 75 82 06         [24] 3322 	mov	dpl,#0x06
      002926 12 2C AA         [24] 3323 	lcall	_nrf24_read
                                   3324 ;	nrf24l01.c:512: register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
      002929 90 00 AE         [24] 3325 	mov	dptr,#_register_current_value
      00292C E0               [24] 3326 	movx	a,@dptr
      00292D 53 E0 D7         [24] 3327 	anl	acc,#0xd7
      002930 F0               [24] 3328 	movx	@dptr,a
                                   3329 ;	nrf24l01.c:513: switch (rf_datarate)
      002931 90 00 D9         [24] 3330 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_191
      002934 E0               [24] 3331 	movx	a,@dptr
      002935 FE               [12] 3332 	mov	r6,a
      002936 A3               [24] 3333 	inc	dptr
      002937 E0               [24] 3334 	movx	a,@dptr
      002938 FF               [12] 3335 	mov	r7,a
      002939 BE FA 05         [24] 3336 	cjne	r6,#0xfa,00120$
      00293C BF 00 02         [24] 3337 	cjne	r7,#0x00,00120$
      00293F 80 24            [24] 3338 	sjmp	00103$
      002941                       3339 00120$:
      002941 BE E8 05         [24] 3340 	cjne	r6,#0xe8,00121$
      002944 BF 03 02         [24] 3341 	cjne	r7,#0x03,00121$
      002947 80 12            [24] 3342 	sjmp	00102$
      002949                       3343 00121$:
      002949 BE D0 25         [24] 3344 	cjne	r6,#0xd0,00104$
      00294C BF 07 22         [24] 3345 	cjne	r7,#0x07,00104$
                                   3346 ;	nrf24l01.c:516: register_new_value = register_current_value | (1 << RF_DR_HIGH);
      00294F 90 00 AE         [24] 3347 	mov	dptr,#_register_current_value
      002952 E0               [24] 3348 	movx	a,@dptr
      002953 90 00 AF         [24] 3349 	mov	dptr,#_register_new_value
      002956 44 08            [12] 3350 	orl	a,#0x08
      002958 F0               [24] 3351 	movx	@dptr,a
                                   3352 ;	nrf24l01.c:517: break;
                                   3353 ;	nrf24l01.c:518: case 1000:
      002959 80 1E            [24] 3354 	sjmp	00105$
      00295B                       3355 00102$:
                                   3356 ;	nrf24l01.c:519: register_new_value = register_current_value;
      00295B 90 00 AE         [24] 3357 	mov	dptr,#_register_current_value
      00295E E0               [24] 3358 	movx	a,@dptr
      00295F 90 00 AF         [24] 3359 	mov	dptr,#_register_new_value
      002962 F0               [24] 3360 	movx	@dptr,a
                                   3361 ;	nrf24l01.c:520: break;
                                   3362 ;	nrf24l01.c:521: case 250:
      002963 80 14            [24] 3363 	sjmp	00105$
      002965                       3364 00103$:
                                   3365 ;	nrf24l01.c:522: register_new_value = register_current_value | (1 << RF_DR_LOW);
      002965 90 00 AE         [24] 3366 	mov	dptr,#_register_current_value
      002968 E0               [24] 3367 	movx	a,@dptr
      002969 90 00 AF         [24] 3368 	mov	dptr,#_register_new_value
      00296C 44 20            [12] 3369 	orl	a,#0x20
      00296E F0               [24] 3370 	movx	@dptr,a
                                   3371 ;	nrf24l01.c:523: break;
                                   3372 ;	nrf24l01.c:524: default:
      00296F 80 08            [24] 3373 	sjmp	00105$
      002971                       3374 00104$:
                                   3375 ;	nrf24l01.c:525: register_new_value = register_current_value;
      002971 90 00 AE         [24] 3376 	mov	dptr,#_register_current_value
      002974 E0               [24] 3377 	movx	a,@dptr
      002975 90 00 AF         [24] 3378 	mov	dptr,#_register_new_value
      002978 F0               [24] 3379 	movx	@dptr,a
                                   3380 ;	nrf24l01.c:527: }
      002979                       3381 00105$:
                                   3382 ;	nrf24l01.c:528: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      002979 90 00 EB         [24] 3383 	mov	dptr,#_nrf24_write_PARM_2
      00297C 74 AF            [12] 3384 	mov	a,#_register_new_value
      00297E F0               [24] 3385 	movx	@dptr,a
      00297F 74 00            [12] 3386 	mov	a,#(_register_new_value >> 8)
      002981 A3               [24] 3387 	inc	dptr
      002982 F0               [24] 3388 	movx	@dptr,a
      002983 E4               [12] 3389 	clr	a
      002984 A3               [24] 3390 	inc	dptr
      002985 F0               [24] 3391 	movx	@dptr,a
      002986 90 00 EE         [24] 3392 	mov	dptr,#_nrf24_write_PARM_3
      002989 04               [12] 3393 	inc	a
      00298A F0               [24] 3394 	movx	@dptr,a
      00298B 90 00 EF         [24] 3395 	mov	dptr,#_nrf24_write_PARM_4
      00298E E4               [12] 3396 	clr	a
      00298F F0               [24] 3397 	movx	@dptr,a
      002990 75 82 06         [24] 3398 	mov	dpl,#0x06
                                   3399 ;	nrf24l01.c:529: }
      002993 02 2D 16         [24] 3400 	ljmp	_nrf24_write
                                   3401 ;------------------------------------------------------------
                                   3402 ;Allocation info for local variables in function 'nrf24_rf_power'
                                   3403 ;------------------------------------------------------------
                                   3404 ;rf_power                  Allocated with name '_nrf24_rf_power_rf_power_65536_194'
                                   3405 ;------------------------------------------------------------
                                   3406 ;	nrf24l01.c:532: void nrf24_rf_power(uint8_t rf_power)
                                   3407 ;	-----------------------------------------
                                   3408 ;	 function nrf24_rf_power
                                   3409 ;	-----------------------------------------
      002996                       3410 _nrf24_rf_power:
      002996 E5 82            [12] 3411 	mov	a,dpl
      002998 90 00 DB         [24] 3412 	mov	dptr,#_nrf24_rf_power_rf_power_65536_194
      00299B F0               [24] 3413 	movx	@dptr,a
                                   3414 ;	nrf24l01.c:534: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      00299C 90 00 E5         [24] 3415 	mov	dptr,#_nrf24_read_PARM_2
      00299F 74 AE            [12] 3416 	mov	a,#_register_current_value
      0029A1 F0               [24] 3417 	movx	@dptr,a
      0029A2 74 00            [12] 3418 	mov	a,#(_register_current_value >> 8)
      0029A4 A3               [24] 3419 	inc	dptr
      0029A5 F0               [24] 3420 	movx	@dptr,a
      0029A6 E4               [12] 3421 	clr	a
      0029A7 A3               [24] 3422 	inc	dptr
      0029A8 F0               [24] 3423 	movx	@dptr,a
      0029A9 90 00 E8         [24] 3424 	mov	dptr,#_nrf24_read_PARM_3
      0029AC 04               [12] 3425 	inc	a
      0029AD F0               [24] 3426 	movx	@dptr,a
      0029AE 90 00 E9         [24] 3427 	mov	dptr,#_nrf24_read_PARM_4
      0029B1 E4               [12] 3428 	clr	a
      0029B2 F0               [24] 3429 	movx	@dptr,a
      0029B3 75 82 06         [24] 3430 	mov	dpl,#0x06
      0029B6 12 2C AA         [24] 3431 	lcall	_nrf24_read
                                   3432 ;	nrf24l01.c:535: register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
      0029B9 90 00 AE         [24] 3433 	mov	dptr,#_register_current_value
      0029BC E0               [24] 3434 	movx	a,@dptr
      0029BD 53 E0 F9         [24] 3435 	anl	acc,#0xf9
      0029C0 F0               [24] 3436 	movx	@dptr,a
                                   3437 ;	nrf24l01.c:536: switch (rf_power)
      0029C1 90 00 DB         [24] 3438 	mov	dptr,#_nrf24_rf_power_rf_power_65536_194
      0029C4 E0               [24] 3439 	movx	a,@dptr
      0029C5 FF               [12] 3440 	mov	r7,a
      0029C6 60 0F            [24] 3441 	jz	00101$
      0029C8 BF 06 02         [24] 3442 	cjne	r7,#0x06,00126$
      0029CB 80 16            [24] 3443 	sjmp	00102$
      0029CD                       3444 00126$:
      0029CD BF 0C 02         [24] 3445 	cjne	r7,#0x0c,00127$
      0029D0 80 1D            [24] 3446 	sjmp	00103$
      0029D2                       3447 00127$:
                                   3448 ;	nrf24l01.c:538: case 0:
      0029D2 BF 12 30         [24] 3449 	cjne	r7,#0x12,00105$
      0029D5 80 24            [24] 3450 	sjmp	00104$
      0029D7                       3451 00101$:
                                   3452 ;	nrf24l01.c:539: register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
      0029D7 90 00 AE         [24] 3453 	mov	dptr,#_register_current_value
      0029DA E0               [24] 3454 	movx	a,@dptr
      0029DB 90 00 AF         [24] 3455 	mov	dptr,#_register_new_value
      0029DE 44 06            [12] 3456 	orl	a,#0x06
      0029E0 F0               [24] 3457 	movx	@dptr,a
                                   3458 ;	nrf24l01.c:540: break;
                                   3459 ;	nrf24l01.c:541: case 6:
      0029E1 80 2C            [24] 3460 	sjmp	00106$
      0029E3                       3461 00102$:
                                   3462 ;	nrf24l01.c:542: register_new_value = register_current_value | (1 << RF_PWR_1);
      0029E3 90 00 AE         [24] 3463 	mov	dptr,#_register_current_value
      0029E6 E0               [24] 3464 	movx	a,@dptr
      0029E7 90 00 AF         [24] 3465 	mov	dptr,#_register_new_value
      0029EA 44 04            [12] 3466 	orl	a,#0x04
      0029EC F0               [24] 3467 	movx	@dptr,a
                                   3468 ;	nrf24l01.c:543: break;
                                   3469 ;	nrf24l01.c:544: case 12:
      0029ED 80 20            [24] 3470 	sjmp	00106$
      0029EF                       3471 00103$:
                                   3472 ;	nrf24l01.c:545: register_new_value = register_current_value | (1 << RF_PWR_0);
      0029EF 90 00 AE         [24] 3473 	mov	dptr,#_register_current_value
      0029F2 E0               [24] 3474 	movx	a,@dptr
      0029F3 90 00 AF         [24] 3475 	mov	dptr,#_register_new_value
      0029F6 44 02            [12] 3476 	orl	a,#0x02
      0029F8 F0               [24] 3477 	movx	@dptr,a
                                   3478 ;	nrf24l01.c:546: break;
                                   3479 ;	nrf24l01.c:547: case 18:
      0029F9 80 14            [24] 3480 	sjmp	00106$
      0029FB                       3481 00104$:
                                   3482 ;	nrf24l01.c:548: register_new_value = register_current_value;
      0029FB 90 00 AE         [24] 3483 	mov	dptr,#_register_current_value
      0029FE E0               [24] 3484 	movx	a,@dptr
      0029FF 90 00 AF         [24] 3485 	mov	dptr,#_register_new_value
      002A02 F0               [24] 3486 	movx	@dptr,a
                                   3487 ;	nrf24l01.c:549: break;
                                   3488 ;	nrf24l01.c:550: default:
      002A03 80 0A            [24] 3489 	sjmp	00106$
      002A05                       3490 00105$:
                                   3491 ;	nrf24l01.c:551: register_new_value = register_current_value | (1 << RF_PWR_1);
      002A05 90 00 AE         [24] 3492 	mov	dptr,#_register_current_value
      002A08 E0               [24] 3493 	movx	a,@dptr
      002A09 90 00 AF         [24] 3494 	mov	dptr,#_register_new_value
      002A0C 44 04            [12] 3495 	orl	a,#0x04
      002A0E F0               [24] 3496 	movx	@dptr,a
                                   3497 ;	nrf24l01.c:553: }
      002A0F                       3498 00106$:
                                   3499 ;	nrf24l01.c:554: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      002A0F 90 00 EB         [24] 3500 	mov	dptr,#_nrf24_write_PARM_2
      002A12 74 AF            [12] 3501 	mov	a,#_register_new_value
      002A14 F0               [24] 3502 	movx	@dptr,a
      002A15 74 00            [12] 3503 	mov	a,#(_register_new_value >> 8)
      002A17 A3               [24] 3504 	inc	dptr
      002A18 F0               [24] 3505 	movx	@dptr,a
      002A19 E4               [12] 3506 	clr	a
      002A1A A3               [24] 3507 	inc	dptr
      002A1B F0               [24] 3508 	movx	@dptr,a
      002A1C 90 00 EE         [24] 3509 	mov	dptr,#_nrf24_write_PARM_3
      002A1F 04               [12] 3510 	inc	a
      002A20 F0               [24] 3511 	movx	@dptr,a
      002A21 90 00 EF         [24] 3512 	mov	dptr,#_nrf24_write_PARM_4
      002A24 E4               [12] 3513 	clr	a
      002A25 F0               [24] 3514 	movx	@dptr,a
      002A26 75 82 06         [24] 3515 	mov	dpl,#0x06
                                   3516 ;	nrf24l01.c:555: }
      002A29 02 2D 16         [24] 3517 	ljmp	_nrf24_write
                                   3518 ;------------------------------------------------------------
                                   3519 ;Allocation info for local variables in function 'nrf24_rf_channel'
                                   3520 ;------------------------------------------------------------
                                   3521 ;rf_channel                Allocated with name '_nrf24_rf_channel_rf_channel_65536_197'
                                   3522 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_199'
                                   3523 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_200'
                                   3524 ;------------------------------------------------------------
                                   3525 ;	nrf24l01.c:558: void nrf24_rf_channel(uint8_t rf_channel)
                                   3526 ;	-----------------------------------------
                                   3527 ;	 function nrf24_rf_channel
                                   3528 ;	-----------------------------------------
      002A2C                       3529 _nrf24_rf_channel:
      002A2C E5 82            [12] 3530 	mov	a,dpl
      002A2E 90 00 DC         [24] 3531 	mov	dptr,#_nrf24_rf_channel_rf_channel_65536_197
      002A31 F0               [24] 3532 	movx	@dptr,a
                                   3533 ;	nrf24l01.c:560: if ((rf_channel <= 125) && (rf_channel >= 1))
      002A32 E0               [24] 3534 	movx	a,@dptr
      002A33 FF               [12] 3535 	mov  r7,a
      002A34 24 82            [12] 3536 	add	a,#0xff - 0x7d
      002A36 40 27            [24] 3537 	jc	00102$
      002A38 BF 01 00         [24] 3538 	cjne	r7,#0x01,00116$
      002A3B                       3539 00116$:
      002A3B 40 22            [24] 3540 	jc	00102$
                                   3541 ;	nrf24l01.c:562: uint8_t write_pointer = rf_channel;
      002A3D 90 00 DD         [24] 3542 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_199
      002A40 EF               [12] 3543 	mov	a,r7
      002A41 F0               [24] 3544 	movx	@dptr,a
                                   3545 ;	nrf24l01.c:563: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      002A42 90 00 EB         [24] 3546 	mov	dptr,#_nrf24_write_PARM_2
      002A45 74 DD            [12] 3547 	mov	a,#_nrf24_rf_channel_write_pointer_131072_199
      002A47 F0               [24] 3548 	movx	@dptr,a
      002A48 74 00            [12] 3549 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_199 >> 8)
      002A4A A3               [24] 3550 	inc	dptr
      002A4B F0               [24] 3551 	movx	@dptr,a
      002A4C E4               [12] 3552 	clr	a
      002A4D A3               [24] 3553 	inc	dptr
      002A4E F0               [24] 3554 	movx	@dptr,a
      002A4F 90 00 EE         [24] 3555 	mov	dptr,#_nrf24_write_PARM_3
      002A52 04               [12] 3556 	inc	a
      002A53 F0               [24] 3557 	movx	@dptr,a
      002A54 90 00 EF         [24] 3558 	mov	dptr,#_nrf24_write_PARM_4
      002A57 E4               [12] 3559 	clr	a
      002A58 F0               [24] 3560 	movx	@dptr,a
      002A59 75 82 05         [24] 3561 	mov	dpl,#0x05
      002A5C 02 2D 16         [24] 3562 	ljmp	_nrf24_write
      002A5F                       3563 00102$:
                                   3564 ;	nrf24l01.c:567: uint8_t write_pointer = 1;
      002A5F 90 00 DE         [24] 3565 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_200
      002A62 74 01            [12] 3566 	mov	a,#0x01
      002A64 F0               [24] 3567 	movx	@dptr,a
                                   3568 ;	nrf24l01.c:568: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      002A65 90 00 EB         [24] 3569 	mov	dptr,#_nrf24_write_PARM_2
      002A68 74 DE            [12] 3570 	mov	a,#_nrf24_rf_channel_write_pointer_131072_200
      002A6A F0               [24] 3571 	movx	@dptr,a
      002A6B 74 00            [12] 3572 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_200 >> 8)
      002A6D A3               [24] 3573 	inc	dptr
      002A6E F0               [24] 3574 	movx	@dptr,a
      002A6F E4               [12] 3575 	clr	a
      002A70 A3               [24] 3576 	inc	dptr
      002A71 F0               [24] 3577 	movx	@dptr,a
      002A72 90 00 EE         [24] 3578 	mov	dptr,#_nrf24_write_PARM_3
      002A75 04               [12] 3579 	inc	a
      002A76 F0               [24] 3580 	movx	@dptr,a
      002A77 90 00 EF         [24] 3581 	mov	dptr,#_nrf24_write_PARM_4
      002A7A E4               [12] 3582 	clr	a
      002A7B F0               [24] 3583 	movx	@dptr,a
      002A7C 75 82 05         [24] 3584 	mov	dpl,#0x05
                                   3585 ;	nrf24l01.c:570: }
      002A7F 02 2D 16         [24] 3586 	ljmp	_nrf24_write
                                   3587 ;------------------------------------------------------------
                                   3588 ;Allocation info for local variables in function 'nrf24_interrupt_mask'
                                   3589 ;------------------------------------------------------------
                                   3590 ;tx_mask                   Allocated with name '_nrf24_interrupt_mask_PARM_2'
                                   3591 ;max_rt_mask               Allocated with name '_nrf24_interrupt_mask_PARM_3'
                                   3592 ;rx_mask                   Allocated with name '_nrf24_interrupt_mask_rx_mask_65536_201'
                                   3593 ;------------------------------------------------------------
                                   3594 ;	nrf24l01.c:573: void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
                                   3595 ;	-----------------------------------------
                                   3596 ;	 function nrf24_interrupt_mask
                                   3597 ;	-----------------------------------------
      002A82                       3598 _nrf24_interrupt_mask:
      002A82 E5 82            [12] 3599 	mov	a,dpl
      002A84 90 00 E1         [24] 3600 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_201
      002A87 F0               [24] 3601 	movx	@dptr,a
                                   3602 ;	nrf24l01.c:575: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      002A88 90 00 E5         [24] 3603 	mov	dptr,#_nrf24_read_PARM_2
      002A8B 74 AE            [12] 3604 	mov	a,#_register_current_value
      002A8D F0               [24] 3605 	movx	@dptr,a
      002A8E 74 00            [12] 3606 	mov	a,#(_register_current_value >> 8)
      002A90 A3               [24] 3607 	inc	dptr
      002A91 F0               [24] 3608 	movx	@dptr,a
      002A92 E4               [12] 3609 	clr	a
      002A93 A3               [24] 3610 	inc	dptr
      002A94 F0               [24] 3611 	movx	@dptr,a
      002A95 90 00 E8         [24] 3612 	mov	dptr,#_nrf24_read_PARM_3
      002A98 04               [12] 3613 	inc	a
      002A99 F0               [24] 3614 	movx	@dptr,a
      002A9A 90 00 E9         [24] 3615 	mov	dptr,#_nrf24_read_PARM_4
      002A9D E4               [12] 3616 	clr	a
      002A9E F0               [24] 3617 	movx	@dptr,a
      002A9F 75 82 00         [24] 3618 	mov	dpl,#0x00
      002AA2 12 2C AA         [24] 3619 	lcall	_nrf24_read
                                   3620 ;	nrf24l01.c:576: if (rx_mask)
      002AA5 90 00 E1         [24] 3621 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_201
      002AA8 E0               [24] 3622 	movx	a,@dptr
      002AA9 60 0C            [24] 3623 	jz	00102$
                                   3624 ;	nrf24l01.c:577: register_new_value = (register_current_value) | (1 << MASK_RX_DR);
      002AAB 90 00 AE         [24] 3625 	mov	dptr,#_register_current_value
      002AAE E0               [24] 3626 	movx	a,@dptr
      002AAF 90 00 AF         [24] 3627 	mov	dptr,#_register_new_value
      002AB2 44 40            [12] 3628 	orl	a,#0x40
      002AB4 F0               [24] 3629 	movx	@dptr,a
      002AB5 80 08            [24] 3630 	sjmp	00103$
      002AB7                       3631 00102$:
                                   3632 ;	nrf24l01.c:579: register_new_value &= (~(1 << MASK_RX_DR));
      002AB7 90 00 AF         [24] 3633 	mov	dptr,#_register_new_value
      002ABA E0               [24] 3634 	movx	a,@dptr
      002ABB 53 E0 BF         [24] 3635 	anl	acc,#0xbf
      002ABE F0               [24] 3636 	movx	@dptr,a
      002ABF                       3637 00103$:
                                   3638 ;	nrf24l01.c:580: if (tx_mask)
      002ABF 90 00 DF         [24] 3639 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      002AC2 E0               [24] 3640 	movx	a,@dptr
      002AC3 60 0A            [24] 3641 	jz	00105$
                                   3642 ;	nrf24l01.c:581: register_new_value |= (1 << MASK_TX_DS);
      002AC5 90 00 AF         [24] 3643 	mov	dptr,#_register_new_value
      002AC8 E0               [24] 3644 	movx	a,@dptr
      002AC9 43 E0 20         [24] 3645 	orl	acc,#0x20
      002ACC F0               [24] 3646 	movx	@dptr,a
      002ACD 80 08            [24] 3647 	sjmp	00106$
      002ACF                       3648 00105$:
                                   3649 ;	nrf24l01.c:583: register_new_value &= (~(1 << MASK_TX_DS));
      002ACF 90 00 AF         [24] 3650 	mov	dptr,#_register_new_value
      002AD2 E0               [24] 3651 	movx	a,@dptr
      002AD3 53 E0 DF         [24] 3652 	anl	acc,#0xdf
      002AD6 F0               [24] 3653 	movx	@dptr,a
      002AD7                       3654 00106$:
                                   3655 ;	nrf24l01.c:584: if (max_rt_mask)
      002AD7 90 00 E0         [24] 3656 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      002ADA E0               [24] 3657 	movx	a,@dptr
      002ADB 60 0A            [24] 3658 	jz	00108$
                                   3659 ;	nrf24l01.c:585: register_new_value |= (1 << MASK_MAX_RT);
      002ADD 90 00 AF         [24] 3660 	mov	dptr,#_register_new_value
      002AE0 E0               [24] 3661 	movx	a,@dptr
      002AE1 43 E0 10         [24] 3662 	orl	acc,#0x10
      002AE4 F0               [24] 3663 	movx	@dptr,a
      002AE5 80 08            [24] 3664 	sjmp	00109$
      002AE7                       3665 00108$:
                                   3666 ;	nrf24l01.c:587: register_new_value &= (~(1 << MASK_MAX_RT));
      002AE7 90 00 AF         [24] 3667 	mov	dptr,#_register_new_value
      002AEA E0               [24] 3668 	movx	a,@dptr
      002AEB 53 E0 EF         [24] 3669 	anl	acc,#0xef
      002AEE F0               [24] 3670 	movx	@dptr,a
      002AEF                       3671 00109$:
                                   3672 ;	nrf24l01.c:589: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002AEF 90 00 EB         [24] 3673 	mov	dptr,#_nrf24_write_PARM_2
      002AF2 74 AF            [12] 3674 	mov	a,#_register_new_value
      002AF4 F0               [24] 3675 	movx	@dptr,a
      002AF5 74 00            [12] 3676 	mov	a,#(_register_new_value >> 8)
      002AF7 A3               [24] 3677 	inc	dptr
      002AF8 F0               [24] 3678 	movx	@dptr,a
      002AF9 E4               [12] 3679 	clr	a
      002AFA A3               [24] 3680 	inc	dptr
      002AFB F0               [24] 3681 	movx	@dptr,a
      002AFC 90 00 EE         [24] 3682 	mov	dptr,#_nrf24_write_PARM_3
      002AFF 04               [12] 3683 	inc	a
      002B00 F0               [24] 3684 	movx	@dptr,a
      002B01 90 00 EF         [24] 3685 	mov	dptr,#_nrf24_write_PARM_4
      002B04 E4               [12] 3686 	clr	a
      002B05 F0               [24] 3687 	movx	@dptr,a
      002B06 75 82 00         [24] 3688 	mov	dpl,#0x00
                                   3689 ;	nrf24l01.c:590: }
      002B09 02 2D 16         [24] 3690 	ljmp	_nrf24_write
                                   3691 ;------------------------------------------------------------
                                   3692 ;Allocation info for local variables in function 'nrf24_crc_configuration'
                                   3693 ;------------------------------------------------------------
                                   3694 ;crc_encoding_scheme       Allocated with name '_nrf24_crc_configuration_PARM_2'
                                   3695 ;crc_enable                Allocated with name '_nrf24_crc_configuration_crc_enable_65536_203'
                                   3696 ;------------------------------------------------------------
                                   3697 ;	nrf24l01.c:593: void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
                                   3698 ;	-----------------------------------------
                                   3699 ;	 function nrf24_crc_configuration
                                   3700 ;	-----------------------------------------
      002B0C                       3701 _nrf24_crc_configuration:
      002B0C E5 82            [12] 3702 	mov	a,dpl
      002B0E 90 00 E3         [24] 3703 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_203
      002B11 F0               [24] 3704 	movx	@dptr,a
                                   3705 ;	nrf24l01.c:595: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      002B12 90 00 E5         [24] 3706 	mov	dptr,#_nrf24_read_PARM_2
      002B15 74 AE            [12] 3707 	mov	a,#_register_current_value
      002B17 F0               [24] 3708 	movx	@dptr,a
      002B18 74 00            [12] 3709 	mov	a,#(_register_current_value >> 8)
      002B1A A3               [24] 3710 	inc	dptr
      002B1B F0               [24] 3711 	movx	@dptr,a
      002B1C E4               [12] 3712 	clr	a
      002B1D A3               [24] 3713 	inc	dptr
      002B1E F0               [24] 3714 	movx	@dptr,a
      002B1F 90 00 E8         [24] 3715 	mov	dptr,#_nrf24_read_PARM_3
      002B22 04               [12] 3716 	inc	a
      002B23 F0               [24] 3717 	movx	@dptr,a
      002B24 90 00 E9         [24] 3718 	mov	dptr,#_nrf24_read_PARM_4
      002B27 E4               [12] 3719 	clr	a
      002B28 F0               [24] 3720 	movx	@dptr,a
      002B29 75 82 00         [24] 3721 	mov	dpl,#0x00
      002B2C 12 2C AA         [24] 3722 	lcall	_nrf24_read
                                   3723 ;	nrf24l01.c:596: if (crc_enable)
      002B2F 90 00 E3         [24] 3724 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_203
      002B32 E0               [24] 3725 	movx	a,@dptr
      002B33 60 0C            [24] 3726 	jz	00102$
                                   3727 ;	nrf24l01.c:597: register_new_value = (register_current_value) | (1 << EN_CRC);
      002B35 90 00 AE         [24] 3728 	mov	dptr,#_register_current_value
      002B38 E0               [24] 3729 	movx	a,@dptr
      002B39 90 00 AF         [24] 3730 	mov	dptr,#_register_new_value
      002B3C 44 08            [12] 3731 	orl	a,#0x08
      002B3E F0               [24] 3732 	movx	@dptr,a
      002B3F 80 08            [24] 3733 	sjmp	00103$
      002B41                       3734 00102$:
                                   3735 ;	nrf24l01.c:599: register_new_value &= (~(1 << EN_CRC));
      002B41 90 00 AF         [24] 3736 	mov	dptr,#_register_new_value
      002B44 E0               [24] 3737 	movx	a,@dptr
      002B45 53 E0 F7         [24] 3738 	anl	acc,#0xf7
      002B48 F0               [24] 3739 	movx	@dptr,a
      002B49                       3740 00103$:
                                   3741 ;	nrf24l01.c:600: if (crc_encoding_scheme == 2)
      002B49 90 00 E2         [24] 3742 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      002B4C E0               [24] 3743 	movx	a,@dptr
      002B4D FF               [12] 3744 	mov	r7,a
      002B4E BF 02 0A         [24] 3745 	cjne	r7,#0x02,00105$
                                   3746 ;	nrf24l01.c:601: register_new_value |= (1 << CRCO);
      002B51 90 00 AF         [24] 3747 	mov	dptr,#_register_new_value
      002B54 E0               [24] 3748 	movx	a,@dptr
      002B55 43 E0 04         [24] 3749 	orl	acc,#0x04
      002B58 F0               [24] 3750 	movx	@dptr,a
      002B59 80 08            [24] 3751 	sjmp	00106$
      002B5B                       3752 00105$:
                                   3753 ;	nrf24l01.c:603: register_new_value &= (~(1 << CRCO));
      002B5B 90 00 AF         [24] 3754 	mov	dptr,#_register_new_value
      002B5E E0               [24] 3755 	movx	a,@dptr
      002B5F 53 E0 FB         [24] 3756 	anl	acc,#0xfb
      002B62 F0               [24] 3757 	movx	@dptr,a
      002B63                       3758 00106$:
                                   3759 ;	nrf24l01.c:605: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002B63 90 00 EB         [24] 3760 	mov	dptr,#_nrf24_write_PARM_2
      002B66 74 AF            [12] 3761 	mov	a,#_register_new_value
      002B68 F0               [24] 3762 	movx	@dptr,a
      002B69 74 00            [12] 3763 	mov	a,#(_register_new_value >> 8)
      002B6B A3               [24] 3764 	inc	dptr
      002B6C F0               [24] 3765 	movx	@dptr,a
      002B6D E4               [12] 3766 	clr	a
      002B6E A3               [24] 3767 	inc	dptr
      002B6F F0               [24] 3768 	movx	@dptr,a
      002B70 90 00 EE         [24] 3769 	mov	dptr,#_nrf24_write_PARM_3
      002B73 04               [12] 3770 	inc	a
      002B74 F0               [24] 3771 	movx	@dptr,a
      002B75 90 00 EF         [24] 3772 	mov	dptr,#_nrf24_write_PARM_4
      002B78 E4               [12] 3773 	clr	a
      002B79 F0               [24] 3774 	movx	@dptr,a
      002B7A 75 82 00         [24] 3775 	mov	dpl,#0x00
                                   3776 ;	nrf24l01.c:606: }
      002B7D 02 2D 16         [24] 3777 	ljmp	_nrf24_write
                                   3778 ;------------------------------------------------------------
                                   3779 ;Allocation info for local variables in function 'nrf24_mode'
                                   3780 ;------------------------------------------------------------
                                   3781 ;mode                      Allocated with name '_nrf24_mode_mode_65536_205'
                                   3782 ;------------------------------------------------------------
                                   3783 ;	nrf24l01.c:609: void nrf24_mode(uint8_t mode)
                                   3784 ;	-----------------------------------------
                                   3785 ;	 function nrf24_mode
                                   3786 ;	-----------------------------------------
      002B80                       3787 _nrf24_mode:
      002B80 E5 82            [12] 3788 	mov	a,dpl
      002B82 90 00 E4         [24] 3789 	mov	dptr,#_nrf24_mode_mode_65536_205
      002B85 F0               [24] 3790 	movx	@dptr,a
                                   3791 ;	nrf24l01.c:611: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      002B86 90 00 E5         [24] 3792 	mov	dptr,#_nrf24_read_PARM_2
      002B89 74 AE            [12] 3793 	mov	a,#_register_current_value
      002B8B F0               [24] 3794 	movx	@dptr,a
      002B8C 74 00            [12] 3795 	mov	a,#(_register_current_value >> 8)
      002B8E A3               [24] 3796 	inc	dptr
      002B8F F0               [24] 3797 	movx	@dptr,a
      002B90 E4               [12] 3798 	clr	a
      002B91 A3               [24] 3799 	inc	dptr
      002B92 F0               [24] 3800 	movx	@dptr,a
      002B93 90 00 E8         [24] 3801 	mov	dptr,#_nrf24_read_PARM_3
      002B96 04               [12] 3802 	inc	a
      002B97 F0               [24] 3803 	movx	@dptr,a
      002B98 90 00 E9         [24] 3804 	mov	dptr,#_nrf24_read_PARM_4
      002B9B E4               [12] 3805 	clr	a
      002B9C F0               [24] 3806 	movx	@dptr,a
      002B9D 75 82 00         [24] 3807 	mov	dpl,#0x00
      002BA0 12 2C AA         [24] 3808 	lcall	_nrf24_read
                                   3809 ;	nrf24l01.c:612: switch (mode)
      002BA3 90 00 E4         [24] 3810 	mov	dptr,#_nrf24_mode_mode_65536_205
      002BA6 E0               [24] 3811 	movx	a,@dptr
      002BA7 FF               [12] 3812 	mov  r7,a
      002BA8 24 FB            [12] 3813 	add	a,#0xff - 0x04
      002BAA 50 03            [24] 3814 	jnc	00114$
      002BAC 02 2C 66         [24] 3815 	ljmp	00106$
      002BAF                       3816 00114$:
      002BAF EF               [12] 3817 	mov	a,r7
      002BB0 2F               [12] 3818 	add	a,r7
      002BB1 2F               [12] 3819 	add	a,r7
      002BB2 90 2B B6         [24] 3820 	mov	dptr,#00115$
      002BB5 73               [24] 3821 	jmp	@a+dptr
      002BB6                       3822 00115$:
      002BB6 02 2B C5         [24] 3823 	ljmp	00101$
      002BB9 02 2B E5         [24] 3824 	ljmp	00102$
      002BBC 02 2C 05         [24] 3825 	ljmp	00103$
      002BBF 02 2C 26         [24] 3826 	ljmp	00104$
      002BC2 02 2C 47         [24] 3827 	ljmp	00105$
                                   3828 ;	nrf24l01.c:614: case POWER_DOWN:
      002BC5                       3829 00101$:
                                   3830 ;	nrf24l01.c:615: nrf24_CE(CE_OFF);
      002BC5 75 82 00         [24] 3831 	mov	dpl,#0x00
      002BC8 C0 07            [24] 3832 	push	ar7
      002BCA 12 1D DF         [24] 3833 	lcall	_nrf24_CE
                                   3834 ;	nrf24l01.c:616: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      002BCD 90 00 AE         [24] 3835 	mov	dptr,#_register_current_value
      002BD0 E0               [24] 3836 	movx	a,@dptr
      002BD1 90 00 AF         [24] 3837 	mov	dptr,#_register_new_value
      002BD4 54 FD            [12] 3838 	anl	a,#0xfd
      002BD6 F0               [24] 3839 	movx	@dptr,a
                                   3840 ;	nrf24l01.c:617: delay_function(POWER_DOWN_DELAY);
      002BD7 90 00 02         [24] 3841 	mov	dptr,#(0x02&0x00ff)
      002BDA E4               [12] 3842 	clr	a
      002BDB F5 F0            [12] 3843 	mov	b,a
      002BDD 12 1D 10         [24] 3844 	lcall	_delay_function
      002BE0 D0 07            [24] 3845 	pop	ar7
                                   3846 ;	nrf24l01.c:618: break;
      002BE2 02 2C 83         [24] 3847 	ljmp	00107$
                                   3848 ;	nrf24l01.c:619: case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
      002BE5                       3849 00102$:
                                   3850 ;	nrf24l01.c:620: nrf24_CE(CE_OFF);
      002BE5 75 82 00         [24] 3851 	mov	dpl,#0x00
      002BE8 C0 07            [24] 3852 	push	ar7
      002BEA 12 1D DF         [24] 3853 	lcall	_nrf24_CE
                                   3854 ;	nrf24l01.c:621: register_new_value = (register_current_value) | (1 << PWR_UP);
      002BED 90 00 AE         [24] 3855 	mov	dptr,#_register_current_value
      002BF0 E0               [24] 3856 	movx	a,@dptr
      002BF1 90 00 AF         [24] 3857 	mov	dptr,#_register_new_value
      002BF4 44 02            [12] 3858 	orl	a,#0x02
      002BF6 F0               [24] 3859 	movx	@dptr,a
                                   3860 ;	nrf24l01.c:622: delay_function(STANDBYI_DELAY);
      002BF7 90 00 02         [24] 3861 	mov	dptr,#(0x02&0x00ff)
      002BFA E4               [12] 3862 	clr	a
      002BFB F5 F0            [12] 3863 	mov	b,a
      002BFD 12 1D 10         [24] 3864 	lcall	_delay_function
      002C00 D0 07            [24] 3865 	pop	ar7
                                   3866 ;	nrf24l01.c:623: break;
      002C02 02 2C 83         [24] 3867 	ljmp	00107$
                                   3868 ;	nrf24l01.c:624: case STANDBYII:                                 /*standby ii is related to a ptx device*/
      002C05                       3869 00103$:
                                   3870 ;	nrf24l01.c:625: nrf24_CE(CE_ON);
      002C05 75 82 01         [24] 3871 	mov	dpl,#0x01
      002C08 C0 07            [24] 3872 	push	ar7
      002C0A 12 1D DF         [24] 3873 	lcall	_nrf24_CE
                                   3874 ;	nrf24l01.c:626: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      002C0D 90 00 AE         [24] 3875 	mov	dptr,#_register_current_value
      002C10 E0               [24] 3876 	movx	a,@dptr
      002C11 44 02            [12] 3877 	orl	a,#0x02
      002C13 90 00 AF         [24] 3878 	mov	dptr,#_register_new_value
      002C16 54 FE            [12] 3879 	anl	a,#0xfe
      002C18 F0               [24] 3880 	movx	@dptr,a
                                   3881 ;	nrf24l01.c:627: delay_function(STANDBYI_DELAY);
      002C19 90 00 02         [24] 3882 	mov	dptr,#(0x02&0x00ff)
      002C1C E4               [12] 3883 	clr	a
      002C1D F5 F0            [12] 3884 	mov	b,a
      002C1F 12 1D 10         [24] 3885 	lcall	_delay_function
      002C22 D0 07            [24] 3886 	pop	ar7
                                   3887 ;	nrf24l01.c:628: break;
                                   3888 ;	nrf24l01.c:629: case PTX:
      002C24 80 5D            [24] 3889 	sjmp	00107$
      002C26                       3890 00104$:
                                   3891 ;	nrf24l01.c:630: nrf24_CE(CE_ON);
      002C26 75 82 01         [24] 3892 	mov	dpl,#0x01
      002C29 C0 07            [24] 3893 	push	ar7
      002C2B 12 1D DF         [24] 3894 	lcall	_nrf24_CE
                                   3895 ;	nrf24l01.c:631: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      002C2E 90 00 AE         [24] 3896 	mov	dptr,#_register_current_value
      002C31 E0               [24] 3897 	movx	a,@dptr
      002C32 44 02            [12] 3898 	orl	a,#0x02
      002C34 90 00 AF         [24] 3899 	mov	dptr,#_register_new_value
      002C37 54 FE            [12] 3900 	anl	a,#0xfe
      002C39 F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	nrf24l01.c:632: delay_function(STANDBYI_DELAY);
      002C3A 90 00 02         [24] 3903 	mov	dptr,#(0x02&0x00ff)
      002C3D E4               [12] 3904 	clr	a
      002C3E F5 F0            [12] 3905 	mov	b,a
      002C40 12 1D 10         [24] 3906 	lcall	_delay_function
      002C43 D0 07            [24] 3907 	pop	ar7
                                   3908 ;	nrf24l01.c:633: break;
                                   3909 ;	nrf24l01.c:634: case PRX:
      002C45 80 3C            [24] 3910 	sjmp	00107$
      002C47                       3911 00105$:
                                   3912 ;	nrf24l01.c:635: nrf24_CE(CE_ON);
      002C47 75 82 01         [24] 3913 	mov	dpl,#0x01
      002C4A C0 07            [24] 3914 	push	ar7
      002C4C 12 1D DF         [24] 3915 	lcall	_nrf24_CE
                                   3916 ;	nrf24l01.c:636: register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
      002C4F 90 00 AE         [24] 3917 	mov	dptr,#_register_current_value
      002C52 E0               [24] 3918 	movx	a,@dptr
      002C53 90 00 AF         [24] 3919 	mov	dptr,#_register_new_value
      002C56 44 03            [12] 3920 	orl	a,#0x03
      002C58 F0               [24] 3921 	movx	@dptr,a
                                   3922 ;	nrf24l01.c:637: delay_function(STANDBYI_DELAY);
      002C59 90 00 02         [24] 3923 	mov	dptr,#(0x02&0x00ff)
      002C5C E4               [12] 3924 	clr	a
      002C5D F5 F0            [12] 3925 	mov	b,a
      002C5F 12 1D 10         [24] 3926 	lcall	_delay_function
      002C62 D0 07            [24] 3927 	pop	ar7
                                   3928 ;	nrf24l01.c:638: break;
                                   3929 ;	nrf24l01.c:639: default:
      002C64 80 1D            [24] 3930 	sjmp	00107$
      002C66                       3931 00106$:
                                   3932 ;	nrf24l01.c:640: nrf24_CE(CE_OFF);
      002C66 75 82 00         [24] 3933 	mov	dpl,#0x00
      002C69 C0 07            [24] 3934 	push	ar7
      002C6B 12 1D DF         [24] 3935 	lcall	_nrf24_CE
                                   3936 ;	nrf24l01.c:641: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      002C6E 90 00 AE         [24] 3937 	mov	dptr,#_register_current_value
      002C71 E0               [24] 3938 	movx	a,@dptr
      002C72 90 00 AF         [24] 3939 	mov	dptr,#_register_new_value
      002C75 54 FD            [12] 3940 	anl	a,#0xfd
      002C77 F0               [24] 3941 	movx	@dptr,a
                                   3942 ;	nrf24l01.c:642: delay_function(POWER_DOWN_DELAY);
      002C78 90 00 02         [24] 3943 	mov	dptr,#(0x02&0x00ff)
      002C7B E4               [12] 3944 	clr	a
      002C7C F5 F0            [12] 3945 	mov	b,a
      002C7E 12 1D 10         [24] 3946 	lcall	_delay_function
      002C81 D0 07            [24] 3947 	pop	ar7
                                   3948 ;	nrf24l01.c:644: }
      002C83                       3949 00107$:
                                   3950 ;	nrf24l01.c:645: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      002C83 90 00 EB         [24] 3951 	mov	dptr,#_nrf24_write_PARM_2
      002C86 74 AF            [12] 3952 	mov	a,#_register_new_value
      002C88 F0               [24] 3953 	movx	@dptr,a
      002C89 74 00            [12] 3954 	mov	a,#(_register_new_value >> 8)
      002C8B A3               [24] 3955 	inc	dptr
      002C8C F0               [24] 3956 	movx	@dptr,a
      002C8D E4               [12] 3957 	clr	a
      002C8E A3               [24] 3958 	inc	dptr
      002C8F F0               [24] 3959 	movx	@dptr,a
      002C90 90 00 EE         [24] 3960 	mov	dptr,#_nrf24_write_PARM_3
      002C93 04               [12] 3961 	inc	a
      002C94 F0               [24] 3962 	movx	@dptr,a
      002C95 90 00 EF         [24] 3963 	mov	dptr,#_nrf24_write_PARM_4
      002C98 E4               [12] 3964 	clr	a
      002C99 F0               [24] 3965 	movx	@dptr,a
      002C9A 75 82 00         [24] 3966 	mov	dpl,#0x00
      002C9D C0 07            [24] 3967 	push	ar7
      002C9F 12 2D 16         [24] 3968 	lcall	_nrf24_write
      002CA2 D0 07            [24] 3969 	pop	ar7
                                   3970 ;	nrf24l01.c:646: current_mode = mode;
      002CA4 90 01 6D         [24] 3971 	mov	dptr,#_current_mode
      002CA7 EF               [12] 3972 	mov	a,r7
      002CA8 F0               [24] 3973 	movx	@dptr,a
                                   3974 ;	nrf24l01.c:647: }
      002CA9 22               [24] 3975 	ret
                                   3976 ;------------------------------------------------------------
                                   3977 ;Allocation info for local variables in function 'nrf24_read'
                                   3978 ;------------------------------------------------------------
                                   3979 ;value                     Allocated with name '_nrf24_read_PARM_2'
                                   3980 ;data_length               Allocated with name '_nrf24_read_PARM_3'
                                   3981 ;spi_state                 Allocated with name '_nrf24_read_PARM_4'
                                   3982 ;address                   Allocated with name '_nrf24_read_address_65536_208'
                                   3983 ;------------------------------------------------------------
                                   3984 ;	nrf24l01.c:651: void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3985 ;	-----------------------------------------
                                   3986 ;	 function nrf24_read
                                   3987 ;	-----------------------------------------
      002CAA                       3988 _nrf24_read:
      002CAA E5 82            [12] 3989 	mov	a,dpl
      002CAC 90 00 EA         [24] 3990 	mov	dptr,#_nrf24_read_address_65536_208
      002CAF F0               [24] 3991 	movx	@dptr,a
                                   3992 ;	nrf24l01.c:653: nrf24_SPI(SPI_ON);
      002CB0 75 82 00         [24] 3993 	mov	dpl,#0x00
      002CB3 12 1D 8C         [24] 3994 	lcall	_nrf24_SPI
                                   3995 ;	nrf24l01.c:656: SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      002CB6 90 00 EA         [24] 3996 	mov	dptr,#_nrf24_read_address_65536_208
      002CB9 E0               [24] 3997 	movx	a,@dptr
      002CBA FF               [12] 3998 	mov	r7,a
      002CBB 90 00 AD         [24] 3999 	mov	dptr,#_SPI_command
      002CBE F0               [24] 4000 	movx	@dptr,a
                                   4001 ;	nrf24l01.c:657: SPI_send_command(SPI_command);
      002CBF 8F 82            [24] 4002 	mov	dpl,r7
      002CC1 12 1D A0         [24] 4003 	lcall	_SPI_send_command
                                   4004 ;	nrf24l01.c:659: SPI_command = 0;
      002CC4 90 00 AD         [24] 4005 	mov	dptr,#_SPI_command
      002CC7 E4               [12] 4006 	clr	a
      002CC8 F0               [24] 4007 	movx	@dptr,a
      002CC9 90 00 E5         [24] 4008 	mov	dptr,#_nrf24_read_PARM_2
      002CCC E0               [24] 4009 	movx	a,@dptr
      002CCD FD               [12] 4010 	mov	r5,a
      002CCE A3               [24] 4011 	inc	dptr
      002CCF E0               [24] 4012 	movx	a,@dptr
      002CD0 FE               [12] 4013 	mov	r6,a
      002CD1 A3               [24] 4014 	inc	dptr
      002CD2 E0               [24] 4015 	movx	a,@dptr
      002CD3 FF               [12] 4016 	mov	r7,a
      002CD4 90 00 E8         [24] 4017 	mov	dptr,#_nrf24_read_PARM_3
      002CD7 E0               [24] 4018 	movx	a,@dptr
      002CD8 FC               [12] 4019 	mov	r4,a
      002CD9                       4020 00105$:
                                   4021 ;	nrf24l01.c:660: for (; data_length ; data_length--)
      002CD9 EC               [12] 4022 	mov	a,r4
      002CDA 60 2D            [24] 4023 	jz	00101$
                                   4024 ;	nrf24l01.c:662: *value = SPI_send_command(SPI_command);
      002CDC 90 00 AD         [24] 4025 	mov	dptr,#_SPI_command
      002CDF E0               [24] 4026 	movx	a,@dptr
      002CE0 F5 82            [12] 4027 	mov	dpl,a
      002CE2 C0 07            [24] 4028 	push	ar7
      002CE4 C0 06            [24] 4029 	push	ar6
      002CE6 C0 05            [24] 4030 	push	ar5
      002CE8 C0 04            [24] 4031 	push	ar4
      002CEA 12 1D A0         [24] 4032 	lcall	_SPI_send_command
      002CED AB 82            [24] 4033 	mov	r3,dpl
      002CEF D0 04            [24] 4034 	pop	ar4
      002CF1 D0 05            [24] 4035 	pop	ar5
      002CF3 D0 06            [24] 4036 	pop	ar6
      002CF5 D0 07            [24] 4037 	pop	ar7
      002CF7 8D 82            [24] 4038 	mov	dpl,r5
      002CF9 8E 83            [24] 4039 	mov	dph,r6
      002CFB 8F F0            [24] 4040 	mov	b,r7
      002CFD EB               [12] 4041 	mov	a,r3
      002CFE 12 31 6D         [24] 4042 	lcall	__gptrput
      002D01 A3               [24] 4043 	inc	dptr
      002D02 AD 82            [24] 4044 	mov	r5,dpl
      002D04 AE 83            [24] 4045 	mov	r6,dph
                                   4046 ;	nrf24l01.c:663: value++;
                                   4047 ;	nrf24l01.c:660: for (; data_length ; data_length--)
      002D06 1C               [12] 4048 	dec	r4
      002D07 80 D0            [24] 4049 	sjmp	00105$
      002D09                       4050 00101$:
                                   4051 ;	nrf24l01.c:665: if (spi_state == CLOSE)
      002D09 90 00 E9         [24] 4052 	mov	dptr,#_nrf24_read_PARM_4
      002D0C E0               [24] 4053 	movx	a,@dptr
      002D0D 70 06            [24] 4054 	jnz	00107$
                                   4055 ;	nrf24l01.c:666: nrf24_SPI(SPI_OFF);
      002D0F 75 82 01         [24] 4056 	mov	dpl,#0x01
                                   4057 ;	nrf24l01.c:667: }
      002D12 02 1D 8C         [24] 4058 	ljmp	_nrf24_SPI
      002D15                       4059 00107$:
      002D15 22               [24] 4060 	ret
                                   4061 ;------------------------------------------------------------
                                   4062 ;Allocation info for local variables in function 'nrf24_write'
                                   4063 ;------------------------------------------------------------
                                   4064 ;value                     Allocated with name '_nrf24_write_PARM_2'
                                   4065 ;data_length               Allocated with name '_nrf24_write_PARM_3'
                                   4066 ;spi_state                 Allocated with name '_nrf24_write_PARM_4'
                                   4067 ;address                   Allocated with name '_nrf24_write_address_65536_212'
                                   4068 ;------------------------------------------------------------
                                   4069 ;	nrf24l01.c:671: void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   4070 ;	-----------------------------------------
                                   4071 ;	 function nrf24_write
                                   4072 ;	-----------------------------------------
      002D16                       4073 _nrf24_write:
      002D16 E5 82            [12] 4074 	mov	a,dpl
      002D18 90 00 F0         [24] 4075 	mov	dptr,#_nrf24_write_address_65536_212
      002D1B F0               [24] 4076 	movx	@dptr,a
                                   4077 ;	nrf24l01.c:673: nrf24_SPI(SPI_ON);
      002D1C 75 82 00         [24] 4078 	mov	dpl,#0x00
      002D1F 12 1D 8C         [24] 4079 	lcall	_nrf24_SPI
                                   4080 ;	nrf24l01.c:674: SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      002D22 90 00 F0         [24] 4081 	mov	dptr,#_nrf24_write_address_65536_212
      002D25 E0               [24] 4082 	movx	a,@dptr
      002D26 44 20            [12] 4083 	orl	a,#0x20
      002D28 FF               [12] 4084 	mov	r7,a
      002D29 90 00 AD         [24] 4085 	mov	dptr,#_SPI_command
      002D2C F0               [24] 4086 	movx	@dptr,a
                                   4087 ;	nrf24l01.c:675: SPI_send_command(SPI_command);
      002D2D 8F 82            [24] 4088 	mov	dpl,r7
      002D2F 12 1D A0         [24] 4089 	lcall	_SPI_send_command
      002D32 90 00 EB         [24] 4090 	mov	dptr,#_nrf24_write_PARM_2
      002D35 E0               [24] 4091 	movx	a,@dptr
      002D36 FD               [12] 4092 	mov	r5,a
      002D37 A3               [24] 4093 	inc	dptr
      002D38 E0               [24] 4094 	movx	a,@dptr
      002D39 FE               [12] 4095 	mov	r6,a
      002D3A A3               [24] 4096 	inc	dptr
      002D3B E0               [24] 4097 	movx	a,@dptr
      002D3C FF               [12] 4098 	mov	r7,a
      002D3D 90 00 EE         [24] 4099 	mov	dptr,#_nrf24_write_PARM_3
      002D40 E0               [24] 4100 	movx	a,@dptr
      002D41 FC               [12] 4101 	mov	r4,a
      002D42                       4102 00105$:
                                   4103 ;	nrf24l01.c:676: for (; data_length ; data_length--)
      002D42 EC               [12] 4104 	mov	a,r4
      002D43 60 2D            [24] 4105 	jz	00101$
                                   4106 ;	nrf24l01.c:678: SPI_command = *value;
      002D45 8D 82            [24] 4107 	mov	dpl,r5
      002D47 8E 83            [24] 4108 	mov	dph,r6
      002D49 8F F0            [24] 4109 	mov	b,r7
      002D4B 12 3C 18         [24] 4110 	lcall	__gptrget
      002D4E FB               [12] 4111 	mov	r3,a
      002D4F A3               [24] 4112 	inc	dptr
      002D50 AD 82            [24] 4113 	mov	r5,dpl
      002D52 AE 83            [24] 4114 	mov	r6,dph
      002D54 90 00 AD         [24] 4115 	mov	dptr,#_SPI_command
      002D57 EB               [12] 4116 	mov	a,r3
      002D58 F0               [24] 4117 	movx	@dptr,a
                                   4118 ;	nrf24l01.c:679: value++;
                                   4119 ;	nrf24l01.c:680: SPI_send_command(SPI_command);
      002D59 E0               [24] 4120 	movx	a,@dptr
      002D5A F5 82            [12] 4121 	mov	dpl,a
      002D5C C0 07            [24] 4122 	push	ar7
      002D5E C0 06            [24] 4123 	push	ar6
      002D60 C0 05            [24] 4124 	push	ar5
      002D62 C0 04            [24] 4125 	push	ar4
      002D64 12 1D A0         [24] 4126 	lcall	_SPI_send_command
      002D67 D0 04            [24] 4127 	pop	ar4
      002D69 D0 05            [24] 4128 	pop	ar5
      002D6B D0 06            [24] 4129 	pop	ar6
      002D6D D0 07            [24] 4130 	pop	ar7
                                   4131 ;	nrf24l01.c:676: for (; data_length ; data_length--)
      002D6F 1C               [12] 4132 	dec	r4
      002D70 80 D0            [24] 4133 	sjmp	00105$
      002D72                       4134 00101$:
                                   4135 ;	nrf24l01.c:682: if (spi_state == CLOSE)
      002D72 90 00 EF         [24] 4136 	mov	dptr,#_nrf24_write_PARM_4
      002D75 E0               [24] 4137 	movx	a,@dptr
      002D76 70 06            [24] 4138 	jnz	00107$
                                   4139 ;	nrf24l01.c:683: nrf24_SPI(SPI_OFF);
      002D78 75 82 01         [24] 4140 	mov	dpl,#0x01
                                   4141 ;	nrf24l01.c:684: }
      002D7B 02 1D 8C         [24] 4142 	ljmp	_nrf24_SPI
      002D7E                       4143 00107$:
      002D7E 22               [24] 4144 	ret
                                   4145 	.area CSEG    (CODE)
                                   4146 	.area CONST   (CODE)
      003C47                       4147 _bitReverseTable256:
      003C47 00                    4148 	.db #0x00	; 0
      003C48 80                    4149 	.db #0x80	; 128
      003C49 40                    4150 	.db #0x40	; 64
      003C4A C0                    4151 	.db #0xc0	; 192
      003C4B 20                    4152 	.db #0x20	; 32
      003C4C A0                    4153 	.db #0xa0	; 160
      003C4D 60                    4154 	.db #0x60	; 96
      003C4E E0                    4155 	.db #0xe0	; 224
      003C4F 10                    4156 	.db #0x10	; 16
      003C50 90                    4157 	.db #0x90	; 144
      003C51 50                    4158 	.db #0x50	; 80	'P'
      003C52 D0                    4159 	.db #0xd0	; 208
      003C53 30                    4160 	.db #0x30	; 48	'0'
      003C54 B0                    4161 	.db #0xb0	; 176
      003C55 70                    4162 	.db #0x70	; 112	'p'
      003C56 F0                    4163 	.db #0xf0	; 240
      003C57 08                    4164 	.db #0x08	; 8
      003C58 88                    4165 	.db #0x88	; 136
      003C59 48                    4166 	.db #0x48	; 72	'H'
      003C5A C8                    4167 	.db #0xc8	; 200
      003C5B 28                    4168 	.db #0x28	; 40
      003C5C A8                    4169 	.db #0xa8	; 168
      003C5D 68                    4170 	.db #0x68	; 104	'h'
      003C5E E8                    4171 	.db #0xe8	; 232
      003C5F 18                    4172 	.db #0x18	; 24
      003C60 98                    4173 	.db #0x98	; 152
      003C61 58                    4174 	.db #0x58	; 88	'X'
      003C62 D8                    4175 	.db #0xd8	; 216
      003C63 38                    4176 	.db #0x38	; 56	'8'
      003C64 B8                    4177 	.db #0xb8	; 184
      003C65 78                    4178 	.db #0x78	; 120	'x'
      003C66 F8                    4179 	.db #0xf8	; 248
      003C67 04                    4180 	.db #0x04	; 4
      003C68 84                    4181 	.db #0x84	; 132
      003C69 44                    4182 	.db #0x44	; 68	'D'
      003C6A C4                    4183 	.db #0xc4	; 196
      003C6B 24                    4184 	.db #0x24	; 36
      003C6C A4                    4185 	.db #0xa4	; 164
      003C6D 64                    4186 	.db #0x64	; 100	'd'
      003C6E E4                    4187 	.db #0xe4	; 228
      003C6F 14                    4188 	.db #0x14	; 20
      003C70 94                    4189 	.db #0x94	; 148
      003C71 54                    4190 	.db #0x54	; 84	'T'
      003C72 D4                    4191 	.db #0xd4	; 212
      003C73 34                    4192 	.db #0x34	; 52	'4'
      003C74 B4                    4193 	.db #0xb4	; 180
      003C75 74                    4194 	.db #0x74	; 116	't'
      003C76 F4                    4195 	.db #0xf4	; 244
      003C77 0C                    4196 	.db #0x0c	; 12
      003C78 8C                    4197 	.db #0x8c	; 140
      003C79 4C                    4198 	.db #0x4c	; 76	'L'
      003C7A CC                    4199 	.db #0xcc	; 204
      003C7B 2C                    4200 	.db #0x2c	; 44
      003C7C AC                    4201 	.db #0xac	; 172
      003C7D 6C                    4202 	.db #0x6c	; 108	'l'
      003C7E EC                    4203 	.db #0xec	; 236
      003C7F 1C                    4204 	.db #0x1c	; 28
      003C80 9C                    4205 	.db #0x9c	; 156
      003C81 5C                    4206 	.db #0x5c	; 92
      003C82 DC                    4207 	.db #0xdc	; 220
      003C83 3C                    4208 	.db #0x3c	; 60
      003C84 BC                    4209 	.db #0xbc	; 188
      003C85 7C                    4210 	.db #0x7c	; 124
      003C86 FC                    4211 	.db #0xfc	; 252
      003C87 02                    4212 	.db #0x02	; 2
      003C88 82                    4213 	.db #0x82	; 130
      003C89 42                    4214 	.db #0x42	; 66	'B'
      003C8A C2                    4215 	.db #0xc2	; 194
      003C8B 22                    4216 	.db #0x22	; 34
      003C8C A2                    4217 	.db #0xa2	; 162
      003C8D 62                    4218 	.db #0x62	; 98	'b'
      003C8E E2                    4219 	.db #0xe2	; 226
      003C8F 12                    4220 	.db #0x12	; 18
      003C90 92                    4221 	.db #0x92	; 146
      003C91 52                    4222 	.db #0x52	; 82	'R'
      003C92 D2                    4223 	.db #0xd2	; 210
      003C93 32                    4224 	.db #0x32	; 50	'2'
      003C94 B2                    4225 	.db #0xb2	; 178
      003C95 72                    4226 	.db #0x72	; 114	'r'
      003C96 F2                    4227 	.db #0xf2	; 242
      003C97 0A                    4228 	.db #0x0a	; 10
      003C98 8A                    4229 	.db #0x8a	; 138
      003C99 4A                    4230 	.db #0x4a	; 74	'J'
      003C9A CA                    4231 	.db #0xca	; 202
      003C9B 2A                    4232 	.db #0x2a	; 42
      003C9C AA                    4233 	.db #0xaa	; 170
      003C9D 6A                    4234 	.db #0x6a	; 106	'j'
      003C9E EA                    4235 	.db #0xea	; 234
      003C9F 1A                    4236 	.db #0x1a	; 26
      003CA0 9A                    4237 	.db #0x9a	; 154
      003CA1 5A                    4238 	.db #0x5a	; 90	'Z'
      003CA2 DA                    4239 	.db #0xda	; 218
      003CA3 3A                    4240 	.db #0x3a	; 58
      003CA4 BA                    4241 	.db #0xba	; 186
      003CA5 7A                    4242 	.db #0x7a	; 122	'z'
      003CA6 FA                    4243 	.db #0xfa	; 250
      003CA7 06                    4244 	.db #0x06	; 6
      003CA8 86                    4245 	.db #0x86	; 134
      003CA9 46                    4246 	.db #0x46	; 70	'F'
      003CAA C6                    4247 	.db #0xc6	; 198
      003CAB 26                    4248 	.db #0x26	; 38
      003CAC A6                    4249 	.db #0xa6	; 166
      003CAD 66                    4250 	.db #0x66	; 102	'f'
      003CAE E6                    4251 	.db #0xe6	; 230
      003CAF 16                    4252 	.db #0x16	; 22
      003CB0 96                    4253 	.db #0x96	; 150
      003CB1 56                    4254 	.db #0x56	; 86	'V'
      003CB2 D6                    4255 	.db #0xd6	; 214
      003CB3 36                    4256 	.db #0x36	; 54	'6'
      003CB4 B6                    4257 	.db #0xb6	; 182
      003CB5 76                    4258 	.db #0x76	; 118	'v'
      003CB6 F6                    4259 	.db #0xf6	; 246
      003CB7 0E                    4260 	.db #0x0e	; 14
      003CB8 8E                    4261 	.db #0x8e	; 142
      003CB9 4E                    4262 	.db #0x4e	; 78	'N'
      003CBA CE                    4263 	.db #0xce	; 206
      003CBB 2E                    4264 	.db #0x2e	; 46
      003CBC AE                    4265 	.db #0xae	; 174
      003CBD 6E                    4266 	.db #0x6e	; 110	'n'
      003CBE EE                    4267 	.db #0xee	; 238
      003CBF 1E                    4268 	.db #0x1e	; 30
      003CC0 9E                    4269 	.db #0x9e	; 158
      003CC1 5E                    4270 	.db #0x5e	; 94
      003CC2 DE                    4271 	.db #0xde	; 222
      003CC3 3E                    4272 	.db #0x3e	; 62
      003CC4 BE                    4273 	.db #0xbe	; 190
      003CC5 7E                    4274 	.db #0x7e	; 126
      003CC6 FE                    4275 	.db #0xfe	; 254
      003CC7 01                    4276 	.db #0x01	; 1
      003CC8 81                    4277 	.db #0x81	; 129
      003CC9 41                    4278 	.db #0x41	; 65	'A'
      003CCA C1                    4279 	.db #0xc1	; 193
      003CCB 21                    4280 	.db #0x21	; 33
      003CCC A1                    4281 	.db #0xa1	; 161
      003CCD 61                    4282 	.db #0x61	; 97	'a'
      003CCE E1                    4283 	.db #0xe1	; 225
      003CCF 11                    4284 	.db #0x11	; 17
      003CD0 91                    4285 	.db #0x91	; 145
      003CD1 51                    4286 	.db #0x51	; 81	'Q'
      003CD2 D1                    4287 	.db #0xd1	; 209
      003CD3 31                    4288 	.db #0x31	; 49	'1'
      003CD4 B1                    4289 	.db #0xb1	; 177
      003CD5 71                    4290 	.db #0x71	; 113	'q'
      003CD6 F1                    4291 	.db #0xf1	; 241
      003CD7 09                    4292 	.db #0x09	; 9
      003CD8 89                    4293 	.db #0x89	; 137
      003CD9 49                    4294 	.db #0x49	; 73	'I'
      003CDA C9                    4295 	.db #0xc9	; 201
      003CDB 29                    4296 	.db #0x29	; 41
      003CDC A9                    4297 	.db #0xa9	; 169
      003CDD 69                    4298 	.db #0x69	; 105	'i'
      003CDE E9                    4299 	.db #0xe9	; 233
      003CDF 19                    4300 	.db #0x19	; 25
      003CE0 99                    4301 	.db #0x99	; 153
      003CE1 59                    4302 	.db #0x59	; 89	'Y'
      003CE2 D9                    4303 	.db #0xd9	; 217
      003CE3 39                    4304 	.db #0x39	; 57	'9'
      003CE4 B9                    4305 	.db #0xb9	; 185
      003CE5 79                    4306 	.db #0x79	; 121	'y'
      003CE6 F9                    4307 	.db #0xf9	; 249
      003CE7 05                    4308 	.db #0x05	; 5
      003CE8 85                    4309 	.db #0x85	; 133
      003CE9 45                    4310 	.db #0x45	; 69	'E'
      003CEA C5                    4311 	.db #0xc5	; 197
      003CEB 25                    4312 	.db #0x25	; 37
      003CEC A5                    4313 	.db #0xa5	; 165
      003CED 65                    4314 	.db #0x65	; 101	'e'
      003CEE E5                    4315 	.db #0xe5	; 229
      003CEF 15                    4316 	.db #0x15	; 21
      003CF0 95                    4317 	.db #0x95	; 149
      003CF1 55                    4318 	.db #0x55	; 85	'U'
      003CF2 D5                    4319 	.db #0xd5	; 213
      003CF3 35                    4320 	.db #0x35	; 53	'5'
      003CF4 B5                    4321 	.db #0xb5	; 181
      003CF5 75                    4322 	.db #0x75	; 117	'u'
      003CF6 F5                    4323 	.db #0xf5	; 245
      003CF7 0D                    4324 	.db #0x0d	; 13
      003CF8 8D                    4325 	.db #0x8d	; 141
      003CF9 4D                    4326 	.db #0x4d	; 77	'M'
      003CFA CD                    4327 	.db #0xcd	; 205
      003CFB 2D                    4328 	.db #0x2d	; 45
      003CFC AD                    4329 	.db #0xad	; 173
      003CFD 6D                    4330 	.db #0x6d	; 109	'm'
      003CFE ED                    4331 	.db #0xed	; 237
      003CFF 1D                    4332 	.db #0x1d	; 29
      003D00 9D                    4333 	.db #0x9d	; 157
      003D01 5D                    4334 	.db #0x5d	; 93
      003D02 DD                    4335 	.db #0xdd	; 221
      003D03 3D                    4336 	.db #0x3d	; 61
      003D04 BD                    4337 	.db #0xbd	; 189
      003D05 7D                    4338 	.db #0x7d	; 125
      003D06 FD                    4339 	.db #0xfd	; 253
      003D07 03                    4340 	.db #0x03	; 3
      003D08 83                    4341 	.db #0x83	; 131
      003D09 43                    4342 	.db #0x43	; 67	'C'
      003D0A C3                    4343 	.db #0xc3	; 195
      003D0B 23                    4344 	.db #0x23	; 35
      003D0C A3                    4345 	.db #0xa3	; 163
      003D0D 63                    4346 	.db #0x63	; 99	'c'
      003D0E E3                    4347 	.db #0xe3	; 227
      003D0F 13                    4348 	.db #0x13	; 19
      003D10 93                    4349 	.db #0x93	; 147
      003D11 53                    4350 	.db #0x53	; 83	'S'
      003D12 D3                    4351 	.db #0xd3	; 211
      003D13 33                    4352 	.db #0x33	; 51	'3'
      003D14 B3                    4353 	.db #0xb3	; 179
      003D15 73                    4354 	.db #0x73	; 115	's'
      003D16 F3                    4355 	.db #0xf3	; 243
      003D17 0B                    4356 	.db #0x0b	; 11
      003D18 8B                    4357 	.db #0x8b	; 139
      003D19 4B                    4358 	.db #0x4b	; 75	'K'
      003D1A CB                    4359 	.db #0xcb	; 203
      003D1B 2B                    4360 	.db #0x2b	; 43
      003D1C AB                    4361 	.db #0xab	; 171
      003D1D 6B                    4362 	.db #0x6b	; 107	'k'
      003D1E EB                    4363 	.db #0xeb	; 235
      003D1F 1B                    4364 	.db #0x1b	; 27
      003D20 9B                    4365 	.db #0x9b	; 155
      003D21 5B                    4366 	.db #0x5b	; 91
      003D22 DB                    4367 	.db #0xdb	; 219
      003D23 3B                    4368 	.db #0x3b	; 59
      003D24 BB                    4369 	.db #0xbb	; 187
      003D25 7B                    4370 	.db #0x7b	; 123
      003D26 FB                    4371 	.db #0xfb	; 251
      003D27 07                    4372 	.db #0x07	; 7
      003D28 87                    4373 	.db #0x87	; 135
      003D29 47                    4374 	.db #0x47	; 71	'G'
      003D2A C7                    4375 	.db #0xc7	; 199
      003D2B 27                    4376 	.db #0x27	; 39
      003D2C A7                    4377 	.db #0xa7	; 167
      003D2D 67                    4378 	.db #0x67	; 103	'g'
      003D2E E7                    4379 	.db #0xe7	; 231
      003D2F 17                    4380 	.db #0x17	; 23
      003D30 97                    4381 	.db #0x97	; 151
      003D31 57                    4382 	.db #0x57	; 87	'W'
      003D32 D7                    4383 	.db #0xd7	; 215
      003D33 37                    4384 	.db #0x37	; 55	'7'
      003D34 B7                    4385 	.db #0xb7	; 183
      003D35 77                    4386 	.db #0x77	; 119	'w'
      003D36 F7                    4387 	.db #0xf7	; 247
      003D37 0F                    4388 	.db #0x0f	; 15
      003D38 8F                    4389 	.db #0x8f	; 143
      003D39 4F                    4390 	.db #0x4f	; 79	'O'
      003D3A CF                    4391 	.db #0xcf	; 207
      003D3B 2F                    4392 	.db #0x2f	; 47
      003D3C AF                    4393 	.db #0xaf	; 175
      003D3D 6F                    4394 	.db #0x6f	; 111	'o'
      003D3E EF                    4395 	.db #0xef	; 239
      003D3F 1F                    4396 	.db #0x1f	; 31
      003D40 9F                    4397 	.db #0x9f	; 159
      003D41 5F                    4398 	.db #0x5f	; 95
      003D42 DF                    4399 	.db #0xdf	; 223
      003D43 3F                    4400 	.db #0x3f	; 63
      003D44 BF                    4401 	.db #0xbf	; 191
      003D45 7F                    4402 	.db #0x7f	; 127
      003D46 FF                    4403 	.db #0xff	; 255
                                   4404 	.area CONST   (CODE)
      003D47                       4405 ___str_0:
      003D47 0D                    4406 	.db 0x0d
      003D48 52 65 61 64 20 66 72  4407 	.ascii "Read from %d: %d"
             6F 6D 20 25 64 3A 20
             25 64
      003D58 0A                    4408 	.db 0x0a
      003D59 00                    4409 	.db 0x00
                                   4410 	.area CSEG    (CODE)
                                   4411 	.area CONST   (CODE)
      003D5A                       4412 ___str_1:
      003D5A 53 65 6E 64 69 6E 67  4413 	.ascii "Sending to %d: %d"
             20 74 6F 20 25 64 3A
             20 25 64
      003D6B 0A                    4414 	.db 0x0a
      003D6C 00                    4415 	.db 0x00
                                   4416 	.area CSEG    (CODE)
                                   4417 	.area CONST   (CODE)
      003D6D                       4418 ___str_2:
      003D6D 0D                    4419 	.db 0x0d
      003D6E 52 65 61 64 20 76 61  4420 	.ascii "Read value matches the newly written value :D"
             6C 75 65 20 6D 61 74
             63 68 65 73 20 74 68
             65 20 6E 65 77 6C 79
             20 77 72 69 74 74 65
             6E 20 76 61 6C 75 65
             20 3A 44
      003D9B 0A                    4421 	.db 0x0a
      003D9C 00                    4422 	.db 0x00
                                   4423 	.area CSEG    (CODE)
                                   4424 	.area CONST   (CODE)
      003D9D                       4425 ___str_3:
      003D9D 0D                    4426 	.db 0x0d
      003D9E 52 65 61 64 20 76 61  4427 	.ascii "Read value doesn't match the newly written value ;("
             6C 75 65 20 64 6F 65
             73 6E 27 74 20 6D 61
             74 63 68 20 74 68 65
             20 6E 65 77 6C 79 20
             77 72 69 74 74 65 6E
             20 76 61 6C 75 65 20
             3B 28
      003DD1 0A                    4428 	.db 0x0a
      003DD2 00                    4429 	.db 0x00
                                   4430 	.area CSEG    (CODE)
                                   4431 	.area CONST   (CODE)
      003DD3                       4432 ___str_4:
      003DD3 0D                    4433 	.db 0x0d
      003DD4 52 65 61 64 3A 20 25  4434 	.ascii "Read: %d"
             64
      003DDC 0A                    4435 	.db 0x0a
      003DDD 00                    4436 	.db 0x00
                                   4437 	.area CSEG    (CODE)
                                   4438 	.area CONST   (CODE)
      003DDE                       4439 ___str_5:
      003DDE 0D                    4440 	.db 0x0d
      003DDF 48 61 72 64 77 61 72  4441 	.ascii "Hardware Detected!"
             65 20 44 65 74 65 63
             74 65 64 21
      003DF1 0A                    4442 	.db 0x0a
      003DF2 00                    4443 	.db 0x00
                                   4444 	.area CSEG    (CODE)
                                   4445 	.area CONST   (CODE)
      003DF3                       4446 ___str_6:
      003DF3 0D                    4447 	.db 0x0d
      003DF4 52 65 67 69 73 74 65  4448 	.ascii "Register %d: %d"
             72 20 25 64 3A 20 25
             64
      003E03 0A                    4449 	.db 0x0a
      003E04 00                    4450 	.db 0x00
                                   4451 	.area CSEG    (CODE)
                                   4452 	.area CONST   (CODE)
      003E05                       4453 ___str_7:
      003E05 0A                    4454 	.db 0x0a
      003E06 0A                    4455 	.db 0x0a
      003E07 00                    4456 	.db 0x00
                                   4457 	.area CSEG    (CODE)
                                   4458 	.area XINIT   (CODE)
      003E34                       4459 __xinit__dataReady:
      003E34 00                    4460 	.db #0x00	;  0
      003E35                       4461 __xinit__CSN_pin:
      003E35 02                    4462 	.db #0x02	; 2
      003E36 06                    4463 	.db #0x06	; 6
      003E37 01                    4464 	.db #0x01	; 1
      003E38 00                    4465 	.db #0x00	; 0
      003E39 00                    4466 	.db #0x00	; 0
      003E3A 00                    4467 	.db #0x00	; 0
      003E3B 03                    4468 	.db #0x03	; 3
      003E3C 01                    4469 	.db #0x01	; 1
      003E3D 00                    4470 	.db #0x00	; 0
      003E3E 00                    4471 	.db #0x00	; 0
      003E3F 00                    4472 	.db #0x00	; 0
      003E40 00                    4473 	.db #0x00	; 0
      003E41 00                    4474 	.db #0x00	; 0
      003E42                       4475 __xinit__CE_pin:
      003E42 02                    4476 	.db #0x02	; 2
      003E43 07                    4477 	.db #0x07	; 7
      003E44 01                    4478 	.db #0x01	; 1
      003E45 00                    4479 	.db #0x00	; 0
      003E46 00                    4480 	.db #0x00	; 0
      003E47 00                    4481 	.db #0x00	; 0
      003E48 03                    4482 	.db #0x03	; 3
      003E49 01                    4483 	.db #0x01	; 1
      003E4A 00                    4484 	.db #0x00	; 0
      003E4B 00                    4485 	.db #0x00	; 0
      003E4C 00                    4486 	.db #0x00	; 0
      003E4D 00                    4487 	.db #0x00	; 0
      003E4E 00                    4488 	.db #0x00	; 0
      003E4F                       4489 __xinit__reset_flag:
      003E4F 00                    4490 	.db #0x00	; 0
      003E50                       4491 __xinit__current_mode:
      003E50 05                    4492 	.db #0x05	; 5
      003E51                       4493 __xinit__current_acknowledgement_state:
      003E51 01                    4494 	.db #0x01	; 1
      003E52                       4495 __xinit__dynamic_payload:
      003E52 00                    4496 	.db #0x00	; 0
      003E53                       4497 __xinit__datapipe_address:
      003E53 D2                    4498 	.db #0xd2	; 210
      003E54 F0                    4499 	.db #0xf0	; 240
      003E55 F0                    4500 	.db #0xf0	; 240
      003E56 F0                    4501 	.db #0xf0	; 240
      003E57 F0                    4502 	.db #0xf0	; 240
      003E58 E1                    4503 	.db #0xe1	; 225
      003E59 F0                    4504 	.db #0xf0	; 240
      003E5A F0                    4505 	.db #0xf0	; 240
      003E5B F0                    4506 	.db #0xf0	; 240
      003E5C F0                    4507 	.db #0xf0	; 240
      003E5D F0                    4508 	.db #0xf0	; 240
      003E5E F0                    4509 	.db #0xf0	; 240
      003E5F F0                    4510 	.db #0xf0	; 240
      003E60 F0                    4511 	.db #0xf0	; 240
      003E61 F0                    4512 	.db #0xf0	; 240
      003E62 F0                    4513 	.db #0xf0	; 240
      003E63 F0                    4514 	.db #0xf0	; 240
      003E64 F0                    4515 	.db #0xf0	; 240
      003E65 F0                    4516 	.db #0xf0	; 240
      003E66 F0                    4517 	.db #0xf0	; 240
      003E67 F0                    4518 	.db #0xf0	; 240
      003E68 F0                    4519 	.db #0xf0	; 240
      003E69 F0                    4520 	.db #0xf0	; 240
      003E6A F0                    4521 	.db #0xf0	; 240
      003E6B F0                    4522 	.db #0xf0	; 240
      003E6C F0                    4523 	.db #0xf0	; 240
      003E6D F0                    4524 	.db #0xf0	; 240
      003E6E F0                    4525 	.db #0xf0	; 240
      003E6F F0                    4526 	.db #0xf0	; 240
      003E70 F0                    4527 	.db #0xf0	; 240
                                   4528 	.area CABS    (ABS,CODE)
