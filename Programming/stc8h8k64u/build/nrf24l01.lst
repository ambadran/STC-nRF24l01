                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module nrf24l01
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bitReverseTable256
                                     12 	.globl _spiSend
                                     13 	.globl _spiConfigure
                                     14 	.globl _spiSelectSpeed
                                     15 	.globl _gpioWrite
                                     16 	.globl _gpioConfigure
                                     17 	.globl _delay1ms
                                     18 	.globl _printf
                                     19 	.globl _S1SM0_FE
                                     20 	.globl _T1IE
                                     21 	.globl _T0IE
                                     22 	.globl _T1RUN
                                     23 	.globl _T0RUN
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _F1
                                     31 	.globl _P
                                     32 	.globl _EA
                                     33 	.globl _INT1IE
                                     34 	.globl _INT0IE
                                     35 	.globl _INT1TR
                                     36 	.globl _INT0TR
                                     37 	.globl _P5_5
                                     38 	.globl _P5_4
                                     39 	.globl _P5_3
                                     40 	.globl _P5_2
                                     41 	.globl _P5_1
                                     42 	.globl _P5_0
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _P1_7
                                     60 	.globl _P1_6
                                     61 	.globl _P1_5
                                     62 	.globl _P1_4
                                     63 	.globl _P1_3
                                     64 	.globl _P1_2
                                     65 	.globl _P1_1
                                     66 	.globl _P1_0
                                     67 	.globl _USBADR
                                     68 	.globl _USBCON
                                     69 	.globl _USBDAT
                                     70 	.globl _USBCLK
                                     71 	.globl _S4BUF
                                     72 	.globl _S4CON
                                     73 	.globl _S3BUF
                                     74 	.globl _S3CON
                                     75 	.globl _S2BUF
                                     76 	.globl _S2CON
                                     77 	.globl _S1BUF
                                     78 	.globl _S1CON
                                     79 	.globl _SADEN
                                     80 	.globl _SADDR
                                     81 	.globl _AUXINTIF
                                     82 	.globl _T3
                                     83 	.globl _T3L
                                     84 	.globl _T3H
                                     85 	.globl _T4
                                     86 	.globl _T4L
                                     87 	.globl _T4H
                                     88 	.globl _T4T3M
                                     89 	.globl _WDT_CONTR
                                     90 	.globl _AUXR
                                     91 	.globl _T2
                                     92 	.globl _T2H
                                     93 	.globl _T2L
                                     94 	.globl _T1
                                     95 	.globl _T1H
                                     96 	.globl _T1L
                                     97 	.globl _T0
                                     98 	.globl _T0H
                                     99 	.globl _T0L
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _IRTRIM
                                    103 	.globl _LIRTRIM
                                    104 	.globl _IRCBAND
                                    105 	.globl _SPDAT
                                    106 	.globl _SPCTL
                                    107 	.globl _SPSTAT
                                    108 	.globl _WKTC
                                    109 	.globl _WKTCH
                                    110 	.globl _WKTCL
                                    111 	.globl _BUS_SPEED
                                    112 	.globl _P_SW2
                                    113 	.globl _P_SW1
                                    114 	.globl _RSTCFG
                                    115 	.globl _PCON
                                    116 	.globl _B
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _SP
                                    120 	.globl _IP3H
                                    121 	.globl _IP3L
                                    122 	.globl _IP2H
                                    123 	.globl _IP2L
                                    124 	.globl _IE2
                                    125 	.globl _IP1H
                                    126 	.globl _IP1L
                                    127 	.globl _IE1
                                    128 	.globl _INT_CLKO
                                    129 	.globl _IAP_TPS
                                    130 	.globl _IAP_CONTR
                                    131 	.globl _IAP_TRIG
                                    132 	.globl _IAP_CMD
                                    133 	.globl _IAP_ADDR
                                    134 	.globl _IAP_ADDRL
                                    135 	.globl _IAP_ADDRH
                                    136 	.globl _IAP_DATA
                                    137 	.globl _P5M0
                                    138 	.globl _P5M1
                                    139 	.globl _P5
                                    140 	.globl _P3M0
                                    141 	.globl _P3M1
                                    142 	.globl _P3
                                    143 	.globl _P2M0
                                    144 	.globl _P2M1
                                    145 	.globl _P2
                                    146 	.globl _P1M0
                                    147 	.globl _P1M1
                                    148 	.globl _P1
                                    149 	.globl _TA
                                    150 	.globl _DPH1
                                    151 	.globl _DPL1
                                    152 	.globl _DPS
                                    153 	.globl _DP
                                    154 	.globl _DPH
                                    155 	.globl _DPL
                                    156 	.globl _CMPCR2
                                    157 	.globl _CMPCR1
                                    158 	.globl _DMA_ADC_AMT
                                    159 	.globl _ADCCFG
                                    160 	.globl _ADC_RES
                                    161 	.globl _ADC_RESL
                                    162 	.globl _ADC_RESH
                                    163 	.globl _ADC_CONTR
                                    164 	.globl _datapipe_address
                                    165 	.globl _CE_pin
                                    166 	.globl _CSN_pin
                                    167 	.globl _dataReady
                                    168 	.globl _nrf24_write_PARM_4
                                    169 	.globl _nrf24_write_PARM_3
                                    170 	.globl _nrf24_write_PARM_2
                                    171 	.globl _nrf24_read_PARM_4
                                    172 	.globl _nrf24_read_PARM_3
                                    173 	.globl _nrf24_read_PARM_2
                                    174 	.globl _nrf24_crc_configuration_PARM_2
                                    175 	.globl _nrf24_interrupt_mask_PARM_3
                                    176 	.globl _nrf24_interrupt_mask_PARM_2
                                    177 	.globl _nrf24_prx_static_payload_width_PARM_2
                                    178 	.globl _nrf24_dynamic_payload_PARM_2
                                    179 	.globl _nrf24_automatic_retransmit_setup_PARM_2
                                    180 	.globl _nrf24_device_PARM_2
                                    181 	.globl _nrf24_receive_PARM_2
                                    182 	.globl _nrf24_send_payload_PARM_2
                                    183 	.globl _nrf24_transmit_PARM_3
                                    184 	.globl _nrf24_transmit_PARM_2
                                    185 	.globl _DMA_UR4R_TXAL
                                    186 	.globl _DMA_UR4R_TXAH
                                    187 	.globl _DMA_UR4R_DONE
                                    188 	.globl _DMA_UR4R_AMT
                                    189 	.globl _DMA_UR4R_STA
                                    190 	.globl _DMA_UR4R_CR
                                    191 	.globl _DMA_UR4R_CFG
                                    192 	.globl _DMA_UR4T_TXAL
                                    193 	.globl _DMA_UR4T_TXAH
                                    194 	.globl _DMA_UR4T_DONE
                                    195 	.globl _DMA_UR4T_AMT
                                    196 	.globl _DMA_UR4T_STA
                                    197 	.globl _DMA_UR4T_CR
                                    198 	.globl _DMA_UR4T_CFG
                                    199 	.globl _DMA_UR3R_TXAL
                                    200 	.globl _DMA_UR3R_TXAH
                                    201 	.globl _DMA_UR3R_DONE
                                    202 	.globl _DMA_UR3R_AMT
                                    203 	.globl _DMA_UR3R_STA
                                    204 	.globl _DMA_UR3R_CR
                                    205 	.globl _DMA_UR3R_CFG
                                    206 	.globl _DMA_UR3T_TXAL
                                    207 	.globl _DMA_UR3T_TXAH
                                    208 	.globl _DMA_UR3T_DONE
                                    209 	.globl _DMA_UR3T_AMT
                                    210 	.globl _DMA_UR3T_STA
                                    211 	.globl _DMA_UR3T_CR
                                    212 	.globl _DMA_UR3T_CFG
                                    213 	.globl _DMA_UR2R_TXAL
                                    214 	.globl _DMA_UR2R_TXAH
                                    215 	.globl _DMA_UR2R_DONE
                                    216 	.globl _DMA_UR2R_AMT
                                    217 	.globl _DMA_UR2R_STA
                                    218 	.globl _DMA_UR2R_CR
                                    219 	.globl _DMA_UR2R_CFG
                                    220 	.globl _DMA_UR2T_TXAL
                                    221 	.globl _DMA_UR2T_TXAH
                                    222 	.globl _DMA_UR2T_DONE
                                    223 	.globl _DMA_UR2T_AMT
                                    224 	.globl _DMA_UR2T_STA
                                    225 	.globl _DMA_UR2T_CR
                                    226 	.globl _DMA_UR2T_CFG
                                    227 	.globl _DMA_UR1R_TXAL
                                    228 	.globl _DMA_UR1R_TXAH
                                    229 	.globl _DMA_UR1R_DONE
                                    230 	.globl _DMA_UR1R_AMT
                                    231 	.globl _DMA_UR1R_STA
                                    232 	.globl _DMA_UR1R_CR
                                    233 	.globl _DMA_UR1R_CFG
                                    234 	.globl _DMA_UR1T_TXAL
                                    235 	.globl _DMA_UR1T_TXAH
                                    236 	.globl _DMA_UR1T_DONE
                                    237 	.globl _DMA_URTX_AMT
                                    238 	.globl _DMA_UR1T_STA
                                    239 	.globl _DMA_UR1T_CR
                                    240 	.globl _DMA_UR1T_CFG
                                    241 	.globl _TM4PS
                                    242 	.globl _TM3PS
                                    243 	.globl _TM2PS
                                    244 	.globl _IRC48MCR
                                    245 	.globl _IRCDB
                                    246 	.globl _MCLKOCR
                                    247 	.globl _CKSEL
                                    248 	.globl _IRC32KCR
                                    249 	.globl _XOSCCR
                                    250 	.globl _HIRCCR
                                    251 	.globl _CLKDIV
                                    252 	.globl _DMA_SPI_CFG2
                                    253 	.globl _DMA_SPI_RXAL
                                    254 	.globl _DMA_SPI_RXAH
                                    255 	.globl _DMA_SPI_TXAL
                                    256 	.globl _DMA_SPI_TXAH
                                    257 	.globl _DMA_SPI_DONE
                                    258 	.globl _DMA_SPI_AMT
                                    259 	.globl _DMA_SPI_STA
                                    260 	.globl _DMA_SPI_CR
                                    261 	.globl _DMA_SPI_CFG
                                    262 	.globl _SSEC
                                    263 	.globl _SEC
                                    264 	.globl _MIN
                                    265 	.globl _HOUR
                                    266 	.globl _DAY
                                    267 	.globl _MONTH
                                    268 	.globl _YEAR
                                    269 	.globl _INISSEC
                                    270 	.globl _INISEC
                                    271 	.globl _INIMIN
                                    272 	.globl _INIHOUR
                                    273 	.globl _INIDAY
                                    274 	.globl _INIMONTH
                                    275 	.globl _INIYEAR
                                    276 	.globl _ALASSEC
                                    277 	.globl _ALASEC
                                    278 	.globl _ALAMIN
                                    279 	.globl _ALAHOUR
                                    280 	.globl _RTCIF
                                    281 	.globl _RTCIEN
                                    282 	.globl _RTCCFG
                                    283 	.globl _RTCCR
                                    284 	.globl _PWMB_OISR
                                    285 	.globl _PWMB_DTR
                                    286 	.globl _PWMB_BKR
                                    287 	.globl _PWMB_CCR4L
                                    288 	.globl _PWMB_CCR4H
                                    289 	.globl _PWMB_CCR3L
                                    290 	.globl _PWMB_CCR3H
                                    291 	.globl _PWMB_CCR2L
                                    292 	.globl _PWMB_CCR2H
                                    293 	.globl _PWMB_CCR1L
                                    294 	.globl _PWMB_CCR1H
                                    295 	.globl _PWMB_RCR
                                    296 	.globl _PWMB_ARRL
                                    297 	.globl _PWMB_ARRH
                                    298 	.globl _PWMB_PSCRL
                                    299 	.globl _PWMB_PSCRH
                                    300 	.globl _PWMB_CNTRL
                                    301 	.globl _PWMB_CNTRH
                                    302 	.globl _PWMB_CCER2
                                    303 	.globl _PWMB_CCER1
                                    304 	.globl _PWMB_CCMR4
                                    305 	.globl _PWMB_CCMR3
                                    306 	.globl _PWMB_CCMR2
                                    307 	.globl _PWMB_CCMR1
                                    308 	.globl _PWMB_EGR
                                    309 	.globl _PWMB_SR2
                                    310 	.globl _PWMB_SR1
                                    311 	.globl _PWMB_IER
                                    312 	.globl _PWMB_ETR
                                    313 	.globl _PWMB_SMCR
                                    314 	.globl _PWMB_CR2
                                    315 	.globl _PWMB_CR1
                                    316 	.globl _PWMA_OISR
                                    317 	.globl _PWMA_DTR
                                    318 	.globl _PWMA_BKR
                                    319 	.globl _PWMA_CCR4L
                                    320 	.globl _PWMA_CCR4H
                                    321 	.globl _PWMA_CCR3L
                                    322 	.globl _PWMA_CCR3H
                                    323 	.globl _PWMA_CCR2L
                                    324 	.globl _PWMA_CCR2H
                                    325 	.globl _PWMA_CCR1L
                                    326 	.globl _PWMA_CCR1H
                                    327 	.globl _PWMA_RCR
                                    328 	.globl _PWMA_ARRL
                                    329 	.globl _PWMA_ARRH
                                    330 	.globl _PWMA_PSCRL
                                    331 	.globl _PWMA_PSCRH
                                    332 	.globl _PWMA_CNTRL
                                    333 	.globl _PWMA_CNTRH
                                    334 	.globl _PWMA_CCER2
                                    335 	.globl _PWMA_CCER1
                                    336 	.globl _PWMA_CCMR4
                                    337 	.globl _PWMA_CCMR3
                                    338 	.globl _PWMA_CCMR2
                                    339 	.globl _PWMA_CCMR1
                                    340 	.globl _PWMA_EGR
                                    341 	.globl _PWMA_SR2
                                    342 	.globl _PWMA_SR1
                                    343 	.globl _PWMA_IER
                                    344 	.globl _PWMA_ETR
                                    345 	.globl _PWMA_SMCR
                                    346 	.globl _PWMA_CR2
                                    347 	.globl _PWMA_CR1
                                    348 	.globl _PWMB_IOAUX
                                    349 	.globl _PWMB_PS
                                    350 	.globl _PWMB_ENO
                                    351 	.globl _PWMB_ETRPS
                                    352 	.globl _PWMA_IOAUX
                                    353 	.globl _PWMA_PS
                                    354 	.globl _PWMA_ENO
                                    355 	.globl _PWMA_ETRPS
                                    356 	.globl _RSTFLAG
                                    357 	.globl _SPFUNC
                                    358 	.globl _OPCON
                                    359 	.globl _ARCON
                                    360 	.globl _MD4
                                    361 	.globl _MD5
                                    362 	.globl _MD0
                                    363 	.globl _MD1
                                    364 	.globl _MD2
                                    365 	.globl _MD3
                                    366 	.globl _DMA_LCM_RXAL
                                    367 	.globl _DMA_LCM_RXAH
                                    368 	.globl _DMA_LCM_TXAL
                                    369 	.globl _DMA_LCM_TXAH
                                    370 	.globl _DMA_LCM_DONE
                                    371 	.globl _DMA_LCM_AMT
                                    372 	.globl _DMA_LCM_STA
                                    373 	.globl _DMA_LCM_CR
                                    374 	.globl _DMA_LCM_CFG
                                    375 	.globl _LCMIDDAT
                                    376 	.globl _LCMIDDATH
                                    377 	.globl _LCMIDDATL
                                    378 	.globl _LCMSTA
                                    379 	.globl _LCMCR
                                    380 	.globl _LCMCFG2
                                    381 	.globl _LCMCFG
                                    382 	.globl _I2CMSAUX
                                    383 	.globl _I2CRXD
                                    384 	.globl _I2CTXD
                                    385 	.globl _I2CSLADR
                                    386 	.globl _I2CSLST
                                    387 	.globl _I2CSLCR
                                    388 	.globl _I2CMSST
                                    389 	.globl _I2CMSCR
                                    390 	.globl _I2CCFG
                                    391 	.globl _PINIPH
                                    392 	.globl _PINIPL
                                    393 	.globl _P5IE
                                    394 	.globl _P5DR
                                    395 	.globl _P5SR
                                    396 	.globl _P5NCS
                                    397 	.globl _P5PU
                                    398 	.globl _P5WKUE
                                    399 	.globl _P5IM1
                                    400 	.globl _P5IM0
                                    401 	.globl _P5INTF
                                    402 	.globl _P5INTE
                                    403 	.globl _P3IE
                                    404 	.globl _P3DR
                                    405 	.globl _P3SR
                                    406 	.globl _P3NCS
                                    407 	.globl _P3PU
                                    408 	.globl _P3WKUE
                                    409 	.globl _P3IM1
                                    410 	.globl _P3IM0
                                    411 	.globl _P3INTF
                                    412 	.globl _P3INTE
                                    413 	.globl _P2IE
                                    414 	.globl _P2DR
                                    415 	.globl _P2SR
                                    416 	.globl _P2NCS
                                    417 	.globl _P2PU
                                    418 	.globl _P2WKUE
                                    419 	.globl _P2IM1
                                    420 	.globl _P2IM0
                                    421 	.globl _P2INTF
                                    422 	.globl _P2INTE
                                    423 	.globl _P1IE
                                    424 	.globl _P1DR
                                    425 	.globl _P1SR
                                    426 	.globl _P1NCS
                                    427 	.globl _P1PU
                                    428 	.globl _P1WKUE
                                    429 	.globl _P1IM1
                                    430 	.globl _P1IM0
                                    431 	.globl _P1INTF
                                    432 	.globl _P1INTE
                                    433 	.globl _DMA_M2M_RXAL
                                    434 	.globl _DMA_M2M_RXAH
                                    435 	.globl _DMA_M2M_TXAL
                                    436 	.globl _DMA_M2M_TXAH
                                    437 	.globl _DMA_M2M_DONE
                                    438 	.globl _DMA_M2M_AMT
                                    439 	.globl _DMA_M2M_STA
                                    440 	.globl _DMA_M2M_CR
                                    441 	.globl _DMA_M2M_CFG
                                    442 	.globl _CMPEXCFG
                                    443 	.globl _DMA_ADC_CHSW1
                                    444 	.globl _DMA_ADC_CHSW0
                                    445 	.globl _DMA_ADC_CFG2
                                    446 	.globl _DMA_ADC_RXAL
                                    447 	.globl _DMA_ADC_RXAH
                                    448 	.globl _DMA_ADC_STA
                                    449 	.globl _DMA_ADC_CR
                                    450 	.globl _DMA_ADC_CFG
                                    451 	.globl _ADCEXCFG
                                    452 	.globl _ADCTIM
                                    453 	.globl _delay_function
                                    454 	.globl _SPI_Initializer
                                    455 	.globl _pinout_Initializer
                                    456 	.globl _nrf24_SPI
                                    457 	.globl _SPI_send_command
                                    458 	.globl _nrf24_CE
                                    459 	.globl _nrf24_dynamic_ack
                                    460 	.globl _nrf24_transmit
                                    461 	.globl _nrf24_send_payload
                                    462 	.globl _nrf24_transmit_status
                                    463 	.globl _nrf24_receive
                                    464 	.globl _nrf24_flush
                                    465 	.globl _nrf24_reset
                                    466 	.globl _nrf24_device
                                    467 	.globl _nrf24_automatic_retransmit_setup
                                    468 	.globl _nrf24_auto_acknowledgment_setup
                                    469 	.globl _nrf24_dynamic_payload
                                    470 	.globl _nrf24_datapipe_ptx
                                    471 	.globl _nrf24_datapipe_address_configuration
                                    472 	.globl _nrf24_prx_static_payload_width
                                    473 	.globl _nrf24_datapipe_enable
                                    474 	.globl _nrf24_address_width
                                    475 	.globl _nrf24_rf_datarate
                                    476 	.globl _nrf24_rf_power
                                    477 	.globl _nrf24_rf_channel
                                    478 	.globl _nrf24_interrupt_mask
                                    479 	.globl _nrf24_crc_configuration
                                    480 	.globl _nrf24_mode
                                    481 	.globl _nrf24_read
                                    482 	.globl _nrf24_write
                                    483 ;--------------------------------------------------------
                                    484 ; special function registers
                                    485 ;--------------------------------------------------------
                                    486 	.area RSEG    (ABS,DATA)
      000000                        487 	.org 0x0000
                           0000BC   488 _ADC_CONTR	=	0x00bc
                           0000BD   489 _ADC_RESH	=	0x00bd
                           0000BE   490 _ADC_RESL	=	0x00be
                           00BDBE   491 _ADC_RES	=	0xbdbe
                           0000DE   492 _ADCCFG	=	0x00de
                           0000FA   493 _DMA_ADC_AMT	=	0x00fa
                           0000E6   494 _CMPCR1	=	0x00e6
                           0000E7   495 _CMPCR2	=	0x00e7
                           000082   496 _DPL	=	0x0082
                           000083   497 _DPH	=	0x0083
                           008382   498 _DP	=	0x8382
                           0000E3   499 _DPS	=	0x00e3
                           0000E4   500 _DPL1	=	0x00e4
                           0000E5   501 _DPH1	=	0x00e5
                           0000AE   502 _TA	=	0x00ae
                           000090   503 _P1	=	0x0090
                           000091   504 _P1M1	=	0x0091
                           000092   505 _P1M0	=	0x0092
                           0000A0   506 _P2	=	0x00a0
                           000095   507 _P2M1	=	0x0095
                           000096   508 _P2M0	=	0x0096
                           0000B0   509 _P3	=	0x00b0
                           0000B1   510 _P3M1	=	0x00b1
                           0000B2   511 _P3M0	=	0x00b2
                           0000C8   512 _P5	=	0x00c8
                           0000C9   513 _P5M1	=	0x00c9
                           0000CA   514 _P5M0	=	0x00ca
                           0000C2   515 _IAP_DATA	=	0x00c2
                           0000C3   516 _IAP_ADDRH	=	0x00c3
                           0000C4   517 _IAP_ADDRL	=	0x00c4
                           00C3C4   518 _IAP_ADDR	=	0xc3c4
                           0000C5   519 _IAP_CMD	=	0x00c5
                           0000C6   520 _IAP_TRIG	=	0x00c6
                           0000C7   521 _IAP_CONTR	=	0x00c7
                           0000F5   522 _IAP_TPS	=	0x00f5
                           00008F   523 _INT_CLKO	=	0x008f
                           0000A8   524 _IE1	=	0x00a8
                           0000B8   525 _IP1L	=	0x00b8
                           0000B7   526 _IP1H	=	0x00b7
                           0000AF   527 _IE2	=	0x00af
                           0000B5   528 _IP2L	=	0x00b5
                           0000B6   529 _IP2H	=	0x00b6
                           0000DF   530 _IP3L	=	0x00df
                           0000EE   531 _IP3H	=	0x00ee
                           000081   532 _SP	=	0x0081
                           0000D0   533 _PSW	=	0x00d0
                           0000E0   534 _ACC	=	0x00e0
                           0000F0   535 _B	=	0x00f0
                           000087   536 _PCON	=	0x0087
                           0000FF   537 _RSTCFG	=	0x00ff
                           0000A2   538 _P_SW1	=	0x00a2
                           0000BA   539 _P_SW2	=	0x00ba
                           0000A1   540 _BUS_SPEED	=	0x00a1
                           0000AA   541 _WKTCL	=	0x00aa
                           0000AB   542 _WKTCH	=	0x00ab
                           00ABAA   543 _WKTC	=	0xabaa
                           0000CD   544 _SPSTAT	=	0x00cd
                           0000CE   545 _SPCTL	=	0x00ce
                           0000CF   546 _SPDAT	=	0x00cf
                           00009D   547 _IRCBAND	=	0x009d
                           00009E   548 _LIRTRIM	=	0x009e
                           00009F   549 _IRTRIM	=	0x009f
                           000088   550 _TCON	=	0x0088
                           000089   551 _TMOD	=	0x0089
                           00008A   552 _T0L	=	0x008a
                           00008C   553 _T0H	=	0x008c
                           008C8A   554 _T0	=	0x8c8a
                           00008B   555 _T1L	=	0x008b
                           00008D   556 _T1H	=	0x008d
                           008D8B   557 _T1	=	0x8d8b
                           0000D7   558 _T2L	=	0x00d7
                           0000D6   559 _T2H	=	0x00d6
                           00D6D7   560 _T2	=	0xd6d7
                           00008E   561 _AUXR	=	0x008e
                           0000C1   562 _WDT_CONTR	=	0x00c1
                           0000D1   563 _T4T3M	=	0x00d1
                           0000D2   564 _T4H	=	0x00d2
                           0000D3   565 _T4L	=	0x00d3
                           00D2D3   566 _T4	=	0xd2d3
                           0000D4   567 _T3H	=	0x00d4
                           0000D5   568 _T3L	=	0x00d5
                           00D4D5   569 _T3	=	0xd4d5
                           0000EF   570 _AUXINTIF	=	0x00ef
                           0000A9   571 _SADDR	=	0x00a9
                           0000B9   572 _SADEN	=	0x00b9
                           000098   573 _S1CON	=	0x0098
                           000099   574 _S1BUF	=	0x0099
                           00009A   575 _S2CON	=	0x009a
                           00009B   576 _S2BUF	=	0x009b
                           0000AC   577 _S3CON	=	0x00ac
                           0000AD   578 _S3BUF	=	0x00ad
                           000084   579 _S4CON	=	0x0084
                           000085   580 _S4BUF	=	0x0085
                           0000DC   581 _USBCLK	=	0x00dc
                           0000EC   582 _USBDAT	=	0x00ec
                           0000F4   583 _USBCON	=	0x00f4
                           0000FC   584 _USBADR	=	0x00fc
                                    585 ;--------------------------------------------------------
                                    586 ; special function bits
                                    587 ;--------------------------------------------------------
                                    588 	.area RSEG    (ABS,DATA)
      000000                        589 	.org 0x0000
                           000090   590 _P1_0	=	0x0090
                           000091   591 _P1_1	=	0x0091
                           000092   592 _P1_2	=	0x0092
                           000093   593 _P1_3	=	0x0093
                           000094   594 _P1_4	=	0x0094
                           000095   595 _P1_5	=	0x0095
                           000096   596 _P1_6	=	0x0096
                           000097   597 _P1_7	=	0x0097
                           0000A0   598 _P2_0	=	0x00a0
                           0000A1   599 _P2_1	=	0x00a1
                           0000A2   600 _P2_2	=	0x00a2
                           0000A3   601 _P2_3	=	0x00a3
                           0000A4   602 _P2_4	=	0x00a4
                           0000A5   603 _P2_5	=	0x00a5
                           0000A6   604 _P2_6	=	0x00a6
                           0000A7   605 _P2_7	=	0x00a7
                           0000B0   606 _P3_0	=	0x00b0
                           0000B1   607 _P3_1	=	0x00b1
                           0000B2   608 _P3_2	=	0x00b2
                           0000B3   609 _P3_3	=	0x00b3
                           0000B4   610 _P3_4	=	0x00b4
                           0000B5   611 _P3_5	=	0x00b5
                           0000B6   612 _P3_6	=	0x00b6
                           0000B7   613 _P3_7	=	0x00b7
                           0000C8   614 _P5_0	=	0x00c8
                           0000C9   615 _P5_1	=	0x00c9
                           0000CA   616 _P5_2	=	0x00ca
                           0000CB   617 _P5_3	=	0x00cb
                           0000CC   618 _P5_4	=	0x00cc
                           0000CD   619 _P5_5	=	0x00cd
                           000088   620 _INT0TR	=	0x0088
                           00008A   621 _INT1TR	=	0x008a
                           0000A8   622 _INT0IE	=	0x00a8
                           0000AA   623 _INT1IE	=	0x00aa
                           0000AF   624 _EA	=	0x00af
                           0000D0   625 _P	=	0x00d0
                           0000D1   626 _F1	=	0x00d1
                           0000D2   627 _OV	=	0x00d2
                           0000D3   628 _RS0	=	0x00d3
                           0000D4   629 _RS1	=	0x00d4
                           0000D5   630 _F0	=	0x00d5
                           0000D6   631 _AC	=	0x00d6
                           0000D7   632 _CY	=	0x00d7
                           00008C   633 _T0RUN	=	0x008c
                           00008E   634 _T1RUN	=	0x008e
                           0000A9   635 _T0IE	=	0x00a9
                           0000AB   636 _T1IE	=	0x00ab
                           00009F   637 _S1SM0_FE	=	0x009f
                                    638 ;--------------------------------------------------------
                                    639 ; overlayable register banks
                                    640 ;--------------------------------------------------------
                                    641 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        642 	.ds 8
                                    643 ;--------------------------------------------------------
                                    644 ; internal ram data
                                    645 ;--------------------------------------------------------
                                    646 	.area DSEG    (DATA)
                                    647 ;--------------------------------------------------------
                                    648 ; overlayable items in internal ram 
                                    649 ;--------------------------------------------------------
                                    650 ;--------------------------------------------------------
                                    651 ; indirectly addressable internal ram data
                                    652 ;--------------------------------------------------------
                                    653 	.area ISEG    (DATA)
                                    654 ;--------------------------------------------------------
                                    655 ; absolute internal ram data
                                    656 ;--------------------------------------------------------
                                    657 	.area IABS    (ABS,DATA)
                                    658 	.area IABS    (ABS,DATA)
                                    659 ;--------------------------------------------------------
                                    660 ; bit data
                                    661 ;--------------------------------------------------------
                                    662 	.area BSEG    (BIT)
                                    663 ;--------------------------------------------------------
                                    664 ; paged external ram data
                                    665 ;--------------------------------------------------------
                                    666 	.area PSEG    (PAG,XDATA)
                                    667 ;--------------------------------------------------------
                                    668 ; external ram data
                                    669 ;--------------------------------------------------------
                                    670 	.area XSEG    (XDATA)
                           00FEA8   671 _ADCTIM	=	0xfea8
                           00FEAD   672 _ADCEXCFG	=	0xfead
                           00FA10   673 _DMA_ADC_CFG	=	0xfa10
                           00FA11   674 _DMA_ADC_CR	=	0xfa11
                           00FA12   675 _DMA_ADC_STA	=	0xfa12
                           00FA17   676 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   677 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   678 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   679 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   680 _DMA_ADC_CHSW1	=	0xfa1b
                           00FEAE   681 _CMPEXCFG	=	0xfeae
                           00FA00   682 _DMA_M2M_CFG	=	0xfa00
                           00FA01   683 _DMA_M2M_CR	=	0xfa01
                           00FA02   684 _DMA_M2M_STA	=	0xfa02
                           00FA03   685 _DMA_M2M_AMT	=	0xfa03
                           00FA04   686 _DMA_M2M_DONE	=	0xfa04
                           00FA05   687 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   688 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   689 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   690 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   691 _P1INTE	=	0xfd01
                           00FD11   692 _P1INTF	=	0xfd11
                           00FD21   693 _P1IM0	=	0xfd21
                           00FD31   694 _P1IM1	=	0xfd31
                           00FD41   695 _P1WKUE	=	0xfd41
                           00FE11   696 _P1PU	=	0xfe11
                           00FE19   697 _P1NCS	=	0xfe19
                           00FE21   698 _P1SR	=	0xfe21
                           00FE29   699 _P1DR	=	0xfe29
                           00FE31   700 _P1IE	=	0xfe31
                           00FD02   701 _P2INTE	=	0xfd02
                           00FD12   702 _P2INTF	=	0xfd12
                           00FD22   703 _P2IM0	=	0xfd22
                           00FD32   704 _P2IM1	=	0xfd32
                           00FD42   705 _P2WKUE	=	0xfd42
                           00FE12   706 _P2PU	=	0xfe12
                           00FE1A   707 _P2NCS	=	0xfe1a
                           00FE22   708 _P2SR	=	0xfe22
                           00FE2A   709 _P2DR	=	0xfe2a
                           00FE32   710 _P2IE	=	0xfe32
                           00FD03   711 _P3INTE	=	0xfd03
                           00FD13   712 _P3INTF	=	0xfd13
                           00FD23   713 _P3IM0	=	0xfd23
                           00FD33   714 _P3IM1	=	0xfd33
                           00FD43   715 _P3WKUE	=	0xfd43
                           00FE13   716 _P3PU	=	0xfe13
                           00FE1B   717 _P3NCS	=	0xfe1b
                           00FE23   718 _P3SR	=	0xfe23
                           00FE2B   719 _P3DR	=	0xfe2b
                           00FE33   720 _P3IE	=	0xfe33
                           00FD05   721 _P5INTE	=	0xfd05
                           00FD15   722 _P5INTF	=	0xfd15
                           00FD25   723 _P5IM0	=	0xfd25
                           00FD35   724 _P5IM1	=	0xfd35
                           00FD45   725 _P5WKUE	=	0xfd45
                           00FE15   726 _P5PU	=	0xfe15
                           00FE1D   727 _P5NCS	=	0xfe1d
                           00FE25   728 _P5SR	=	0xfe25
                           00FE2D   729 _P5DR	=	0xfe2d
                           00FE35   730 _P5IE	=	0xfe35
                           00FD60   731 _PINIPL	=	0xfd60
                           00FD61   732 _PINIPH	=	0xfd61
                           00FE80   733 _I2CCFG	=	0xfe80
                           00FE81   734 _I2CMSCR	=	0xfe81
                           00FE82   735 _I2CMSST	=	0xfe82
                           00FE83   736 _I2CSLCR	=	0xfe83
                           00FE84   737 _I2CSLST	=	0xfe84
                           00FE85   738 _I2CSLADR	=	0xfe85
                           00FE86   739 _I2CTXD	=	0xfe86
                           00FE87   740 _I2CRXD	=	0xfe87
                           00FE88   741 _I2CMSAUX	=	0xfe88
                           00FE50   742 _LCMCFG	=	0xfe50
                           00FE51   743 _LCMCFG2	=	0xfe51
                           00FE52   744 _LCMCR	=	0xfe52
                           00FE53   745 _LCMSTA	=	0xfe53
                           00FE54   746 _LCMIDDATL	=	0xfe54
                           00FE55   747 _LCMIDDATH	=	0xfe55
                           00FE54   748 _LCMIDDAT	=	0xfe54
                           00FA70   749 _DMA_LCM_CFG	=	0xfa70
                           00FA71   750 _DMA_LCM_CR	=	0xfa71
                           00FA72   751 _DMA_LCM_STA	=	0xfa72
                           00FA73   752 _DMA_LCM_AMT	=	0xfa73
                           00FA74   753 _DMA_LCM_DONE	=	0xfa74
                           00FA75   754 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   755 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   756 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   757 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   758 _MD3	=	0xfcf0
                           00FCF1   759 _MD2	=	0xfcf1
                           00FCF2   760 _MD1	=	0xfcf2
                           00FCF3   761 _MD0	=	0xfcf3
                           00FCF4   762 _MD5	=	0xfcf4
                           00FCF5   763 _MD4	=	0xfcf5
                           00FCF6   764 _ARCON	=	0xfcf6
                           00FCF7   765 _OPCON	=	0xfcf7
                           00FE08   766 _SPFUNC	=	0xfe08
                           00FE09   767 _RSTFLAG	=	0xfe09
                           00FEB0   768 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   769 _PWMA_ENO	=	0xfeb1
                           00FEB2   770 _PWMA_PS	=	0xfeb2
                           00FEB3   771 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   772 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   773 _PWMB_ENO	=	0xfeb5
                           00FEB6   774 _PWMB_PS	=	0xfeb6
                           00FEB7   775 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   776 _PWMA_CR1	=	0xfec0
                           00FEC1   777 _PWMA_CR2	=	0xfec1
                           00FEC2   778 _PWMA_SMCR	=	0xfec2
                           00FEC3   779 _PWMA_ETR	=	0xfec3
                           00FEC4   780 _PWMA_IER	=	0xfec4
                           00FEC5   781 _PWMA_SR1	=	0xfec5
                           00FEC6   782 _PWMA_SR2	=	0xfec6
                           00FEC7   783 _PWMA_EGR	=	0xfec7
                           00FEC8   784 _PWMA_CCMR1	=	0xfec8
                           00FEC9   785 _PWMA_CCMR2	=	0xfec9
                           00FECA   786 _PWMA_CCMR3	=	0xfeca
                           00FECB   787 _PWMA_CCMR4	=	0xfecb
                           00FECC   788 _PWMA_CCER1	=	0xfecc
                           00FECD   789 _PWMA_CCER2	=	0xfecd
                           00FECE   790 _PWMA_CNTRH	=	0xfece
                           00FECF   791 _PWMA_CNTRL	=	0xfecf
                           00FED0   792 _PWMA_PSCRH	=	0xfed0
                           00FED1   793 _PWMA_PSCRL	=	0xfed1
                           00FED2   794 _PWMA_ARRH	=	0xfed2
                           00FED3   795 _PWMA_ARRL	=	0xfed3
                           00FED4   796 _PWMA_RCR	=	0xfed4
                           00FED5   797 _PWMA_CCR1H	=	0xfed5
                           00FED6   798 _PWMA_CCR1L	=	0xfed6
                           00FED7   799 _PWMA_CCR2H	=	0xfed7
                           00FED8   800 _PWMA_CCR2L	=	0xfed8
                           00FED9   801 _PWMA_CCR3H	=	0xfed9
                           00FEDA   802 _PWMA_CCR3L	=	0xfeda
                           00FEDB   803 _PWMA_CCR4H	=	0xfedb
                           00FEDC   804 _PWMA_CCR4L	=	0xfedc
                           00FEDD   805 _PWMA_BKR	=	0xfedd
                           00FEDE   806 _PWMA_DTR	=	0xfede
                           00FEDF   807 _PWMA_OISR	=	0xfedf
                           00FEE0   808 _PWMB_CR1	=	0xfee0
                           00FEE1   809 _PWMB_CR2	=	0xfee1
                           00FEE2   810 _PWMB_SMCR	=	0xfee2
                           00FEE3   811 _PWMB_ETR	=	0xfee3
                           00FEE4   812 _PWMB_IER	=	0xfee4
                           00FEE5   813 _PWMB_SR1	=	0xfee5
                           00FEE6   814 _PWMB_SR2	=	0xfee6
                           00FEE7   815 _PWMB_EGR	=	0xfee7
                           00FEE8   816 _PWMB_CCMR1	=	0xfee8
                           00FEE9   817 _PWMB_CCMR2	=	0xfee9
                           00FEEA   818 _PWMB_CCMR3	=	0xfeea
                           00FEEB   819 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   820 _PWMB_CCER1	=	0xfeec
                           00FEED   821 _PWMB_CCER2	=	0xfeed
                           00FEEE   822 _PWMB_CNTRH	=	0xfeee
                           00FEEF   823 _PWMB_CNTRL	=	0xfeef
                           00FEF0   824 _PWMB_PSCRH	=	0xfef0
                           00FEF1   825 _PWMB_PSCRL	=	0xfef1
                           00FEF2   826 _PWMB_ARRH	=	0xfef2
                           00FEF3   827 _PWMB_ARRL	=	0xfef3
                           00FEF4   828 _PWMB_RCR	=	0xfef4
                           00FEF5   829 _PWMB_CCR1H	=	0xfef5
                           00FEF6   830 _PWMB_CCR1L	=	0xfef6
                           00FEF7   831 _PWMB_CCR2H	=	0xfef7
                           00FEF8   832 _PWMB_CCR2L	=	0xfef8
                           00FEF9   833 _PWMB_CCR3H	=	0xfef9
                           00FEFA   834 _PWMB_CCR3L	=	0xfefa
                           00FEFB   835 _PWMB_CCR4H	=	0xfefb
                           00FEFC   836 _PWMB_CCR4L	=	0xfefc
                           00FEFD   837 _PWMB_BKR	=	0xfefd
                           00FEFE   838 _PWMB_DTR	=	0xfefe
                           00FEFF   839 _PWMB_OISR	=	0xfeff
                           00FE60   840 _RTCCR	=	0xfe60
                           00FE61   841 _RTCCFG	=	0xfe61
                           00FE62   842 _RTCIEN	=	0xfe62
                           00FE63   843 _RTCIF	=	0xfe63
                           00FE64   844 _ALAHOUR	=	0xfe64
                           00FE65   845 _ALAMIN	=	0xfe65
                           00FE66   846 _ALASEC	=	0xfe66
                           00FE67   847 _ALASSEC	=	0xfe67
                           00FE68   848 _INIYEAR	=	0xfe68
                           00FE69   849 _INIMONTH	=	0xfe69
                           00FE6A   850 _INIDAY	=	0xfe6a
                           00FE6B   851 _INIHOUR	=	0xfe6b
                           00FE6C   852 _INIMIN	=	0xfe6c
                           00FE6D   853 _INISEC	=	0xfe6d
                           00FE6E   854 _INISSEC	=	0xfe6e
                           00FE70   855 _YEAR	=	0xfe70
                           00FE71   856 _MONTH	=	0xfe71
                           00FE72   857 _DAY	=	0xfe72
                           00FE73   858 _HOUR	=	0xfe73
                           00FE74   859 _MIN	=	0xfe74
                           00FE75   860 _SEC	=	0xfe75
                           00FE76   861 _SSEC	=	0xfe76
                           00FA20   862 _DMA_SPI_CFG	=	0xfa20
                           00FA21   863 _DMA_SPI_CR	=	0xfa21
                           00FA22   864 _DMA_SPI_STA	=	0xfa22
                           00FA23   865 _DMA_SPI_AMT	=	0xfa23
                           00FA24   866 _DMA_SPI_DONE	=	0xfa24
                           00FA25   867 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   868 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   869 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   870 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   871 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   872 _CLKDIV	=	0xfe01
                           00FE02   873 _HIRCCR	=	0xfe02
                           00FE03   874 _XOSCCR	=	0xfe03
                           00FE04   875 _IRC32KCR	=	0xfe04
                           00FE00   876 _CKSEL	=	0xfe00
                           00FE05   877 _MCLKOCR	=	0xfe05
                           00FE06   878 _IRCDB	=	0xfe06
                           00FE07   879 _IRC48MCR	=	0xfe07
                           00FEA2   880 _TM2PS	=	0xfea2
                           00FEA3   881 _TM3PS	=	0xfea3
                           00FEA4   882 _TM4PS	=	0xfea4
                           00FA30   883 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   884 _DMA_UR1T_CR	=	0xfa31
                           00FA32   885 _DMA_UR1T_STA	=	0xfa32
                           00FA33   886 _DMA_URTX_AMT	=	0xfa33
                           00FA34   887 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   888 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   889 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   890 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   891 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   892 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   893 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   894 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   895 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   896 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   897 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   898 _DMA_UR2T_CR	=	0xfa31
                           00FA32   899 _DMA_UR2T_STA	=	0xfa32
                           00FA33   900 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   901 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   902 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   903 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   904 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   905 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   906 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   907 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   908 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   909 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   910 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   911 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   912 _DMA_UR3T_CR	=	0xfa31
                           00FA32   913 _DMA_UR3T_STA	=	0xfa32
                           00FA33   914 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   915 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   916 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   917 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   918 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   919 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   920 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   921 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   922 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   923 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   924 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   925 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   926 _DMA_UR4T_CR	=	0xfa31
                           00FA32   927 _DMA_UR4T_STA	=	0xfa32
                           00FA33   928 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   929 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   930 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   931 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   932 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   933 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   934 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   935 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   936 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   937 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   938 _DMA_UR4R_TXAL	=	0xfa3e
      000000                        939 _uartGetCharacter_result_65536_74:
      000000                        940 	.ds 1
      000001                        941 _SPI_command:
      000001                        942 	.ds 1
      000002                        943 _register_current_value:
      000002                        944 	.ds 1
      000003                        945 _register_new_value:
      000003                        946 	.ds 1
      000004                        947 _write_pointer:
      000004                        948 	.ds 1
      000005                        949 _current_address_width:
      000005                        950 	.ds 1
      000006                        951 _current_payload_width:
      000006                        952 	.ds 1
      000007                        953 _delay_function_duration_ms_65536_113:
      000007                        954 	.ds 4
      00000B                        955 _nrf24_SPI_input_65536_119:
      00000B                        956 	.ds 1
      00000C                        957 _SPI_send_command_command_65536_121:
      00000C                        958 	.ds 1
      00000D                        959 _SPI_send_command_spi_byte_65536_122:
      00000D                        960 	.ds 1
      00000E                        961 _nrf24_CE_input_65536_123:
      00000E                        962 	.ds 1
      00000F                        963 _nrf24_dynamic_ack_state_65536_125:
      00000F                        964 	.ds 1
      000010                        965 _nrf24_transmit_PARM_2:
      000010                        966 	.ds 1
      000011                        967 _nrf24_transmit_PARM_3:
      000011                        968 	.ds 1
      000012                        969 _nrf24_transmit_payload_65536_129:
      000012                        970 	.ds 3
      000015                        971 _nrf24_send_payload_PARM_2:
      000015                        972 	.ds 1
      000016                        973 _nrf24_send_payload_payload_65536_133:
      000016                        974 	.ds 3
      000019                        975 _nrf24_receive_PARM_2:
      000019                        976 	.ds 1
      00001A                        977 _nrf24_receive_payload_65536_141:
      00001A                        978 	.ds 3
      00001D                        979 _nrf24_flush_fifo_select_65536_149:
      00001D                        980 	.ds 1
      00001E                        981 _nrf24_device_PARM_2:
      00001E                        982 	.ds 1
      00001F                        983 _nrf24_device_device_mode_65536_156:
      00001F                        984 	.ds 1
      000020                        985 _nrf24_device_hardwareCheckPassed_65537_158:
      000020                        986 	.ds 1
      000021                        987 _nrf24_device_new_value_65537_158:
      000021                        988 	.ds 1
      000022                        989 _nrf24_automatic_retransmit_setup_PARM_2:
      000022                        990 	.ds 1
      000023                        991 _nrf24_automatic_retransmit_setup_delay_time_65536_166:
      000023                        992 	.ds 2
      000025                        993 _nrf24_auto_acknowledgment_setup_datapipe_65536_169:
      000025                        994 	.ds 1
      000026                        995 _nrf24_dynamic_payload_PARM_2:
      000026                        996 	.ds 1
      000027                        997 _nrf24_dynamic_payload_state_65536_171:
      000027                        998 	.ds 1
      000028                        999 _nrf24_datapipe_ptx_datapipe_number_65536_175:
      000028                       1000 	.ds 1
      000029                       1001 _nrf24_prx_static_payload_width_PARM_2:
      000029                       1002 	.ds 1
      00002A                       1003 _nrf24_prx_static_payload_width_static_payload_width_65536_181:
      00002A                       1004 	.ds 1
      00002B                       1005 _nrf24_datapipe_enable_number_of_datapipes_65536_185:
      00002B                       1006 	.ds 1
      00002C                       1007 _nrf24_address_width_address_width_65536_187:
      00002C                       1008 	.ds 1
      00002D                       1009 _nrf24_rf_datarate_rf_datarate_65536_191:
      00002D                       1010 	.ds 2
      00002F                       1011 _nrf24_rf_power_rf_power_65536_194:
      00002F                       1012 	.ds 1
      000030                       1013 _nrf24_rf_channel_rf_channel_65536_197:
      000030                       1014 	.ds 1
      000031                       1015 _nrf24_rf_channel_write_pointer_131072_199:
      000031                       1016 	.ds 1
      000032                       1017 _nrf24_rf_channel_write_pointer_131072_200:
      000032                       1018 	.ds 1
      000033                       1019 _nrf24_interrupt_mask_PARM_2:
      000033                       1020 	.ds 1
      000034                       1021 _nrf24_interrupt_mask_PARM_3:
      000034                       1022 	.ds 1
      000035                       1023 _nrf24_interrupt_mask_rx_mask_65536_201:
      000035                       1024 	.ds 1
      000036                       1025 _nrf24_crc_configuration_PARM_2:
      000036                       1026 	.ds 1
      000037                       1027 _nrf24_crc_configuration_crc_enable_65536_203:
      000037                       1028 	.ds 1
      000038                       1029 _nrf24_mode_mode_65536_205:
      000038                       1030 	.ds 1
      000039                       1031 _nrf24_read_PARM_2:
      000039                       1032 	.ds 3
      00003C                       1033 _nrf24_read_PARM_3:
      00003C                       1034 	.ds 1
      00003D                       1035 _nrf24_read_PARM_4:
      00003D                       1036 	.ds 1
      00003E                       1037 _nrf24_read_address_65536_208:
      00003E                       1038 	.ds 1
      00003F                       1039 _nrf24_write_PARM_2:
      00003F                       1040 	.ds 3
      000042                       1041 _nrf24_write_PARM_3:
      000042                       1042 	.ds 1
      000043                       1043 _nrf24_write_PARM_4:
      000043                       1044 	.ds 1
      000044                       1045 _nrf24_write_address_65536_212:
      000044                       1046 	.ds 1
                                   1047 ;--------------------------------------------------------
                                   1048 ; absolute external ram data
                                   1049 ;--------------------------------------------------------
                                   1050 	.area XABS    (ABS,XDATA)
                                   1051 ;--------------------------------------------------------
                                   1052 ; external initialized ram data
                                   1053 ;--------------------------------------------------------
                                   1054 	.area XISEG   (XDATA)
      000000                       1055 _dataReady::
      000000                       1056 	.ds 1
      000001                       1057 _CSN_pin::
      000001                       1058 	.ds 13
      00000E                       1059 _CE_pin::
      00000E                       1060 	.ds 13
      00001B                       1061 _reset_flag:
      00001B                       1062 	.ds 1
      00001C                       1063 _current_mode:
      00001C                       1064 	.ds 1
      00001D                       1065 _current_acknowledgement_state:
      00001D                       1066 	.ds 1
      00001E                       1067 _dynamic_payload:
      00001E                       1068 	.ds 1
      00001F                       1069 _datapipe_address::
      00001F                       1070 	.ds 30
                                   1071 	.area HOME    (CODE)
                                   1072 	.area GSINIT0 (CODE)
                                   1073 	.area GSINIT1 (CODE)
                                   1074 	.area GSINIT2 (CODE)
                                   1075 	.area GSINIT3 (CODE)
                                   1076 	.area GSINIT4 (CODE)
                                   1077 	.area GSINIT5 (CODE)
                                   1078 	.area GSINIT  (CODE)
                                   1079 	.area GSFINAL (CODE)
                                   1080 	.area CSEG    (CODE)
                                   1081 ;--------------------------------------------------------
                                   1082 ; global & static initialisations
                                   1083 ;--------------------------------------------------------
                                   1084 	.area HOME    (CODE)
                                   1085 	.area GSINIT  (CODE)
                                   1086 	.area GSFINAL (CODE)
                                   1087 	.area GSINIT  (CODE)
                                   1088 ;--------------------------------------------------------
                                   1089 ; Home
                                   1090 ;--------------------------------------------------------
                                   1091 	.area HOME    (CODE)
                                   1092 	.area HOME    (CODE)
                                   1093 ;--------------------------------------------------------
                                   1094 ; code
                                   1095 ;--------------------------------------------------------
                                   1096 	.area CSEG    (CODE)
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'delay_function'
                                   1099 ;------------------------------------------------------------
                                   1100 ;duration_ms               Allocated with name '_delay_function_duration_ms_65536_113'
                                   1101 ;------------------------------------------------------------
                                   1102 ;	nrf24l01.c:66: void delay_function(uint32_t duration_ms)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function delay_function
                                   1105 ;	-----------------------------------------
      000000                       1106 _delay_function:
                           000007  1107 	ar7 = 0x07
                           000006  1108 	ar6 = 0x06
                           000005  1109 	ar5 = 0x05
                           000004  1110 	ar4 = 0x04
                           000003  1111 	ar3 = 0x03
                           000002  1112 	ar2 = 0x02
                           000001  1113 	ar1 = 0x01
                           000000  1114 	ar0 = 0x00
      000000 AF 82            [24] 1115 	mov	r7,dpl
      000002 AE 83            [24] 1116 	mov	r6,dph
      000004 AD F0            [24] 1117 	mov	r5,b
      000006 FC               [12] 1118 	mov	r4,a
      000007 90r00r07         [24] 1119 	mov	dptr,#_delay_function_duration_ms_65536_113
      00000A EF               [12] 1120 	mov	a,r7
      00000B F0               [24] 1121 	movx	@dptr,a
      00000C EE               [12] 1122 	mov	a,r6
      00000D A3               [24] 1123 	inc	dptr
      00000E F0               [24] 1124 	movx	@dptr,a
      00000F ED               [12] 1125 	mov	a,r5
      000010 A3               [24] 1126 	inc	dptr
      000011 F0               [24] 1127 	movx	@dptr,a
      000012 EC               [12] 1128 	mov	a,r4
      000013 A3               [24] 1129 	inc	dptr
      000014 F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	nrf24l01.c:68: delay1ms(duration_ms);
      000015 90r00r07         [24] 1132 	mov	dptr,#_delay_function_duration_ms_65536_113
      000018 E0               [24] 1133 	movx	a,@dptr
      000019 FC               [12] 1134 	mov	r4,a
      00001A A3               [24] 1135 	inc	dptr
      00001B E0               [24] 1136 	movx	a,@dptr
      00001C FD               [12] 1137 	mov	r5,a
      00001D A3               [24] 1138 	inc	dptr
      00001E E0               [24] 1139 	movx	a,@dptr
      00001F A3               [24] 1140 	inc	dptr
      000020 E0               [24] 1141 	movx	a,@dptr
      000021 8C 82            [24] 1142 	mov	dpl,r4
      000023 8D 83            [24] 1143 	mov	dph,r5
                                   1144 ;	nrf24l01.c:69: }
      000025 02r00r00         [24] 1145 	ljmp	_delay1ms
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'SPI_Initializer'
                                   1148 ;------------------------------------------------------------
                                   1149 ;	nrf24l01.c:73: void SPI_Initializer(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function SPI_Initializer
                                   1152 ;	-----------------------------------------
      000028                       1153 _SPI_Initializer:
                                   1154 ;	nrf24l01.c:79: spiSelectSpeed(SPI_SPEED), 
      000028 90 09 00         [24] 1155 	mov	dptr,#0x0900
      00002B 75 F0 3D         [24] 1156 	mov	b,#0x3d
      00002E E4               [12] 1157 	clr	a
      00002F 12r00r00         [24] 1158 	lcall	_spiSelectSpeed
      000032 AF 82            [24] 1159 	mov	r7,dpl
                                   1160 ;	nrf24l01.c:81: GPIO_BIDIRECTIONAL_MODE
      000034 90r00r00         [24] 1161 	mov	dptr,#_spiConfigure_PARM_2
      000037 E4               [12] 1162 	clr	a
      000038 F0               [24] 1163 	movx	@dptr,a
      000039 90r00r00         [24] 1164 	mov	dptr,#_spiConfigure_PARM_3
      00003C EF               [12] 1165 	mov	a,r7
      00003D F0               [24] 1166 	movx	@dptr,a
      00003E 90r00r00         [24] 1167 	mov	dptr,#_spiConfigure_PARM_4
      000041 E4               [12] 1168 	clr	a
      000042 F0               [24] 1169 	movx	@dptr,a
      000043 90r00r00         [24] 1170 	mov	dptr,#_spiConfigure_PARM_5
      000046 F0               [24] 1171 	movx	@dptr,a
      000047 75 82 20         [24] 1172 	mov	dpl,#0x20
                                   1173 ;	nrf24l01.c:84: }
      00004A 02r00r00         [24] 1174 	ljmp	_spiConfigure
                                   1175 ;------------------------------------------------------------
                                   1176 ;Allocation info for local variables in function 'pinout_Initializer'
                                   1177 ;------------------------------------------------------------
                                   1178 ;	nrf24l01.c:87: void pinout_Initializer(void)
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function pinout_Initializer
                                   1181 ;	-----------------------------------------
      00004D                       1182 _pinout_Initializer:
                                   1183 ;	nrf24l01.c:90: gpioConfigure(&CSN_pin);
      00004D 90r00r01         [24] 1184 	mov	dptr,#_CSN_pin
      000050 75 F0 00         [24] 1185 	mov	b,#0x00
      000053 12r00r00         [24] 1186 	lcall	_gpioConfigure
                                   1187 ;	nrf24l01.c:91: gpioConfigure(&CE_pin);
      000056 90r00r0E         [24] 1188 	mov	dptr,#_CE_pin
      000059 75 F0 00         [24] 1189 	mov	b,#0x00
      00005C 12r00r00         [24] 1190 	lcall	_gpioConfigure
                                   1191 ;	nrf24l01.c:93: gpioWrite(&CSN_pin, 0);
      00005F 90r00r00         [24] 1192 	mov	dptr,#_gpioWrite_PARM_2
      000062 E4               [12] 1193 	clr	a
      000063 F0               [24] 1194 	movx	@dptr,a
      000064 90r00r01         [24] 1195 	mov	dptr,#_CSN_pin
      000067 75 F0 00         [24] 1196 	mov	b,#0x00
      00006A 12r00r00         [24] 1197 	lcall	_gpioWrite
                                   1198 ;	nrf24l01.c:94: gpioWrite(&CE_pin, 1);
      00006D 90r00r00         [24] 1199 	mov	dptr,#_gpioWrite_PARM_2
      000070 74 01            [12] 1200 	mov	a,#0x01
      000072 F0               [24] 1201 	movx	@dptr,a
      000073 90r00r0E         [24] 1202 	mov	dptr,#_CE_pin
      000076 75 F0 00         [24] 1203 	mov	b,#0x00
                                   1204 ;	nrf24l01.c:96: }
      000079 02r00r00         [24] 1205 	ljmp	_gpioWrite
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'nrf24_SPI'
                                   1208 ;------------------------------------------------------------
                                   1209 ;input                     Allocated with name '_nrf24_SPI_input_65536_119'
                                   1210 ;------------------------------------------------------------
                                   1211 ;	nrf24l01.c:99: void nrf24_SPI(uint8_t input)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function nrf24_SPI
                                   1214 ;	-----------------------------------------
      00007C                       1215 _nrf24_SPI:
      00007C E5 82            [12] 1216 	mov	a,dpl
      00007E 90r00r0B         [24] 1217 	mov	dptr,#_nrf24_SPI_input_65536_119
      000081 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	nrf24l01.c:101: gpioWrite(&CSN_pin, input);
      000082 E0               [24] 1220 	movx	a,@dptr
      000083 90r00r00         [24] 1221 	mov	dptr,#_gpioWrite_PARM_2
      000086 F0               [24] 1222 	movx	@dptr,a
      000087 90r00r01         [24] 1223 	mov	dptr,#_CSN_pin
      00008A 75 F0 00         [24] 1224 	mov	b,#0x00
                                   1225 ;	nrf24l01.c:102: }
      00008D 02r00r00         [24] 1226 	ljmp	_gpioWrite
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'SPI_send_command'
                                   1229 ;------------------------------------------------------------
                                   1230 ;command                   Allocated with name '_SPI_send_command_command_65536_121'
                                   1231 ;spi_byte                  Allocated with name '_SPI_send_command_spi_byte_65536_122'
                                   1232 ;------------------------------------------------------------
                                   1233 ;	nrf24l01.c:105: uint8_t SPI_send_command(uint8_t command)
                                   1234 ;	-----------------------------------------
                                   1235 ;	 function SPI_send_command
                                   1236 ;	-----------------------------------------
      000090                       1237 _SPI_send_command:
      000090 E5 82            [12] 1238 	mov	a,dpl
      000092 90r00r0C         [24] 1239 	mov	dptr,#_SPI_send_command_command_65536_121
      000095 F0               [24] 1240 	movx	@dptr,a
                                   1241 ;	nrf24l01.c:107: uint8_t spi_byte = bitReverseTable256[command];
      000096 E0               [24] 1242 	movx	a,@dptr
      000097 90r00r00         [24] 1243 	mov	dptr,#_bitReverseTable256
      00009A 93               [24] 1244 	movc	a,@a+dptr
      00009B 90r00r0D         [24] 1245 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      00009E F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	nrf24l01.c:109: spiSend(&spi_byte, 1, &dataReady);
      00009F 90r00r00         [24] 1248 	mov	dptr,#_spiSend_PARM_2
      0000A2 74 01            [12] 1249 	mov	a,#0x01
      0000A4 F0               [24] 1250 	movx	@dptr,a
      0000A5 E4               [12] 1251 	clr	a
      0000A6 A3               [24] 1252 	inc	dptr
      0000A7 F0               [24] 1253 	movx	@dptr,a
      0000A8 90r00r00         [24] 1254 	mov	dptr,#_spiSend_PARM_3
      0000AB 74r00            [12] 1255 	mov	a,#_dataReady
      0000AD F0               [24] 1256 	movx	@dptr,a
      0000AE 74s00            [12] 1257 	mov	a,#(_dataReady >> 8)
      0000B0 A3               [24] 1258 	inc	dptr
      0000B1 F0               [24] 1259 	movx	@dptr,a
      0000B2 E4               [12] 1260 	clr	a
      0000B3 A3               [24] 1261 	inc	dptr
      0000B4 F0               [24] 1262 	movx	@dptr,a
      0000B5 90r00r0D         [24] 1263 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      0000B8 75 F0 00         [24] 1264 	mov	b,#0x00
      0000BB 12r00r00         [24] 1265 	lcall	_spiSend
                                   1266 ;	nrf24l01.c:112: while(!dataReady);
      0000BE                       1267 00101$:
      0000BE 90r00r00         [24] 1268 	mov	dptr,#_dataReady
      0000C1 E0               [24] 1269 	movx	a,@dptr
      0000C2 60 FA            [24] 1270 	jz	00101$
                                   1271 ;	nrf24l01.c:114: return bitReverseTable256[spi_byte];
      0000C4 90r00r0D         [24] 1272 	mov	dptr,#_SPI_send_command_spi_byte_65536_122
      0000C7 E0               [24] 1273 	movx	a,@dptr
      0000C8 90r00r00         [24] 1274 	mov	dptr,#_bitReverseTable256
      0000CB 93               [24] 1275 	movc	a,@a+dptr
                                   1276 ;	nrf24l01.c:116: }
      0000CC F5 82            [12] 1277 	mov	dpl,a
      0000CE 22               [24] 1278 	ret
                                   1279 ;------------------------------------------------------------
                                   1280 ;Allocation info for local variables in function 'nrf24_CE'
                                   1281 ;------------------------------------------------------------
                                   1282 ;input                     Allocated with name '_nrf24_CE_input_65536_123'
                                   1283 ;------------------------------------------------------------
                                   1284 ;	nrf24l01.c:119: void nrf24_CE(uint8_t input)
                                   1285 ;	-----------------------------------------
                                   1286 ;	 function nrf24_CE
                                   1287 ;	-----------------------------------------
      0000CF                       1288 _nrf24_CE:
      0000CF E5 82            [12] 1289 	mov	a,dpl
      0000D1 90r00r0E         [24] 1290 	mov	dptr,#_nrf24_CE_input_65536_123
      0000D4 F0               [24] 1291 	movx	@dptr,a
                                   1292 ;	nrf24l01.c:121: gpioWrite(&CE_pin, input);
      0000D5 E0               [24] 1293 	movx	a,@dptr
      0000D6 90r00r00         [24] 1294 	mov	dptr,#_gpioWrite_PARM_2
      0000D9 F0               [24] 1295 	movx	@dptr,a
      0000DA 90r00r0E         [24] 1296 	mov	dptr,#_CE_pin
      0000DD 75 F0 00         [24] 1297 	mov	b,#0x00
                                   1298 ;	nrf24l01.c:122: }
      0000E0 02r00r00         [24] 1299 	ljmp	_gpioWrite
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'nrf24_dynamic_ack'
                                   1302 ;------------------------------------------------------------
                                   1303 ;state                     Allocated with name '_nrf24_dynamic_ack_state_65536_125'
                                   1304 ;------------------------------------------------------------
                                   1305 ;	nrf24l01.c:128: void nrf24_dynamic_ack(uint8_t state)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function nrf24_dynamic_ack
                                   1308 ;	-----------------------------------------
      0000E3                       1309 _nrf24_dynamic_ack:
      0000E3 E5 82            [12] 1310 	mov	a,dpl
      0000E5 90r00r0F         [24] 1311 	mov	dptr,#_nrf24_dynamic_ack_state_65536_125
      0000E8 F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	nrf24l01.c:130: if (state == ENABLE)
      0000E9 E0               [24] 1314 	movx	a,@dptr
      0000EA FF               [12] 1315 	mov	r7,a
      0000EB BF 01 44         [24] 1316 	cjne	r7,#0x01,00102$
                                   1317 ;	nrf24l01.c:132: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0000EE 90r00r39         [24] 1318 	mov	dptr,#_nrf24_read_PARM_2
      0000F1 74r02            [12] 1319 	mov	a,#_register_current_value
      0000F3 F0               [24] 1320 	movx	@dptr,a
      0000F4 74s00            [12] 1321 	mov	a,#(_register_current_value >> 8)
      0000F6 A3               [24] 1322 	inc	dptr
      0000F7 F0               [24] 1323 	movx	@dptr,a
      0000F8 E4               [12] 1324 	clr	a
      0000F9 A3               [24] 1325 	inc	dptr
      0000FA F0               [24] 1326 	movx	@dptr,a
      0000FB 90r00r3C         [24] 1327 	mov	dptr,#_nrf24_read_PARM_3
      0000FE 04               [12] 1328 	inc	a
      0000FF F0               [24] 1329 	movx	@dptr,a
      000100 90r00r3D         [24] 1330 	mov	dptr,#_nrf24_read_PARM_4
      000103 E4               [12] 1331 	clr	a
      000104 F0               [24] 1332 	movx	@dptr,a
      000105 75 82 1D         [24] 1333 	mov	dpl,#0x1d
      000108 12r0Fr9A         [24] 1334 	lcall	_nrf24_read
                                   1335 ;	nrf24l01.c:133: register_new_value = register_current_value | (1 << EN_DYN_ACK);
      00010B 90r00r02         [24] 1336 	mov	dptr,#_register_current_value
      00010E E0               [24] 1337 	movx	a,@dptr
      00010F 90r00r03         [24] 1338 	mov	dptr,#_register_new_value
      000112 44 01            [12] 1339 	orl	a,#0x01
      000114 F0               [24] 1340 	movx	@dptr,a
                                   1341 ;	nrf24l01.c:134: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000115 90r00r3F         [24] 1342 	mov	dptr,#_nrf24_write_PARM_2
      000118 74r03            [12] 1343 	mov	a,#_register_new_value
      00011A F0               [24] 1344 	movx	@dptr,a
      00011B 74s00            [12] 1345 	mov	a,#(_register_new_value >> 8)
      00011D A3               [24] 1346 	inc	dptr
      00011E F0               [24] 1347 	movx	@dptr,a
      00011F E4               [12] 1348 	clr	a
      000120 A3               [24] 1349 	inc	dptr
      000121 F0               [24] 1350 	movx	@dptr,a
      000122 90r00r42         [24] 1351 	mov	dptr,#_nrf24_write_PARM_3
      000125 04               [12] 1352 	inc	a
      000126 F0               [24] 1353 	movx	@dptr,a
      000127 90r00r43         [24] 1354 	mov	dptr,#_nrf24_write_PARM_4
      00012A E4               [12] 1355 	clr	a
      00012B F0               [24] 1356 	movx	@dptr,a
      00012C 75 82 1D         [24] 1357 	mov	dpl,#0x1d
      00012F 02r10r06         [24] 1358 	ljmp	_nrf24_write
      000132                       1359 00102$:
                                   1360 ;	nrf24l01.c:138: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      000132 90r00r39         [24] 1361 	mov	dptr,#_nrf24_read_PARM_2
      000135 74r02            [12] 1362 	mov	a,#_register_current_value
      000137 F0               [24] 1363 	movx	@dptr,a
      000138 74s00            [12] 1364 	mov	a,#(_register_current_value >> 8)
      00013A A3               [24] 1365 	inc	dptr
      00013B F0               [24] 1366 	movx	@dptr,a
      00013C E4               [12] 1367 	clr	a
      00013D A3               [24] 1368 	inc	dptr
      00013E F0               [24] 1369 	movx	@dptr,a
      00013F 90r00r3C         [24] 1370 	mov	dptr,#_nrf24_read_PARM_3
      000142 04               [12] 1371 	inc	a
      000143 F0               [24] 1372 	movx	@dptr,a
      000144 90r00r3D         [24] 1373 	mov	dptr,#_nrf24_read_PARM_4
      000147 E4               [12] 1374 	clr	a
      000148 F0               [24] 1375 	movx	@dptr,a
      000149 75 82 1D         [24] 1376 	mov	dpl,#0x1d
      00014C 12r0Fr9A         [24] 1377 	lcall	_nrf24_read
                                   1378 ;	nrf24l01.c:139: register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
      00014F 90r00r02         [24] 1379 	mov	dptr,#_register_current_value
      000152 E0               [24] 1380 	movx	a,@dptr
      000153 90r00r03         [24] 1381 	mov	dptr,#_register_new_value
      000156 54 FE            [12] 1382 	anl	a,#0xfe
      000158 F0               [24] 1383 	movx	@dptr,a
                                   1384 ;	nrf24l01.c:140: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000159 90r00r3F         [24] 1385 	mov	dptr,#_nrf24_write_PARM_2
      00015C 74r03            [12] 1386 	mov	a,#_register_new_value
      00015E F0               [24] 1387 	movx	@dptr,a
      00015F 74s00            [12] 1388 	mov	a,#(_register_new_value >> 8)
      000161 A3               [24] 1389 	inc	dptr
      000162 F0               [24] 1390 	movx	@dptr,a
      000163 E4               [12] 1391 	clr	a
      000164 A3               [24] 1392 	inc	dptr
      000165 F0               [24] 1393 	movx	@dptr,a
      000166 90r00r42         [24] 1394 	mov	dptr,#_nrf24_write_PARM_3
      000169 04               [12] 1395 	inc	a
      00016A F0               [24] 1396 	movx	@dptr,a
      00016B 90r00r43         [24] 1397 	mov	dptr,#_nrf24_write_PARM_4
      00016E E4               [12] 1398 	clr	a
      00016F F0               [24] 1399 	movx	@dptr,a
      000170 75 82 1D         [24] 1400 	mov	dpl,#0x1d
                                   1401 ;	nrf24l01.c:142: }
      000173 02r10r06         [24] 1402 	ljmp	_nrf24_write
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'nrf24_transmit'
                                   1405 ;------------------------------------------------------------
                                   1406 ;payload_width             Allocated with name '_nrf24_transmit_PARM_2'
                                   1407 ;acknowledgement_state     Allocated with name '_nrf24_transmit_PARM_3'
                                   1408 ;payload                   Allocated with name '_nrf24_transmit_payload_65536_129'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	nrf24l01.c:146: uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function nrf24_transmit
                                   1413 ;	-----------------------------------------
      000176                       1414 _nrf24_transmit:
      000176 AF F0            [24] 1415 	mov	r7,b
      000178 AE 83            [24] 1416 	mov	r6,dph
      00017A E5 82            [12] 1417 	mov	a,dpl
      00017C 90r00r12         [24] 1418 	mov	dptr,#_nrf24_transmit_payload_65536_129
      00017F F0               [24] 1419 	movx	@dptr,a
      000180 EE               [12] 1420 	mov	a,r6
      000181 A3               [24] 1421 	inc	dptr
      000182 F0               [24] 1422 	movx	@dptr,a
      000183 EF               [12] 1423 	mov	a,r7
      000184 A3               [24] 1424 	inc	dptr
      000185 F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	nrf24l01.c:148: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
      000186 90r00r39         [24] 1427 	mov	dptr,#_nrf24_read_PARM_2
      000189 74r02            [12] 1428 	mov	a,#_register_current_value
      00018B F0               [24] 1429 	movx	@dptr,a
      00018C 74s00            [12] 1430 	mov	a,#(_register_current_value >> 8)
      00018E A3               [24] 1431 	inc	dptr
      00018F F0               [24] 1432 	movx	@dptr,a
      000190 E4               [12] 1433 	clr	a
      000191 A3               [24] 1434 	inc	dptr
      000192 F0               [24] 1435 	movx	@dptr,a
      000193 90r00r3C         [24] 1436 	mov	dptr,#_nrf24_read_PARM_3
      000196 04               [12] 1437 	inc	a
      000197 F0               [24] 1438 	movx	@dptr,a
      000198 90r00r3D         [24] 1439 	mov	dptr,#_nrf24_read_PARM_4
      00019B E4               [12] 1440 	clr	a
      00019C F0               [24] 1441 	movx	@dptr,a
      00019D 75 82 07         [24] 1442 	mov	dpl,#0x07
      0001A0 12r0Fr9A         [24] 1443 	lcall	_nrf24_read
                                   1444 ;	nrf24l01.c:149: if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
      0001A3 90r00r02         [24] 1445 	mov	dptr,#_register_current_value
      0001A6 E0               [24] 1446 	movx	a,@dptr
      0001A7 20 E5 40         [24] 1447 	jb	acc.5,00104$
      0001AA 90r00r1C         [24] 1448 	mov	dptr,#_current_mode
      0001AD E0               [24] 1449 	movx	a,@dptr
      0001AE FF               [12] 1450 	mov	r7,a
      0001AF BF 03 38         [24] 1451 	cjne	r7,#0x03,00104$
                                   1452 ;	nrf24l01.c:151: current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
      0001B2 90r00r11         [24] 1453 	mov	dptr,#_nrf24_transmit_PARM_3
      0001B5 E0               [24] 1454 	movx	a,@dptr
      0001B6 90r00r1D         [24] 1455 	mov	dptr,#_current_acknowledgement_state
      0001B9 F0               [24] 1456 	movx	@dptr,a
                                   1457 ;	nrf24l01.c:152: if (dynamic_payload == ENABLE)
      0001BA 90r00r1E         [24] 1458 	mov	dptr,#_dynamic_payload
      0001BD E0               [24] 1459 	movx	a,@dptr
      0001BE FF               [12] 1460 	mov	r7,a
      0001BF BF 01 08         [24] 1461 	cjne	r7,#0x01,00102$
                                   1462 ;	nrf24l01.c:153: payload_width = current_payload_width;
      0001C2 90r00r06         [24] 1463 	mov	dptr,#_current_payload_width
      0001C5 E0               [24] 1464 	movx	a,@dptr
      0001C6 90r00r10         [24] 1465 	mov	dptr,#_nrf24_transmit_PARM_2
      0001C9 F0               [24] 1466 	movx	@dptr,a
      0001CA                       1467 00102$:
                                   1468 ;	nrf24l01.c:154: nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
      0001CA 90r00r12         [24] 1469 	mov	dptr,#_nrf24_transmit_payload_65536_129
      0001CD E0               [24] 1470 	movx	a,@dptr
      0001CE FD               [12] 1471 	mov	r5,a
      0001CF A3               [24] 1472 	inc	dptr
      0001D0 E0               [24] 1473 	movx	a,@dptr
      0001D1 FE               [12] 1474 	mov	r6,a
      0001D2 A3               [24] 1475 	inc	dptr
      0001D3 E0               [24] 1476 	movx	a,@dptr
      0001D4 FF               [12] 1477 	mov	r7,a
      0001D5 90r00r10         [24] 1478 	mov	dptr,#_nrf24_transmit_PARM_2
      0001D8 E0               [24] 1479 	movx	a,@dptr
      0001D9 90r00r15         [24] 1480 	mov	dptr,#_nrf24_send_payload_PARM_2
      0001DC F0               [24] 1481 	movx	@dptr,a
      0001DD 8D 82            [24] 1482 	mov	dpl,r5
      0001DF 8E 83            [24] 1483 	mov	dph,r6
      0001E1 8F F0            [24] 1484 	mov	b,r7
      0001E3 12r01rEE         [24] 1485 	lcall	_nrf24_send_payload
                                   1486 ;	nrf24l01.c:155: return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
      0001E6 75 82 01         [24] 1487 	mov	dpl,#0x01
      0001E9 22               [24] 1488 	ret
      0001EA                       1489 00104$:
                                   1490 ;	nrf24l01.c:159: return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
      0001EA 75 82 00         [24] 1491 	mov	dpl,#0x00
                                   1492 ;	nrf24l01.c:161: }
      0001ED 22               [24] 1493 	ret
                                   1494 ;------------------------------------------------------------
                                   1495 ;Allocation info for local variables in function 'nrf24_send_payload'
                                   1496 ;------------------------------------------------------------
                                   1497 ;payload_width             Allocated with name '_nrf24_send_payload_PARM_2'
                                   1498 ;payload                   Allocated with name '_nrf24_send_payload_payload_65536_133'
                                   1499 ;------------------------------------------------------------
                                   1500 ;	nrf24l01.c:164: void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
                                   1501 ;	-----------------------------------------
                                   1502 ;	 function nrf24_send_payload
                                   1503 ;	-----------------------------------------
      0001EE                       1504 _nrf24_send_payload:
      0001EE AF F0            [24] 1505 	mov	r7,b
      0001F0 AE 83            [24] 1506 	mov	r6,dph
      0001F2 E5 82            [12] 1507 	mov	a,dpl
      0001F4 90r00r16         [24] 1508 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      0001F7 F0               [24] 1509 	movx	@dptr,a
      0001F8 EE               [12] 1510 	mov	a,r6
      0001F9 A3               [24] 1511 	inc	dptr
      0001FA F0               [24] 1512 	movx	@dptr,a
      0001FB EF               [12] 1513 	mov	a,r7
      0001FC A3               [24] 1514 	inc	dptr
      0001FD F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	nrf24l01.c:166: nrf24_SPI(SPI_ON);
      0001FE 75 82 00         [24] 1517 	mov	dpl,#0x00
      000201 12r00r7C         [24] 1518 	lcall	_nrf24_SPI
                                   1519 ;	nrf24l01.c:167: if (current_acknowledgement_state == NO_ACK_MODE)
      000204 90r00r1D         [24] 1520 	mov	dptr,#_current_acknowledgement_state
      000207 E0               [24] 1521 	movx	a,@dptr
      000208 FF               [12] 1522 	mov	r7,a
      000209 BF 01 08         [24] 1523 	cjne	r7,#0x01,00102$
                                   1524 ;	nrf24l01.c:168: SPI_command = W_TX_PAYLOAD_NOACK;
      00020C 90r00r01         [24] 1525 	mov	dptr,#_SPI_command
      00020F 74 B0            [12] 1526 	mov	a,#0xb0
      000211 F0               [24] 1527 	movx	@dptr,a
      000212 80 06            [24] 1528 	sjmp	00103$
      000214                       1529 00102$:
                                   1530 ;	nrf24l01.c:170: SPI_command = W_TX_PAYLOAD;
      000214 90r00r01         [24] 1531 	mov	dptr,#_SPI_command
      000217 74 A0            [12] 1532 	mov	a,#0xa0
      000219 F0               [24] 1533 	movx	@dptr,a
      00021A                       1534 00103$:
                                   1535 ;	nrf24l01.c:171: SPI_send_command(SPI_command);
      00021A 90r00r01         [24] 1536 	mov	dptr,#_SPI_command
      00021D E0               [24] 1537 	movx	a,@dptr
      00021E F5 82            [12] 1538 	mov	dpl,a
      000220 12r00r90         [24] 1539 	lcall	_SPI_send_command
      000223 90r00r16         [24] 1540 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      000226 E0               [24] 1541 	movx	a,@dptr
      000227 FD               [12] 1542 	mov	r5,a
      000228 A3               [24] 1543 	inc	dptr
      000229 E0               [24] 1544 	movx	a,@dptr
      00022A FE               [12] 1545 	mov	r6,a
      00022B A3               [24] 1546 	inc	dptr
      00022C E0               [24] 1547 	movx	a,@dptr
      00022D FF               [12] 1548 	mov	r7,a
      00022E 90r00r15         [24] 1549 	mov	dptr,#_nrf24_send_payload_PARM_2
      000231 E0               [24] 1550 	movx	a,@dptr
      000232 FC               [12] 1551 	mov	r4,a
      000233                       1552 00106$:
                                   1553 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      000233 EC               [12] 1554 	mov	a,r4
      000234 60 37            [24] 1555 	jz	00113$
                                   1556 ;	nrf24l01.c:174: SPI_command = *payload;
      000236 8D 82            [24] 1557 	mov	dpl,r5
      000238 8E 83            [24] 1558 	mov	dph,r6
      00023A 8F F0            [24] 1559 	mov	b,r7
      00023C 12r00r00         [24] 1560 	lcall	__gptrget
      00023F FB               [12] 1561 	mov	r3,a
      000240 A3               [24] 1562 	inc	dptr
      000241 AD 82            [24] 1563 	mov	r5,dpl
      000243 AE 83            [24] 1564 	mov	r6,dph
      000245 90r00r01         [24] 1565 	mov	dptr,#_SPI_command
      000248 EB               [12] 1566 	mov	a,r3
      000249 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	nrf24l01.c:175: SPI_send_command(SPI_command);
      00024A 8B 82            [24] 1569 	mov	dpl,r3
      00024C C0 07            [24] 1570 	push	ar7
      00024E C0 06            [24] 1571 	push	ar6
      000250 C0 05            [24] 1572 	push	ar5
      000252 C0 04            [24] 1573 	push	ar4
      000254 12r00r90         [24] 1574 	lcall	_SPI_send_command
      000257 D0 04            [24] 1575 	pop	ar4
      000259 D0 05            [24] 1576 	pop	ar5
      00025B D0 06            [24] 1577 	pop	ar6
      00025D D0 07            [24] 1578 	pop	ar7
                                   1579 ;	nrf24l01.c:176: payload++;
      00025F 90r00r16         [24] 1580 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      000262 ED               [12] 1581 	mov	a,r5
      000263 F0               [24] 1582 	movx	@dptr,a
      000264 EE               [12] 1583 	mov	a,r6
      000265 A3               [24] 1584 	inc	dptr
      000266 F0               [24] 1585 	movx	@dptr,a
      000267 EF               [12] 1586 	mov	a,r7
      000268 A3               [24] 1587 	inc	dptr
      000269 F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	nrf24l01.c:172: for (; payload_width; payload_width--)
      00026A 1C               [12] 1590 	dec	r4
      00026B 80 C6            [24] 1591 	sjmp	00106$
      00026D                       1592 00113$:
      00026D 90r00r16         [24] 1593 	mov	dptr,#_nrf24_send_payload_payload_65536_133
      000270 ED               [12] 1594 	mov	a,r5
      000271 F0               [24] 1595 	movx	@dptr,a
      000272 EE               [12] 1596 	mov	a,r6
      000273 A3               [24] 1597 	inc	dptr
      000274 F0               [24] 1598 	movx	@dptr,a
      000275 EF               [12] 1599 	mov	a,r7
      000276 A3               [24] 1600 	inc	dptr
      000277 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	nrf24l01.c:178: nrf24_SPI(SPI_OFF);
      000278 75 82 01         [24] 1603 	mov	dpl,#0x01
                                   1604 ;	nrf24l01.c:179: }
      00027B 02r00r7C         [24] 1605 	ljmp	_nrf24_SPI
                                   1606 ;------------------------------------------------------------
                                   1607 ;Allocation info for local variables in function 'nrf24_transmit_status'
                                   1608 ;------------------------------------------------------------
                                   1609 ;	nrf24l01.c:183: uint8_t nrf24_transmit_status(void)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function nrf24_transmit_status
                                   1612 ;	-----------------------------------------
      00027E                       1613 _nrf24_transmit_status:
                                   1614 ;	nrf24l01.c:185: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
      00027E 90r00r39         [24] 1615 	mov	dptr,#_nrf24_read_PARM_2
      000281 74r02            [12] 1616 	mov	a,#_register_current_value
      000283 F0               [24] 1617 	movx	@dptr,a
      000284 74s00            [12] 1618 	mov	a,#(_register_current_value >> 8)
      000286 A3               [24] 1619 	inc	dptr
      000287 F0               [24] 1620 	movx	@dptr,a
      000288 E4               [12] 1621 	clr	a
      000289 A3               [24] 1622 	inc	dptr
      00028A F0               [24] 1623 	movx	@dptr,a
      00028B 90r00r3C         [24] 1624 	mov	dptr,#_nrf24_read_PARM_3
      00028E 04               [12] 1625 	inc	a
      00028F F0               [24] 1626 	movx	@dptr,a
      000290 90r00r3D         [24] 1627 	mov	dptr,#_nrf24_read_PARM_4
      000293 E4               [12] 1628 	clr	a
      000294 F0               [24] 1629 	movx	@dptr,a
      000295 75 82 07         [24] 1630 	mov	dpl,#0x07
      000298 12r0Fr9A         [24] 1631 	lcall	_nrf24_read
                                   1632 ;	nrf24l01.c:186: if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
      00029B 90r00r02         [24] 1633 	mov	dptr,#_register_current_value
      00029E E0               [24] 1634 	movx	a,@dptr
      00029F FF               [12] 1635 	mov	r7,a
      0002A0 30 E5 21         [24] 1636 	jnb	acc.5,00105$
                                   1637 ;	nrf24l01.c:188: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      0002A3 90r00r3F         [24] 1638 	mov	dptr,#_nrf24_write_PARM_2
      0002A6 74r02            [12] 1639 	mov	a,#_register_current_value
      0002A8 F0               [24] 1640 	movx	@dptr,a
      0002A9 74s00            [12] 1641 	mov	a,#(_register_current_value >> 8)
      0002AB A3               [24] 1642 	inc	dptr
      0002AC F0               [24] 1643 	movx	@dptr,a
      0002AD E4               [12] 1644 	clr	a
      0002AE A3               [24] 1645 	inc	dptr
      0002AF F0               [24] 1646 	movx	@dptr,a
      0002B0 90r00r42         [24] 1647 	mov	dptr,#_nrf24_write_PARM_3
      0002B3 04               [12] 1648 	inc	a
      0002B4 F0               [24] 1649 	movx	@dptr,a
      0002B5 90r00r43         [24] 1650 	mov	dptr,#_nrf24_write_PARM_4
      0002B8 E4               [12] 1651 	clr	a
      0002B9 F0               [24] 1652 	movx	@dptr,a
      0002BA 75 82 07         [24] 1653 	mov	dpl,#0x07
      0002BD 12r10r06         [24] 1654 	lcall	_nrf24_write
                                   1655 ;	nrf24l01.c:189: return TRANSMIT_DONE;
      0002C0 75 82 01         [24] 1656 	mov	dpl,#0x01
      0002C3 22               [24] 1657 	ret
      0002C4                       1658 00105$:
                                   1659 ;	nrf24l01.c:191: else if (register_current_value & (1 << MAX_RT))
      0002C4 EF               [12] 1660 	mov	a,r7
      0002C5 30 E4 21         [24] 1661 	jnb	acc.4,00102$
                                   1662 ;	nrf24l01.c:193: nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
      0002C8 90r00r3F         [24] 1663 	mov	dptr,#_nrf24_write_PARM_2
      0002CB 74r02            [12] 1664 	mov	a,#_register_current_value
      0002CD F0               [24] 1665 	movx	@dptr,a
      0002CE 74s00            [12] 1666 	mov	a,#(_register_current_value >> 8)
      0002D0 A3               [24] 1667 	inc	dptr
      0002D1 F0               [24] 1668 	movx	@dptr,a
      0002D2 E4               [12] 1669 	clr	a
      0002D3 A3               [24] 1670 	inc	dptr
      0002D4 F0               [24] 1671 	movx	@dptr,a
      0002D5 90r00r42         [24] 1672 	mov	dptr,#_nrf24_write_PARM_3
      0002D8 04               [12] 1673 	inc	a
      0002D9 F0               [24] 1674 	movx	@dptr,a
      0002DA 90r00r43         [24] 1675 	mov	dptr,#_nrf24_write_PARM_4
      0002DD E4               [12] 1676 	clr	a
      0002DE F0               [24] 1677 	movx	@dptr,a
      0002DF 75 82 07         [24] 1678 	mov	dpl,#0x07
      0002E2 12r10r06         [24] 1679 	lcall	_nrf24_write
                                   1680 ;	nrf24l01.c:194: return TRANSMIT_FAILED;
      0002E5 75 82 FF         [24] 1681 	mov	dpl,#0xff
      0002E8 22               [24] 1682 	ret
      0002E9                       1683 00102$:
                                   1684 ;	nrf24l01.c:197: return TRANSMIT_IN_PROGRESS;
      0002E9 75 82 00         [24] 1685 	mov	dpl,#0x00
                                   1686 ;	nrf24l01.c:198: }
      0002EC 22               [24] 1687 	ret
                                   1688 ;------------------------------------------------------------
                                   1689 ;Allocation info for local variables in function 'nrf24_receive'
                                   1690 ;------------------------------------------------------------
                                   1691 ;payload_width             Allocated with name '_nrf24_receive_PARM_2'
                                   1692 ;payload                   Allocated with name '_nrf24_receive_payload_65536_141'
                                   1693 ;------------------------------------------------------------
                                   1694 ;	nrf24l01.c:202: uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
                                   1695 ;	-----------------------------------------
                                   1696 ;	 function nrf24_receive
                                   1697 ;	-----------------------------------------
      0002ED                       1698 _nrf24_receive:
      0002ED AF F0            [24] 1699 	mov	r7,b
      0002EF AE 83            [24] 1700 	mov	r6,dph
      0002F1 E5 82            [12] 1701 	mov	a,dpl
      0002F3 90r00r1A         [24] 1702 	mov	dptr,#_nrf24_receive_payload_65536_141
      0002F6 F0               [24] 1703 	movx	@dptr,a
      0002F7 EE               [12] 1704 	mov	a,r6
      0002F8 A3               [24] 1705 	inc	dptr
      0002F9 F0               [24] 1706 	movx	@dptr,a
      0002FA EF               [12] 1707 	mov	a,r7
      0002FB A3               [24] 1708 	inc	dptr
      0002FC F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	nrf24l01.c:204: if (current_mode == PRX)
      0002FD 90r00r1C         [24] 1711 	mov	dptr,#_current_mode
      000300 E0               [24] 1712 	movx	a,@dptr
      000301 FF               [12] 1713 	mov	r7,a
      000302 BF 04 02         [24] 1714 	cjne	r7,#0x04,00142$
      000305 80 03            [24] 1715 	sjmp	00143$
      000307                       1716 00142$:
      000307 02r04r20         [24] 1717 	ljmp	00110$
      00030A                       1718 00143$:
                                   1719 ;	nrf24l01.c:206: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      00030A 90r00r39         [24] 1720 	mov	dptr,#_nrf24_read_PARM_2
      00030D 74r02            [12] 1721 	mov	a,#_register_current_value
      00030F F0               [24] 1722 	movx	@dptr,a
      000310 74s00            [12] 1723 	mov	a,#(_register_current_value >> 8)
      000312 A3               [24] 1724 	inc	dptr
      000313 F0               [24] 1725 	movx	@dptr,a
      000314 E4               [12] 1726 	clr	a
      000315 A3               [24] 1727 	inc	dptr
      000316 F0               [24] 1728 	movx	@dptr,a
      000317 90r00r3C         [24] 1729 	mov	dptr,#_nrf24_read_PARM_3
      00031A 04               [12] 1730 	inc	a
      00031B F0               [24] 1731 	movx	@dptr,a
      00031C 90r00r3D         [24] 1732 	mov	dptr,#_nrf24_read_PARM_4
      00031F E4               [12] 1733 	clr	a
      000320 F0               [24] 1734 	movx	@dptr,a
      000321 75 82 07         [24] 1735 	mov	dpl,#0x07
      000324 12r0Fr9A         [24] 1736 	lcall	_nrf24_read
                                   1737 ;	nrf24l01.c:207: if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
      000327 90r00r02         [24] 1738 	mov	dptr,#_register_current_value
      00032A E0               [24] 1739 	movx	a,@dptr
      00032B 20 E6 03         [24] 1740 	jb	acc.6,00144$
      00032E 02r04r1C         [24] 1741 	ljmp	00107$
      000331                       1742 00144$:
                                   1743 ;	nrf24l01.c:209: if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
      000331 90r00r1E         [24] 1744 	mov	dptr,#_dynamic_payload
      000334 E0               [24] 1745 	movx	a,@dptr
      000335 70 08            [24] 1746 	jnz	00102$
                                   1747 ;	nrf24l01.c:210: payload_width = current_payload_width;
      000337 90r00r06         [24] 1748 	mov	dptr,#_current_payload_width
      00033A E0               [24] 1749 	movx	a,@dptr
      00033B 90r00r19         [24] 1750 	mov	dptr,#_nrf24_receive_PARM_2
      00033E F0               [24] 1751 	movx	@dptr,a
      00033F                       1752 00102$:
                                   1753 ;	nrf24l01.c:212: nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/                          
      00033F 75 82 00         [24] 1754 	mov	dpl,#0x00
      000342 12r00r7C         [24] 1755 	lcall	_nrf24_SPI
                                   1756 ;	nrf24l01.c:213: SPI_command = R_RX_PAYLOAD;
      000345 90r00r01         [24] 1757 	mov	dptr,#_SPI_command
      000348 74 61            [12] 1758 	mov	a,#0x61
      00034A F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	nrf24l01.c:214: SPI_send_command(SPI_command);
      00034B 75 82 61         [24] 1761 	mov	dpl,#0x61
      00034E 12r00r90         [24] 1762 	lcall	_SPI_send_command
      000351 90r00r1A         [24] 1763 	mov	dptr,#_nrf24_receive_payload_65536_141
      000354 E0               [24] 1764 	movx	a,@dptr
      000355 FD               [12] 1765 	mov	r5,a
      000356 A3               [24] 1766 	inc	dptr
      000357 E0               [24] 1767 	movx	a,@dptr
      000358 FE               [12] 1768 	mov	r6,a
      000359 A3               [24] 1769 	inc	dptr
      00035A E0               [24] 1770 	movx	a,@dptr
      00035B FF               [12] 1771 	mov	r7,a
      00035C 90r00r19         [24] 1772 	mov	dptr,#_nrf24_receive_PARM_2
      00035F E0               [24] 1773 	movx	a,@dptr
      000360 FC               [12] 1774 	mov	r4,a
      000361                       1775 00113$:
                                   1776 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      000361 EC               [12] 1777 	mov	a,r4
      000362 60 3B            [24] 1778 	jz	00123$
                                   1779 ;	nrf24l01.c:218: SPI_command = NOP_CMD;
      000364 90r00r01         [24] 1780 	mov	dptr,#_SPI_command
      000367 74 FF            [12] 1781 	mov	a,#0xff
      000369 F0               [24] 1782 	movx	@dptr,a
                                   1783 ;	nrf24l01.c:219: *payload = SPI_send_command(SPI_command); // newly added
      00036A 75 82 FF         [24] 1784 	mov	dpl,#0xff
      00036D C0 07            [24] 1785 	push	ar7
      00036F C0 06            [24] 1786 	push	ar6
      000371 C0 05            [24] 1787 	push	ar5
      000373 C0 04            [24] 1788 	push	ar4
      000375 12r00r90         [24] 1789 	lcall	_SPI_send_command
      000378 AB 82            [24] 1790 	mov	r3,dpl
      00037A D0 04            [24] 1791 	pop	ar4
      00037C D0 05            [24] 1792 	pop	ar5
      00037E D0 06            [24] 1793 	pop	ar6
      000380 D0 07            [24] 1794 	pop	ar7
      000382 8D 82            [24] 1795 	mov	dpl,r5
      000384 8E 83            [24] 1796 	mov	dph,r6
      000386 8F F0            [24] 1797 	mov	b,r7
      000388 EB               [12] 1798 	mov	a,r3
      000389 12r00r00         [24] 1799 	lcall	__gptrput
      00038C A3               [24] 1800 	inc	dptr
      00038D AD 82            [24] 1801 	mov	r5,dpl
      00038F AE 83            [24] 1802 	mov	r6,dph
                                   1803 ;	nrf24l01.c:220: payload++;
      000391 90r00r1A         [24] 1804 	mov	dptr,#_nrf24_receive_payload_65536_141
      000394 ED               [12] 1805 	mov	a,r5
      000395 F0               [24] 1806 	movx	@dptr,a
      000396 EE               [12] 1807 	mov	a,r6
      000397 A3               [24] 1808 	inc	dptr
      000398 F0               [24] 1809 	movx	@dptr,a
      000399 EF               [12] 1810 	mov	a,r7
      00039A A3               [24] 1811 	inc	dptr
      00039B F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	nrf24l01.c:216: for (; payload_width; payload_width--)
      00039C 1C               [12] 1814 	dec	r4
      00039D 80 C2            [24] 1815 	sjmp	00113$
      00039F                       1816 00123$:
      00039F 90r00r1A         [24] 1817 	mov	dptr,#_nrf24_receive_payload_65536_141
      0003A2 ED               [12] 1818 	mov	a,r5
      0003A3 F0               [24] 1819 	movx	@dptr,a
      0003A4 EE               [12] 1820 	mov	a,r6
      0003A5 A3               [24] 1821 	inc	dptr
      0003A6 F0               [24] 1822 	movx	@dptr,a
      0003A7 EF               [12] 1823 	mov	a,r7
      0003A8 A3               [24] 1824 	inc	dptr
      0003A9 F0               [24] 1825 	movx	@dptr,a
                                   1826 ;	nrf24l01.c:222: nrf24_SPI(SPI_OFF); 
      0003AA 75 82 01         [24] 1827 	mov	dpl,#0x01
      0003AD 12r00r7C         [24] 1828 	lcall	_nrf24_SPI
                                   1829 ;	nrf24l01.c:223: nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
      0003B0 90r00r39         [24] 1830 	mov	dptr,#_nrf24_read_PARM_2
      0003B3 74r02            [12] 1831 	mov	a,#_register_current_value
      0003B5 F0               [24] 1832 	movx	@dptr,a
      0003B6 74s00            [12] 1833 	mov	a,#(_register_current_value >> 8)
      0003B8 A3               [24] 1834 	inc	dptr
      0003B9 F0               [24] 1835 	movx	@dptr,a
      0003BA E4               [12] 1836 	clr	a
      0003BB A3               [24] 1837 	inc	dptr
      0003BC F0               [24] 1838 	movx	@dptr,a
      0003BD 90r00r3C         [24] 1839 	mov	dptr,#_nrf24_read_PARM_3
      0003C0 04               [12] 1840 	inc	a
      0003C1 F0               [24] 1841 	movx	@dptr,a
      0003C2 90r00r3D         [24] 1842 	mov	dptr,#_nrf24_read_PARM_4
      0003C5 E4               [12] 1843 	clr	a
      0003C6 F0               [24] 1844 	movx	@dptr,a
      0003C7 75 82 17         [24] 1845 	mov	dpl,#0x17
      0003CA 12r0Fr9A         [24] 1846 	lcall	_nrf24_read
                                   1847 ;	nrf24l01.c:224: if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
      0003CD 90r00r02         [24] 1848 	mov	dptr,#_register_current_value
      0003D0 E0               [24] 1849 	movx	a,@dptr
      0003D1 30 E0 44         [24] 1850 	jnb	acc.0,00105$
                                   1851 ;	nrf24l01.c:226: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      0003D4 90r00r39         [24] 1852 	mov	dptr,#_nrf24_read_PARM_2
      0003D7 74r02            [12] 1853 	mov	a,#_register_current_value
      0003D9 F0               [24] 1854 	movx	@dptr,a
      0003DA 74s00            [12] 1855 	mov	a,#(_register_current_value >> 8)
      0003DC A3               [24] 1856 	inc	dptr
      0003DD F0               [24] 1857 	movx	@dptr,a
      0003DE E4               [12] 1858 	clr	a
      0003DF A3               [24] 1859 	inc	dptr
      0003E0 F0               [24] 1860 	movx	@dptr,a
      0003E1 90r00r3C         [24] 1861 	mov	dptr,#_nrf24_read_PARM_3
      0003E4 04               [12] 1862 	inc	a
      0003E5 F0               [24] 1863 	movx	@dptr,a
      0003E6 90r00r3D         [24] 1864 	mov	dptr,#_nrf24_read_PARM_4
      0003E9 E4               [12] 1865 	clr	a
      0003EA F0               [24] 1866 	movx	@dptr,a
      0003EB 75 82 07         [24] 1867 	mov	dpl,#0x07
      0003EE 12r0Fr9A         [24] 1868 	lcall	_nrf24_read
                                   1869 ;	nrf24l01.c:227: register_new_value = register_current_value | (1 << RX_DR);
      0003F1 90r00r02         [24] 1870 	mov	dptr,#_register_current_value
      0003F4 E0               [24] 1871 	movx	a,@dptr
      0003F5 90r00r03         [24] 1872 	mov	dptr,#_register_new_value
      0003F8 44 40            [12] 1873 	orl	a,#0x40
      0003FA F0               [24] 1874 	movx	@dptr,a
                                   1875 ;	nrf24l01.c:228: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE); 
      0003FB 90r00r3F         [24] 1876 	mov	dptr,#_nrf24_write_PARM_2
      0003FE 74r03            [12] 1877 	mov	a,#_register_new_value
      000400 F0               [24] 1878 	movx	@dptr,a
      000401 74s00            [12] 1879 	mov	a,#(_register_new_value >> 8)
      000403 A3               [24] 1880 	inc	dptr
      000404 F0               [24] 1881 	movx	@dptr,a
      000405 E4               [12] 1882 	clr	a
      000406 A3               [24] 1883 	inc	dptr
      000407 F0               [24] 1884 	movx	@dptr,a
      000408 90r00r42         [24] 1885 	mov	dptr,#_nrf24_write_PARM_3
      00040B 04               [12] 1886 	inc	a
      00040C F0               [24] 1887 	movx	@dptr,a
      00040D 90r00r43         [24] 1888 	mov	dptr,#_nrf24_write_PARM_4
      000410 E4               [12] 1889 	clr	a
      000411 F0               [24] 1890 	movx	@dptr,a
      000412 75 82 07         [24] 1891 	mov	dpl,#0x07
      000415 12r10r06         [24] 1892 	lcall	_nrf24_write
      000418                       1893 00105$:
                                   1894 ;	nrf24l01.c:230: return OPERATION_DONE;
      000418 75 82 01         [24] 1895 	mov	dpl,#0x01
      00041B 22               [24] 1896 	ret
      00041C                       1897 00107$:
                                   1898 ;	nrf24l01.c:234: return RECEIVE_FIFO_EMPTY;
      00041C 75 82 02         [24] 1899 	mov	dpl,#0x02
      00041F 22               [24] 1900 	ret
      000420                       1901 00110$:
                                   1902 ;	nrf24l01.c:238: return OPERATION_ERROR;
      000420 75 82 00         [24] 1903 	mov	dpl,#0x00
                                   1904 ;	nrf24l01.c:239: }
      000423 22               [24] 1905 	ret
                                   1906 ;------------------------------------------------------------
                                   1907 ;Allocation info for local variables in function 'nrf24_flush'
                                   1908 ;------------------------------------------------------------
                                   1909 ;fifo_select               Allocated with name '_nrf24_flush_fifo_select_65536_149'
                                   1910 ;------------------------------------------------------------
                                   1911 ;	nrf24l01.c:243: uint8_t nrf24_flush(uint8_t fifo_select)
                                   1912 ;	-----------------------------------------
                                   1913 ;	 function nrf24_flush
                                   1914 ;	-----------------------------------------
      000424                       1915 _nrf24_flush:
      000424 E5 82            [12] 1916 	mov	a,dpl
      000426 90r00r1D         [24] 1917 	mov	dptr,#_nrf24_flush_fifo_select_65536_149
      000429 F0               [24] 1918 	movx	@dptr,a
                                   1919 ;	nrf24l01.c:245: switch (fifo_select)
      00042A E0               [24] 1920 	movx	a,@dptr
      00042B FF               [12] 1921 	mov	r7,a
      00042C 60 2B            [24] 1922 	jz	00105$
      00042E BF 01 50         [24] 1923 	cjne	r7,#0x01,00109$
                                   1924 ;	nrf24l01.c:248: if (current_mode == PTX)
      000431 90r00r1C         [24] 1925 	mov	dptr,#_current_mode
      000434 E0               [24] 1926 	movx	a,@dptr
      000435 FF               [12] 1927 	mov	r7,a
      000436 BF 03 1C         [24] 1928 	cjne	r7,#0x03,00103$
                                   1929 ;	nrf24l01.c:250: nrf24_SPI(SPI_ON);
      000439 75 82 00         [24] 1930 	mov	dpl,#0x00
      00043C 12r00r7C         [24] 1931 	lcall	_nrf24_SPI
                                   1932 ;	nrf24l01.c:251: SPI_command = FLUSH_TX;
      00043F 90r00r01         [24] 1933 	mov	dptr,#_SPI_command
      000442 74 E1            [12] 1934 	mov	a,#0xe1
      000444 F0               [24] 1935 	movx	@dptr,a
                                   1936 ;	nrf24l01.c:252: SPI_send_command(SPI_command);
      000445 75 82 E1         [24] 1937 	mov	dpl,#0xe1
      000448 12r00r90         [24] 1938 	lcall	_SPI_send_command
                                   1939 ;	nrf24l01.c:253: nrf24_SPI(SPI_OFF);
      00044B 75 82 01         [24] 1940 	mov	dpl,#0x01
      00044E 12r00r7C         [24] 1941 	lcall	_nrf24_SPI
                                   1942 ;	nrf24l01.c:254: return OPERATION_DONE;
      000451 75 82 01         [24] 1943 	mov	dpl,#0x01
      000454 22               [24] 1944 	ret
      000455                       1945 00103$:
                                   1946 ;	nrf24l01.c:257: return OPERATION_ERROR;
      000455 75 82 00         [24] 1947 	mov	dpl,#0x00
                                   1948 ;	nrf24l01.c:258: case RX_BUFFER:
      000458 22               [24] 1949 	ret
      000459                       1950 00105$:
                                   1951 ;	nrf24l01.c:259: if (current_mode == PRX)
      000459 90r00r1C         [24] 1952 	mov	dptr,#_current_mode
      00045C E0               [24] 1953 	movx	a,@dptr
      00045D FF               [12] 1954 	mov	r7,a
      00045E BF 04 1C         [24] 1955 	cjne	r7,#0x04,00107$
                                   1956 ;	nrf24l01.c:261: nrf24_SPI(SPI_ON);
      000461 75 82 00         [24] 1957 	mov	dpl,#0x00
      000464 12r00r7C         [24] 1958 	lcall	_nrf24_SPI
                                   1959 ;	nrf24l01.c:262: SPI_command = FLUSH_RX;
      000467 90r00r01         [24] 1960 	mov	dptr,#_SPI_command
      00046A 74 E2            [12] 1961 	mov	a,#0xe2
      00046C F0               [24] 1962 	movx	@dptr,a
                                   1963 ;	nrf24l01.c:263: SPI_send_command(SPI_command);
      00046D 75 82 E2         [24] 1964 	mov	dpl,#0xe2
      000470 12r00r90         [24] 1965 	lcall	_SPI_send_command
                                   1966 ;	nrf24l01.c:264: nrf24_SPI(SPI_OFF);
      000473 75 82 01         [24] 1967 	mov	dpl,#0x01
      000476 12r00r7C         [24] 1968 	lcall	_nrf24_SPI
                                   1969 ;	nrf24l01.c:265: return OPERATION_DONE;
      000479 75 82 01         [24] 1970 	mov	dpl,#0x01
      00047C 22               [24] 1971 	ret
      00047D                       1972 00107$:
                                   1973 ;	nrf24l01.c:268: return OPERATION_ERROR;
      00047D 75 82 00         [24] 1974 	mov	dpl,#0x00
                                   1975 ;	nrf24l01.c:269: default:
      000480 22               [24] 1976 	ret
      000481                       1977 00109$:
                                   1978 ;	nrf24l01.c:270: return OPERATION_ERROR;
      000481 75 82 00         [24] 1979 	mov	dpl,#0x00
                                   1980 ;	nrf24l01.c:271: }
                                   1981 ;	nrf24l01.c:272: }
      000484 22               [24] 1982 	ret
                                   1983 ;------------------------------------------------------------
                                   1984 ;Allocation info for local variables in function 'nrf24_reset'
                                   1985 ;------------------------------------------------------------
                                   1986 ;	nrf24l01.c:275: void nrf24_reset(void)
                                   1987 ;	-----------------------------------------
                                   1988 ;	 function nrf24_reset
                                   1989 ;	-----------------------------------------
      000485                       1990 _nrf24_reset:
                                   1991 ;	nrf24l01.c:277: reset_flag = 1;
      000485 90r00r1B         [24] 1992 	mov	dptr,#_reset_flag
      000488 74 01            [12] 1993 	mov	a,#0x01
      00048A F0               [24] 1994 	movx	@dptr,a
                                   1995 ;	nrf24l01.c:278: nrf24_CE(CE_OFF);
      00048B 75 82 00         [24] 1996 	mov	dpl,#0x00
      00048E 12r00rCF         [24] 1997 	lcall	_nrf24_CE
                                   1998 ;	nrf24l01.c:279: register_new_value = CONFIG_REGISTER_DEFAULT;
      000491 90r00r03         [24] 1999 	mov	dptr,#_register_new_value
      000494 74 08            [12] 2000 	mov	a,#0x08
      000496 F0               [24] 2001 	movx	@dptr,a
                                   2002 ;	nrf24l01.c:280: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000497 90r00r3F         [24] 2003 	mov	dptr,#_nrf24_write_PARM_2
      00049A 74r03            [12] 2004 	mov	a,#_register_new_value
      00049C F0               [24] 2005 	movx	@dptr,a
      00049D 74s00            [12] 2006 	mov	a,#(_register_new_value >> 8)
      00049F A3               [24] 2007 	inc	dptr
      0004A0 F0               [24] 2008 	movx	@dptr,a
      0004A1 E4               [12] 2009 	clr	a
      0004A2 A3               [24] 2010 	inc	dptr
      0004A3 F0               [24] 2011 	movx	@dptr,a
      0004A4 90r00r42         [24] 2012 	mov	dptr,#_nrf24_write_PARM_3
      0004A7 04               [12] 2013 	inc	a
      0004A8 F0               [24] 2014 	movx	@dptr,a
      0004A9 90r00r43         [24] 2015 	mov	dptr,#_nrf24_write_PARM_4
      0004AC E4               [12] 2016 	clr	a
      0004AD F0               [24] 2017 	movx	@dptr,a
      0004AE 75 82 00         [24] 2018 	mov	dpl,#0x00
      0004B1 12r10r06         [24] 2019 	lcall	_nrf24_write
                                   2020 ;	nrf24l01.c:281: register_new_value = EN_AA_REGISTER_DEFAULT;
      0004B4 90r00r03         [24] 2021 	mov	dptr,#_register_new_value
      0004B7 74 3F            [12] 2022 	mov	a,#0x3f
      0004B9 F0               [24] 2023 	movx	@dptr,a
                                   2024 ;	nrf24l01.c:282: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0004BA 90r00r3F         [24] 2025 	mov	dptr,#_nrf24_write_PARM_2
      0004BD 74r03            [12] 2026 	mov	a,#_register_new_value
      0004BF F0               [24] 2027 	movx	@dptr,a
      0004C0 74s00            [12] 2028 	mov	a,#(_register_new_value >> 8)
      0004C2 A3               [24] 2029 	inc	dptr
      0004C3 F0               [24] 2030 	movx	@dptr,a
      0004C4 E4               [12] 2031 	clr	a
      0004C5 A3               [24] 2032 	inc	dptr
      0004C6 F0               [24] 2033 	movx	@dptr,a
      0004C7 90r00r42         [24] 2034 	mov	dptr,#_nrf24_write_PARM_3
      0004CA 04               [12] 2035 	inc	a
      0004CB F0               [24] 2036 	movx	@dptr,a
      0004CC 90r00r43         [24] 2037 	mov	dptr,#_nrf24_write_PARM_4
      0004CF E4               [12] 2038 	clr	a
      0004D0 F0               [24] 2039 	movx	@dptr,a
      0004D1 75 82 01         [24] 2040 	mov	dpl,#0x01
      0004D4 12r10r06         [24] 2041 	lcall	_nrf24_write
                                   2042 ;	nrf24l01.c:283: register_new_value = EN_RXADDR_REGISTER_DEFAULT;
      0004D7 90r00r03         [24] 2043 	mov	dptr,#_register_new_value
      0004DA E4               [12] 2044 	clr	a
      0004DB F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	nrf24l01.c:284: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      0004DC 90r00r3F         [24] 2047 	mov	dptr,#_nrf24_write_PARM_2
      0004DF 74r03            [12] 2048 	mov	a,#_register_new_value
      0004E1 F0               [24] 2049 	movx	@dptr,a
      0004E2 74s00            [12] 2050 	mov	a,#(_register_new_value >> 8)
      0004E4 A3               [24] 2051 	inc	dptr
      0004E5 F0               [24] 2052 	movx	@dptr,a
      0004E6 E4               [12] 2053 	clr	a
      0004E7 A3               [24] 2054 	inc	dptr
      0004E8 F0               [24] 2055 	movx	@dptr,a
      0004E9 90r00r42         [24] 2056 	mov	dptr,#_nrf24_write_PARM_3
      0004EC 04               [12] 2057 	inc	a
      0004ED F0               [24] 2058 	movx	@dptr,a
      0004EE 90r00r43         [24] 2059 	mov	dptr,#_nrf24_write_PARM_4
      0004F1 E4               [12] 2060 	clr	a
      0004F2 F0               [24] 2061 	movx	@dptr,a
      0004F3 75 82 02         [24] 2062 	mov	dpl,#0x02
      0004F6 12r10r06         [24] 2063 	lcall	_nrf24_write
                                   2064 ;	nrf24l01.c:285: register_new_value = SETUP_AW_REGISTER_DEFAULT;
      0004F9 90r00r03         [24] 2065 	mov	dptr,#_register_new_value
      0004FC 74 03            [12] 2066 	mov	a,#0x03
      0004FE F0               [24] 2067 	movx	@dptr,a
                                   2068 ;	nrf24l01.c:286: nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
      0004FF 90r00r3F         [24] 2069 	mov	dptr,#_nrf24_write_PARM_2
      000502 74r03            [12] 2070 	mov	a,#_register_new_value
      000504 F0               [24] 2071 	movx	@dptr,a
      000505 74s00            [12] 2072 	mov	a,#(_register_new_value >> 8)
      000507 A3               [24] 2073 	inc	dptr
      000508 F0               [24] 2074 	movx	@dptr,a
      000509 E4               [12] 2075 	clr	a
      00050A A3               [24] 2076 	inc	dptr
      00050B F0               [24] 2077 	movx	@dptr,a
      00050C 90r00r42         [24] 2078 	mov	dptr,#_nrf24_write_PARM_3
      00050F 04               [12] 2079 	inc	a
      000510 F0               [24] 2080 	movx	@dptr,a
      000511 90r00r43         [24] 2081 	mov	dptr,#_nrf24_write_PARM_4
      000514 E4               [12] 2082 	clr	a
      000515 F0               [24] 2083 	movx	@dptr,a
      000516 75 82 03         [24] 2084 	mov	dpl,#0x03
      000519 12r10r06         [24] 2085 	lcall	_nrf24_write
                                   2086 ;	nrf24l01.c:287: register_new_value = RF_CH_REGISTER_DEFAULT;
      00051C 90r00r03         [24] 2087 	mov	dptr,#_register_new_value
      00051F 74 02            [12] 2088 	mov	a,#0x02
      000521 F0               [24] 2089 	movx	@dptr,a
                                   2090 ;	nrf24l01.c:288: nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
      000522 90r00r3F         [24] 2091 	mov	dptr,#_nrf24_write_PARM_2
      000525 74r03            [12] 2092 	mov	a,#_register_new_value
      000527 F0               [24] 2093 	movx	@dptr,a
      000528 74s00            [12] 2094 	mov	a,#(_register_new_value >> 8)
      00052A A3               [24] 2095 	inc	dptr
      00052B F0               [24] 2096 	movx	@dptr,a
      00052C E4               [12] 2097 	clr	a
      00052D A3               [24] 2098 	inc	dptr
      00052E F0               [24] 2099 	movx	@dptr,a
      00052F 90r00r42         [24] 2100 	mov	dptr,#_nrf24_write_PARM_3
      000532 04               [12] 2101 	inc	a
      000533 F0               [24] 2102 	movx	@dptr,a
      000534 90r00r43         [24] 2103 	mov	dptr,#_nrf24_write_PARM_4
      000537 E4               [12] 2104 	clr	a
      000538 F0               [24] 2105 	movx	@dptr,a
      000539 75 82 05         [24] 2106 	mov	dpl,#0x05
      00053C 12r10r06         [24] 2107 	lcall	_nrf24_write
                                   2108 ;	nrf24l01.c:289: register_new_value = RF_SETUP_REGISTER_DEFAULT;
      00053F 90r00r03         [24] 2109 	mov	dptr,#_register_new_value
      000542 74 27            [12] 2110 	mov	a,#0x27
      000544 F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	nrf24l01.c:290: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000545 90r00r3F         [24] 2113 	mov	dptr,#_nrf24_write_PARM_2
      000548 74r03            [12] 2114 	mov	a,#_register_new_value
      00054A F0               [24] 2115 	movx	@dptr,a
      00054B 74s00            [12] 2116 	mov	a,#(_register_new_value >> 8)
      00054D A3               [24] 2117 	inc	dptr
      00054E F0               [24] 2118 	movx	@dptr,a
      00054F E4               [12] 2119 	clr	a
      000550 A3               [24] 2120 	inc	dptr
      000551 F0               [24] 2121 	movx	@dptr,a
      000552 90r00r42         [24] 2122 	mov	dptr,#_nrf24_write_PARM_3
      000555 04               [12] 2123 	inc	a
      000556 F0               [24] 2124 	movx	@dptr,a
      000557 90r00r43         [24] 2125 	mov	dptr,#_nrf24_write_PARM_4
      00055A E4               [12] 2126 	clr	a
      00055B F0               [24] 2127 	movx	@dptr,a
      00055C 75 82 06         [24] 2128 	mov	dpl,#0x06
      00055F 12r10r06         [24] 2129 	lcall	_nrf24_write
                                   2130 ;	nrf24l01.c:291: register_new_value = STATUS_REGISTER_DEFAULT;
      000562 90r00r03         [24] 2131 	mov	dptr,#_register_new_value
      000565 74 0E            [12] 2132 	mov	a,#0x0e
      000567 F0               [24] 2133 	movx	@dptr,a
                                   2134 ;	nrf24l01.c:292: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      000568 90r00r3F         [24] 2135 	mov	dptr,#_nrf24_write_PARM_2
      00056B 74r03            [12] 2136 	mov	a,#_register_new_value
      00056D F0               [24] 2137 	movx	@dptr,a
      00056E 74s00            [12] 2138 	mov	a,#(_register_new_value >> 8)
      000570 A3               [24] 2139 	inc	dptr
      000571 F0               [24] 2140 	movx	@dptr,a
      000572 E4               [12] 2141 	clr	a
      000573 A3               [24] 2142 	inc	dptr
      000574 F0               [24] 2143 	movx	@dptr,a
      000575 90r00r42         [24] 2144 	mov	dptr,#_nrf24_write_PARM_3
      000578 04               [12] 2145 	inc	a
      000579 F0               [24] 2146 	movx	@dptr,a
      00057A 90r00r43         [24] 2147 	mov	dptr,#_nrf24_write_PARM_4
      00057D E4               [12] 2148 	clr	a
      00057E F0               [24] 2149 	movx	@dptr,a
      00057F 75 82 07         [24] 2150 	mov	dpl,#0x07
      000582 12r10r06         [24] 2151 	lcall	_nrf24_write
                                   2152 ;	nrf24l01.c:299: nrf24_mode(PTX);
      000585 75 82 03         [24] 2153 	mov	dpl,#0x03
      000588 12r0Er70         [24] 2154 	lcall	_nrf24_mode
                                   2155 ;	nrf24l01.c:300: nrf24_flush(TX_BUFFER);
      00058B 75 82 01         [24] 2156 	mov	dpl,#0x01
      00058E 12r04r24         [24] 2157 	lcall	_nrf24_flush
                                   2158 ;	nrf24l01.c:301: nrf24_mode(PRX);
      000591 75 82 04         [24] 2159 	mov	dpl,#0x04
      000594 12r0Er70         [24] 2160 	lcall	_nrf24_mode
                                   2161 ;	nrf24l01.c:302: nrf24_flush(RX_BUFFER);
      000597 75 82 00         [24] 2162 	mov	dpl,#0x00
      00059A 12r04r24         [24] 2163 	lcall	_nrf24_flush
                                   2164 ;	nrf24l01.c:304: nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
      00059D 90r00r39         [24] 2165 	mov	dptr,#_nrf24_read_PARM_2
      0005A0 74r02            [12] 2166 	mov	a,#_register_current_value
      0005A2 F0               [24] 2167 	movx	@dptr,a
      0005A3 74s00            [12] 2168 	mov	a,#(_register_current_value >> 8)
      0005A5 A3               [24] 2169 	inc	dptr
      0005A6 F0               [24] 2170 	movx	@dptr,a
      0005A7 E4               [12] 2171 	clr	a
      0005A8 A3               [24] 2172 	inc	dptr
      0005A9 F0               [24] 2173 	movx	@dptr,a
      0005AA 90r00r3C         [24] 2174 	mov	dptr,#_nrf24_read_PARM_3
      0005AD 04               [12] 2175 	inc	a
      0005AE F0               [24] 2176 	movx	@dptr,a
      0005AF 90r00r3D         [24] 2177 	mov	dptr,#_nrf24_read_PARM_4
      0005B2 E4               [12] 2178 	clr	a
      0005B3 F0               [24] 2179 	movx	@dptr,a
      0005B4 75 82 07         [24] 2180 	mov	dpl,#0x07
      0005B7 12r0Fr9A         [24] 2181 	lcall	_nrf24_read
                                   2182 ;	nrf24l01.c:305: register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
      0005BA 90r00r02         [24] 2183 	mov	dptr,#_register_current_value
      0005BD E0               [24] 2184 	movx	a,@dptr
      0005BE 90r00r03         [24] 2185 	mov	dptr,#_register_new_value
      0005C1 44 70            [12] 2186 	orl	a,#0x70
      0005C3 F0               [24] 2187 	movx	@dptr,a
                                   2188 ;	nrf24l01.c:306: nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
      0005C4 90r00r3F         [24] 2189 	mov	dptr,#_nrf24_write_PARM_2
      0005C7 74r03            [12] 2190 	mov	a,#_register_new_value
      0005C9 F0               [24] 2191 	movx	@dptr,a
      0005CA 74s00            [12] 2192 	mov	a,#(_register_new_value >> 8)
      0005CC A3               [24] 2193 	inc	dptr
      0005CD F0               [24] 2194 	movx	@dptr,a
      0005CE E4               [12] 2195 	clr	a
      0005CF A3               [24] 2196 	inc	dptr
      0005D0 F0               [24] 2197 	movx	@dptr,a
      0005D1 90r00r42         [24] 2198 	mov	dptr,#_nrf24_write_PARM_3
      0005D4 04               [12] 2199 	inc	a
      0005D5 F0               [24] 2200 	movx	@dptr,a
      0005D6 90r00r43         [24] 2201 	mov	dptr,#_nrf24_write_PARM_4
      0005D9 E4               [12] 2202 	clr	a
      0005DA F0               [24] 2203 	movx	@dptr,a
      0005DB 75 82 07         [24] 2204 	mov	dpl,#0x07
      0005DE 12r10r06         [24] 2205 	lcall	_nrf24_write
                                   2206 ;	nrf24l01.c:308: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      0005E1 90r00r33         [24] 2207 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      0005E4 74 01            [12] 2208 	mov	a,#0x01
      0005E6 F0               [24] 2209 	movx	@dptr,a
      0005E7 90r00r34         [24] 2210 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      0005EA F0               [24] 2211 	movx	@dptr,a
      0005EB 75 82 01         [24] 2212 	mov	dpl,#0x01
      0005EE 12r0Dr72         [24] 2213 	lcall	_nrf24_interrupt_mask
                                   2214 ;	nrf24l01.c:309: nrf24_crc_configuration(ENABLE, 2);
      0005F1 90r00r36         [24] 2215 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      0005F4 74 02            [12] 2216 	mov	a,#0x02
      0005F6 F0               [24] 2217 	movx	@dptr,a
      0005F7 75 82 01         [24] 2218 	mov	dpl,#0x01
      0005FA 12r0DrFC         [24] 2219 	lcall	_nrf24_crc_configuration
                                   2220 ;	nrf24l01.c:310: nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
      0005FD 75 82 05         [24] 2221 	mov	dpl,#0x05
      000600 12r0BrAB         [24] 2222 	lcall	_nrf24_address_width
                                   2223 ;	nrf24l01.c:313: nrf24_rf_channel(RF_CHANNEL_DEFAULT);
      000603 75 82 2E         [24] 2224 	mov	dpl,#0x2e
      000606 12r0Dr1C         [24] 2225 	lcall	_nrf24_rf_channel
                                   2226 ;	nrf24l01.c:314: nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
      000609 75 82 02         [24] 2227 	mov	dpl,#0x02
      00060C 12r0Br74         [24] 2228 	lcall	_nrf24_datapipe_enable
                                   2229 ;	nrf24l01.c:315: nrf24_datapipe_address_configuration();  // I uncommented it
      00060F 12r0ArEF         [24] 2230 	lcall	_nrf24_datapipe_address_configuration
                                   2231 ;	nrf24l01.c:316: nrf24_datapipe_ptx(1);  // I uncommented it
      000612 75 82 01         [24] 2232 	mov	dpl,#0x01
      000615 12r0ArA1         [24] 2233 	lcall	_nrf24_datapipe_ptx
                                   2234 ;	nrf24l01.c:317: nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
      000618 90r00r29         [24] 2235 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      00061B 74 02            [12] 2236 	mov	a,#0x02
      00061D F0               [24] 2237 	movx	@dptr,a
      00061E 75 82 10         [24] 2238 	mov	dpl,#0x10
      000621 12r0Br33         [24] 2239 	lcall	_nrf24_prx_static_payload_width
                                   2240 ;	nrf24l01.c:318: nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
      000624 90r00r22         [24] 2241 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      000627 74 08            [12] 2242 	mov	a,#0x08
      000629 F0               [24] 2243 	movx	@dptr,a
      00062A 90 06 D6         [24] 2244 	mov	dptr,#0x06d6
      00062D 12r09r20         [24] 2245 	lcall	_nrf24_automatic_retransmit_setup
                                   2246 ;	nrf24l01.c:319: nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
      000630 75 82 02         [24] 2247 	mov	dpl,#0x02
      000633 12r09r99         [24] 2248 	lcall	_nrf24_auto_acknowledgment_setup
                                   2249 ;	nrf24l01.c:320: nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
      000636 90r00r26         [24] 2250 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      000639 74 02            [12] 2251 	mov	a,#0x02
      00063B F0               [24] 2252 	movx	@dptr,a
      00063C 75 82 00         [24] 2253 	mov	dpl,#0x00
      00063F 12r09rD5         [24] 2254 	lcall	_nrf24_dynamic_payload
                                   2255 ;	nrf24l01.c:321: nrf24_dynamic_ack(ENABLE);
      000642 75 82 01         [24] 2256 	mov	dpl,#0x01
                                   2257 ;	nrf24l01.c:323: }
      000645 02r00rE3         [24] 2258 	ljmp	_nrf24_dynamic_ack
                                   2259 ;------------------------------------------------------------
                                   2260 ;Allocation info for local variables in function 'nrf24_device'
                                   2261 ;------------------------------------------------------------
                                   2262 ;reset_state               Allocated with name '_nrf24_device_PARM_2'
                                   2263 ;device_mode               Allocated with name '_nrf24_device_device_mode_65536_156'
                                   2264 ;register_to_write_to      Allocated with name '_nrf24_device_register_to_write_to_65537_158'
                                   2265 ;hardwareCheckPassed       Allocated with name '_nrf24_device_hardwareCheckPassed_65537_158'
                                   2266 ;new_value                 Allocated with name '_nrf24_device_new_value_65537_158'
                                   2267 ;i                         Allocated with name '_nrf24_device_i_131073_164'
                                   2268 ;------------------------------------------------------------
                                   2269 ;	nrf24l01.c:328: void nrf24_device(uint8_t device_mode, uint8_t reset_state)
                                   2270 ;	-----------------------------------------
                                   2271 ;	 function nrf24_device
                                   2272 ;	-----------------------------------------
      000648                       2273 _nrf24_device:
      000648 E5 82            [12] 2274 	mov	a,dpl
      00064A 90r00r1F         [24] 2275 	mov	dptr,#_nrf24_device_device_mode_65536_156
      00064D F0               [24] 2276 	movx	@dptr,a
                                   2277 ;	nrf24l01.c:330: SPI_Initializer();
      00064E 12r00r28         [24] 2278 	lcall	_SPI_Initializer
                                   2279 ;	nrf24l01.c:331: pinout_Initializer();
      000651 12r00r4D         [24] 2280 	lcall	_pinout_Initializer
                                   2281 ;	nrf24l01.c:332: delay_function(STARTUP_DELAY);
      000654 90 00 96         [24] 2282 	mov	dptr,#(0x96&0x00ff)
      000657 E4               [12] 2283 	clr	a
      000658 F5 F0            [12] 2284 	mov	b,a
      00065A 12r00r00         [24] 2285 	lcall	_delay_function
                                   2286 ;	nrf24l01.c:333: nrf24_CE(CE_OFF);
      00065D 75 82 00         [24] 2287 	mov	dpl,#0x00
      000660 12r00rCF         [24] 2288 	lcall	_nrf24_CE
                                   2289 ;	nrf24l01.c:337: nrf24_read(0x00, &register_current_value, 1, CLOSE);
      000663 90r00r39         [24] 2290 	mov	dptr,#_nrf24_read_PARM_2
      000666 74r02            [12] 2291 	mov	a,#_register_current_value
      000668 F0               [24] 2292 	movx	@dptr,a
      000669 74s00            [12] 2293 	mov	a,#(_register_current_value >> 8)
      00066B A3               [24] 2294 	inc	dptr
      00066C F0               [24] 2295 	movx	@dptr,a
      00066D E4               [12] 2296 	clr	a
      00066E A3               [24] 2297 	inc	dptr
      00066F F0               [24] 2298 	movx	@dptr,a
      000670 90r00r3C         [24] 2299 	mov	dptr,#_nrf24_read_PARM_3
      000673 04               [12] 2300 	inc	a
      000674 F0               [24] 2301 	movx	@dptr,a
      000675 90r00r3D         [24] 2302 	mov	dptr,#_nrf24_read_PARM_4
      000678 E4               [12] 2303 	clr	a
      000679 F0               [24] 2304 	movx	@dptr,a
      00067A 75 82 00         [24] 2305 	mov	dpl,#0x00
      00067D 12r0Fr9A         [24] 2306 	lcall	_nrf24_read
                                   2307 ;	nrf24l01.c:341: bool hardwareCheckPassed = false;
      000680 90r00r20         [24] 2308 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      000683 E4               [12] 2309 	clr	a
      000684 F0               [24] 2310 	movx	@dptr,a
                                   2311 ;	nrf24l01.c:343: while (!hardwareCheckPassed) {
      000685                       2312 00104$:
      000685 90r00r20         [24] 2313 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      000688 E0               [24] 2314 	movx	a,@dptr
      000689 60 03            [24] 2315 	jz	00151$
      00068B 02r07rCA         [24] 2316 	ljmp	00106$
      00068E                       2317 00151$:
                                   2318 ;	nrf24l01.c:345: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      00068E 90r00r39         [24] 2319 	mov	dptr,#_nrf24_read_PARM_2
      000691 74r02            [12] 2320 	mov	a,#_register_current_value
      000693 F0               [24] 2321 	movx	@dptr,a
      000694 74s00            [12] 2322 	mov	a,#(_register_current_value >> 8)
      000696 A3               [24] 2323 	inc	dptr
      000697 F0               [24] 2324 	movx	@dptr,a
      000698 E4               [12] 2325 	clr	a
      000699 A3               [24] 2326 	inc	dptr
      00069A F0               [24] 2327 	movx	@dptr,a
      00069B 90r00r3C         [24] 2328 	mov	dptr,#_nrf24_read_PARM_3
      00069E 04               [12] 2329 	inc	a
      00069F F0               [24] 2330 	movx	@dptr,a
      0006A0 90r00r3D         [24] 2331 	mov	dptr,#_nrf24_read_PARM_4
      0006A3 E4               [12] 2332 	clr	a
      0006A4 F0               [24] 2333 	movx	@dptr,a
      0006A5 75 82 00         [24] 2334 	mov	dpl,#0x00
      0006A8 12r0Fr9A         [24] 2335 	lcall	_nrf24_read
                                   2336 ;	nrf24l01.c:346: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      0006AB 90r00r02         [24] 2337 	mov	dptr,#_register_current_value
      0006AE E0               [24] 2338 	movx	a,@dptr
      0006AF FF               [12] 2339 	mov	r7,a
      0006B0 7E 00            [12] 2340 	mov	r6,#0x00
      0006B2 C0 07            [24] 2341 	push	ar7
      0006B4 C0 06            [24] 2342 	push	ar6
      0006B6 E4               [12] 2343 	clr	a
      0006B7 C0 E0            [24] 2344 	push	acc
      0006B9 C0 E0            [24] 2345 	push	acc
      0006BB 74r00            [12] 2346 	mov	a,#___str_0
      0006BD C0 E0            [24] 2347 	push	acc
      0006BF 74s01            [12] 2348 	mov	a,#(___str_0 >> 8)
      0006C1 C0 E0            [24] 2349 	push	acc
      0006C3 74 80            [12] 2350 	mov	a,#0x80
      0006C5 C0 E0            [24] 2351 	push	acc
      0006C7 12r00r00         [24] 2352 	lcall	_printf
      0006CA E5 81            [12] 2353 	mov	a,sp
      0006CC 24 F9            [12] 2354 	add	a,#0xf9
      0006CE F5 81            [12] 2355 	mov	sp,a
                                   2356 ;	nrf24l01.c:349: new_value = register_current_value + 3;
      0006D0 90r00r02         [24] 2357 	mov	dptr,#_register_current_value
      0006D3 E0               [24] 2358 	movx	a,@dptr
      0006D4 FF               [12] 2359 	mov	r7,a
      0006D5 0F               [12] 2360 	inc	r7
      0006D6 0F               [12] 2361 	inc	r7
      0006D7 0F               [12] 2362 	inc	r7
      0006D8 90r00r21         [24] 2363 	mov	dptr,#_nrf24_device_new_value_65537_158
      0006DB EF               [12] 2364 	mov	a,r7
      0006DC F0               [24] 2365 	movx	@dptr,a
                                   2366 ;	nrf24l01.c:350: register_new_value = new_value;
      0006DD 90r00r03         [24] 2367 	mov	dptr,#_register_new_value
      0006E0 EF               [12] 2368 	mov	a,r7
      0006E1 F0               [24] 2369 	movx	@dptr,a
                                   2370 ;	nrf24l01.c:351: nrf24_write(register_to_write_to, &register_new_value, 1, CLOSE); // restarts the nrf?!?!? where is requires two read calls to return 8 again
      0006E2 90r00r3F         [24] 2371 	mov	dptr,#_nrf24_write_PARM_2
      0006E5 74r03            [12] 2372 	mov	a,#_register_new_value
      0006E7 F0               [24] 2373 	movx	@dptr,a
      0006E8 74s00            [12] 2374 	mov	a,#(_register_new_value >> 8)
      0006EA A3               [24] 2375 	inc	dptr
      0006EB F0               [24] 2376 	movx	@dptr,a
      0006EC E4               [12] 2377 	clr	a
      0006ED A3               [24] 2378 	inc	dptr
      0006EE F0               [24] 2379 	movx	@dptr,a
      0006EF 90r00r42         [24] 2380 	mov	dptr,#_nrf24_write_PARM_3
      0006F2 04               [12] 2381 	inc	a
      0006F3 F0               [24] 2382 	movx	@dptr,a
      0006F4 90r00r43         [24] 2383 	mov	dptr,#_nrf24_write_PARM_4
      0006F7 E4               [12] 2384 	clr	a
      0006F8 F0               [24] 2385 	movx	@dptr,a
      0006F9 75 82 00         [24] 2386 	mov	dpl,#0x00
      0006FC 12r10r06         [24] 2387 	lcall	_nrf24_write
                                   2388 ;	nrf24l01.c:352: printf("Sending to %d: %d\n", register_to_write_to, register_new_value);
      0006FF 90r00r03         [24] 2389 	mov	dptr,#_register_new_value
      000702 E0               [24] 2390 	movx	a,@dptr
      000703 FF               [12] 2391 	mov	r7,a
      000704 7E 00            [12] 2392 	mov	r6,#0x00
      000706 C0 07            [24] 2393 	push	ar7
      000708 C0 06            [24] 2394 	push	ar6
      00070A E4               [12] 2395 	clr	a
      00070B C0 E0            [24] 2396 	push	acc
      00070D C0 E0            [24] 2397 	push	acc
      00070F 74r13            [12] 2398 	mov	a,#___str_1
      000711 C0 E0            [24] 2399 	push	acc
      000713 74s01            [12] 2400 	mov	a,#(___str_1 >> 8)
      000715 C0 E0            [24] 2401 	push	acc
      000717 74 80            [12] 2402 	mov	a,#0x80
      000719 C0 E0            [24] 2403 	push	acc
      00071B 12r00r00         [24] 2404 	lcall	_printf
      00071E E5 81            [12] 2405 	mov	a,sp
      000720 24 F9            [12] 2406 	add	a,#0xf9
      000722 F5 81            [12] 2407 	mov	sp,a
                                   2408 ;	nrf24l01.c:355: nrf24_read(register_to_write_to, &register_current_value, 1, CLOSE);
      000724 90r00r39         [24] 2409 	mov	dptr,#_nrf24_read_PARM_2
      000727 74r02            [12] 2410 	mov	a,#_register_current_value
      000729 F0               [24] 2411 	movx	@dptr,a
      00072A 74s00            [12] 2412 	mov	a,#(_register_current_value >> 8)
      00072C A3               [24] 2413 	inc	dptr
      00072D F0               [24] 2414 	movx	@dptr,a
      00072E E4               [12] 2415 	clr	a
      00072F A3               [24] 2416 	inc	dptr
      000730 F0               [24] 2417 	movx	@dptr,a
      000731 90r00r3C         [24] 2418 	mov	dptr,#_nrf24_read_PARM_3
      000734 04               [12] 2419 	inc	a
      000735 F0               [24] 2420 	movx	@dptr,a
      000736 90r00r3D         [24] 2421 	mov	dptr,#_nrf24_read_PARM_4
      000739 E4               [12] 2422 	clr	a
      00073A F0               [24] 2423 	movx	@dptr,a
      00073B 75 82 00         [24] 2424 	mov	dpl,#0x00
      00073E 12r0Fr9A         [24] 2425 	lcall	_nrf24_read
                                   2426 ;	nrf24l01.c:356: printf("\rRead from %d: %d\n", register_to_write_to, register_current_value);
      000741 90r00r02         [24] 2427 	mov	dptr,#_register_current_value
      000744 E0               [24] 2428 	movx	a,@dptr
      000745 FF               [12] 2429 	mov	r7,a
      000746 7E 00            [12] 2430 	mov	r6,#0x00
      000748 C0 07            [24] 2431 	push	ar7
      00074A C0 06            [24] 2432 	push	ar6
      00074C E4               [12] 2433 	clr	a
      00074D C0 E0            [24] 2434 	push	acc
      00074F C0 E0            [24] 2435 	push	acc
      000751 74r00            [12] 2436 	mov	a,#___str_0
      000753 C0 E0            [24] 2437 	push	acc
      000755 74s01            [12] 2438 	mov	a,#(___str_0 >> 8)
      000757 C0 E0            [24] 2439 	push	acc
      000759 74 80            [12] 2440 	mov	a,#0x80
      00075B C0 E0            [24] 2441 	push	acc
      00075D 12r00r00         [24] 2442 	lcall	_printf
      000760 E5 81            [12] 2443 	mov	a,sp
      000762 24 F9            [12] 2444 	add	a,#0xf9
      000764 F5 81            [12] 2445 	mov	sp,a
                                   2446 ;	nrf24l01.c:358: if (register_current_value == new_value) {
      000766 90r00r02         [24] 2447 	mov	dptr,#_register_current_value
      000769 E0               [24] 2448 	movx	a,@dptr
      00076A FF               [12] 2449 	mov	r7,a
      00076B 90r00r21         [24] 2450 	mov	dptr,#_nrf24_device_new_value_65537_158
      00076E E0               [24] 2451 	movx	a,@dptr
      00076F FE               [12] 2452 	mov	r6,a
      000770 EF               [12] 2453 	mov	a,r7
      000771 B5 06 1E         [24] 2454 	cjne	a,ar6,00102$
                                   2455 ;	nrf24l01.c:359: printf("\rRead value matches the newly written value :D\n");
      000774 74r26            [12] 2456 	mov	a,#___str_2
      000776 C0 E0            [24] 2457 	push	acc
      000778 74s01            [12] 2458 	mov	a,#(___str_2 >> 8)
      00077A C0 E0            [24] 2459 	push	acc
      00077C 74 80            [12] 2460 	mov	a,#0x80
      00077E C0 E0            [24] 2461 	push	acc
      000780 12r00r00         [24] 2462 	lcall	_printf
      000783 15 81            [12] 2463 	dec	sp
      000785 15 81            [12] 2464 	dec	sp
      000787 15 81            [12] 2465 	dec	sp
                                   2466 ;	nrf24l01.c:360: hardwareCheckPassed = true;
      000789 90r00r20         [24] 2467 	mov	dptr,#_nrf24_device_hardwareCheckPassed_65537_158
      00078C 74 01            [12] 2468 	mov	a,#0x01
      00078E F0               [24] 2469 	movx	@dptr,a
      00078F 02r06r85         [24] 2470 	ljmp	00104$
      000792                       2471 00102$:
                                   2472 ;	nrf24l01.c:362: printf("\rRead value doesn't match the newly written value ;(\n");
      000792 74r56            [12] 2473 	mov	a,#___str_3
      000794 C0 E0            [24] 2474 	push	acc
      000796 74s01            [12] 2475 	mov	a,#(___str_3 >> 8)
      000798 C0 E0            [24] 2476 	push	acc
      00079A 74 80            [12] 2477 	mov	a,#0x80
      00079C C0 E0            [24] 2478 	push	acc
      00079E 12r00r00         [24] 2479 	lcall	_printf
      0007A1 15 81            [12] 2480 	dec	sp
      0007A3 15 81            [12] 2481 	dec	sp
      0007A5 15 81            [12] 2482 	dec	sp
                                   2483 ;	nrf24l01.c:363: printf("\rRead: %d\n", register_current_value);
      0007A7 90r00r02         [24] 2484 	mov	dptr,#_register_current_value
      0007AA E0               [24] 2485 	movx	a,@dptr
      0007AB FF               [12] 2486 	mov	r7,a
      0007AC 7E 00            [12] 2487 	mov	r6,#0x00
      0007AE C0 07            [24] 2488 	push	ar7
      0007B0 C0 06            [24] 2489 	push	ar6
      0007B2 74r8C            [12] 2490 	mov	a,#___str_4
      0007B4 C0 E0            [24] 2491 	push	acc
      0007B6 74s01            [12] 2492 	mov	a,#(___str_4 >> 8)
      0007B8 C0 E0            [24] 2493 	push	acc
      0007BA 74 80            [12] 2494 	mov	a,#0x80
      0007BC C0 E0            [24] 2495 	push	acc
      0007BE 12r00r00         [24] 2496 	lcall	_printf
      0007C1 E5 81            [12] 2497 	mov	a,sp
      0007C3 24 FB            [12] 2498 	add	a,#0xfb
      0007C5 F5 81            [12] 2499 	mov	sp,a
      0007C7 02r06r85         [24] 2500 	ljmp	00104$
      0007CA                       2501 00106$:
                                   2502 ;	nrf24l01.c:367: printf("\rHardware Detected!\n");
      0007CA 74r97            [12] 2503 	mov	a,#___str_5
      0007CC C0 E0            [24] 2504 	push	acc
      0007CE 74s01            [12] 2505 	mov	a,#(___str_5 >> 8)
      0007D0 C0 E0            [24] 2506 	push	acc
      0007D2 74 80            [12] 2507 	mov	a,#0x80
      0007D4 C0 E0            [24] 2508 	push	acc
      0007D6 12r00r00         [24] 2509 	lcall	_printf
      0007D9 15 81            [12] 2510 	dec	sp
      0007DB 15 81            [12] 2511 	dec	sp
      0007DD 15 81            [12] 2512 	dec	sp
                                   2513 ;	nrf24l01.c:369: if ((reset_state == RESET) || (reset_flag == 0))
      0007DF 90r00r1E         [24] 2514 	mov	dptr,#_nrf24_device_PARM_2
      0007E2 E0               [24] 2515 	movx	a,@dptr
      0007E3 FF               [12] 2516 	mov	r7,a
      0007E4 BF 01 02         [24] 2517 	cjne	r7,#0x01,00154$
      0007E7 80 06            [24] 2518 	sjmp	00107$
      0007E9                       2519 00154$:
      0007E9 90r00r1B         [24] 2520 	mov	dptr,#_reset_flag
      0007EC E0               [24] 2521 	movx	a,@dptr
      0007ED 70 03            [24] 2522 	jnz	00108$
      0007EF                       2523 00107$:
                                   2524 ;	nrf24l01.c:371: nrf24_reset();
      0007EF 12r04r85         [24] 2525 	lcall	_nrf24_reset
      0007F2                       2526 00108$:
                                   2527 ;	nrf24l01.c:374: switch (device_mode)
      0007F2 90r00r1F         [24] 2528 	mov	dptr,#_nrf24_device_device_mode_65536_156
      0007F5 E0               [24] 2529 	movx	a,@dptr
      0007F6 FF               [12] 2530 	mov  r7,a
      0007F7 24 FC            [12] 2531 	add	a,#0xff - 0x03
      0007F9 50 03            [24] 2532 	jnc	00156$
      0007FB 02r08r86         [24] 2533 	ljmp	00114$
      0007FE                       2534 00156$:
      0007FE EF               [12] 2535 	mov	a,r7
      0007FF 2F               [12] 2536 	add	a,r7
                                   2537 ;	nrf24l01.c:376: case TRANSMITTER:
      000800 90r08r04         [24] 2538 	mov	dptr,#00157$
      000803 73               [24] 2539 	jmp	@a+dptr
      000804                       2540 00157$:
      000804 80 06            [24] 2541 	sjmp	00110$
      000806 80 21            [24] 2542 	sjmp	00111$
      000808 80 46            [24] 2543 	sjmp	00112$
      00080A 80 62            [24] 2544 	sjmp	00113$
      00080C                       2545 00110$:
                                   2546 ;	nrf24l01.c:377: nrf24_mode(POWER_DOWN);
      00080C 75 82 00         [24] 2547 	mov	dpl,#0x00
      00080F 12r0Er70         [24] 2548 	lcall	_nrf24_mode
                                   2549 ;	nrf24l01.c:378: nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
      000812 90r00r33         [24] 2550 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000815 E4               [12] 2551 	clr	a
      000816 F0               [24] 2552 	movx	@dptr,a
      000817 90r00r34         [24] 2553 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00081A F0               [24] 2554 	movx	@dptr,a
      00081B 75 82 01         [24] 2555 	mov	dpl,#0x01
      00081E 12r0Dr72         [24] 2556 	lcall	_nrf24_interrupt_mask
                                   2557 ;	nrf24l01.c:379: nrf24_mode(PTX);
      000821 75 82 03         [24] 2558 	mov	dpl,#0x03
      000824 12r0Er70         [24] 2559 	lcall	_nrf24_mode
                                   2560 ;	nrf24l01.c:380: break;
                                   2561 ;	nrf24l01.c:381: case RECEIVER:
      000827 80 73            [24] 2562 	sjmp	00128$
      000829                       2563 00111$:
                                   2564 ;	nrf24l01.c:382: nrf24_mode(POWER_DOWN);
      000829 75 82 00         [24] 2565 	mov	dpl,#0x00
      00082C 12r0Er70         [24] 2566 	lcall	_nrf24_mode
                                   2567 ;	nrf24l01.c:383: nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
      00082F 90r00r33         [24] 2568 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000832 74 01            [12] 2569 	mov	a,#0x01
      000834 F0               [24] 2570 	movx	@dptr,a
      000835 90r00r34         [24] 2571 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000838 F0               [24] 2572 	movx	@dptr,a
      000839 75 82 00         [24] 2573 	mov	dpl,#0x00
      00083C 12r0Dr72         [24] 2574 	lcall	_nrf24_interrupt_mask
                                   2575 ;	nrf24l01.c:384: nrf24_mode(PRX);
      00083F 75 82 04         [24] 2576 	mov	dpl,#0x04
      000842 12r0Er70         [24] 2577 	lcall	_nrf24_mode
                                   2578 ;	nrf24l01.c:385: delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
      000845 90 00 64         [24] 2579 	mov	dptr,#(0x64&0x00ff)
      000848 E4               [12] 2580 	clr	a
      000849 F5 F0            [12] 2581 	mov	b,a
      00084B 12r00r00         [24] 2582 	lcall	_delay_function
                                   2583 ;	nrf24l01.c:386: break;
                                   2584 ;	nrf24l01.c:387: case POWER_SAVING:
      00084E 80 4C            [24] 2585 	sjmp	00128$
      000850                       2586 00112$:
                                   2587 ;	nrf24l01.c:388: nrf24_mode(POWER_DOWN);
      000850 75 82 00         [24] 2588 	mov	dpl,#0x00
      000853 12r0Er70         [24] 2589 	lcall	_nrf24_mode
                                   2590 ;	nrf24l01.c:389: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      000856 90r00r33         [24] 2591 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000859 74 01            [12] 2592 	mov	a,#0x01
      00085B F0               [24] 2593 	movx	@dptr,a
      00085C 90r00r34         [24] 2594 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00085F F0               [24] 2595 	movx	@dptr,a
      000860 75 82 01         [24] 2596 	mov	dpl,#0x01
      000863 12r0Dr72         [24] 2597 	lcall	_nrf24_interrupt_mask
                                   2598 ;	nrf24l01.c:390: nrf24_mode(STANDBYI);
      000866 75 82 01         [24] 2599 	mov	dpl,#0x01
      000869 12r0Er70         [24] 2600 	lcall	_nrf24_mode
                                   2601 ;	nrf24l01.c:391: break;
                                   2602 ;	nrf24l01.c:392: case TURN_OFF:
      00086C 80 2E            [24] 2603 	sjmp	00128$
      00086E                       2604 00113$:
                                   2605 ;	nrf24l01.c:393: nrf24_mode(POWER_DOWN);
      00086E 75 82 00         [24] 2606 	mov	dpl,#0x00
      000871 12r0Er70         [24] 2607 	lcall	_nrf24_mode
                                   2608 ;	nrf24l01.c:394: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      000874 90r00r33         [24] 2609 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000877 74 01            [12] 2610 	mov	a,#0x01
      000879 F0               [24] 2611 	movx	@dptr,a
      00087A 90r00r34         [24] 2612 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      00087D F0               [24] 2613 	movx	@dptr,a
      00087E 75 82 01         [24] 2614 	mov	dpl,#0x01
      000881 12r0Dr72         [24] 2615 	lcall	_nrf24_interrupt_mask
                                   2616 ;	nrf24l01.c:395: break;
                                   2617 ;	nrf24l01.c:396: default:
      000884 80 16            [24] 2618 	sjmp	00128$
      000886                       2619 00114$:
                                   2620 ;	nrf24l01.c:397: nrf24_mode(POWER_DOWN);
      000886 75 82 00         [24] 2621 	mov	dpl,#0x00
      000889 12r0Er70         [24] 2622 	lcall	_nrf24_mode
                                   2623 ;	nrf24l01.c:398: nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
      00088C 90r00r33         [24] 2624 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      00088F 74 01            [12] 2625 	mov	a,#0x01
      000891 F0               [24] 2626 	movx	@dptr,a
      000892 90r00r34         [24] 2627 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000895 F0               [24] 2628 	movx	@dptr,a
      000896 75 82 01         [24] 2629 	mov	dpl,#0x01
      000899 12r0Dr72         [24] 2630 	lcall	_nrf24_interrupt_mask
                                   2631 ;	nrf24l01.c:403: for (int i=0; i<24; i++) {
      00089C                       2632 00128$:
      00089C 7E 00            [12] 2633 	mov	r6,#0x00
      00089E 7F 00            [12] 2634 	mov	r7,#0x00
      0008A0                       2635 00118$:
      0008A0 C3               [12] 2636 	clr	c
      0008A1 EE               [12] 2637 	mov	a,r6
      0008A2 94 18            [12] 2638 	subb	a,#0x18
      0008A4 EF               [12] 2639 	mov	a,r7
      0008A5 64 80            [12] 2640 	xrl	a,#0x80
      0008A7 94 80            [12] 2641 	subb	a,#0x80
      0008A9 50 5F            [24] 2642 	jnc	00116$
                                   2643 ;	nrf24l01.c:404: nrf24_read(i, &register_current_value, 1, CLOSE);
      0008AB 8E 05            [24] 2644 	mov	ar5,r6
      0008AD 90r00r39         [24] 2645 	mov	dptr,#_nrf24_read_PARM_2
      0008B0 74r02            [12] 2646 	mov	a,#_register_current_value
      0008B2 F0               [24] 2647 	movx	@dptr,a
      0008B3 74s00            [12] 2648 	mov	a,#(_register_current_value >> 8)
      0008B5 A3               [24] 2649 	inc	dptr
      0008B6 F0               [24] 2650 	movx	@dptr,a
      0008B7 E4               [12] 2651 	clr	a
      0008B8 A3               [24] 2652 	inc	dptr
      0008B9 F0               [24] 2653 	movx	@dptr,a
      0008BA 90r00r3C         [24] 2654 	mov	dptr,#_nrf24_read_PARM_3
      0008BD 04               [12] 2655 	inc	a
      0008BE F0               [24] 2656 	movx	@dptr,a
      0008BF 90r00r3D         [24] 2657 	mov	dptr,#_nrf24_read_PARM_4
      0008C2 E4               [12] 2658 	clr	a
      0008C3 F0               [24] 2659 	movx	@dptr,a
      0008C4 8D 82            [24] 2660 	mov	dpl,r5
      0008C6 C0 07            [24] 2661 	push	ar7
      0008C8 C0 06            [24] 2662 	push	ar6
      0008CA 12r0Fr9A         [24] 2663 	lcall	_nrf24_read
      0008CD D0 06            [24] 2664 	pop	ar6
      0008CF D0 07            [24] 2665 	pop	ar7
                                   2666 ;	nrf24l01.c:405: printf("\rRegister %d: %d\n", i, register_current_value);
      0008D1 90r00r02         [24] 2667 	mov	dptr,#_register_current_value
      0008D4 E0               [24] 2668 	movx	a,@dptr
      0008D5 FD               [12] 2669 	mov	r5,a
      0008D6 7C 00            [12] 2670 	mov	r4,#0x00
      0008D8 C0 07            [24] 2671 	push	ar7
      0008DA C0 06            [24] 2672 	push	ar6
      0008DC C0 05            [24] 2673 	push	ar5
      0008DE C0 04            [24] 2674 	push	ar4
      0008E0 C0 06            [24] 2675 	push	ar6
      0008E2 C0 07            [24] 2676 	push	ar7
      0008E4 74rAC            [12] 2677 	mov	a,#___str_6
      0008E6 C0 E0            [24] 2678 	push	acc
      0008E8 74s01            [12] 2679 	mov	a,#(___str_6 >> 8)
      0008EA C0 E0            [24] 2680 	push	acc
      0008EC 74 80            [12] 2681 	mov	a,#0x80
      0008EE C0 E0            [24] 2682 	push	acc
      0008F0 12r00r00         [24] 2683 	lcall	_printf
      0008F3 E5 81            [12] 2684 	mov	a,sp
      0008F5 24 F9            [12] 2685 	add	a,#0xf9
      0008F7 F5 81            [12] 2686 	mov	sp,a
                                   2687 ;	nrf24l01.c:406: delay1ms(20);
      0008F9 90 00 14         [24] 2688 	mov	dptr,#0x0014
      0008FC 12r00r00         [24] 2689 	lcall	_delay1ms
      0008FF D0 06            [24] 2690 	pop	ar6
      000901 D0 07            [24] 2691 	pop	ar7
                                   2692 ;	nrf24l01.c:403: for (int i=0; i<24; i++) {
      000903 0E               [12] 2693 	inc	r6
      000904 BE 00 99         [24] 2694 	cjne	r6,#0x00,00118$
      000907 0F               [12] 2695 	inc	r7
      000908 80 96            [24] 2696 	sjmp	00118$
      00090A                       2697 00116$:
                                   2698 ;	nrf24l01.c:408: printf("\n\n");
      00090A 74rBE            [12] 2699 	mov	a,#___str_7
      00090C C0 E0            [24] 2700 	push	acc
      00090E 74s01            [12] 2701 	mov	a,#(___str_7 >> 8)
      000910 C0 E0            [24] 2702 	push	acc
      000912 74 80            [12] 2703 	mov	a,#0x80
      000914 C0 E0            [24] 2704 	push	acc
      000916 12r00r00         [24] 2705 	lcall	_printf
      000919 15 81            [12] 2706 	dec	sp
      00091B 15 81            [12] 2707 	dec	sp
      00091D 15 81            [12] 2708 	dec	sp
                                   2709 ;	nrf24l01.c:411: }
      00091F 22               [24] 2710 	ret
                                   2711 ;------------------------------------------------------------
                                   2712 ;Allocation info for local variables in function 'nrf24_automatic_retransmit_setup'
                                   2713 ;------------------------------------------------------------
                                   2714 ;retransmit_count          Allocated with name '_nrf24_automatic_retransmit_setup_PARM_2'
                                   2715 ;delay_time                Allocated with name '_nrf24_automatic_retransmit_setup_delay_time_65536_166'
                                   2716 ;------------------------------------------------------------
                                   2717 ;	nrf24l01.c:414: void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
                                   2718 ;	-----------------------------------------
                                   2719 ;	 function nrf24_automatic_retransmit_setup
                                   2720 ;	-----------------------------------------
      000920                       2721 _nrf24_automatic_retransmit_setup:
      000920 AF 83            [24] 2722 	mov	r7,dph
      000922 E5 82            [12] 2723 	mov	a,dpl
      000924 90r00r23         [24] 2724 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      000927 F0               [24] 2725 	movx	@dptr,a
      000928 EF               [12] 2726 	mov	a,r7
      000929 A3               [24] 2727 	inc	dptr
      00092A F0               [24] 2728 	movx	@dptr,a
                                   2729 ;	nrf24l01.c:416: register_new_value = 0x00;
      00092B 90r00r03         [24] 2730 	mov	dptr,#_register_new_value
      00092E E4               [12] 2731 	clr	a
      00092F F0               [24] 2732 	movx	@dptr,a
      000930                       2733 00108$:
                                   2734 ;	nrf24l01.c:417: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      000930 90r00r23         [24] 2735 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      000933 E0               [24] 2736 	movx	a,@dptr
      000934 FE               [12] 2737 	mov	r6,a
      000935 A3               [24] 2738 	inc	dptr
      000936 E0               [24] 2739 	movx	a,@dptr
      000937 FF               [12] 2740 	mov	r7,a
      000938 C3               [12] 2741 	clr	c
      000939 74 FA            [12] 2742 	mov	a,#0xfa
      00093B 9E               [12] 2743 	subb	a,r6
      00093C E4               [12] 2744 	clr	a
      00093D 9F               [12] 2745 	subb	a,r7
      00093E 50 22            [24] 2746 	jnc	00101$
      000940 90r00r03         [24] 2747 	mov	dptr,#_register_new_value
      000943 E0               [24] 2748 	movx	a,@dptr
      000944 FD               [12] 2749 	mov	r5,a
      000945 BD 0F 00         [24] 2750 	cjne	r5,#0x0f,00133$
      000948                       2751 00133$:
      000948 50 18            [24] 2752 	jnc	00101$
                                   2753 ;	nrf24l01.c:418: register_new_value++;
      00094A 90r00r03         [24] 2754 	mov	dptr,#_register_new_value
      00094D ED               [12] 2755 	mov	a,r5
      00094E 04               [12] 2756 	inc	a
      00094F F0               [24] 2757 	movx	@dptr,a
                                   2758 ;	nrf24l01.c:417: for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
      000950 EE               [12] 2759 	mov	a,r6
      000951 24 06            [12] 2760 	add	a,#0x06
      000953 FE               [12] 2761 	mov	r6,a
      000954 EF               [12] 2762 	mov	a,r7
      000955 34 FF            [12] 2763 	addc	a,#0xff
      000957 FF               [12] 2764 	mov	r7,a
      000958 90r00r23         [24] 2765 	mov	dptr,#_nrf24_automatic_retransmit_setup_delay_time_65536_166
      00095B EE               [12] 2766 	mov	a,r6
      00095C F0               [24] 2767 	movx	@dptr,a
      00095D EF               [12] 2768 	mov	a,r7
      00095E A3               [24] 2769 	inc	dptr
      00095F F0               [24] 2770 	movx	@dptr,a
      000960 80 CE            [24] 2771 	sjmp	00108$
      000962                       2772 00101$:
                                   2773 ;	nrf24l01.c:419: register_new_value <<= ARD_0;
      000962 90r00r03         [24] 2774 	mov	dptr,#_register_new_value
      000965 E0               [24] 2775 	movx	a,@dptr
      000966 C4               [12] 2776 	swap	a
      000967 54 F0            [12] 2777 	anl	a,#0xf0
      000969 F0               [24] 2778 	movx	@dptr,a
                                   2779 ;	nrf24l01.c:420: if ((retransmit_count > 0) && (retransmit_count < 16))
      00096A 90r00r22         [24] 2780 	mov	dptr,#_nrf24_automatic_retransmit_setup_PARM_2
      00096D E0               [24] 2781 	movx	a,@dptr
      00096E FF               [12] 2782 	mov	r7,a
      00096F 60 0B            [24] 2783 	jz	00103$
      000971 BF 10 00         [24] 2784 	cjne	r7,#0x10,00136$
      000974                       2785 00136$:
      000974 50 06            [24] 2786 	jnc	00103$
                                   2787 ;	nrf24l01.c:421: register_new_value |= retransmit_count;
      000976 90r00r03         [24] 2788 	mov	dptr,#_register_new_value
      000979 E0               [24] 2789 	movx	a,@dptr
      00097A 4F               [12] 2790 	orl	a,r7
      00097B F0               [24] 2791 	movx	@dptr,a
                                   2792 ;	nrf24l01.c:423: register_new_value |= 0;
      00097C                       2793 00103$:
                                   2794 ;	nrf24l01.c:424: nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
      00097C 90r00r3F         [24] 2795 	mov	dptr,#_nrf24_write_PARM_2
      00097F 74r03            [12] 2796 	mov	a,#_register_new_value
      000981 F0               [24] 2797 	movx	@dptr,a
      000982 74s00            [12] 2798 	mov	a,#(_register_new_value >> 8)
      000984 A3               [24] 2799 	inc	dptr
      000985 F0               [24] 2800 	movx	@dptr,a
      000986 E4               [12] 2801 	clr	a
      000987 A3               [24] 2802 	inc	dptr
      000988 F0               [24] 2803 	movx	@dptr,a
      000989 90r00r42         [24] 2804 	mov	dptr,#_nrf24_write_PARM_3
      00098C 04               [12] 2805 	inc	a
      00098D F0               [24] 2806 	movx	@dptr,a
      00098E 90r00r43         [24] 2807 	mov	dptr,#_nrf24_write_PARM_4
      000991 E4               [12] 2808 	clr	a
      000992 F0               [24] 2809 	movx	@dptr,a
      000993 75 82 04         [24] 2810 	mov	dpl,#0x04
                                   2811 ;	nrf24l01.c:425: }
      000996 02r10r06         [24] 2812 	ljmp	_nrf24_write
                                   2813 ;------------------------------------------------------------
                                   2814 ;Allocation info for local variables in function 'nrf24_auto_acknowledgment_setup'
                                   2815 ;------------------------------------------------------------
                                   2816 ;datapipe                  Allocated with name '_nrf24_auto_acknowledgment_setup_datapipe_65536_169'
                                   2817 ;------------------------------------------------------------
                                   2818 ;	nrf24l01.c:428: void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
                                   2819 ;	-----------------------------------------
                                   2820 ;	 function nrf24_auto_acknowledgment_setup
                                   2821 ;	-----------------------------------------
      000999                       2822 _nrf24_auto_acknowledgment_setup:
      000999 E5 82            [12] 2823 	mov	a,dpl
      00099B 90r00r25         [24] 2824 	mov	dptr,#_nrf24_auto_acknowledgment_setup_datapipe_65536_169
      00099E F0               [24] 2825 	movx	@dptr,a
                                   2826 ;	nrf24l01.c:430: if (datapipe < 7)
      00099F E0               [24] 2827 	movx	a,@dptr
      0009A0 FF               [12] 2828 	mov	r7,a
      0009A1 BF 07 00         [24] 2829 	cjne	r7,#0x07,00109$
      0009A4                       2830 00109$:
      0009A4 50 12            [24] 2831 	jnc	00102$
                                   2832 ;	nrf24l01.c:431: register_new_value = (1 << datapipe) - 1;
      0009A6 8F F0            [24] 2833 	mov	b,r7
      0009A8 05 F0            [12] 2834 	inc	b
      0009AA 74 01            [12] 2835 	mov	a,#0x01
      0009AC 80 02            [24] 2836 	sjmp	00113$
      0009AE                       2837 00111$:
      0009AE 25 E0            [12] 2838 	add	a,acc
      0009B0                       2839 00113$:
      0009B0 D5 F0 FB         [24] 2840 	djnz	b,00111$
      0009B3 14               [12] 2841 	dec	a
      0009B4 90r00r03         [24] 2842 	mov	dptr,#_register_new_value
      0009B7 F0               [24] 2843 	movx	@dptr,a
      0009B8                       2844 00102$:
                                   2845 ;	nrf24l01.c:432: nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
      0009B8 90r00r3F         [24] 2846 	mov	dptr,#_nrf24_write_PARM_2
      0009BB 74r03            [12] 2847 	mov	a,#_register_new_value
      0009BD F0               [24] 2848 	movx	@dptr,a
      0009BE 74s00            [12] 2849 	mov	a,#(_register_new_value >> 8)
      0009C0 A3               [24] 2850 	inc	dptr
      0009C1 F0               [24] 2851 	movx	@dptr,a
      0009C2 E4               [12] 2852 	clr	a
      0009C3 A3               [24] 2853 	inc	dptr
      0009C4 F0               [24] 2854 	movx	@dptr,a
      0009C5 90r00r42         [24] 2855 	mov	dptr,#_nrf24_write_PARM_3
      0009C8 04               [12] 2856 	inc	a
      0009C9 F0               [24] 2857 	movx	@dptr,a
      0009CA 90r00r43         [24] 2858 	mov	dptr,#_nrf24_write_PARM_4
      0009CD E4               [12] 2859 	clr	a
      0009CE F0               [24] 2860 	movx	@dptr,a
      0009CF 75 82 01         [24] 2861 	mov	dpl,#0x01
                                   2862 ;	nrf24l01.c:433: }
      0009D2 02r10r06         [24] 2863 	ljmp	_nrf24_write
                                   2864 ;------------------------------------------------------------
                                   2865 ;Allocation info for local variables in function 'nrf24_dynamic_payload'
                                   2866 ;------------------------------------------------------------
                                   2867 ;datapipe                  Allocated with name '_nrf24_dynamic_payload_PARM_2'
                                   2868 ;state                     Allocated with name '_nrf24_dynamic_payload_state_65536_171'
                                   2869 ;------------------------------------------------------------
                                   2870 ;	nrf24l01.c:436: void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
                                   2871 ;	-----------------------------------------
                                   2872 ;	 function nrf24_dynamic_payload
                                   2873 ;	-----------------------------------------
      0009D5                       2874 _nrf24_dynamic_payload:
      0009D5 E5 82            [12] 2875 	mov	a,dpl
      0009D7 90r00r27         [24] 2876 	mov	dptr,#_nrf24_dynamic_payload_state_65536_171
      0009DA F0               [24] 2877 	movx	@dptr,a
                                   2878 ;	nrf24l01.c:438: nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
      0009DB 90r00r26         [24] 2879 	mov	dptr,#_nrf24_dynamic_payload_PARM_2
      0009DE E0               [24] 2880 	movx	a,@dptr
      0009DF FF               [12] 2881 	mov	r7,a
      0009E0 F5 82            [12] 2882 	mov	dpl,a
      0009E2 C0 07            [24] 2883 	push	ar7
      0009E4 12r09r99         [24] 2884 	lcall	_nrf24_auto_acknowledgment_setup
                                   2885 ;	nrf24l01.c:439: nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
      0009E7 90r00r39         [24] 2886 	mov	dptr,#_nrf24_read_PARM_2
      0009EA 74r02            [12] 2887 	mov	a,#_register_current_value
      0009EC F0               [24] 2888 	movx	@dptr,a
      0009ED 74s00            [12] 2889 	mov	a,#(_register_current_value >> 8)
      0009EF A3               [24] 2890 	inc	dptr
      0009F0 F0               [24] 2891 	movx	@dptr,a
      0009F1 E4               [12] 2892 	clr	a
      0009F2 A3               [24] 2893 	inc	dptr
      0009F3 F0               [24] 2894 	movx	@dptr,a
      0009F4 90r00r3C         [24] 2895 	mov	dptr,#_nrf24_read_PARM_3
      0009F7 04               [12] 2896 	inc	a
      0009F8 F0               [24] 2897 	movx	@dptr,a
      0009F9 90r00r3D         [24] 2898 	mov	dptr,#_nrf24_read_PARM_4
      0009FC E4               [12] 2899 	clr	a
      0009FD F0               [24] 2900 	movx	@dptr,a
      0009FE 75 82 1D         [24] 2901 	mov	dpl,#0x1d
      000A01 12r0Fr9A         [24] 2902 	lcall	_nrf24_read
      000A04 D0 07            [24] 2903 	pop	ar7
                                   2904 ;	nrf24l01.c:440: if (state == ENABLE)
      000A06 90r00r27         [24] 2905 	mov	dptr,#_nrf24_dynamic_payload_state_65536_171
      000A09 E0               [24] 2906 	movx	a,@dptr
      000A0A FE               [12] 2907 	mov	r6,a
      000A0B BE 01 66         [24] 2908 	cjne	r6,#0x01,00104$
                                   2909 ;	nrf24l01.c:442: register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
      000A0E 90r00r02         [24] 2910 	mov	dptr,#_register_current_value
      000A11 E0               [24] 2911 	movx	a,@dptr
      000A12 90r00r03         [24] 2912 	mov	dptr,#_register_new_value
      000A15 44 04            [12] 2913 	orl	a,#0x04
      000A17 F0               [24] 2914 	movx	@dptr,a
                                   2915 ;	nrf24l01.c:443: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000A18 90r00r3F         [24] 2916 	mov	dptr,#_nrf24_write_PARM_2
      000A1B 74r03            [12] 2917 	mov	a,#_register_new_value
      000A1D F0               [24] 2918 	movx	@dptr,a
      000A1E 74s00            [12] 2919 	mov	a,#(_register_new_value >> 8)
      000A20 A3               [24] 2920 	inc	dptr
      000A21 F0               [24] 2921 	movx	@dptr,a
      000A22 E4               [12] 2922 	clr	a
      000A23 A3               [24] 2923 	inc	dptr
      000A24 F0               [24] 2924 	movx	@dptr,a
      000A25 90r00r42         [24] 2925 	mov	dptr,#_nrf24_write_PARM_3
      000A28 04               [12] 2926 	inc	a
      000A29 F0               [24] 2927 	movx	@dptr,a
      000A2A 90r00r43         [24] 2928 	mov	dptr,#_nrf24_write_PARM_4
      000A2D E4               [12] 2929 	clr	a
      000A2E F0               [24] 2930 	movx	@dptr,a
      000A2F 75 82 1D         [24] 2931 	mov	dpl,#0x1d
      000A32 C0 07            [24] 2932 	push	ar7
      000A34 12r10r06         [24] 2933 	lcall	_nrf24_write
      000A37 D0 07            [24] 2934 	pop	ar7
                                   2935 ;	nrf24l01.c:444: if (datapipe < 7)
      000A39 BF 07 00         [24] 2936 	cjne	r7,#0x07,00118$
      000A3C                       2937 00118$:
      000A3C 50 12            [24] 2938 	jnc	00102$
                                   2939 ;	nrf24l01.c:445: register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
      000A3E 8F F0            [24] 2940 	mov	b,r7
      000A40 05 F0            [12] 2941 	inc	b
      000A42 74 01            [12] 2942 	mov	a,#0x01
      000A44 80 02            [24] 2943 	sjmp	00122$
      000A46                       2944 00120$:
      000A46 25 E0            [12] 2945 	add	a,acc
      000A48                       2946 00122$:
      000A48 D5 F0 FB         [24] 2947 	djnz	b,00120$
      000A4B 14               [12] 2948 	dec	a
      000A4C 90r00r03         [24] 2949 	mov	dptr,#_register_new_value
      000A4F F0               [24] 2950 	movx	@dptr,a
      000A50                       2951 00102$:
                                   2952 ;	nrf24l01.c:446: nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
      000A50 90r00r3F         [24] 2953 	mov	dptr,#_nrf24_write_PARM_2
      000A53 74r03            [12] 2954 	mov	a,#_register_new_value
      000A55 F0               [24] 2955 	movx	@dptr,a
      000A56 74s00            [12] 2956 	mov	a,#(_register_new_value >> 8)
      000A58 A3               [24] 2957 	inc	dptr
      000A59 F0               [24] 2958 	movx	@dptr,a
      000A5A E4               [12] 2959 	clr	a
      000A5B A3               [24] 2960 	inc	dptr
      000A5C F0               [24] 2961 	movx	@dptr,a
      000A5D 90r00r42         [24] 2962 	mov	dptr,#_nrf24_write_PARM_3
      000A60 04               [12] 2963 	inc	a
      000A61 F0               [24] 2964 	movx	@dptr,a
      000A62 90r00r43         [24] 2965 	mov	dptr,#_nrf24_write_PARM_4
      000A65 E4               [12] 2966 	clr	a
      000A66 F0               [24] 2967 	movx	@dptr,a
      000A67 75 82 1C         [24] 2968 	mov	dpl,#0x1c
      000A6A 12r10r06         [24] 2969 	lcall	_nrf24_write
                                   2970 ;	nrf24l01.c:447: dynamic_payload = ENABLE;
      000A6D 90r00r1E         [24] 2971 	mov	dptr,#_dynamic_payload
      000A70 74 01            [12] 2972 	mov	a,#0x01
      000A72 F0               [24] 2973 	movx	@dptr,a
      000A73 22               [24] 2974 	ret
      000A74                       2975 00104$:
                                   2976 ;	nrf24l01.c:451: register_new_value = register_current_value & (~(1 << EN_DPL));
      000A74 90r00r02         [24] 2977 	mov	dptr,#_register_current_value
      000A77 E0               [24] 2978 	movx	a,@dptr
      000A78 90r00r03         [24] 2979 	mov	dptr,#_register_new_value
      000A7B 54 FB            [12] 2980 	anl	a,#0xfb
      000A7D F0               [24] 2981 	movx	@dptr,a
                                   2982 ;	nrf24l01.c:452: nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
      000A7E 90r00r3F         [24] 2983 	mov	dptr,#_nrf24_write_PARM_2
      000A81 74r03            [12] 2984 	mov	a,#_register_new_value
      000A83 F0               [24] 2985 	movx	@dptr,a
      000A84 74s00            [12] 2986 	mov	a,#(_register_new_value >> 8)
      000A86 A3               [24] 2987 	inc	dptr
      000A87 F0               [24] 2988 	movx	@dptr,a
      000A88 E4               [12] 2989 	clr	a
      000A89 A3               [24] 2990 	inc	dptr
      000A8A F0               [24] 2991 	movx	@dptr,a
      000A8B 90r00r42         [24] 2992 	mov	dptr,#_nrf24_write_PARM_3
      000A8E 04               [12] 2993 	inc	a
      000A8F F0               [24] 2994 	movx	@dptr,a
      000A90 90r00r43         [24] 2995 	mov	dptr,#_nrf24_write_PARM_4
      000A93 E4               [12] 2996 	clr	a
      000A94 F0               [24] 2997 	movx	@dptr,a
      000A95 75 82 1D         [24] 2998 	mov	dpl,#0x1d
      000A98 12r10r06         [24] 2999 	lcall	_nrf24_write
                                   3000 ;	nrf24l01.c:453: dynamic_payload = DISABLE;
      000A9B 90r00r1E         [24] 3001 	mov	dptr,#_dynamic_payload
      000A9E E4               [12] 3002 	clr	a
      000A9F F0               [24] 3003 	movx	@dptr,a
                                   3004 ;	nrf24l01.c:455: }
      000AA0 22               [24] 3005 	ret
                                   3006 ;------------------------------------------------------------
                                   3007 ;Allocation info for local variables in function 'nrf24_datapipe_ptx'
                                   3008 ;------------------------------------------------------------
                                   3009 ;datapipe_number           Allocated with name '_nrf24_datapipe_ptx_datapipe_number_65536_175'
                                   3010 ;------------------------------------------------------------
                                   3011 ;	nrf24l01.c:458: void nrf24_datapipe_ptx(uint8_t datapipe_number)
                                   3012 ;	-----------------------------------------
                                   3013 ;	 function nrf24_datapipe_ptx
                                   3014 ;	-----------------------------------------
      000AA1                       3015 _nrf24_datapipe_ptx:
      000AA1 E5 82            [12] 3016 	mov	a,dpl
      000AA3 90r00r28         [24] 3017 	mov	dptr,#_nrf24_datapipe_ptx_datapipe_number_65536_175
      000AA6 F0               [24] 3018 	movx	@dptr,a
                                   3019 ;	nrf24l01.c:460: nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
      000AA7 E0               [24] 3020 	movx	a,@dptr
      000AA8 FF               [12] 3021 	mov	r7,a
      000AA9 1F               [12] 3022 	dec	r7
      000AAA C2 D5            [12] 3023 	clr	F0
      000AAC 75 F0 05         [24] 3024 	mov	b,#0x05
      000AAF EF               [12] 3025 	mov	a,r7
      000AB0 30 E7 04         [24] 3026 	jnb	acc.7,00103$
      000AB3 B2 D5            [12] 3027 	cpl	F0
      000AB5 F4               [12] 3028 	cpl	a
      000AB6 04               [12] 3029 	inc	a
      000AB7                       3030 00103$:
      000AB7 A4               [48] 3031 	mul	ab
      000AB8 30 D5 0A         [24] 3032 	jnb	F0,00104$
      000ABB F4               [12] 3033 	cpl	a
      000ABC 24 01            [12] 3034 	add	a,#0x01
      000ABE C5 F0            [12] 3035 	xch	a,b
      000AC0 F4               [12] 3036 	cpl	a
      000AC1 34 00            [12] 3037 	addc	a,#0x00
      000AC3 C5 F0            [12] 3038 	xch	a,b
      000AC5                       3039 00104$:
      000AC5 24r1F            [12] 3040 	add	a,#_datapipe_address
      000AC7 FE               [12] 3041 	mov	r6,a
      000AC8 74s00            [12] 3042 	mov	a,#(_datapipe_address >> 8)
      000ACA 35 F0            [12] 3043 	addc	a,b
      000ACC FF               [12] 3044 	mov	r7,a
      000ACD 7D 00            [12] 3045 	mov	r5,#0x00
      000ACF 90r00r05         [24] 3046 	mov	dptr,#_current_address_width
      000AD2 E0               [24] 3047 	movx	a,@dptr
      000AD3 FC               [12] 3048 	mov	r4,a
      000AD4 90r00r3F         [24] 3049 	mov	dptr,#_nrf24_write_PARM_2
      000AD7 EE               [12] 3050 	mov	a,r6
      000AD8 F0               [24] 3051 	movx	@dptr,a
      000AD9 EF               [12] 3052 	mov	a,r7
      000ADA A3               [24] 3053 	inc	dptr
      000ADB F0               [24] 3054 	movx	@dptr,a
      000ADC ED               [12] 3055 	mov	a,r5
      000ADD A3               [24] 3056 	inc	dptr
      000ADE F0               [24] 3057 	movx	@dptr,a
      000ADF 90r00r42         [24] 3058 	mov	dptr,#_nrf24_write_PARM_3
      000AE2 EC               [12] 3059 	mov	a,r4
      000AE3 F0               [24] 3060 	movx	@dptr,a
      000AE4 90r00r43         [24] 3061 	mov	dptr,#_nrf24_write_PARM_4
      000AE7 E4               [12] 3062 	clr	a
      000AE8 F0               [24] 3063 	movx	@dptr,a
      000AE9 75 82 10         [24] 3064 	mov	dpl,#0x10
                                   3065 ;	nrf24l01.c:461: }
      000AEC 02r10r06         [24] 3066 	ljmp	_nrf24_write
                                   3067 ;------------------------------------------------------------
                                   3068 ;Allocation info for local variables in function 'nrf24_datapipe_address_configuration'
                                   3069 ;------------------------------------------------------------
                                   3070 ;address                   Allocated with name '_nrf24_datapipe_address_configuration_address_65536_178'
                                   3071 ;counter                   Allocated with name '_nrf24_datapipe_address_configuration_counter_131072_179'
                                   3072 ;------------------------------------------------------------
                                   3073 ;	nrf24l01.c:464: void nrf24_datapipe_address_configuration(void)
                                   3074 ;	-----------------------------------------
                                   3075 ;	 function nrf24_datapipe_address_configuration
                                   3076 ;	-----------------------------------------
      000AEF                       3077 _nrf24_datapipe_address_configuration:
                                   3078 ;	nrf24l01.c:468: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000AEF 7F 0A            [12] 3079 	mov	r7,#0x0a
      000AF1 7E 00            [12] 3080 	mov	r6,#0x00
      000AF3                       3081 00103$:
      000AF3 BE 02 00         [24] 3082 	cjne	r6,#0x02,00116$
      000AF6                       3083 00116$:
      000AF6 50 3A            [24] 3084 	jnc	00105$
                                   3085 ;	nrf24l01.c:470: nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
      000AF8 EE               [12] 3086 	mov	a,r6
      000AF9 75 F0 05         [24] 3087 	mov	b,#0x05
      000AFC A4               [48] 3088 	mul	ab
      000AFD 24r1F            [12] 3089 	add	a,#_datapipe_address
      000AFF FC               [12] 3090 	mov	r4,a
      000B00 74s00            [12] 3091 	mov	a,#(_datapipe_address >> 8)
      000B02 35 F0            [12] 3092 	addc	a,b
      000B04 FD               [12] 3093 	mov	r5,a
      000B05 7B 00            [12] 3094 	mov	r3,#0x00
      000B07 90r00r05         [24] 3095 	mov	dptr,#_current_address_width
      000B0A E0               [24] 3096 	movx	a,@dptr
      000B0B FA               [12] 3097 	mov	r2,a
      000B0C 90r00r3F         [24] 3098 	mov	dptr,#_nrf24_write_PARM_2
      000B0F EC               [12] 3099 	mov	a,r4
      000B10 F0               [24] 3100 	movx	@dptr,a
      000B11 ED               [12] 3101 	mov	a,r5
      000B12 A3               [24] 3102 	inc	dptr
      000B13 F0               [24] 3103 	movx	@dptr,a
      000B14 EB               [12] 3104 	mov	a,r3
      000B15 A3               [24] 3105 	inc	dptr
      000B16 F0               [24] 3106 	movx	@dptr,a
      000B17 90r00r42         [24] 3107 	mov	dptr,#_nrf24_write_PARM_3
      000B1A EA               [12] 3108 	mov	a,r2
      000B1B F0               [24] 3109 	movx	@dptr,a
      000B1C 90r00r43         [24] 3110 	mov	dptr,#_nrf24_write_PARM_4
      000B1F E4               [12] 3111 	clr	a
      000B20 F0               [24] 3112 	movx	@dptr,a
      000B21 8F 82            [24] 3113 	mov	dpl,r7
      000B23 C0 07            [24] 3114 	push	ar7
      000B25 C0 06            [24] 3115 	push	ar6
      000B27 12r10r06         [24] 3116 	lcall	_nrf24_write
      000B2A D0 06            [24] 3117 	pop	ar6
      000B2C D0 07            [24] 3118 	pop	ar7
                                   3119 ;	nrf24l01.c:471: address++;
      000B2E 0F               [12] 3120 	inc	r7
                                   3121 ;	nrf24l01.c:468: for (uint8_t counter = 0; counter < 2; counter++) // only write the first two
      000B2F 0E               [12] 3122 	inc	r6
      000B30 80 C1            [24] 3123 	sjmp	00103$
      000B32                       3124 00105$:
                                   3125 ;	nrf24l01.c:473: }
      000B32 22               [24] 3126 	ret
                                   3127 ;------------------------------------------------------------
                                   3128 ;Allocation info for local variables in function 'nrf24_prx_static_payload_width'
                                   3129 ;------------------------------------------------------------
                                   3130 ;number_of_datapipes       Allocated with name '_nrf24_prx_static_payload_width_PARM_2'
                                   3131 ;static_payload_width      Allocated with name '_nrf24_prx_static_payload_width_static_payload_width_65536_181'
                                   3132 ;address                   Allocated with name '_nrf24_prx_static_payload_width_address_131072_183'
                                   3133 ;------------------------------------------------------------
                                   3134 ;	nrf24l01.c:476: void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
                                   3135 ;	-----------------------------------------
                                   3136 ;	 function nrf24_prx_static_payload_width
                                   3137 ;	-----------------------------------------
      000B33                       3138 _nrf24_prx_static_payload_width:
      000B33 E5 82            [12] 3139 	mov	a,dpl
      000B35 90r00r2A         [24] 3140 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      000B38 F0               [24] 3141 	movx	@dptr,a
                                   3142 ;	nrf24l01.c:478: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000B39 7F 11            [12] 3143 	mov	r7,#0x11
      000B3B 90r00r29         [24] 3144 	mov	dptr,#_nrf24_prx_static_payload_width_PARM_2
      000B3E E0               [24] 3145 	movx	a,@dptr
      000B3F FE               [12] 3146 	mov	r6,a
      000B40                       3147 00103$:
      000B40 EE               [12] 3148 	mov	a,r6
      000B41 60 28            [24] 3149 	jz	00101$
                                   3150 ;	nrf24l01.c:480: nrf24_write(address, &static_payload_width, 1, CLOSE);
      000B43 90r00r3F         [24] 3151 	mov	dptr,#_nrf24_write_PARM_2
      000B46 74r2A            [12] 3152 	mov	a,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      000B48 F0               [24] 3153 	movx	@dptr,a
      000B49 74s00            [12] 3154 	mov	a,#(_nrf24_prx_static_payload_width_static_payload_width_65536_181 >> 8)
      000B4B A3               [24] 3155 	inc	dptr
      000B4C F0               [24] 3156 	movx	@dptr,a
      000B4D E4               [12] 3157 	clr	a
      000B4E A3               [24] 3158 	inc	dptr
      000B4F F0               [24] 3159 	movx	@dptr,a
      000B50 90r00r42         [24] 3160 	mov	dptr,#_nrf24_write_PARM_3
      000B53 04               [12] 3161 	inc	a
      000B54 F0               [24] 3162 	movx	@dptr,a
      000B55 90r00r43         [24] 3163 	mov	dptr,#_nrf24_write_PARM_4
      000B58 E4               [12] 3164 	clr	a
      000B59 F0               [24] 3165 	movx	@dptr,a
      000B5A 8F 82            [24] 3166 	mov	dpl,r7
      000B5C C0 07            [24] 3167 	push	ar7
      000B5E C0 06            [24] 3168 	push	ar6
      000B60 12r10r06         [24] 3169 	lcall	_nrf24_write
      000B63 D0 06            [24] 3170 	pop	ar6
      000B65 D0 07            [24] 3171 	pop	ar7
                                   3172 ;	nrf24l01.c:481: address++;
      000B67 0F               [12] 3173 	inc	r7
                                   3174 ;	nrf24l01.c:478: for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
      000B68 1E               [12] 3175 	dec	r6
      000B69 80 D5            [24] 3176 	sjmp	00103$
      000B6B                       3177 00101$:
                                   3178 ;	nrf24l01.c:483: current_payload_width = static_payload_width;
      000B6B 90r00r2A         [24] 3179 	mov	dptr,#_nrf24_prx_static_payload_width_static_payload_width_65536_181
      000B6E E0               [24] 3180 	movx	a,@dptr
      000B6F 90r00r06         [24] 3181 	mov	dptr,#_current_payload_width
      000B72 F0               [24] 3182 	movx	@dptr,a
                                   3183 ;	nrf24l01.c:484: }
      000B73 22               [24] 3184 	ret
                                   3185 ;------------------------------------------------------------
                                   3186 ;Allocation info for local variables in function 'nrf24_datapipe_enable'
                                   3187 ;------------------------------------------------------------
                                   3188 ;number_of_datapipes       Allocated with name '_nrf24_datapipe_enable_number_of_datapipes_65536_185'
                                   3189 ;------------------------------------------------------------
                                   3190 ;	nrf24l01.c:487: void nrf24_datapipe_enable(uint8_t number_of_datapipes)
                                   3191 ;	-----------------------------------------
                                   3192 ;	 function nrf24_datapipe_enable
                                   3193 ;	-----------------------------------------
      000B74                       3194 _nrf24_datapipe_enable:
      000B74 E5 82            [12] 3195 	mov	a,dpl
      000B76 90r00r2B         [24] 3196 	mov	dptr,#_nrf24_datapipe_enable_number_of_datapipes_65536_185
      000B79 F0               [24] 3197 	movx	@dptr,a
                                   3198 ;	nrf24l01.c:489: register_new_value = (1 << number_of_datapipes) - 1;
      000B7A E0               [24] 3199 	movx	a,@dptr
      000B7B FF               [12] 3200 	mov	r7,a
      000B7C 8F F0            [24] 3201 	mov	b,r7
      000B7E 05 F0            [12] 3202 	inc	b
      000B80 74 01            [12] 3203 	mov	a,#0x01
      000B82 80 02            [24] 3204 	sjmp	00105$
      000B84                       3205 00103$:
      000B84 25 E0            [12] 3206 	add	a,acc
      000B86                       3207 00105$:
      000B86 D5 F0 FB         [24] 3208 	djnz	b,00103$
      000B89 14               [12] 3209 	dec	a
      000B8A 90r00r03         [24] 3210 	mov	dptr,#_register_new_value
      000B8D F0               [24] 3211 	movx	@dptr,a
                                   3212 ;	nrf24l01.c:490: nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
      000B8E 90r00r3F         [24] 3213 	mov	dptr,#_nrf24_write_PARM_2
      000B91 74r03            [12] 3214 	mov	a,#_register_new_value
      000B93 F0               [24] 3215 	movx	@dptr,a
      000B94 74s00            [12] 3216 	mov	a,#(_register_new_value >> 8)
      000B96 A3               [24] 3217 	inc	dptr
      000B97 F0               [24] 3218 	movx	@dptr,a
      000B98 E4               [12] 3219 	clr	a
      000B99 A3               [24] 3220 	inc	dptr
      000B9A F0               [24] 3221 	movx	@dptr,a
      000B9B 90r00r42         [24] 3222 	mov	dptr,#_nrf24_write_PARM_3
      000B9E 04               [12] 3223 	inc	a
      000B9F F0               [24] 3224 	movx	@dptr,a
      000BA0 90r00r43         [24] 3225 	mov	dptr,#_nrf24_write_PARM_4
      000BA3 E4               [12] 3226 	clr	a
      000BA4 F0               [24] 3227 	movx	@dptr,a
      000BA5 75 82 02         [24] 3228 	mov	dpl,#0x02
                                   3229 ;	nrf24l01.c:491: }
      000BA8 02r10r06         [24] 3230 	ljmp	_nrf24_write
                                   3231 ;------------------------------------------------------------
                                   3232 ;Allocation info for local variables in function 'nrf24_address_width'
                                   3233 ;------------------------------------------------------------
                                   3234 ;address_width             Allocated with name '_nrf24_address_width_address_width_65536_187'
                                   3235 ;------------------------------------------------------------
                                   3236 ;	nrf24l01.c:494: void nrf24_address_width(uint8_t address_width)
                                   3237 ;	-----------------------------------------
                                   3238 ;	 function nrf24_address_width
                                   3239 ;	-----------------------------------------
      000BAB                       3240 _nrf24_address_width:
      000BAB E5 82            [12] 3241 	mov	a,dpl
      000BAD 90r00r2C         [24] 3242 	mov	dptr,#_nrf24_address_width_address_width_65536_187
      000BB0 F0               [24] 3243 	movx	@dptr,a
                                   3244 ;	nrf24l01.c:496: if ((address_width <= 5) && (address_width >= 3))
      000BB1 E0               [24] 3245 	movx	a,@dptr
      000BB2 FF               [12] 3246 	mov  r7,a
      000BB3 24 FA            [12] 3247 	add	a,#0xff - 0x05
      000BB5 40 0E            [24] 3248 	jc	00102$
      000BB7 BF 03 00         [24] 3249 	cjne	r7,#0x03,00116$
      000BBA                       3250 00116$:
      000BBA 40 09            [24] 3251 	jc	00102$
                                   3252 ;	nrf24l01.c:498: write_pointer = address_width - 2;
      000BBC EF               [12] 3253 	mov	a,r7
      000BBD 24 FE            [12] 3254 	add	a,#0xfe
      000BBF 90r00r04         [24] 3255 	mov	dptr,#_write_pointer
      000BC2 F0               [24] 3256 	movx	@dptr,a
      000BC3 80 06            [24] 3257 	sjmp	00103$
      000BC5                       3258 00102$:
                                   3259 ;	nrf24l01.c:502: write_pointer = 3;
      000BC5 90r00r04         [24] 3260 	mov	dptr,#_write_pointer
      000BC8 74 03            [12] 3261 	mov	a,#0x03
      000BCA F0               [24] 3262 	movx	@dptr,a
      000BCB                       3263 00103$:
                                   3264 ;	nrf24l01.c:504: nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
      000BCB 90r00r3F         [24] 3265 	mov	dptr,#_nrf24_write_PARM_2
      000BCE 74r04            [12] 3266 	mov	a,#_write_pointer
      000BD0 F0               [24] 3267 	movx	@dptr,a
      000BD1 74s00            [12] 3268 	mov	a,#(_write_pointer >> 8)
      000BD3 A3               [24] 3269 	inc	dptr
      000BD4 F0               [24] 3270 	movx	@dptr,a
      000BD5 E4               [12] 3271 	clr	a
      000BD6 A3               [24] 3272 	inc	dptr
      000BD7 F0               [24] 3273 	movx	@dptr,a
      000BD8 90r00r42         [24] 3274 	mov	dptr,#_nrf24_write_PARM_3
      000BDB 04               [12] 3275 	inc	a
      000BDC F0               [24] 3276 	movx	@dptr,a
      000BDD 90r00r43         [24] 3277 	mov	dptr,#_nrf24_write_PARM_4
      000BE0 E4               [12] 3278 	clr	a
      000BE1 F0               [24] 3279 	movx	@dptr,a
      000BE2 75 82 03         [24] 3280 	mov	dpl,#0x03
      000BE5 12r10r06         [24] 3281 	lcall	_nrf24_write
                                   3282 ;	nrf24l01.c:505: current_address_width = address_width;
      000BE8 90r00r2C         [24] 3283 	mov	dptr,#_nrf24_address_width_address_width_65536_187
      000BEB E0               [24] 3284 	movx	a,@dptr
      000BEC 90r00r05         [24] 3285 	mov	dptr,#_current_address_width
      000BEF F0               [24] 3286 	movx	@dptr,a
                                   3287 ;	nrf24l01.c:506: }
      000BF0 22               [24] 3288 	ret
                                   3289 ;------------------------------------------------------------
                                   3290 ;Allocation info for local variables in function 'nrf24_rf_datarate'
                                   3291 ;------------------------------------------------------------
                                   3292 ;rf_datarate               Allocated with name '_nrf24_rf_datarate_rf_datarate_65536_191'
                                   3293 ;------------------------------------------------------------
                                   3294 ;	nrf24l01.c:509: void nrf24_rf_datarate(uint16_t rf_datarate)
                                   3295 ;	-----------------------------------------
                                   3296 ;	 function nrf24_rf_datarate
                                   3297 ;	-----------------------------------------
      000BF1                       3298 _nrf24_rf_datarate:
      000BF1 AF 83            [24] 3299 	mov	r7,dph
      000BF3 E5 82            [12] 3300 	mov	a,dpl
      000BF5 90r00r2D         [24] 3301 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_191
      000BF8 F0               [24] 3302 	movx	@dptr,a
      000BF9 EF               [12] 3303 	mov	a,r7
      000BFA A3               [24] 3304 	inc	dptr
      000BFB F0               [24] 3305 	movx	@dptr,a
                                   3306 ;	nrf24l01.c:511: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000BFC 90r00r39         [24] 3307 	mov	dptr,#_nrf24_read_PARM_2
      000BFF 74r02            [12] 3308 	mov	a,#_register_current_value
      000C01 F0               [24] 3309 	movx	@dptr,a
      000C02 74s00            [12] 3310 	mov	a,#(_register_current_value >> 8)
      000C04 A3               [24] 3311 	inc	dptr
      000C05 F0               [24] 3312 	movx	@dptr,a
      000C06 E4               [12] 3313 	clr	a
      000C07 A3               [24] 3314 	inc	dptr
      000C08 F0               [24] 3315 	movx	@dptr,a
      000C09 90r00r3C         [24] 3316 	mov	dptr,#_nrf24_read_PARM_3
      000C0C 04               [12] 3317 	inc	a
      000C0D F0               [24] 3318 	movx	@dptr,a
      000C0E 90r00r3D         [24] 3319 	mov	dptr,#_nrf24_read_PARM_4
      000C11 E4               [12] 3320 	clr	a
      000C12 F0               [24] 3321 	movx	@dptr,a
      000C13 75 82 06         [24] 3322 	mov	dpl,#0x06
      000C16 12r0Fr9A         [24] 3323 	lcall	_nrf24_read
                                   3324 ;	nrf24l01.c:512: register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
      000C19 90r00r02         [24] 3325 	mov	dptr,#_register_current_value
      000C1C E0               [24] 3326 	movx	a,@dptr
      000C1D 53 E0 D7         [24] 3327 	anl	acc,#0xd7
      000C20 F0               [24] 3328 	movx	@dptr,a
                                   3329 ;	nrf24l01.c:513: switch (rf_datarate)
      000C21 90r00r2D         [24] 3330 	mov	dptr,#_nrf24_rf_datarate_rf_datarate_65536_191
      000C24 E0               [24] 3331 	movx	a,@dptr
      000C25 FE               [12] 3332 	mov	r6,a
      000C26 A3               [24] 3333 	inc	dptr
      000C27 E0               [24] 3334 	movx	a,@dptr
      000C28 FF               [12] 3335 	mov	r7,a
      000C29 BE FA 05         [24] 3336 	cjne	r6,#0xfa,00120$
      000C2C BF 00 02         [24] 3337 	cjne	r7,#0x00,00120$
      000C2F 80 24            [24] 3338 	sjmp	00103$
      000C31                       3339 00120$:
      000C31 BE E8 05         [24] 3340 	cjne	r6,#0xe8,00121$
      000C34 BF 03 02         [24] 3341 	cjne	r7,#0x03,00121$
      000C37 80 12            [24] 3342 	sjmp	00102$
      000C39                       3343 00121$:
      000C39 BE D0 25         [24] 3344 	cjne	r6,#0xd0,00104$
      000C3C BF 07 22         [24] 3345 	cjne	r7,#0x07,00104$
                                   3346 ;	nrf24l01.c:516: register_new_value = register_current_value | (1 << RF_DR_HIGH);
      000C3F 90r00r02         [24] 3347 	mov	dptr,#_register_current_value
      000C42 E0               [24] 3348 	movx	a,@dptr
      000C43 90r00r03         [24] 3349 	mov	dptr,#_register_new_value
      000C46 44 08            [12] 3350 	orl	a,#0x08
      000C48 F0               [24] 3351 	movx	@dptr,a
                                   3352 ;	nrf24l01.c:517: break;
                                   3353 ;	nrf24l01.c:518: case 1000:
      000C49 80 1E            [24] 3354 	sjmp	00105$
      000C4B                       3355 00102$:
                                   3356 ;	nrf24l01.c:519: register_new_value = register_current_value;
      000C4B 90r00r02         [24] 3357 	mov	dptr,#_register_current_value
      000C4E E0               [24] 3358 	movx	a,@dptr
      000C4F 90r00r03         [24] 3359 	mov	dptr,#_register_new_value
      000C52 F0               [24] 3360 	movx	@dptr,a
                                   3361 ;	nrf24l01.c:520: break;
                                   3362 ;	nrf24l01.c:521: case 250:
      000C53 80 14            [24] 3363 	sjmp	00105$
      000C55                       3364 00103$:
                                   3365 ;	nrf24l01.c:522: register_new_value = register_current_value | (1 << RF_DR_LOW);
      000C55 90r00r02         [24] 3366 	mov	dptr,#_register_current_value
      000C58 E0               [24] 3367 	movx	a,@dptr
      000C59 90r00r03         [24] 3368 	mov	dptr,#_register_new_value
      000C5C 44 20            [12] 3369 	orl	a,#0x20
      000C5E F0               [24] 3370 	movx	@dptr,a
                                   3371 ;	nrf24l01.c:523: break;
                                   3372 ;	nrf24l01.c:524: default:
      000C5F 80 08            [24] 3373 	sjmp	00105$
      000C61                       3374 00104$:
                                   3375 ;	nrf24l01.c:525: register_new_value = register_current_value;
      000C61 90r00r02         [24] 3376 	mov	dptr,#_register_current_value
      000C64 E0               [24] 3377 	movx	a,@dptr
      000C65 90r00r03         [24] 3378 	mov	dptr,#_register_new_value
      000C68 F0               [24] 3379 	movx	@dptr,a
                                   3380 ;	nrf24l01.c:527: }
      000C69                       3381 00105$:
                                   3382 ;	nrf24l01.c:528: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000C69 90r00r3F         [24] 3383 	mov	dptr,#_nrf24_write_PARM_2
      000C6C 74r03            [12] 3384 	mov	a,#_register_new_value
      000C6E F0               [24] 3385 	movx	@dptr,a
      000C6F 74s00            [12] 3386 	mov	a,#(_register_new_value >> 8)
      000C71 A3               [24] 3387 	inc	dptr
      000C72 F0               [24] 3388 	movx	@dptr,a
      000C73 E4               [12] 3389 	clr	a
      000C74 A3               [24] 3390 	inc	dptr
      000C75 F0               [24] 3391 	movx	@dptr,a
      000C76 90r00r42         [24] 3392 	mov	dptr,#_nrf24_write_PARM_3
      000C79 04               [12] 3393 	inc	a
      000C7A F0               [24] 3394 	movx	@dptr,a
      000C7B 90r00r43         [24] 3395 	mov	dptr,#_nrf24_write_PARM_4
      000C7E E4               [12] 3396 	clr	a
      000C7F F0               [24] 3397 	movx	@dptr,a
      000C80 75 82 06         [24] 3398 	mov	dpl,#0x06
                                   3399 ;	nrf24l01.c:529: }
      000C83 02r10r06         [24] 3400 	ljmp	_nrf24_write
                                   3401 ;------------------------------------------------------------
                                   3402 ;Allocation info for local variables in function 'nrf24_rf_power'
                                   3403 ;------------------------------------------------------------
                                   3404 ;rf_power                  Allocated with name '_nrf24_rf_power_rf_power_65536_194'
                                   3405 ;------------------------------------------------------------
                                   3406 ;	nrf24l01.c:532: void nrf24_rf_power(uint8_t rf_power)
                                   3407 ;	-----------------------------------------
                                   3408 ;	 function nrf24_rf_power
                                   3409 ;	-----------------------------------------
      000C86                       3410 _nrf24_rf_power:
      000C86 E5 82            [12] 3411 	mov	a,dpl
      000C88 90r00r2F         [24] 3412 	mov	dptr,#_nrf24_rf_power_rf_power_65536_194
      000C8B F0               [24] 3413 	movx	@dptr,a
                                   3414 ;	nrf24l01.c:534: nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
      000C8C 90r00r39         [24] 3415 	mov	dptr,#_nrf24_read_PARM_2
      000C8F 74r02            [12] 3416 	mov	a,#_register_current_value
      000C91 F0               [24] 3417 	movx	@dptr,a
      000C92 74s00            [12] 3418 	mov	a,#(_register_current_value >> 8)
      000C94 A3               [24] 3419 	inc	dptr
      000C95 F0               [24] 3420 	movx	@dptr,a
      000C96 E4               [12] 3421 	clr	a
      000C97 A3               [24] 3422 	inc	dptr
      000C98 F0               [24] 3423 	movx	@dptr,a
      000C99 90r00r3C         [24] 3424 	mov	dptr,#_nrf24_read_PARM_3
      000C9C 04               [12] 3425 	inc	a
      000C9D F0               [24] 3426 	movx	@dptr,a
      000C9E 90r00r3D         [24] 3427 	mov	dptr,#_nrf24_read_PARM_4
      000CA1 E4               [12] 3428 	clr	a
      000CA2 F0               [24] 3429 	movx	@dptr,a
      000CA3 75 82 06         [24] 3430 	mov	dpl,#0x06
      000CA6 12r0Fr9A         [24] 3431 	lcall	_nrf24_read
                                   3432 ;	nrf24l01.c:535: register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000CA9 90r00r02         [24] 3433 	mov	dptr,#_register_current_value
      000CAC E0               [24] 3434 	movx	a,@dptr
      000CAD 53 E0 F9         [24] 3435 	anl	acc,#0xf9
      000CB0 F0               [24] 3436 	movx	@dptr,a
                                   3437 ;	nrf24l01.c:536: switch (rf_power)
      000CB1 90r00r2F         [24] 3438 	mov	dptr,#_nrf24_rf_power_rf_power_65536_194
      000CB4 E0               [24] 3439 	movx	a,@dptr
      000CB5 FF               [12] 3440 	mov	r7,a
      000CB6 60 0F            [24] 3441 	jz	00101$
      000CB8 BF 06 02         [24] 3442 	cjne	r7,#0x06,00126$
      000CBB 80 16            [24] 3443 	sjmp	00102$
      000CBD                       3444 00126$:
      000CBD BF 0C 02         [24] 3445 	cjne	r7,#0x0c,00127$
      000CC0 80 1D            [24] 3446 	sjmp	00103$
      000CC2                       3447 00127$:
                                   3448 ;	nrf24l01.c:538: case 0:
      000CC2 BF 12 30         [24] 3449 	cjne	r7,#0x12,00105$
      000CC5 80 24            [24] 3450 	sjmp	00104$
      000CC7                       3451 00101$:
                                   3452 ;	nrf24l01.c:539: register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
      000CC7 90r00r02         [24] 3453 	mov	dptr,#_register_current_value
      000CCA E0               [24] 3454 	movx	a,@dptr
      000CCB 90r00r03         [24] 3455 	mov	dptr,#_register_new_value
      000CCE 44 06            [12] 3456 	orl	a,#0x06
      000CD0 F0               [24] 3457 	movx	@dptr,a
                                   3458 ;	nrf24l01.c:540: break;
                                   3459 ;	nrf24l01.c:541: case 6:
      000CD1 80 2C            [24] 3460 	sjmp	00106$
      000CD3                       3461 00102$:
                                   3462 ;	nrf24l01.c:542: register_new_value = register_current_value | (1 << RF_PWR_1);
      000CD3 90r00r02         [24] 3463 	mov	dptr,#_register_current_value
      000CD6 E0               [24] 3464 	movx	a,@dptr
      000CD7 90r00r03         [24] 3465 	mov	dptr,#_register_new_value
      000CDA 44 04            [12] 3466 	orl	a,#0x04
      000CDC F0               [24] 3467 	movx	@dptr,a
                                   3468 ;	nrf24l01.c:543: break;
                                   3469 ;	nrf24l01.c:544: case 12:
      000CDD 80 20            [24] 3470 	sjmp	00106$
      000CDF                       3471 00103$:
                                   3472 ;	nrf24l01.c:545: register_new_value = register_current_value | (1 << RF_PWR_0);
      000CDF 90r00r02         [24] 3473 	mov	dptr,#_register_current_value
      000CE2 E0               [24] 3474 	movx	a,@dptr
      000CE3 90r00r03         [24] 3475 	mov	dptr,#_register_new_value
      000CE6 44 02            [12] 3476 	orl	a,#0x02
      000CE8 F0               [24] 3477 	movx	@dptr,a
                                   3478 ;	nrf24l01.c:546: break;
                                   3479 ;	nrf24l01.c:547: case 18:
      000CE9 80 14            [24] 3480 	sjmp	00106$
      000CEB                       3481 00104$:
                                   3482 ;	nrf24l01.c:548: register_new_value = register_current_value;
      000CEB 90r00r02         [24] 3483 	mov	dptr,#_register_current_value
      000CEE E0               [24] 3484 	movx	a,@dptr
      000CEF 90r00r03         [24] 3485 	mov	dptr,#_register_new_value
      000CF2 F0               [24] 3486 	movx	@dptr,a
                                   3487 ;	nrf24l01.c:549: break;
                                   3488 ;	nrf24l01.c:550: default:
      000CF3 80 0A            [24] 3489 	sjmp	00106$
      000CF5                       3490 00105$:
                                   3491 ;	nrf24l01.c:551: register_new_value = register_current_value | (1 << RF_PWR_1);
      000CF5 90r00r02         [24] 3492 	mov	dptr,#_register_current_value
      000CF8 E0               [24] 3493 	movx	a,@dptr
      000CF9 90r00r03         [24] 3494 	mov	dptr,#_register_new_value
      000CFC 44 04            [12] 3495 	orl	a,#0x04
      000CFE F0               [24] 3496 	movx	@dptr,a
                                   3497 ;	nrf24l01.c:553: }
      000CFF                       3498 00106$:
                                   3499 ;	nrf24l01.c:554: nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
      000CFF 90r00r3F         [24] 3500 	mov	dptr,#_nrf24_write_PARM_2
      000D02 74r03            [12] 3501 	mov	a,#_register_new_value
      000D04 F0               [24] 3502 	movx	@dptr,a
      000D05 74s00            [12] 3503 	mov	a,#(_register_new_value >> 8)
      000D07 A3               [24] 3504 	inc	dptr
      000D08 F0               [24] 3505 	movx	@dptr,a
      000D09 E4               [12] 3506 	clr	a
      000D0A A3               [24] 3507 	inc	dptr
      000D0B F0               [24] 3508 	movx	@dptr,a
      000D0C 90r00r42         [24] 3509 	mov	dptr,#_nrf24_write_PARM_3
      000D0F 04               [12] 3510 	inc	a
      000D10 F0               [24] 3511 	movx	@dptr,a
      000D11 90r00r43         [24] 3512 	mov	dptr,#_nrf24_write_PARM_4
      000D14 E4               [12] 3513 	clr	a
      000D15 F0               [24] 3514 	movx	@dptr,a
      000D16 75 82 06         [24] 3515 	mov	dpl,#0x06
                                   3516 ;	nrf24l01.c:555: }
      000D19 02r10r06         [24] 3517 	ljmp	_nrf24_write
                                   3518 ;------------------------------------------------------------
                                   3519 ;Allocation info for local variables in function 'nrf24_rf_channel'
                                   3520 ;------------------------------------------------------------
                                   3521 ;rf_channel                Allocated with name '_nrf24_rf_channel_rf_channel_65536_197'
                                   3522 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_199'
                                   3523 ;write_pointer             Allocated with name '_nrf24_rf_channel_write_pointer_131072_200'
                                   3524 ;------------------------------------------------------------
                                   3525 ;	nrf24l01.c:558: void nrf24_rf_channel(uint8_t rf_channel)
                                   3526 ;	-----------------------------------------
                                   3527 ;	 function nrf24_rf_channel
                                   3528 ;	-----------------------------------------
      000D1C                       3529 _nrf24_rf_channel:
      000D1C E5 82            [12] 3530 	mov	a,dpl
      000D1E 90r00r30         [24] 3531 	mov	dptr,#_nrf24_rf_channel_rf_channel_65536_197
      000D21 F0               [24] 3532 	movx	@dptr,a
                                   3533 ;	nrf24l01.c:560: if ((rf_channel <= 125) && (rf_channel >= 1))
      000D22 E0               [24] 3534 	movx	a,@dptr
      000D23 FF               [12] 3535 	mov  r7,a
      000D24 24 82            [12] 3536 	add	a,#0xff - 0x7d
      000D26 40 27            [24] 3537 	jc	00102$
      000D28 BF 01 00         [24] 3538 	cjne	r7,#0x01,00116$
      000D2B                       3539 00116$:
      000D2B 40 22            [24] 3540 	jc	00102$
                                   3541 ;	nrf24l01.c:562: uint8_t write_pointer = rf_channel;
      000D2D 90r00r31         [24] 3542 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_199
      000D30 EF               [12] 3543 	mov	a,r7
      000D31 F0               [24] 3544 	movx	@dptr,a
                                   3545 ;	nrf24l01.c:563: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000D32 90r00r3F         [24] 3546 	mov	dptr,#_nrf24_write_PARM_2
      000D35 74r31            [12] 3547 	mov	a,#_nrf24_rf_channel_write_pointer_131072_199
      000D37 F0               [24] 3548 	movx	@dptr,a
      000D38 74s00            [12] 3549 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_199 >> 8)
      000D3A A3               [24] 3550 	inc	dptr
      000D3B F0               [24] 3551 	movx	@dptr,a
      000D3C E4               [12] 3552 	clr	a
      000D3D A3               [24] 3553 	inc	dptr
      000D3E F0               [24] 3554 	movx	@dptr,a
      000D3F 90r00r42         [24] 3555 	mov	dptr,#_nrf24_write_PARM_3
      000D42 04               [12] 3556 	inc	a
      000D43 F0               [24] 3557 	movx	@dptr,a
      000D44 90r00r43         [24] 3558 	mov	dptr,#_nrf24_write_PARM_4
      000D47 E4               [12] 3559 	clr	a
      000D48 F0               [24] 3560 	movx	@dptr,a
      000D49 75 82 05         [24] 3561 	mov	dpl,#0x05
      000D4C 02r10r06         [24] 3562 	ljmp	_nrf24_write
      000D4F                       3563 00102$:
                                   3564 ;	nrf24l01.c:567: uint8_t write_pointer = 1;
      000D4F 90r00r32         [24] 3565 	mov	dptr,#_nrf24_rf_channel_write_pointer_131072_200
      000D52 74 01            [12] 3566 	mov	a,#0x01
      000D54 F0               [24] 3567 	movx	@dptr,a
                                   3568 ;	nrf24l01.c:568: nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
      000D55 90r00r3F         [24] 3569 	mov	dptr,#_nrf24_write_PARM_2
      000D58 74r32            [12] 3570 	mov	a,#_nrf24_rf_channel_write_pointer_131072_200
      000D5A F0               [24] 3571 	movx	@dptr,a
      000D5B 74s00            [12] 3572 	mov	a,#(_nrf24_rf_channel_write_pointer_131072_200 >> 8)
      000D5D A3               [24] 3573 	inc	dptr
      000D5E F0               [24] 3574 	movx	@dptr,a
      000D5F E4               [12] 3575 	clr	a
      000D60 A3               [24] 3576 	inc	dptr
      000D61 F0               [24] 3577 	movx	@dptr,a
      000D62 90r00r42         [24] 3578 	mov	dptr,#_nrf24_write_PARM_3
      000D65 04               [12] 3579 	inc	a
      000D66 F0               [24] 3580 	movx	@dptr,a
      000D67 90r00r43         [24] 3581 	mov	dptr,#_nrf24_write_PARM_4
      000D6A E4               [12] 3582 	clr	a
      000D6B F0               [24] 3583 	movx	@dptr,a
      000D6C 75 82 05         [24] 3584 	mov	dpl,#0x05
                                   3585 ;	nrf24l01.c:570: }
      000D6F 02r10r06         [24] 3586 	ljmp	_nrf24_write
                                   3587 ;------------------------------------------------------------
                                   3588 ;Allocation info for local variables in function 'nrf24_interrupt_mask'
                                   3589 ;------------------------------------------------------------
                                   3590 ;tx_mask                   Allocated with name '_nrf24_interrupt_mask_PARM_2'
                                   3591 ;max_rt_mask               Allocated with name '_nrf24_interrupt_mask_PARM_3'
                                   3592 ;rx_mask                   Allocated with name '_nrf24_interrupt_mask_rx_mask_65536_201'
                                   3593 ;------------------------------------------------------------
                                   3594 ;	nrf24l01.c:573: void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
                                   3595 ;	-----------------------------------------
                                   3596 ;	 function nrf24_interrupt_mask
                                   3597 ;	-----------------------------------------
      000D72                       3598 _nrf24_interrupt_mask:
      000D72 E5 82            [12] 3599 	mov	a,dpl
      000D74 90r00r35         [24] 3600 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_201
      000D77 F0               [24] 3601 	movx	@dptr,a
                                   3602 ;	nrf24l01.c:575: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000D78 90r00r39         [24] 3603 	mov	dptr,#_nrf24_read_PARM_2
      000D7B 74r02            [12] 3604 	mov	a,#_register_current_value
      000D7D F0               [24] 3605 	movx	@dptr,a
      000D7E 74s00            [12] 3606 	mov	a,#(_register_current_value >> 8)
      000D80 A3               [24] 3607 	inc	dptr
      000D81 F0               [24] 3608 	movx	@dptr,a
      000D82 E4               [12] 3609 	clr	a
      000D83 A3               [24] 3610 	inc	dptr
      000D84 F0               [24] 3611 	movx	@dptr,a
      000D85 90r00r3C         [24] 3612 	mov	dptr,#_nrf24_read_PARM_3
      000D88 04               [12] 3613 	inc	a
      000D89 F0               [24] 3614 	movx	@dptr,a
      000D8A 90r00r3D         [24] 3615 	mov	dptr,#_nrf24_read_PARM_4
      000D8D E4               [12] 3616 	clr	a
      000D8E F0               [24] 3617 	movx	@dptr,a
      000D8F 75 82 00         [24] 3618 	mov	dpl,#0x00
      000D92 12r0Fr9A         [24] 3619 	lcall	_nrf24_read
                                   3620 ;	nrf24l01.c:576: if (rx_mask)
      000D95 90r00r35         [24] 3621 	mov	dptr,#_nrf24_interrupt_mask_rx_mask_65536_201
      000D98 E0               [24] 3622 	movx	a,@dptr
      000D99 60 0C            [24] 3623 	jz	00102$
                                   3624 ;	nrf24l01.c:577: register_new_value = (register_current_value) | (1 << MASK_RX_DR);
      000D9B 90r00r02         [24] 3625 	mov	dptr,#_register_current_value
      000D9E E0               [24] 3626 	movx	a,@dptr
      000D9F 90r00r03         [24] 3627 	mov	dptr,#_register_new_value
      000DA2 44 40            [12] 3628 	orl	a,#0x40
      000DA4 F0               [24] 3629 	movx	@dptr,a
      000DA5 80 08            [24] 3630 	sjmp	00103$
      000DA7                       3631 00102$:
                                   3632 ;	nrf24l01.c:579: register_new_value &= (~(1 << MASK_RX_DR));
      000DA7 90r00r03         [24] 3633 	mov	dptr,#_register_new_value
      000DAA E0               [24] 3634 	movx	a,@dptr
      000DAB 53 E0 BF         [24] 3635 	anl	acc,#0xbf
      000DAE F0               [24] 3636 	movx	@dptr,a
      000DAF                       3637 00103$:
                                   3638 ;	nrf24l01.c:580: if (tx_mask)
      000DAF 90r00r33         [24] 3639 	mov	dptr,#_nrf24_interrupt_mask_PARM_2
      000DB2 E0               [24] 3640 	movx	a,@dptr
      000DB3 60 0A            [24] 3641 	jz	00105$
                                   3642 ;	nrf24l01.c:581: register_new_value |= (1 << MASK_TX_DS);
      000DB5 90r00r03         [24] 3643 	mov	dptr,#_register_new_value
      000DB8 E0               [24] 3644 	movx	a,@dptr
      000DB9 43 E0 20         [24] 3645 	orl	acc,#0x20
      000DBC F0               [24] 3646 	movx	@dptr,a
      000DBD 80 08            [24] 3647 	sjmp	00106$
      000DBF                       3648 00105$:
                                   3649 ;	nrf24l01.c:583: register_new_value &= (~(1 << MASK_TX_DS));
      000DBF 90r00r03         [24] 3650 	mov	dptr,#_register_new_value
      000DC2 E0               [24] 3651 	movx	a,@dptr
      000DC3 53 E0 DF         [24] 3652 	anl	acc,#0xdf
      000DC6 F0               [24] 3653 	movx	@dptr,a
      000DC7                       3654 00106$:
                                   3655 ;	nrf24l01.c:584: if (max_rt_mask)
      000DC7 90r00r34         [24] 3656 	mov	dptr,#_nrf24_interrupt_mask_PARM_3
      000DCA E0               [24] 3657 	movx	a,@dptr
      000DCB 60 0A            [24] 3658 	jz	00108$
                                   3659 ;	nrf24l01.c:585: register_new_value |= (1 << MASK_MAX_RT);
      000DCD 90r00r03         [24] 3660 	mov	dptr,#_register_new_value
      000DD0 E0               [24] 3661 	movx	a,@dptr
      000DD1 43 E0 10         [24] 3662 	orl	acc,#0x10
      000DD4 F0               [24] 3663 	movx	@dptr,a
      000DD5 80 08            [24] 3664 	sjmp	00109$
      000DD7                       3665 00108$:
                                   3666 ;	nrf24l01.c:587: register_new_value &= (~(1 << MASK_MAX_RT));
      000DD7 90r00r03         [24] 3667 	mov	dptr,#_register_new_value
      000DDA E0               [24] 3668 	movx	a,@dptr
      000DDB 53 E0 EF         [24] 3669 	anl	acc,#0xef
      000DDE F0               [24] 3670 	movx	@dptr,a
      000DDF                       3671 00109$:
                                   3672 ;	nrf24l01.c:589: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000DDF 90r00r3F         [24] 3673 	mov	dptr,#_nrf24_write_PARM_2
      000DE2 74r03            [12] 3674 	mov	a,#_register_new_value
      000DE4 F0               [24] 3675 	movx	@dptr,a
      000DE5 74s00            [12] 3676 	mov	a,#(_register_new_value >> 8)
      000DE7 A3               [24] 3677 	inc	dptr
      000DE8 F0               [24] 3678 	movx	@dptr,a
      000DE9 E4               [12] 3679 	clr	a
      000DEA A3               [24] 3680 	inc	dptr
      000DEB F0               [24] 3681 	movx	@dptr,a
      000DEC 90r00r42         [24] 3682 	mov	dptr,#_nrf24_write_PARM_3
      000DEF 04               [12] 3683 	inc	a
      000DF0 F0               [24] 3684 	movx	@dptr,a
      000DF1 90r00r43         [24] 3685 	mov	dptr,#_nrf24_write_PARM_4
      000DF4 E4               [12] 3686 	clr	a
      000DF5 F0               [24] 3687 	movx	@dptr,a
      000DF6 75 82 00         [24] 3688 	mov	dpl,#0x00
                                   3689 ;	nrf24l01.c:590: }
      000DF9 02r10r06         [24] 3690 	ljmp	_nrf24_write
                                   3691 ;------------------------------------------------------------
                                   3692 ;Allocation info for local variables in function 'nrf24_crc_configuration'
                                   3693 ;------------------------------------------------------------
                                   3694 ;crc_encoding_scheme       Allocated with name '_nrf24_crc_configuration_PARM_2'
                                   3695 ;crc_enable                Allocated with name '_nrf24_crc_configuration_crc_enable_65536_203'
                                   3696 ;------------------------------------------------------------
                                   3697 ;	nrf24l01.c:593: void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
                                   3698 ;	-----------------------------------------
                                   3699 ;	 function nrf24_crc_configuration
                                   3700 ;	-----------------------------------------
      000DFC                       3701 _nrf24_crc_configuration:
      000DFC E5 82            [12] 3702 	mov	a,dpl
      000DFE 90r00r37         [24] 3703 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_203
      000E01 F0               [24] 3704 	movx	@dptr,a
                                   3705 ;	nrf24l01.c:595: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000E02 90r00r39         [24] 3706 	mov	dptr,#_nrf24_read_PARM_2
      000E05 74r02            [12] 3707 	mov	a,#_register_current_value
      000E07 F0               [24] 3708 	movx	@dptr,a
      000E08 74s00            [12] 3709 	mov	a,#(_register_current_value >> 8)
      000E0A A3               [24] 3710 	inc	dptr
      000E0B F0               [24] 3711 	movx	@dptr,a
      000E0C E4               [12] 3712 	clr	a
      000E0D A3               [24] 3713 	inc	dptr
      000E0E F0               [24] 3714 	movx	@dptr,a
      000E0F 90r00r3C         [24] 3715 	mov	dptr,#_nrf24_read_PARM_3
      000E12 04               [12] 3716 	inc	a
      000E13 F0               [24] 3717 	movx	@dptr,a
      000E14 90r00r3D         [24] 3718 	mov	dptr,#_nrf24_read_PARM_4
      000E17 E4               [12] 3719 	clr	a
      000E18 F0               [24] 3720 	movx	@dptr,a
      000E19 75 82 00         [24] 3721 	mov	dpl,#0x00
      000E1C 12r0Fr9A         [24] 3722 	lcall	_nrf24_read
                                   3723 ;	nrf24l01.c:596: if (crc_enable)
      000E1F 90r00r37         [24] 3724 	mov	dptr,#_nrf24_crc_configuration_crc_enable_65536_203
      000E22 E0               [24] 3725 	movx	a,@dptr
      000E23 60 0C            [24] 3726 	jz	00102$
                                   3727 ;	nrf24l01.c:597: register_new_value = (register_current_value) | (1 << EN_CRC);
      000E25 90r00r02         [24] 3728 	mov	dptr,#_register_current_value
      000E28 E0               [24] 3729 	movx	a,@dptr
      000E29 90r00r03         [24] 3730 	mov	dptr,#_register_new_value
      000E2C 44 08            [12] 3731 	orl	a,#0x08
      000E2E F0               [24] 3732 	movx	@dptr,a
      000E2F 80 08            [24] 3733 	sjmp	00103$
      000E31                       3734 00102$:
                                   3735 ;	nrf24l01.c:599: register_new_value &= (~(1 << EN_CRC));
      000E31 90r00r03         [24] 3736 	mov	dptr,#_register_new_value
      000E34 E0               [24] 3737 	movx	a,@dptr
      000E35 53 E0 F7         [24] 3738 	anl	acc,#0xf7
      000E38 F0               [24] 3739 	movx	@dptr,a
      000E39                       3740 00103$:
                                   3741 ;	nrf24l01.c:600: if (crc_encoding_scheme == 2)
      000E39 90r00r36         [24] 3742 	mov	dptr,#_nrf24_crc_configuration_PARM_2
      000E3C E0               [24] 3743 	movx	a,@dptr
      000E3D FF               [12] 3744 	mov	r7,a
      000E3E BF 02 0A         [24] 3745 	cjne	r7,#0x02,00105$
                                   3746 ;	nrf24l01.c:601: register_new_value |= (1 << CRCO);
      000E41 90r00r03         [24] 3747 	mov	dptr,#_register_new_value
      000E44 E0               [24] 3748 	movx	a,@dptr
      000E45 43 E0 04         [24] 3749 	orl	acc,#0x04
      000E48 F0               [24] 3750 	movx	@dptr,a
      000E49 80 08            [24] 3751 	sjmp	00106$
      000E4B                       3752 00105$:
                                   3753 ;	nrf24l01.c:603: register_new_value &= (~(1 << CRCO));
      000E4B 90r00r03         [24] 3754 	mov	dptr,#_register_new_value
      000E4E E0               [24] 3755 	movx	a,@dptr
      000E4F 53 E0 FB         [24] 3756 	anl	acc,#0xfb
      000E52 F0               [24] 3757 	movx	@dptr,a
      000E53                       3758 00106$:
                                   3759 ;	nrf24l01.c:605: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000E53 90r00r3F         [24] 3760 	mov	dptr,#_nrf24_write_PARM_2
      000E56 74r03            [12] 3761 	mov	a,#_register_new_value
      000E58 F0               [24] 3762 	movx	@dptr,a
      000E59 74s00            [12] 3763 	mov	a,#(_register_new_value >> 8)
      000E5B A3               [24] 3764 	inc	dptr
      000E5C F0               [24] 3765 	movx	@dptr,a
      000E5D E4               [12] 3766 	clr	a
      000E5E A3               [24] 3767 	inc	dptr
      000E5F F0               [24] 3768 	movx	@dptr,a
      000E60 90r00r42         [24] 3769 	mov	dptr,#_nrf24_write_PARM_3
      000E63 04               [12] 3770 	inc	a
      000E64 F0               [24] 3771 	movx	@dptr,a
      000E65 90r00r43         [24] 3772 	mov	dptr,#_nrf24_write_PARM_4
      000E68 E4               [12] 3773 	clr	a
      000E69 F0               [24] 3774 	movx	@dptr,a
      000E6A 75 82 00         [24] 3775 	mov	dpl,#0x00
                                   3776 ;	nrf24l01.c:606: }
      000E6D 02r10r06         [24] 3777 	ljmp	_nrf24_write
                                   3778 ;------------------------------------------------------------
                                   3779 ;Allocation info for local variables in function 'nrf24_mode'
                                   3780 ;------------------------------------------------------------
                                   3781 ;mode                      Allocated with name '_nrf24_mode_mode_65536_205'
                                   3782 ;------------------------------------------------------------
                                   3783 ;	nrf24l01.c:609: void nrf24_mode(uint8_t mode)
                                   3784 ;	-----------------------------------------
                                   3785 ;	 function nrf24_mode
                                   3786 ;	-----------------------------------------
      000E70                       3787 _nrf24_mode:
      000E70 E5 82            [12] 3788 	mov	a,dpl
      000E72 90r00r38         [24] 3789 	mov	dptr,#_nrf24_mode_mode_65536_205
      000E75 F0               [24] 3790 	movx	@dptr,a
                                   3791 ;	nrf24l01.c:611: nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
      000E76 90r00r39         [24] 3792 	mov	dptr,#_nrf24_read_PARM_2
      000E79 74r02            [12] 3793 	mov	a,#_register_current_value
      000E7B F0               [24] 3794 	movx	@dptr,a
      000E7C 74s00            [12] 3795 	mov	a,#(_register_current_value >> 8)
      000E7E A3               [24] 3796 	inc	dptr
      000E7F F0               [24] 3797 	movx	@dptr,a
      000E80 E4               [12] 3798 	clr	a
      000E81 A3               [24] 3799 	inc	dptr
      000E82 F0               [24] 3800 	movx	@dptr,a
      000E83 90r00r3C         [24] 3801 	mov	dptr,#_nrf24_read_PARM_3
      000E86 04               [12] 3802 	inc	a
      000E87 F0               [24] 3803 	movx	@dptr,a
      000E88 90r00r3D         [24] 3804 	mov	dptr,#_nrf24_read_PARM_4
      000E8B E4               [12] 3805 	clr	a
      000E8C F0               [24] 3806 	movx	@dptr,a
      000E8D 75 82 00         [24] 3807 	mov	dpl,#0x00
      000E90 12r0Fr9A         [24] 3808 	lcall	_nrf24_read
                                   3809 ;	nrf24l01.c:612: switch (mode)
      000E93 90r00r38         [24] 3810 	mov	dptr,#_nrf24_mode_mode_65536_205
      000E96 E0               [24] 3811 	movx	a,@dptr
      000E97 FF               [12] 3812 	mov  r7,a
      000E98 24 FB            [12] 3813 	add	a,#0xff - 0x04
      000E9A 50 03            [24] 3814 	jnc	00114$
      000E9C 02r0Fr56         [24] 3815 	ljmp	00106$
      000E9F                       3816 00114$:
      000E9F EF               [12] 3817 	mov	a,r7
      000EA0 2F               [12] 3818 	add	a,r7
      000EA1 2F               [12] 3819 	add	a,r7
      000EA2 90r0ErA6         [24] 3820 	mov	dptr,#00115$
      000EA5 73               [24] 3821 	jmp	@a+dptr
      000EA6                       3822 00115$:
      000EA6 02r0ErB5         [24] 3823 	ljmp	00101$
      000EA9 02r0ErD5         [24] 3824 	ljmp	00102$
      000EAC 02r0ErF5         [24] 3825 	ljmp	00103$
      000EAF 02r0Fr16         [24] 3826 	ljmp	00104$
      000EB2 02r0Fr37         [24] 3827 	ljmp	00105$
                                   3828 ;	nrf24l01.c:614: case POWER_DOWN:
      000EB5                       3829 00101$:
                                   3830 ;	nrf24l01.c:615: nrf24_CE(CE_OFF);
      000EB5 75 82 00         [24] 3831 	mov	dpl,#0x00
      000EB8 C0 07            [24] 3832 	push	ar7
      000EBA 12r00rCF         [24] 3833 	lcall	_nrf24_CE
                                   3834 ;	nrf24l01.c:616: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000EBD 90r00r02         [24] 3835 	mov	dptr,#_register_current_value
      000EC0 E0               [24] 3836 	movx	a,@dptr
      000EC1 90r00r03         [24] 3837 	mov	dptr,#_register_new_value
      000EC4 54 FD            [12] 3838 	anl	a,#0xfd
      000EC6 F0               [24] 3839 	movx	@dptr,a
                                   3840 ;	nrf24l01.c:617: delay_function(POWER_DOWN_DELAY);
      000EC7 90 00 02         [24] 3841 	mov	dptr,#(0x02&0x00ff)
      000ECA E4               [12] 3842 	clr	a
      000ECB F5 F0            [12] 3843 	mov	b,a
      000ECD 12r00r00         [24] 3844 	lcall	_delay_function
      000ED0 D0 07            [24] 3845 	pop	ar7
                                   3846 ;	nrf24l01.c:618: break;
      000ED2 02r0Fr73         [24] 3847 	ljmp	00107$
                                   3848 ;	nrf24l01.c:619: case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
      000ED5                       3849 00102$:
                                   3850 ;	nrf24l01.c:620: nrf24_CE(CE_OFF);
      000ED5 75 82 00         [24] 3851 	mov	dpl,#0x00
      000ED8 C0 07            [24] 3852 	push	ar7
      000EDA 12r00rCF         [24] 3853 	lcall	_nrf24_CE
                                   3854 ;	nrf24l01.c:621: register_new_value = (register_current_value) | (1 << PWR_UP);
      000EDD 90r00r02         [24] 3855 	mov	dptr,#_register_current_value
      000EE0 E0               [24] 3856 	movx	a,@dptr
      000EE1 90r00r03         [24] 3857 	mov	dptr,#_register_new_value
      000EE4 44 02            [12] 3858 	orl	a,#0x02
      000EE6 F0               [24] 3859 	movx	@dptr,a
                                   3860 ;	nrf24l01.c:622: delay_function(STANDBYI_DELAY);
      000EE7 90 00 02         [24] 3861 	mov	dptr,#(0x02&0x00ff)
      000EEA E4               [12] 3862 	clr	a
      000EEB F5 F0            [12] 3863 	mov	b,a
      000EED 12r00r00         [24] 3864 	lcall	_delay_function
      000EF0 D0 07            [24] 3865 	pop	ar7
                                   3866 ;	nrf24l01.c:623: break;
      000EF2 02r0Fr73         [24] 3867 	ljmp	00107$
                                   3868 ;	nrf24l01.c:624: case STANDBYII:                                 /*standby ii is related to a ptx device*/
      000EF5                       3869 00103$:
                                   3870 ;	nrf24l01.c:625: nrf24_CE(CE_ON);
      000EF5 75 82 01         [24] 3871 	mov	dpl,#0x01
      000EF8 C0 07            [24] 3872 	push	ar7
      000EFA 12r00rCF         [24] 3873 	lcall	_nrf24_CE
                                   3874 ;	nrf24l01.c:626: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000EFD 90r00r02         [24] 3875 	mov	dptr,#_register_current_value
      000F00 E0               [24] 3876 	movx	a,@dptr
      000F01 44 02            [12] 3877 	orl	a,#0x02
      000F03 90r00r03         [24] 3878 	mov	dptr,#_register_new_value
      000F06 54 FE            [12] 3879 	anl	a,#0xfe
      000F08 F0               [24] 3880 	movx	@dptr,a
                                   3881 ;	nrf24l01.c:627: delay_function(STANDBYI_DELAY);
      000F09 90 00 02         [24] 3882 	mov	dptr,#(0x02&0x00ff)
      000F0C E4               [12] 3883 	clr	a
      000F0D F5 F0            [12] 3884 	mov	b,a
      000F0F 12r00r00         [24] 3885 	lcall	_delay_function
      000F12 D0 07            [24] 3886 	pop	ar7
                                   3887 ;	nrf24l01.c:628: break;
                                   3888 ;	nrf24l01.c:629: case PTX:
      000F14 80 5D            [24] 3889 	sjmp	00107$
      000F16                       3890 00104$:
                                   3891 ;	nrf24l01.c:630: nrf24_CE(CE_ON);
      000F16 75 82 01         [24] 3892 	mov	dpl,#0x01
      000F19 C0 07            [24] 3893 	push	ar7
      000F1B 12r00rCF         [24] 3894 	lcall	_nrf24_CE
                                   3895 ;	nrf24l01.c:631: register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
      000F1E 90r00r02         [24] 3896 	mov	dptr,#_register_current_value
      000F21 E0               [24] 3897 	movx	a,@dptr
      000F22 44 02            [12] 3898 	orl	a,#0x02
      000F24 90r00r03         [24] 3899 	mov	dptr,#_register_new_value
      000F27 54 FE            [12] 3900 	anl	a,#0xfe
      000F29 F0               [24] 3901 	movx	@dptr,a
                                   3902 ;	nrf24l01.c:632: delay_function(STANDBYI_DELAY);
      000F2A 90 00 02         [24] 3903 	mov	dptr,#(0x02&0x00ff)
      000F2D E4               [12] 3904 	clr	a
      000F2E F5 F0            [12] 3905 	mov	b,a
      000F30 12r00r00         [24] 3906 	lcall	_delay_function
      000F33 D0 07            [24] 3907 	pop	ar7
                                   3908 ;	nrf24l01.c:633: break;
                                   3909 ;	nrf24l01.c:634: case PRX:
      000F35 80 3C            [24] 3910 	sjmp	00107$
      000F37                       3911 00105$:
                                   3912 ;	nrf24l01.c:635: nrf24_CE(CE_ON);
      000F37 75 82 01         [24] 3913 	mov	dpl,#0x01
      000F3A C0 07            [24] 3914 	push	ar7
      000F3C 12r00rCF         [24] 3915 	lcall	_nrf24_CE
                                   3916 ;	nrf24l01.c:636: register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
      000F3F 90r00r02         [24] 3917 	mov	dptr,#_register_current_value
      000F42 E0               [24] 3918 	movx	a,@dptr
      000F43 90r00r03         [24] 3919 	mov	dptr,#_register_new_value
      000F46 44 03            [12] 3920 	orl	a,#0x03
      000F48 F0               [24] 3921 	movx	@dptr,a
                                   3922 ;	nrf24l01.c:637: delay_function(STANDBYI_DELAY);
      000F49 90 00 02         [24] 3923 	mov	dptr,#(0x02&0x00ff)
      000F4C E4               [12] 3924 	clr	a
      000F4D F5 F0            [12] 3925 	mov	b,a
      000F4F 12r00r00         [24] 3926 	lcall	_delay_function
      000F52 D0 07            [24] 3927 	pop	ar7
                                   3928 ;	nrf24l01.c:638: break;
                                   3929 ;	nrf24l01.c:639: default:
      000F54 80 1D            [24] 3930 	sjmp	00107$
      000F56                       3931 00106$:
                                   3932 ;	nrf24l01.c:640: nrf24_CE(CE_OFF);
      000F56 75 82 00         [24] 3933 	mov	dpl,#0x00
      000F59 C0 07            [24] 3934 	push	ar7
      000F5B 12r00rCF         [24] 3935 	lcall	_nrf24_CE
                                   3936 ;	nrf24l01.c:641: register_new_value = (register_current_value) & (~(1 << PWR_UP));
      000F5E 90r00r02         [24] 3937 	mov	dptr,#_register_current_value
      000F61 E0               [24] 3938 	movx	a,@dptr
      000F62 90r00r03         [24] 3939 	mov	dptr,#_register_new_value
      000F65 54 FD            [12] 3940 	anl	a,#0xfd
      000F67 F0               [24] 3941 	movx	@dptr,a
                                   3942 ;	nrf24l01.c:642: delay_function(POWER_DOWN_DELAY);
      000F68 90 00 02         [24] 3943 	mov	dptr,#(0x02&0x00ff)
      000F6B E4               [12] 3944 	clr	a
      000F6C F5 F0            [12] 3945 	mov	b,a
      000F6E 12r00r00         [24] 3946 	lcall	_delay_function
      000F71 D0 07            [24] 3947 	pop	ar7
                                   3948 ;	nrf24l01.c:644: }
      000F73                       3949 00107$:
                                   3950 ;	nrf24l01.c:645: nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
      000F73 90r00r3F         [24] 3951 	mov	dptr,#_nrf24_write_PARM_2
      000F76 74r03            [12] 3952 	mov	a,#_register_new_value
      000F78 F0               [24] 3953 	movx	@dptr,a
      000F79 74s00            [12] 3954 	mov	a,#(_register_new_value >> 8)
      000F7B A3               [24] 3955 	inc	dptr
      000F7C F0               [24] 3956 	movx	@dptr,a
      000F7D E4               [12] 3957 	clr	a
      000F7E A3               [24] 3958 	inc	dptr
      000F7F F0               [24] 3959 	movx	@dptr,a
      000F80 90r00r42         [24] 3960 	mov	dptr,#_nrf24_write_PARM_3
      000F83 04               [12] 3961 	inc	a
      000F84 F0               [24] 3962 	movx	@dptr,a
      000F85 90r00r43         [24] 3963 	mov	dptr,#_nrf24_write_PARM_4
      000F88 E4               [12] 3964 	clr	a
      000F89 F0               [24] 3965 	movx	@dptr,a
      000F8A 75 82 00         [24] 3966 	mov	dpl,#0x00
      000F8D C0 07            [24] 3967 	push	ar7
      000F8F 12r10r06         [24] 3968 	lcall	_nrf24_write
      000F92 D0 07            [24] 3969 	pop	ar7
                                   3970 ;	nrf24l01.c:646: current_mode = mode;
      000F94 90r00r1C         [24] 3971 	mov	dptr,#_current_mode
      000F97 EF               [12] 3972 	mov	a,r7
      000F98 F0               [24] 3973 	movx	@dptr,a
                                   3974 ;	nrf24l01.c:647: }
      000F99 22               [24] 3975 	ret
                                   3976 ;------------------------------------------------------------
                                   3977 ;Allocation info for local variables in function 'nrf24_read'
                                   3978 ;------------------------------------------------------------
                                   3979 ;value                     Allocated with name '_nrf24_read_PARM_2'
                                   3980 ;data_length               Allocated with name '_nrf24_read_PARM_3'
                                   3981 ;spi_state                 Allocated with name '_nrf24_read_PARM_4'
                                   3982 ;address                   Allocated with name '_nrf24_read_address_65536_208'
                                   3983 ;------------------------------------------------------------
                                   3984 ;	nrf24l01.c:651: void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   3985 ;	-----------------------------------------
                                   3986 ;	 function nrf24_read
                                   3987 ;	-----------------------------------------
      000F9A                       3988 _nrf24_read:
      000F9A E5 82            [12] 3989 	mov	a,dpl
      000F9C 90r00r3E         [24] 3990 	mov	dptr,#_nrf24_read_address_65536_208
      000F9F F0               [24] 3991 	movx	@dptr,a
                                   3992 ;	nrf24l01.c:653: nrf24_SPI(SPI_ON);
      000FA0 75 82 00         [24] 3993 	mov	dpl,#0x00
      000FA3 12r00r7C         [24] 3994 	lcall	_nrf24_SPI
                                   3995 ;	nrf24l01.c:656: SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      000FA6 90r00r3E         [24] 3996 	mov	dptr,#_nrf24_read_address_65536_208
      000FA9 E0               [24] 3997 	movx	a,@dptr
      000FAA FF               [12] 3998 	mov	r7,a
      000FAB 90r00r01         [24] 3999 	mov	dptr,#_SPI_command
      000FAE F0               [24] 4000 	movx	@dptr,a
                                   4001 ;	nrf24l01.c:657: SPI_send_command(SPI_command);
      000FAF 8F 82            [24] 4002 	mov	dpl,r7
      000FB1 12r00r90         [24] 4003 	lcall	_SPI_send_command
                                   4004 ;	nrf24l01.c:659: SPI_command = 0;
      000FB4 90r00r01         [24] 4005 	mov	dptr,#_SPI_command
      000FB7 E4               [12] 4006 	clr	a
      000FB8 F0               [24] 4007 	movx	@dptr,a
      000FB9 90r00r39         [24] 4008 	mov	dptr,#_nrf24_read_PARM_2
      000FBC E0               [24] 4009 	movx	a,@dptr
      000FBD FD               [12] 4010 	mov	r5,a
      000FBE A3               [24] 4011 	inc	dptr
      000FBF E0               [24] 4012 	movx	a,@dptr
      000FC0 FE               [12] 4013 	mov	r6,a
      000FC1 A3               [24] 4014 	inc	dptr
      000FC2 E0               [24] 4015 	movx	a,@dptr
      000FC3 FF               [12] 4016 	mov	r7,a
      000FC4 90r00r3C         [24] 4017 	mov	dptr,#_nrf24_read_PARM_3
      000FC7 E0               [24] 4018 	movx	a,@dptr
      000FC8 FC               [12] 4019 	mov	r4,a
      000FC9                       4020 00105$:
                                   4021 ;	nrf24l01.c:660: for (; data_length ; data_length--)
      000FC9 EC               [12] 4022 	mov	a,r4
      000FCA 60 2D            [24] 4023 	jz	00101$
                                   4024 ;	nrf24l01.c:662: *value = SPI_send_command(SPI_command);
      000FCC 90r00r01         [24] 4025 	mov	dptr,#_SPI_command
      000FCF E0               [24] 4026 	movx	a,@dptr
      000FD0 F5 82            [12] 4027 	mov	dpl,a
      000FD2 C0 07            [24] 4028 	push	ar7
      000FD4 C0 06            [24] 4029 	push	ar6
      000FD6 C0 05            [24] 4030 	push	ar5
      000FD8 C0 04            [24] 4031 	push	ar4
      000FDA 12r00r90         [24] 4032 	lcall	_SPI_send_command
      000FDD AB 82            [24] 4033 	mov	r3,dpl
      000FDF D0 04            [24] 4034 	pop	ar4
      000FE1 D0 05            [24] 4035 	pop	ar5
      000FE3 D0 06            [24] 4036 	pop	ar6
      000FE5 D0 07            [24] 4037 	pop	ar7
      000FE7 8D 82            [24] 4038 	mov	dpl,r5
      000FE9 8E 83            [24] 4039 	mov	dph,r6
      000FEB 8F F0            [24] 4040 	mov	b,r7
      000FED EB               [12] 4041 	mov	a,r3
      000FEE 12r00r00         [24] 4042 	lcall	__gptrput
      000FF1 A3               [24] 4043 	inc	dptr
      000FF2 AD 82            [24] 4044 	mov	r5,dpl
      000FF4 AE 83            [24] 4045 	mov	r6,dph
                                   4046 ;	nrf24l01.c:663: value++;
                                   4047 ;	nrf24l01.c:660: for (; data_length ; data_length--)
      000FF6 1C               [12] 4048 	dec	r4
      000FF7 80 D0            [24] 4049 	sjmp	00105$
      000FF9                       4050 00101$:
                                   4051 ;	nrf24l01.c:665: if (spi_state == CLOSE)
      000FF9 90r00r3D         [24] 4052 	mov	dptr,#_nrf24_read_PARM_4
      000FFC E0               [24] 4053 	movx	a,@dptr
      000FFD 70 06            [24] 4054 	jnz	00107$
                                   4055 ;	nrf24l01.c:666: nrf24_SPI(SPI_OFF);
      000FFF 75 82 01         [24] 4056 	mov	dpl,#0x01
                                   4057 ;	nrf24l01.c:667: }
      001002 02r00r7C         [24] 4058 	ljmp	_nrf24_SPI
      001005                       4059 00107$:
      001005 22               [24] 4060 	ret
                                   4061 ;------------------------------------------------------------
                                   4062 ;Allocation info for local variables in function 'nrf24_write'
                                   4063 ;------------------------------------------------------------
                                   4064 ;value                     Allocated with name '_nrf24_write_PARM_2'
                                   4065 ;data_length               Allocated with name '_nrf24_write_PARM_3'
                                   4066 ;spi_state                 Allocated with name '_nrf24_write_PARM_4'
                                   4067 ;address                   Allocated with name '_nrf24_write_address_65536_212'
                                   4068 ;------------------------------------------------------------
                                   4069 ;	nrf24l01.c:671: void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
                                   4070 ;	-----------------------------------------
                                   4071 ;	 function nrf24_write
                                   4072 ;	-----------------------------------------
      001006                       4073 _nrf24_write:
      001006 E5 82            [12] 4074 	mov	a,dpl
      001008 90r00r44         [24] 4075 	mov	dptr,#_nrf24_write_address_65536_212
      00100B F0               [24] 4076 	movx	@dptr,a
                                   4077 ;	nrf24l01.c:673: nrf24_SPI(SPI_ON);
      00100C 75 82 00         [24] 4078 	mov	dpl,#0x00
      00100F 12r00r7C         [24] 4079 	lcall	_nrf24_SPI
                                   4080 ;	nrf24l01.c:674: SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
      001012 90r00r44         [24] 4081 	mov	dptr,#_nrf24_write_address_65536_212
      001015 E0               [24] 4082 	movx	a,@dptr
      001016 44 20            [12] 4083 	orl	a,#0x20
      001018 FF               [12] 4084 	mov	r7,a
      001019 90r00r01         [24] 4085 	mov	dptr,#_SPI_command
      00101C F0               [24] 4086 	movx	@dptr,a
                                   4087 ;	nrf24l01.c:675: SPI_send_command(SPI_command);
      00101D 8F 82            [24] 4088 	mov	dpl,r7
      00101F 12r00r90         [24] 4089 	lcall	_SPI_send_command
      001022 90r00r3F         [24] 4090 	mov	dptr,#_nrf24_write_PARM_2
      001025 E0               [24] 4091 	movx	a,@dptr
      001026 FD               [12] 4092 	mov	r5,a
      001027 A3               [24] 4093 	inc	dptr
      001028 E0               [24] 4094 	movx	a,@dptr
      001029 FE               [12] 4095 	mov	r6,a
      00102A A3               [24] 4096 	inc	dptr
      00102B E0               [24] 4097 	movx	a,@dptr
      00102C FF               [12] 4098 	mov	r7,a
      00102D 90r00r42         [24] 4099 	mov	dptr,#_nrf24_write_PARM_3
      001030 E0               [24] 4100 	movx	a,@dptr
      001031 FC               [12] 4101 	mov	r4,a
      001032                       4102 00105$:
                                   4103 ;	nrf24l01.c:676: for (; data_length ; data_length--)
      001032 EC               [12] 4104 	mov	a,r4
      001033 60 2D            [24] 4105 	jz	00101$
                                   4106 ;	nrf24l01.c:678: SPI_command = *value;
      001035 8D 82            [24] 4107 	mov	dpl,r5
      001037 8E 83            [24] 4108 	mov	dph,r6
      001039 8F F0            [24] 4109 	mov	b,r7
      00103B 12r00r00         [24] 4110 	lcall	__gptrget
      00103E FB               [12] 4111 	mov	r3,a
      00103F A3               [24] 4112 	inc	dptr
      001040 AD 82            [24] 4113 	mov	r5,dpl
      001042 AE 83            [24] 4114 	mov	r6,dph
      001044 90r00r01         [24] 4115 	mov	dptr,#_SPI_command
      001047 EB               [12] 4116 	mov	a,r3
      001048 F0               [24] 4117 	movx	@dptr,a
                                   4118 ;	nrf24l01.c:679: value++;
                                   4119 ;	nrf24l01.c:680: SPI_send_command(SPI_command);
      001049 E0               [24] 4120 	movx	a,@dptr
      00104A F5 82            [12] 4121 	mov	dpl,a
      00104C C0 07            [24] 4122 	push	ar7
      00104E C0 06            [24] 4123 	push	ar6
      001050 C0 05            [24] 4124 	push	ar5
      001052 C0 04            [24] 4125 	push	ar4
      001054 12r00r90         [24] 4126 	lcall	_SPI_send_command
      001057 D0 04            [24] 4127 	pop	ar4
      001059 D0 05            [24] 4128 	pop	ar5
      00105B D0 06            [24] 4129 	pop	ar6
      00105D D0 07            [24] 4130 	pop	ar7
                                   4131 ;	nrf24l01.c:676: for (; data_length ; data_length--)
      00105F 1C               [12] 4132 	dec	r4
      001060 80 D0            [24] 4133 	sjmp	00105$
      001062                       4134 00101$:
                                   4135 ;	nrf24l01.c:682: if (spi_state == CLOSE)
      001062 90r00r43         [24] 4136 	mov	dptr,#_nrf24_write_PARM_4
      001065 E0               [24] 4137 	movx	a,@dptr
      001066 70 06            [24] 4138 	jnz	00107$
                                   4139 ;	nrf24l01.c:683: nrf24_SPI(SPI_OFF);
      001068 75 82 01         [24] 4140 	mov	dpl,#0x01
                                   4141 ;	nrf24l01.c:684: }
      00106B 02r00r7C         [24] 4142 	ljmp	_nrf24_SPI
      00106E                       4143 00107$:
      00106E 22               [24] 4144 	ret
                                   4145 	.area CSEG    (CODE)
                                   4146 	.area CONST   (CODE)
      000000                       4147 _bitReverseTable256:
      000000 00                    4148 	.db #0x00	; 0
      000001 80                    4149 	.db #0x80	; 128
      000002 40                    4150 	.db #0x40	; 64
      000003 C0                    4151 	.db #0xc0	; 192
      000004 20                    4152 	.db #0x20	; 32
      000005 A0                    4153 	.db #0xa0	; 160
      000006 60                    4154 	.db #0x60	; 96
      000007 E0                    4155 	.db #0xe0	; 224
      000008 10                    4156 	.db #0x10	; 16
      000009 90                    4157 	.db #0x90	; 144
      00000A 50                    4158 	.db #0x50	; 80	'P'
      00000B D0                    4159 	.db #0xd0	; 208
      00000C 30                    4160 	.db #0x30	; 48	'0'
      00000D B0                    4161 	.db #0xb0	; 176
      00000E 70                    4162 	.db #0x70	; 112	'p'
      00000F F0                    4163 	.db #0xf0	; 240
      000010 08                    4164 	.db #0x08	; 8
      000011 88                    4165 	.db #0x88	; 136
      000012 48                    4166 	.db #0x48	; 72	'H'
      000013 C8                    4167 	.db #0xc8	; 200
      000014 28                    4168 	.db #0x28	; 40
      000015 A8                    4169 	.db #0xa8	; 168
      000016 68                    4170 	.db #0x68	; 104	'h'
      000017 E8                    4171 	.db #0xe8	; 232
      000018 18                    4172 	.db #0x18	; 24
      000019 98                    4173 	.db #0x98	; 152
      00001A 58                    4174 	.db #0x58	; 88	'X'
      00001B D8                    4175 	.db #0xd8	; 216
      00001C 38                    4176 	.db #0x38	; 56	'8'
      00001D B8                    4177 	.db #0xb8	; 184
      00001E 78                    4178 	.db #0x78	; 120	'x'
      00001F F8                    4179 	.db #0xf8	; 248
      000020 04                    4180 	.db #0x04	; 4
      000021 84                    4181 	.db #0x84	; 132
      000022 44                    4182 	.db #0x44	; 68	'D'
      000023 C4                    4183 	.db #0xc4	; 196
      000024 24                    4184 	.db #0x24	; 36
      000025 A4                    4185 	.db #0xa4	; 164
      000026 64                    4186 	.db #0x64	; 100	'd'
      000027 E4                    4187 	.db #0xe4	; 228
      000028 14                    4188 	.db #0x14	; 20
      000029 94                    4189 	.db #0x94	; 148
      00002A 54                    4190 	.db #0x54	; 84	'T'
      00002B D4                    4191 	.db #0xd4	; 212
      00002C 34                    4192 	.db #0x34	; 52	'4'
      00002D B4                    4193 	.db #0xb4	; 180
      00002E 74                    4194 	.db #0x74	; 116	't'
      00002F F4                    4195 	.db #0xf4	; 244
      000030 0C                    4196 	.db #0x0c	; 12
      000031 8C                    4197 	.db #0x8c	; 140
      000032 4C                    4198 	.db #0x4c	; 76	'L'
      000033 CC                    4199 	.db #0xcc	; 204
      000034 2C                    4200 	.db #0x2c	; 44
      000035 AC                    4201 	.db #0xac	; 172
      000036 6C                    4202 	.db #0x6c	; 108	'l'
      000037 EC                    4203 	.db #0xec	; 236
      000038 1C                    4204 	.db #0x1c	; 28
      000039 9C                    4205 	.db #0x9c	; 156
      00003A 5C                    4206 	.db #0x5c	; 92
      00003B DC                    4207 	.db #0xdc	; 220
      00003C 3C                    4208 	.db #0x3c	; 60
      00003D BC                    4209 	.db #0xbc	; 188
      00003E 7C                    4210 	.db #0x7c	; 124
      00003F FC                    4211 	.db #0xfc	; 252
      000040 02                    4212 	.db #0x02	; 2
      000041 82                    4213 	.db #0x82	; 130
      000042 42                    4214 	.db #0x42	; 66	'B'
      000043 C2                    4215 	.db #0xc2	; 194
      000044 22                    4216 	.db #0x22	; 34
      000045 A2                    4217 	.db #0xa2	; 162
      000046 62                    4218 	.db #0x62	; 98	'b'
      000047 E2                    4219 	.db #0xe2	; 226
      000048 12                    4220 	.db #0x12	; 18
      000049 92                    4221 	.db #0x92	; 146
      00004A 52                    4222 	.db #0x52	; 82	'R'
      00004B D2                    4223 	.db #0xd2	; 210
      00004C 32                    4224 	.db #0x32	; 50	'2'
      00004D B2                    4225 	.db #0xb2	; 178
      00004E 72                    4226 	.db #0x72	; 114	'r'
      00004F F2                    4227 	.db #0xf2	; 242
      000050 0A                    4228 	.db #0x0a	; 10
      000051 8A                    4229 	.db #0x8a	; 138
      000052 4A                    4230 	.db #0x4a	; 74	'J'
      000053 CA                    4231 	.db #0xca	; 202
      000054 2A                    4232 	.db #0x2a	; 42
      000055 AA                    4233 	.db #0xaa	; 170
      000056 6A                    4234 	.db #0x6a	; 106	'j'
      000057 EA                    4235 	.db #0xea	; 234
      000058 1A                    4236 	.db #0x1a	; 26
      000059 9A                    4237 	.db #0x9a	; 154
      00005A 5A                    4238 	.db #0x5a	; 90	'Z'
      00005B DA                    4239 	.db #0xda	; 218
      00005C 3A                    4240 	.db #0x3a	; 58
      00005D BA                    4241 	.db #0xba	; 186
      00005E 7A                    4242 	.db #0x7a	; 122	'z'
      00005F FA                    4243 	.db #0xfa	; 250
      000060 06                    4244 	.db #0x06	; 6
      000061 86                    4245 	.db #0x86	; 134
      000062 46                    4246 	.db #0x46	; 70	'F'
      000063 C6                    4247 	.db #0xc6	; 198
      000064 26                    4248 	.db #0x26	; 38
      000065 A6                    4249 	.db #0xa6	; 166
      000066 66                    4250 	.db #0x66	; 102	'f'
      000067 E6                    4251 	.db #0xe6	; 230
      000068 16                    4252 	.db #0x16	; 22
      000069 96                    4253 	.db #0x96	; 150
      00006A 56                    4254 	.db #0x56	; 86	'V'
      00006B D6                    4255 	.db #0xd6	; 214
      00006C 36                    4256 	.db #0x36	; 54	'6'
      00006D B6                    4257 	.db #0xb6	; 182
      00006E 76                    4258 	.db #0x76	; 118	'v'
      00006F F6                    4259 	.db #0xf6	; 246
      000070 0E                    4260 	.db #0x0e	; 14
      000071 8E                    4261 	.db #0x8e	; 142
      000072 4E                    4262 	.db #0x4e	; 78	'N'
      000073 CE                    4263 	.db #0xce	; 206
      000074 2E                    4264 	.db #0x2e	; 46
      000075 AE                    4265 	.db #0xae	; 174
      000076 6E                    4266 	.db #0x6e	; 110	'n'
      000077 EE                    4267 	.db #0xee	; 238
      000078 1E                    4268 	.db #0x1e	; 30
      000079 9E                    4269 	.db #0x9e	; 158
      00007A 5E                    4270 	.db #0x5e	; 94
      00007B DE                    4271 	.db #0xde	; 222
      00007C 3E                    4272 	.db #0x3e	; 62
      00007D BE                    4273 	.db #0xbe	; 190
      00007E 7E                    4274 	.db #0x7e	; 126
      00007F FE                    4275 	.db #0xfe	; 254
      000080 01                    4276 	.db #0x01	; 1
      000081 81                    4277 	.db #0x81	; 129
      000082 41                    4278 	.db #0x41	; 65	'A'
      000083 C1                    4279 	.db #0xc1	; 193
      000084 21                    4280 	.db #0x21	; 33
      000085 A1                    4281 	.db #0xa1	; 161
      000086 61                    4282 	.db #0x61	; 97	'a'
      000087 E1                    4283 	.db #0xe1	; 225
      000088 11                    4284 	.db #0x11	; 17
      000089 91                    4285 	.db #0x91	; 145
      00008A 51                    4286 	.db #0x51	; 81	'Q'
      00008B D1                    4287 	.db #0xd1	; 209
      00008C 31                    4288 	.db #0x31	; 49	'1'
      00008D B1                    4289 	.db #0xb1	; 177
      00008E 71                    4290 	.db #0x71	; 113	'q'
      00008F F1                    4291 	.db #0xf1	; 241
      000090 09                    4292 	.db #0x09	; 9
      000091 89                    4293 	.db #0x89	; 137
      000092 49                    4294 	.db #0x49	; 73	'I'
      000093 C9                    4295 	.db #0xc9	; 201
      000094 29                    4296 	.db #0x29	; 41
      000095 A9                    4297 	.db #0xa9	; 169
      000096 69                    4298 	.db #0x69	; 105	'i'
      000097 E9                    4299 	.db #0xe9	; 233
      000098 19                    4300 	.db #0x19	; 25
      000099 99                    4301 	.db #0x99	; 153
      00009A 59                    4302 	.db #0x59	; 89	'Y'
      00009B D9                    4303 	.db #0xd9	; 217
      00009C 39                    4304 	.db #0x39	; 57	'9'
      00009D B9                    4305 	.db #0xb9	; 185
      00009E 79                    4306 	.db #0x79	; 121	'y'
      00009F F9                    4307 	.db #0xf9	; 249
      0000A0 05                    4308 	.db #0x05	; 5
      0000A1 85                    4309 	.db #0x85	; 133
      0000A2 45                    4310 	.db #0x45	; 69	'E'
      0000A3 C5                    4311 	.db #0xc5	; 197
      0000A4 25                    4312 	.db #0x25	; 37
      0000A5 A5                    4313 	.db #0xa5	; 165
      0000A6 65                    4314 	.db #0x65	; 101	'e'
      0000A7 E5                    4315 	.db #0xe5	; 229
      0000A8 15                    4316 	.db #0x15	; 21
      0000A9 95                    4317 	.db #0x95	; 149
      0000AA 55                    4318 	.db #0x55	; 85	'U'
      0000AB D5                    4319 	.db #0xd5	; 213
      0000AC 35                    4320 	.db #0x35	; 53	'5'
      0000AD B5                    4321 	.db #0xb5	; 181
      0000AE 75                    4322 	.db #0x75	; 117	'u'
      0000AF F5                    4323 	.db #0xf5	; 245
      0000B0 0D                    4324 	.db #0x0d	; 13
      0000B1 8D                    4325 	.db #0x8d	; 141
      0000B2 4D                    4326 	.db #0x4d	; 77	'M'
      0000B3 CD                    4327 	.db #0xcd	; 205
      0000B4 2D                    4328 	.db #0x2d	; 45
      0000B5 AD                    4329 	.db #0xad	; 173
      0000B6 6D                    4330 	.db #0x6d	; 109	'm'
      0000B7 ED                    4331 	.db #0xed	; 237
      0000B8 1D                    4332 	.db #0x1d	; 29
      0000B9 9D                    4333 	.db #0x9d	; 157
      0000BA 5D                    4334 	.db #0x5d	; 93
      0000BB DD                    4335 	.db #0xdd	; 221
      0000BC 3D                    4336 	.db #0x3d	; 61
      0000BD BD                    4337 	.db #0xbd	; 189
      0000BE 7D                    4338 	.db #0x7d	; 125
      0000BF FD                    4339 	.db #0xfd	; 253
      0000C0 03                    4340 	.db #0x03	; 3
      0000C1 83                    4341 	.db #0x83	; 131
      0000C2 43                    4342 	.db #0x43	; 67	'C'
      0000C3 C3                    4343 	.db #0xc3	; 195
      0000C4 23                    4344 	.db #0x23	; 35
      0000C5 A3                    4345 	.db #0xa3	; 163
      0000C6 63                    4346 	.db #0x63	; 99	'c'
      0000C7 E3                    4347 	.db #0xe3	; 227
      0000C8 13                    4348 	.db #0x13	; 19
      0000C9 93                    4349 	.db #0x93	; 147
      0000CA 53                    4350 	.db #0x53	; 83	'S'
      0000CB D3                    4351 	.db #0xd3	; 211
      0000CC 33                    4352 	.db #0x33	; 51	'3'
      0000CD B3                    4353 	.db #0xb3	; 179
      0000CE 73                    4354 	.db #0x73	; 115	's'
      0000CF F3                    4355 	.db #0xf3	; 243
      0000D0 0B                    4356 	.db #0x0b	; 11
      0000D1 8B                    4357 	.db #0x8b	; 139
      0000D2 4B                    4358 	.db #0x4b	; 75	'K'
      0000D3 CB                    4359 	.db #0xcb	; 203
      0000D4 2B                    4360 	.db #0x2b	; 43
      0000D5 AB                    4361 	.db #0xab	; 171
      0000D6 6B                    4362 	.db #0x6b	; 107	'k'
      0000D7 EB                    4363 	.db #0xeb	; 235
      0000D8 1B                    4364 	.db #0x1b	; 27
      0000D9 9B                    4365 	.db #0x9b	; 155
      0000DA 5B                    4366 	.db #0x5b	; 91
      0000DB DB                    4367 	.db #0xdb	; 219
      0000DC 3B                    4368 	.db #0x3b	; 59
      0000DD BB                    4369 	.db #0xbb	; 187
      0000DE 7B                    4370 	.db #0x7b	; 123
      0000DF FB                    4371 	.db #0xfb	; 251
      0000E0 07                    4372 	.db #0x07	; 7
      0000E1 87                    4373 	.db #0x87	; 135
      0000E2 47                    4374 	.db #0x47	; 71	'G'
      0000E3 C7                    4375 	.db #0xc7	; 199
      0000E4 27                    4376 	.db #0x27	; 39
      0000E5 A7                    4377 	.db #0xa7	; 167
      0000E6 67                    4378 	.db #0x67	; 103	'g'
      0000E7 E7                    4379 	.db #0xe7	; 231
      0000E8 17                    4380 	.db #0x17	; 23
      0000E9 97                    4381 	.db #0x97	; 151
      0000EA 57                    4382 	.db #0x57	; 87	'W'
      0000EB D7                    4383 	.db #0xd7	; 215
      0000EC 37                    4384 	.db #0x37	; 55	'7'
      0000ED B7                    4385 	.db #0xb7	; 183
      0000EE 77                    4386 	.db #0x77	; 119	'w'
      0000EF F7                    4387 	.db #0xf7	; 247
      0000F0 0F                    4388 	.db #0x0f	; 15
      0000F1 8F                    4389 	.db #0x8f	; 143
      0000F2 4F                    4390 	.db #0x4f	; 79	'O'
      0000F3 CF                    4391 	.db #0xcf	; 207
      0000F4 2F                    4392 	.db #0x2f	; 47
      0000F5 AF                    4393 	.db #0xaf	; 175
      0000F6 6F                    4394 	.db #0x6f	; 111	'o'
      0000F7 EF                    4395 	.db #0xef	; 239
      0000F8 1F                    4396 	.db #0x1f	; 31
      0000F9 9F                    4397 	.db #0x9f	; 159
      0000FA 5F                    4398 	.db #0x5f	; 95
      0000FB DF                    4399 	.db #0xdf	; 223
      0000FC 3F                    4400 	.db #0x3f	; 63
      0000FD BF                    4401 	.db #0xbf	; 191
      0000FE 7F                    4402 	.db #0x7f	; 127
      0000FF FF                    4403 	.db #0xff	; 255
                                   4404 	.area CONST   (CODE)
      000100                       4405 ___str_0:
      000100 0D                    4406 	.db 0x0d
      000101 52 65 61 64 20 66 72  4407 	.ascii "Read from %d: %d"
             6F 6D 20 25 64 3A 20
             25 64
      000111 0A                    4408 	.db 0x0a
      000112 00                    4409 	.db 0x00
                                   4410 	.area CSEG    (CODE)
                                   4411 	.area CONST   (CODE)
      000113                       4412 ___str_1:
      000113 53 65 6E 64 69 6E 67  4413 	.ascii "Sending to %d: %d"
             20 74 6F 20 25 64 3A
             20 25 64
      000124 0A                    4414 	.db 0x0a
      000125 00                    4415 	.db 0x00
                                   4416 	.area CSEG    (CODE)
                                   4417 	.area CONST   (CODE)
      000126                       4418 ___str_2:
      000126 0D                    4419 	.db 0x0d
      000127 52 65 61 64 20 76 61  4420 	.ascii "Read value matches the newly written value :D"
             6C 75 65 20 6D 61 74
             63 68 65 73 20 74 68
             65 20 6E 65 77 6C 79
             20 77 72 69 74 74 65
             6E 20 76 61 6C 75 65
             20 3A 44
      000154 0A                    4421 	.db 0x0a
      000155 00                    4422 	.db 0x00
                                   4423 	.area CSEG    (CODE)
                                   4424 	.area CONST   (CODE)
      000156                       4425 ___str_3:
      000156 0D                    4426 	.db 0x0d
      000157 52 65 61 64 20 76 61  4427 	.ascii "Read value doesn't match the newly written value ;("
             6C 75 65 20 64 6F 65
             73 6E 27 74 20 6D 61
             74 63 68 20 74 68 65
             20 6E 65 77 6C 79 20
             77 72 69 74 74 65 6E
             20 76 61 6C 75 65 20
             3B 28
      00018A 0A                    4428 	.db 0x0a
      00018B 00                    4429 	.db 0x00
                                   4430 	.area CSEG    (CODE)
                                   4431 	.area CONST   (CODE)
      00018C                       4432 ___str_4:
      00018C 0D                    4433 	.db 0x0d
      00018D 52 65 61 64 3A 20 25  4434 	.ascii "Read: %d"
             64
      000195 0A                    4435 	.db 0x0a
      000196 00                    4436 	.db 0x00
                                   4437 	.area CSEG    (CODE)
                                   4438 	.area CONST   (CODE)
      000197                       4439 ___str_5:
      000197 0D                    4440 	.db 0x0d
      000198 48 61 72 64 77 61 72  4441 	.ascii "Hardware Detected!"
             65 20 44 65 74 65 63
             74 65 64 21
      0001AA 0A                    4442 	.db 0x0a
      0001AB 00                    4443 	.db 0x00
                                   4444 	.area CSEG    (CODE)
                                   4445 	.area CONST   (CODE)
      0001AC                       4446 ___str_6:
      0001AC 0D                    4447 	.db 0x0d
      0001AD 52 65 67 69 73 74 65  4448 	.ascii "Register %d: %d"
             72 20 25 64 3A 20 25
             64
      0001BC 0A                    4449 	.db 0x0a
      0001BD 00                    4450 	.db 0x00
                                   4451 	.area CSEG    (CODE)
                                   4452 	.area CONST   (CODE)
      0001BE                       4453 ___str_7:
      0001BE 0A                    4454 	.db 0x0a
      0001BF 0A                    4455 	.db 0x0a
      0001C0 00                    4456 	.db 0x00
                                   4457 	.area CSEG    (CODE)
                                   4458 	.area XINIT   (CODE)
      000000                       4459 __xinit__dataReady:
      000000 00                    4460 	.db #0x00	;  0
      000001                       4461 __xinit__CSN_pin:
      000001 02                    4462 	.db #0x02	; 2
      000002 06                    4463 	.db #0x06	; 6
      000003 01                    4464 	.db #0x01	; 1
      000004 00                    4465 	.db #0x00	; 0
      000005 00                    4466 	.db #0x00	; 0
      000006 00                    4467 	.db #0x00	; 0
      000007 03                    4468 	.db #0x03	; 3
      000008 01                    4469 	.db #0x01	; 1
      000009 00                    4470 	.db #0x00	; 0
      00000A 00                    4471 	.db #0x00	; 0
      00000B 00                    4472 	.db #0x00	; 0
      00000C 00                    4473 	.db #0x00	; 0
      00000D 00                    4474 	.db #0x00	; 0
      00000E                       4475 __xinit__CE_pin:
      00000E 02                    4476 	.db #0x02	; 2
      00000F 07                    4477 	.db #0x07	; 7
      000010 01                    4478 	.db #0x01	; 1
      000011 00                    4479 	.db #0x00	; 0
      000012 00                    4480 	.db #0x00	; 0
      000013 00                    4481 	.db #0x00	; 0
      000014 03                    4482 	.db #0x03	; 3
      000015 01                    4483 	.db #0x01	; 1
      000016 00                    4484 	.db #0x00	; 0
      000017 00                    4485 	.db #0x00	; 0
      000018 00                    4486 	.db #0x00	; 0
      000019 00                    4487 	.db #0x00	; 0
      00001A 00                    4488 	.db #0x00	; 0
      00001B                       4489 __xinit__reset_flag:
      00001B 00                    4490 	.db #0x00	; 0
      00001C                       4491 __xinit__current_mode:
      00001C 05                    4492 	.db #0x05	; 5
      00001D                       4493 __xinit__current_acknowledgement_state:
      00001D 01                    4494 	.db #0x01	; 1
      00001E                       4495 __xinit__dynamic_payload:
      00001E 00                    4496 	.db #0x00	; 0
      00001F                       4497 __xinit__datapipe_address:
      00001F D2                    4498 	.db #0xd2	; 210
      000020 F0                    4499 	.db #0xf0	; 240
      000021 F0                    4500 	.db #0xf0	; 240
      000022 F0                    4501 	.db #0xf0	; 240
      000023 F0                    4502 	.db #0xf0	; 240
      000024 E1                    4503 	.db #0xe1	; 225
      000025 F0                    4504 	.db #0xf0	; 240
      000026 F0                    4505 	.db #0xf0	; 240
      000027 F0                    4506 	.db #0xf0	; 240
      000028 F0                    4507 	.db #0xf0	; 240
      000029 F0                    4508 	.db #0xf0	; 240
      00002A F0                    4509 	.db #0xf0	; 240
      00002B F0                    4510 	.db #0xf0	; 240
      00002C F0                    4511 	.db #0xf0	; 240
      00002D F0                    4512 	.db #0xf0	; 240
      00002E F0                    4513 	.db #0xf0	; 240
      00002F F0                    4514 	.db #0xf0	; 240
      000030 F0                    4515 	.db #0xf0	; 240
      000031 F0                    4516 	.db #0xf0	; 240
      000032 F0                    4517 	.db #0xf0	; 240
      000033 F0                    4518 	.db #0xf0	; 240
      000034 F0                    4519 	.db #0xf0	; 240
      000035 F0                    4520 	.db #0xf0	; 240
      000036 F0                    4521 	.db #0xf0	; 240
      000037 F0                    4522 	.db #0xf0	; 240
      000038 F0                    4523 	.db #0xf0	; 240
      000039 F0                    4524 	.db #0xf0	; 240
      00003A F0                    4525 	.db #0xf0	; 240
      00003B F0                    4526 	.db #0xf0	; 240
      00003C F0                    4527 	.db #0xf0	; 240
                                   4528 	.area CABS    (ABS,CODE)
